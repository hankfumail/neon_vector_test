

C:\xilinx\projects\zynq146\zc706_predefined_0902\neon_vector_498_test\Debug\neon_vector_498_test.elf:     file format elf32-littlearm
C:\xilinx\projects\zynq146\zc706_predefined_0902\neon_vector_498_test\Debug\neon_vector_498_test.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00100000

Program Header:
0x70000001 off    0x00030000 vaddr 0x00128000 paddr 0x00128000 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**15
         filesz 0x00000094 memsz 0x00009018 flags rw-
    LOAD off    0x00008000 vaddr 0x00100000 paddr 0x00100000 align 2**15
         filesz 0x00028014 memsz 0x0002f4d0 flags rwx
private flags = 5000002: [Version5 EABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .ocm_low      00008018  00001000  00001000  00001000  2**3
                  ALLOC
  1 .text         0000fbd8  00100000  00100000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000018  0010fbd8  0010fbd8  00017bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000018  0010fbf0  0010fbf0  00017bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000055c  0010fc08  0010fc08  00017c08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00010384  00110168  00110168  00018168  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .eh_frame     00000004  001204ec  001204ec  000284ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .mmu_tbl      00004000  00124000  00124000  0002c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .ARM.exidx    00000008  00128000  00128000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .init_array   00000008  00128008  00128008  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000004  00128010  00128010  00030010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ARM.attributes 00000037  00128014  00128014  00030014  2**0
                  CONTENTS, READONLY
 12 .bss          000000b8  00128018  00128018  00030014  2**3
                  ALLOC
 13 .heap         00002000  001280d0  001280d0  00030014  2**0
                  ALLOC
 14 .stack        00005400  0012a0d0  0012a0d0  00030014  2**0
                  ALLOC
 15 .debug_info   00009891  00000000  00000000  0003004b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00002357  00000000  00000000  000398dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00000470  00000000  00000000  0003bc38  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0000323f  00000000  00000000  0003c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00004a3c  00000000  00000000  0003f2e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0000bb32  00000000  00000000  00043d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      00000031  00000000  00000000  0004f855  2**0
                  CONTENTS, READONLY
 22 .debug_loc    00009f45  00000000  00000000  0004f886  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001368  00000000  00000000  000597cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_frame  00001c10  00000000  00000000  0005ab34  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00001000 l    d  .ocm_low	00000000 .ocm_low
00100000 l    d  .text	00000000 .text
0010fbd8 l    d  .init	00000000 .init
0010fbf0 l    d  .fini	00000000 .fini
0010fc08 l    d  .rodata	00000000 .rodata
00110168 l    d  .data	00000000 .data
001204ec l    d  .eh_frame	00000000 .eh_frame
00124000 l    d  .mmu_tbl	00000000 .mmu_tbl
00128000 l    d  .ARM.exidx	00000000 .ARM.exidx
00128008 l    d  .init_array	00000000 .init_array
00128010 l    d  .fini_array	00000000 .fini_array
00128014 l    d  .ARM.attributes	00000000 .ARM.attributes
00128018 l    d  .bss	00000000 .bss
001280d0 l    d  .heap	00000000 .heap
0012a0d0 l    d  .stack	00000000 .stack
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 asm_vectors.o
00100040 l       .text	00000000 Undefined
00100050 l       .text	00000000 SVCHandler
00100088 l       .text	00000000 PrefetchAbortHandler
00100074 l       .text	00000000 DataAbortHandler
00100030 l       .text	00000000 FIQHandler
00100034 l       .text	00000000 FIQLoop
00000000 l    df *ABS*	00000000 boot.o
f8f02000 l       *ABS*	00000000 PSS_L2CC_BASE_ADDR
f8000000 l       *ABS*	00000000 PSS_SLCR_BASE_ADDR
0fffff00 l       *ABS*	00000000 RESERVED
fe00000f l       *ABS*	00000000 LRemap
f8f0277c l       *ABS*	00000000 L2CCWay
f8f02730 l       *ABS*	00000000 L2CCSync
f8f02100 l       *ABS*	00000000 L2CCCrtl
f8f02104 l       *ABS*	00000000 L2CCAuxCrtl
f8f02108 l       *ABS*	00000000 L2CCTAGLatReg
f8f0210c l       *ABS*	00000000 L2CCDataLatReg
f8f02220 l       *ABS*	00000000 L2CCIntClear
f8f0221c l       *ABS*	00000000 L2CCIntRaw
f8000004 l       *ABS*	00000000 SLCRlockReg
f8000008 l       *ABS*	00000000 SLCRUnlockReg
f8000a1c l       *ABS*	00000000 SLCRL2cRamReg
00001005 l       *ABS*	00000000 CRValMmuCac
00002000 l       *ABS*	00000000 CRValHiVectorAddr
72360000 l       *ABS*	00000000 L2CCAuxControl
00000001 l       *ABS*	00000000 L2CCControl
00000111 l       *ABS*	00000000 L2CCTAGLatency
00000121 l       *ABS*	00000000 L2CCDataLatency
0000767b l       *ABS*	00000000 SLCRlockKey
0000df0d l       *ABS*	00000000 SLCRUnlockKey
00020202 l       *ABS*	00000000 SLCRL2cRamConfig
40000000 l       *ABS*	00000000 FPEXC_EN
001000b4 l       .text	00000000 OKToRun
001000ac l       .text	00000000 EndlessLoop0
001002cc l       .text	00000000 invalidate_dcache
00100174 l       .text	00000000 Sync
00100348 l       .text	00000000 finished
001002e0 l       .text	00000000 loop1
0010033c l       .text	00000000 skip
0010031c l       .text	00000000 loop2
00100320 l       .text	00000000 loop3
00000000 l    df *ABS*	00000000 c:/xilinx/14.6/ise_ds/edk/gnu/arm/nt/bin/../lib/gcc/arm-xilinx-eabi/4.7.2/crti.o
00000000 l    df *ABS*	00000000 crtstuff.c
001204ec l     O .eh_frame	00000000 __EH_FRAME_BEGIN__
001204e8 l     O .data	00000000 __JCR_LIST__
001003d8 l     F .text	00000000 deregister_tm_clones
00100410 l     F .text	00000000 register_tm_clones
00100450 l     F .text	00000000 __do_global_dtors_aux
00128018 l       .bss	00000000 completed.8484
00128010 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
00100494 l     F .text	00000000 frame_dummy
0012801c l       .bss	00000000 object.8489
0012800c l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 arm_cmplx_conj_test_data.c
00000000 l    df *ABS*	00000000 arm_cmplx_dot_prod_f32.c
00000000 l    df *ABS*	00000000 arm_cmplx_dot_prod_f32_test.c
00117d70 l     O .data	0000008c CONFIG
00128038 l     O .bss	00000004 testOutput_real
00128040 l     O .bss	00000004 testOutput_imag
00000000 l    df *ABS*	00000000 arm_cmplx_dot_prod_test_data.c
00000000 l    df *ABS*	00000000 arm_cmplx_mult_cmplx_f32.c
00000000 l    df *ABS*	00000000 arm_cmplx_mult_cmplx_f32_dot.c
00000000 l    df *ABS*	00000000 arm_cmplx_mult_cmplx_f32_dot2.c
00000000 l    df *ABS*	00000000 arm_cmplx_vector_dot_prod.c
00000000 l    df *ABS*	00000000 arm_cmplx_vector_dot_prod_data.c
00000000 l    df *ABS*	00000000 arm_vector_test.c
00000000 l    df *ABS*	00000000 func_measure_time.c
00000000 l    df *ABS*	00000000 math_helper.c
00000000 l    df *ABS*	00000000 platform.c
00000000 l    df *ABS*	00000000 translation_table.o
00000000 l       *ABS*	00000000 SECT
00000000 l    df *ABS*	00000000 usleep.c
00000000 l    df *ABS*	00000000 vectors.c
00000000 l    df *ABS*	00000000 xil-crt0.S
00000000 l    df *ABS*	00000000 xil_cache.c
00000000 l    df *ABS*	00000000 xil_exception.c
00105334 l     F .text	00000004 Xil_ExceptionNullHandler
00000000 l    df *ABS*	00000000 xil_io.c
00000000 l    df *ABS*	00000000 xil_printf.c
00000000 l    df *ABS*	00000000 xtime_l.c
00000000 l    df *ABS*	00000000 cpu_init.o
00000000 l    df *ABS*	00000000 outbyte.c
00000000 l    df *ABS*	00000000 xuartps_hw.c
00000000 l    df *ABS*	00000000 _udivsi3.o
00105c4c l       .text	00000000 .udivsi3_skip_div0_test
00000000 l       *ABS*	00000000 shift
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 impure.c
0011fc30 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0010fd10 l     O .rodata	00000010 blanks.7592
0010fd20 l     O .rodata	00000010 zeroes.7593
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0010fbbc l     F .text	0000001c register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
00108f18 l     F .text	000001d0 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0010a590 l     F .text	00000008 __fp_lock
0010a598 l     F .text	00000008 __fp_unlock
0010a5ac l     F .text	00000078 std.isra.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00120058 l     O .data	00000020 lc_ctype_charset
0012007c l     O .data	00000020 lc_message_charset
0012009c l     O .data	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
0010fd30 l     O .rodata	0000000c p05.6099
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
0010cec0 l     F .text	0000019c strcmp_unaligned
00000000 l    df *ABS*	00000000 vfprintf.c
0010fe58 l     O .rodata	00000010 blanks.7535
0010fe68 l     O .rodata	00000010 zeroes.7536
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 _sbrk.c
00128088 l     O .bss	00000004 heap.4133
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 read.c
00000000 l    df *ABS*	00000000 write.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 inbyte.c
00000000 l    df *ABS*	00000000 crtstuff.c
001204ec l     O .eh_frame	00000000 __FRAME_END__
001204e8 l     O .data	00000000 __JCR_END__
00000000 l    df *ABS*	00000000 c:/xilinx/14.6/ise_ds/edk/gnu/arm/nt/bin/../lib/gcc/arm-xilinx-eabi/4.7.2/crtn.o
00000000 l    df *ABS*	00000000 
00117770 g     O .data	00000200 testRefOutput2_f32
00103a8c g     F .text	0000002c arm_calc_guard_bits
0010cb78 g     F .text	0000003c _mprec_log10
0012e0d0 g       .stack	00000000 _supervisor_stack_end
0010cc28 g     F .text	00000088 __any_on
0010ecc4 g     F .text	00000038 _isatty_r
0010fe08 g     O .rodata	00000028 __mprec_tinytens
00104db8 g     F .text	00000038 Xil_L1ICacheInvalidateRange
00119f10 g     O .data	00000800 cmplxDotProd_srcB_buf4_q15
00001000 g     O .ocm_low	00004000 gf_array_src_a
0010f408 g     F .text	0000002c cleanup_glue
00105ed4 g     F .text	0000003c __gnu_uldivmod_helper
00117f10 g     O .data	00001000 cmplxDotProd_srcB_buf5_q15
001054cc g     F .text	00000088 outs
0010ecfc g     F .text	00000040 _lseek_r
00100000 g       .text	00000000 _vector_table
001204f0 g       .eh_frame	00000000 __eh_framehdr_start
00105104 g     F .text	00000040 Xil_L2CacheDisable
001204ec g       .data	00000000 ___CTORS_LIST___
001053bc g     F .text	00000008 Xil_In32
00104ab0 g     F .text	00000080 Xil_ICacheInvalidateRange
00105f10 g     F .text	000004bc __divdi3
00104cd0 g     F .text	00000018 Xil_L1DCacheDisable
00000400 g       *ABS*	00000000 _ABORT_STACK_SIZE
00106938 g     F .text	00000040 printf
0010f6f0 g     F .text	0000008c _wcrtomb_r
0010cde8 g     F .text	0000002c __sseek
0010a67c g     F .text	00000070 __sinit
0010f598 g     F .text	0000013c __swbuf_r
00116f70 g     O .data	00000400 testRefOutput3_f32
00100e6c g     F .text	00000428 arm_cmplx_mult_cmplx_f32
0010ac84 g     F .text	00000070 _setlocale_r
0010a624 g     F .text	00000048 __sfmoreglue
00104f6c g     F .text	00000050 Xil_L2CacheInvalidateLine
0010c010 g     F .text	00000004 __malloc_unlock
0012808c g     O .bss	00000004 snr_imag
00104838 g     F .text	00000004 enable_caches
0010ed3c g     F .text	00000134 memmove
0010a66c g     F .text	00000010 _cleanup
0012e8d0 g       .stack	00000000 __supervisor_stack
0010c014 g     F .text	00000088 _Balloc
00128008 g       .ARM.exidx	00000000 __exidx_end
00105bf0 g     F .text	00000030 XUartPs_SendByte
0011e620 g     O .data	00000800 cmplxDotProd_srcA_buf4_f32
0012f0d0 g       .stack	00000000 _undef_stack_end
0010fa40 g     F .text	00000010 __errno
00105338 g     F .text	00000038 Xil_ExceptionInit
00128014 g       .ARM.attributes	00000000 __sbss_start
0010e7b0 g     F .text	0000003c _fstat_r
001280cc g     O .bss	00000004 errno
0010cd84 g     F .text	00000008 __seofread
0010491c g     F .text	0000001c PrefetchAbortInterrupt
00105c20 g     F .text	0000002c XUartPs_RecvByte
00104868 g     F .text	00000044 usleep
00105418 g     F .text	00000010 Xil_Out16BE
001204ec g       .data	00000000 __fixup_start
00105178 g     F .text	00000010 Xil_DCacheFlush
00104f5c g     F .text	00000010 Xil_DCacheInvalidate
0010009c g       .text	00000000 _boot
00102bd0 g     F .text	000006e8 arm_compare_fixed_q15
00115f70 g     O .data	00000800 testRefOutput4_f32
001204ec g       .data	00000000 __fixup_end
0010b708 g     F .text	000006d8 memcpy
0011be20 g     O .data	00001000 cmplxDotProd_srcB_buf5_f32
00000000         *UND*	00000000 SIM_MODE
001204ec g     O .data	00000000 .hidden __TMC_END__
0010a5a0 g     F .text	0000000c _cleanup_r
00124000 g       .mmu_tbl	00000000 __mmu_tbl_start
00128014 g       .ARM.attributes	00000000 __sdata_start
001204ec g       .data	00000000 __DTOR_END__
00105e5c g     F .text	00000000 __aeabi_uldivmod
00104f3c g     F .text	00000020 Xil_ICacheInvalidate
00104850 g     F .text	00000004 init_platform
0012ecd0 g       .stack	00000000 __abort_stack
00128014 g       .fini_array	00000000 __fini_array_end
00110164 g       .rodata	00000000 __rodata_end
0010ccb0 g     F .text	0000006c __fpclassifyd
0010cb00 g     F .text	00000078 __ratio
00105004 g     F .text	00000094 Xil_L2CacheInvalidateRange
00117970 g     O .data	00000200 testInput2_f32
00113e70 g     O .data	00000100 testInput1_q15
00000000  w      *UND*	00000000 malloc
00106904 g     F .text	00000034 _printf_r
00105c4c g     F .text	000001ec __udivsi3
0010f8d0 g     F .text	00000008 isatty
0010f8c0 g     F .text	00000010 _fstat
001204ec g       .data	00000000 __data1_start
0010fd40 g     O .rodata	000000c8 __mprec_tens
00100b6c g     F .text	00000300 test_arm_cmplx_dot_prod_f32
00110164 g       .data	00000000 __sbss2_end
0010acf4 g     F .text	0000000c __locale_charset
00128054 g     O .bss	00000004 __malloc_top_pad
0011fb20 g     O .data	00000100 cmplxDotProd_srcA_buf1_f32
00103ab8 g     F .text	000000c4 arm_apply_guard_bits
00110168 g     O .data	00000000 .hidden __dso_handle
00120078 g     O .data	00000004 __mb_cur_max
0012e0d0 g       .stack	00000000 __irq_stack
0010ad24 g     F .text	0000000c _localeconv_r
0010e7ec g     F .text	000004d8 __sfvwrite_r
0010c358 g     F .text	00000020 __i2b
001051ec g     F .text	00000048 Xil_DCacheFlushLine
0010484c g     F .text	00000004 init_uart
0010cd1c g     F .text	00000038 _sbrk_r
00105ba0 g       .text	00000000 __cpu_init
00101ea4 g     F .text	00000308 sp_cmplx_vector_init
00112170 g     O .data	00000800 testRefOutput4_q15
0010ee70 g     F .text	00000040 _read_r
00102438 g     F .text	000000dc arm_snr_f32
0010e50c g     F .text	000000fc _fclose_r
00104df0 g     F .text	000000d0 Xil_L2CacheEnable
0010a560 g     F .text	00000030 fflush
00128080 g     O .bss	00000004 __malloc_max_sbrked_mem
0011b710 g     O .data	00000200 cmplxDotProd_srcB_buf2_q15
001053f0 g     F .text	00000028 Xil_In32BE
00103898 g     F .text	000001f4 arm_provide_guard_bits_q7
00128090 g     O .bss	00000004 snr_real
00000800 g       *ABS*	00000000 _SUPERVISOR_STACK_SIZE
0012a0d0 g       .heap	00000000 _heap_end
0010c93c g     F .text	000000c4 __b2d
00128000 g       .ARM.exidx	00000000 __exidx_start
0010f8e0 g     F .text	00000018 lseek
00105554 g     F .text	000000f8 outnum
001017cc g     F .text	00000534 arm_cmplx_mult_cmplx_f32_dot2
0010f8d8 g     F .text	00000008 _isatty
001048c8 g     F .text	0000001c IRQInterrupt
00103c04 g     F .text	00000348 arm_float_to_q14
0010fd0c g     O .rodata	00000004 _global_impure_ptr
0011bb10 g     O .data	00000100 cmplxDotProd_srcB_buf1_q15
0010eeb0 g     F .text	00000558 _realloc_r
00106888 g     F .text	0000007c __libc_init_array
001280d0 g       .bss	00000000 __bss_end
00110164 g       .data	00000000 __rodata1_start
001063cc g     F .text	0000044c __udivdi3
0010e61c g     F .text	00000150 _fputwc_r
00117b70 g     O .data	00000100 testRefOutput1_f32
00129322 g       .ARM.attributes	00000000 __ARM.attributes_end
0010fe30 g     O .rodata	00000028 __mprec_bigtens
0010c188 g     F .text	000000ec __s2b
001048e4 g     F .text	0000001c SWInterrupt
0010f88c g     F .text	0000002c _sbrk
0010c738 g     F .text	00000064 __mcmp
00128014 g       .ARM.attributes	00000000 __tbss_start
0010a7ec g     F .text	00000018 __fp_lock_all
0010fbd8 g     F .init	00000000 _init
00113170 g     O .data	00000400 testRefOutput3_q15
00105098 g     F .text	0000006c Xil_L2CacheFlush
00104a30 g     F .text	00000080 Xil_DCacheFlushRange
00102514 g     F .text	000003b8 arm_provide_guard_bits_q15
00118f10 g     O .data	00001000 cmplxDotProd_srcA_buf5_q15
0010684c g     F .text	0000003c __libc_fini_array
00114f70 g     O .data	00001000 testInput5_f32
00117e00 g     O .data	00000078 cmplxDotProd_srcB_buf7_q15
0010f434 g     F .text	000000f8 _reclaim_reent
0012f0d0 g       .stack	00000000 __fiq_stack
00000000         *UND*	00000000 prof_pc
0010c274 g     F .text	00000050 __hi0bits
00105370 g     F .text	00000018 Xil_ExceptionRegisterHandler
00104864 g     F .text	00000004 nanosleep
00005000 g     O .ocm_low	00004000 gf_array_src_b
001280d0 g       .heap	00000000 _heap_start
0011b310 g     O .data	00000400 cmplxDotProd_srcA_buf3_q15
00128014 g       .ARM.attributes	00000000 __sbss_end
00104be8 g     F .text	00000018 Xil_L1DCacheInvalidateLine
00104ce8 g     F .text	00000018 Xil_L1DCacheFlushLine
00000400 g       *ABS*	00000000 _FIQ_STACK_SIZE
0010f9a0 g     F .text	00000050 write
0010009c g       .text	00000000 _prestart
00103b7c g     F .text	00000088 arm_calc_2pow
001056c0 g     F .text	00000440 xil_printf
0010c544 g     F .text	000000ec __pow5mult
00128050 g     O .bss	00000004 __nlocale_changed
0012f4d0 g       .stack	00000000 __undef_stack
0010f52c g     F .text	0000006c _wrapup_reent
00000000  w      *UND*	00000000 __deregister_frame_info
001004ec g     F .text	00000340 arm_cmplx_dot_prod_f32
00105484 g     F .text	00000048 padding
00116770 g     O .data	00000800 testInput4_f32
001053d4 g     F .text	00000008 Xil_Out32
00113570 g     O .data	00000400 testInput3_q15
0011bd88 g     O .data	00000078 cmplxDotProd_srcA_buf7_f32
0011af10 g     O .data	00000400 cmplxDotProd_srcB_buf3_q15
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
001204ec g       .data	00000000 __CTOR_LIST__
00124000 g       .mmu_tbl	00000000 MMUTable
00110164 g       .data	00000000 __sbss2_start
0011f220 g     O .data	00000400 cmplxDotProd_srcA_buf3_f32
00104da0 g     F .text	00000018 Xil_L1ICacheInvalidateLine
0010a7dc g     F .text	00000004 __sfp_lock_acquire
0010b5ec g     F .text	0000011c memchr
0010a918 g     F .text	00000268 _free_r
0010ad00 g     F .text	00000010 __locale_mb_cur_max
00104d50 g     F .text	0000001c Xil_L1ICacheEnable
00108d98 g     F .text	0000016c __call_exitprocs
0012804c g     O .bss	00000004 __mlocale_changed
001204dc g     O .data	00000004 __malloc_sbrk_base
001049b0 g     F .text	00000080 Xil_DCacheInvalidateRange
0010494c g       .text	00000064 _start
0011fa20 g     O .data	00000100 cmplxDotProd_srcB_buf1_f32
00106994 g     F .text	00000058 rand
0010f8f8 g     F .text	00000018 _lseek
0010fc08 g       .rodata	00000000 __rodata_start
00104d6c g     F .text	0000001c Xil_L1ICacheDisable
0010c630 g     F .text	00000108 __lshift
0010f910 g     F .text	00000048 read
00128014 g       *ABS*	00000000 _SDA_BASE_
0010e350 g     F .text	000000f0 __register_exitproc
00104fbc g     F .text	00000024 Xil_ICacheInvalidateLine
001204ec g       .data	00000000 __data_end
0011bc10 g     O .data	00000100 cmplxDotProd_srcA_buf1_q15
00102370 g     F .text	000000c8 func2_time_measure
0010c378 g     F .text	000001cc __multiply
001053ac g     F .text	00000008 Xil_In8
001280d0 g       .heap	00000000 HeapBase
00128058 g     O .bss	00000028 __malloc_current_mallinfo
0010ca00 g     F .text	00000100 __d2b
0011ee20 g     O .data	00000400 cmplxDotProd_srcB_buf3_f32
0010e4d4 g     F .text	00000038 _close_r
00117f00 g     O .data	00000010 cmplxDotProd_srcA_buf6_q15
0010450c g     F .text	000002e0 arm_float_to_q28
00105144 g     F .text	00000024 Xil_ICacheDisable
0012c0d0 g       .stack	00000000 _irq_stack_end
00105168 g     F .text	00000010 Xil_DCacheDisable
0011f620 g     O .data	00000200 cmplxDotProd_srcB_buf2_f32
00101294 g     F .text	00000518 arm_cmplx_mult_cmplx_f32_dot
00108c38 g     F .text	00000160 __swsetup_r
00105e58  w    F .text	00000004 __aeabi_ldiv0
0010a6ec g     F .text	000000f0 __sfp
0010cbb4 g     F .text	00000074 __copybits
001200d4 g     O .data	00000408 __malloc_av_
0010a7e8 g     F .text	00000004 __sinit_lock_release
001204f0 g       .eh_frame	00000000 __eh_framehdr_end
0010cd54 g     F .text	00000030 __sread
00105be0 g     F .text	00000010 outbyte
001032b8 g     F .text	000003c4 arm_compare_fixed_q31
0010c00c g     F .text	00000004 __malloc_lock
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
00128010 g       .fini_array	00000000 __fini_array_start
0010a310 g     F .text	00000250 _fflush_r
0011f820 g     O .data	00000200 cmplxDotProd_srcA_buf2_f32
0010e440 g     F .text	00000094 _calloc_r
00104bc8 g     F .text	00000020 Xil_L1DCacheEnable
00128018 g       .bss	00000000 __bss_start
00002000 g       *ABS*	00000000 _STACK_SIZE
00128014 g       .ARM.attributes	00000000 __tdata_start
00128014 g       .ARM.attributes	00000000 __tdata_end
0010bde0 g     F .text	0000022c memset
00009010 g     O .ocm_low	00000008 gf_sum
00009018 g       .ocm_low	00000000 __ocm_low_end
0010fa5c g     F .text	00000160 main
00128084 g     O .bss	00000004 __malloc_max_total_mem
00002000 g       *ABS*	00000000 _HEAP_SIZE
0010f6d4 g     F .text	0000001c __swbuf
00106978 g     F .text	0000001c srand
00009008 g     O .ocm_low	00000008 gf_sum_dsp_concept2
00105c4c g     F .text	00000000 __aeabi_uidiv
00105460 g     F .text	00000024 Xil_EndianSwap32
0010ce14 g     F .text	00000008 __sclose
0010e608 g     F .text	00000014 fclose
00128010 g       .init_array	00000000 __init_array_end
0010483c g     F .text	00000010 disable_caches
001090e8 g     F .text	00001224 _dtoa_r
0010aed0 g     F .text	0000071c _malloc_r
00104b30 g     F .text	00000098 Xil_L1DCacheInvalidate
0010f810 g     F .text	00000030 __ascii_wctomb
0010ab80 g     F .text	00000080 _fwalk
0012a0d0 g       .stack	00000000 _stack_end
00000000  w      *UND*	00000000 __libc_fini
00113d70 g     O .data	00000100 testRefOutput1_q15
001204ec g       .data	00000000 ___DTORS_END___
0011de20 g     O .data	00000800 cmplxDotProd_srcB_buf4_f32
00104d00 g     F .text	00000038 Xil_L1DCacheFlushRange
0010367c g     F .text	0000021c arm_provide_guard_bits_q31
00105b00 g     F .text	00000050 XTime_SetTime
0011be10 g     O .data	00000010 cmplxDotProd_srcA_buf6_f32
00128014 g       .ARM.attributes	00000000 __sdata_end
0010a81c g     F .text	000000fc _malloc_trim_r
00110164 g       .data	00000000 __sdata2_start
001204ec g       .data	00000000 __CTOR_END__
001204ec g       .data	00000000 ___DTORS_LIST___
0010ce1c g     F .text	000000a4 strcmp
00104d38 g     F .text	00000018 Xil_L1DCacheStoreLine
001204ec g       .data	00000000 __DTOR_LIST__
0010e2e4 g     F .text	0000002c vfiprintf
0010fbf0 g     F .fini	00000000 _fini
00117e78 g     O .data	00000078 cmplxDotProd_srcA_buf7_q15
00104ec0 g     F .text	0000001c Xil_ICacheEnable
001052cc g     F .text	00000050 Xil_L2CacheStoreLine
00128048 g     O .bss	00000004 _PathLocale
00101d00 g     F .text	000001a4 sp_cmplx_vector_dot_mul
0012e8d0 g       .stack	00000000 _abort_stack_end
0011be00 g     O .data	00000010 cmplxDotProd_srcB_buf6_f32
00108f04 g     F .text	00000014 atexit
0010e310 g     F .text	00000040 _write_r
0010082c g     F .text	00000340 arm_cmplx_dot_prod_f322
0010ad30 g     F .text	0000001c setlocale
001022d0 g     F .text	000000a0 func1_time_measure
0011fc28 g     O .data	00000004 _impure_ptr
0010ad1c g     F .text	00000008 __locale_cjk_lang
001053c4 g     F .text	00000008 Xil_Out8
00128008 g       .init_array	00000000 __preinit_array_end
00110170 g     O .data	00001000 testRefOutput5_q15
00110164 g       .data	00000000 __sdata2_end
001017ac g     F .text	00000020 sp_cmplx_vector_dot_mul_dsp_concept
00105450 g     F .text	00000010 Xil_EndianSwap16
0010c8d8 g     F .text	00000064 __ulp
0010a804 g     F .text	00000018 __fp_unlock_all
00117ef0 g     O .data	00000010 cmplxDotProd_srcB_buf6_q15
001028cc g     F .text	00000304 arm_float_to_q12_20
0010fa50 g     F .text	0000000c inbyte
00128094 g     O .bss	00000038 XExc_VectorTable
00112970 g     O .data	00000800 testInput4_q15
0010ad4c g     F .text	0000000c localeconv
001204ec g       .data	00000000 ___CTORS_END___
0012c0d0 g       .stack	00000000 __stack
00105e38 g     F .text	00000020 __aeabi_uidivmod
0012a0d0 g       .heap	00000000 HeapLimit
00105388 g     F .text	00000024 Xil_ExceptionRemoveHandler
0010f9f0 g     F .text	00000050 _write
0010422c g     F .text	000002e0 arm_float_to_q29
0010564c g     F .text	00000074 getnum
0012f4d0 g       .stack	00000000 _end
001021b0 g     F .text	00000120 global_timer_test
00110164 g       .data	00000000 __rodata1_end
00104854 g     F .text	00000010 cleanup_platform
001204ec g       .data	00000000 __data1_end
00113b70 g     O .data	00000200 testInput2_q15
00104900 g     F .text	0000001c DataAbortInterrupt
00105428 g     F .text	00000028 Xil_Out32BE
00111170 g     O .data	00001000 testInput5_q15
0010cd8c g     F .text	0000005c __swrite
001204e0 g     O .data	00000004 __malloc_trim_threshold
0011ce20 g     O .data	00001000 cmplxDotProd_srcA_buf5_f32
001280d0 g       .heap	00000000 _heap
00113f70 g     O .data	00001000 testRefOutput5_f32
0010ad10 g     F .text	0000000c __locale_msgcharset
00106818 g     F .text	00000034 exit
0010d10c g     F .text	000011d8 _vfiprintf_r
0010ac00 g     F .text	00000084 _fwalk_reent
0010c79c g     F .text	0000013c __mdiff
0011fc20 g     O .data	00000004 __ctype_ptr__
00128014 g       .ARM.attributes	00000000 __tbss_end
0010a7e0 g     F .text	00000004 __sfp_lock_release
0011a710 g     O .data	00000800 cmplxDotProd_srcA_buf4_q15
00009000 g     O .ocm_low	00000008 gf_sum_dsp_concept
0010fc08 g     O .rodata	00000101 _ctype_
0010f958 g     F .text	00000048 _read
00128008 g       .init_array	00000000 __init_array_start
00105e58  w    F .text	00000004 __aeabi_idiv0
00117c70 g     O .data	00000100 testInput1_f32
001047ec g     F .text	0000004c arm_clip_f32
00100020 g       .text	00000000 IRQHandler
0010f888 g     F .text	00000004 _exit
00001000 g       .ocm_low	00000000 __ocm_low_start
00104fe0 g     F .text	00000024 Xil_DCacheInvalidateLine
001053dc g     F .text	00000014 Xil_In16BE
0011bd10 g     O .data	00000078 cmplxDotProd_srcB_buf7_f32
0010ad58 g     F .text	00000178 __smakebuf_r
001048ac g     F .text	0000001c FIQInterrupt
001069ec g     F .text	0000006c strlen
0012c0d0 g       .stack	00000000 _stack
00113970 g     O .data	00000200 testRefOutput2_q15
001204e4 g     O .data	00000004 __wctomb
00105e98 g     F .text	0000003c __gnu_ldivmod_helper
0010d05c g     F .text	000000b0 __sprint_r
001053cc g     F .text	00000008 Xil_Out16
00110168 g       .data	00000000 __data_start
00105234 g     F .text	00000098 Xil_L2CacheFlushRange
0010531c g     F .text	00000018 Xil_DCacheStoreLine
00103f4c g     F .text	000002e0 arm_float_to_q30
00104eec g     F .text	00000050 Xil_L2CacheInvalidate
0010f840 g     F .text	00000048 _wctomb_r
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0012ecd0 g       .stack	00000000 _fiq_stack_end
001053b4 g     F .text	00000008 Xil_In16
00106a58 g     F .text	000021b4 _vfprintf_r
00128008 g       .init_array	00000000 __preinit_array_start
00104c38 g     F .text	00000098 Xil_L1DCacheFlush
00000400 g       *ABS*	00000000 _UNDEF_STACK_SIZE
00104d88 g     F .text	00000018 Xil_L1ICacheInvalidate
0010c2c4 g     F .text	00000094 __lo0bits
00105188 g     F .text	00000064 Xil_L2CacheFlushLine
00110164 g       *ABS*	00000000 _SDA2_BASE_
00105b50 g     F .text	00000050 XTime_GetTime
00000000  w      *UND*	00000000 __register_frame_info
0010f77c g     F .text	00000094 wcrtomb
00128000 g       .mmu_tbl	00000000 __mmu_tbl_end
0011b910 g     O .data	00000200 cmplxDotProd_srcA_buf2_q15
00104edc g     F .text	00000010 Xil_DCacheEnable
00128014 g       .ARM.attributes	00000000 __ARM.attributes_start
00108c0c g     F .text	0000002c vfprintf
00104c00 g     F .text	00000038 Xil_L1DCacheInvalidateRange
0010e76c g     F .text	00000044 fputwc
0010f8b8 g     F .text	00000008 _close
00000000  w      *UND*	00000000 free
0010a7e4 g     F .text	00000004 __sinit_lock_acquire
00117370 g     O .data	00000400 testInput3_f32
0010c0b8 g     F .text	000000d0 __multadd
0010c09c g     F .text	0000001c _Bfree



Disassembly of section .text:

00100000 <_vector_table>:
.globl IRQHandler
.globl prof_pc

.section .vectors
_vector_table:
	B	_boot
  100000:	ea000025 	b	10009c <_boot>
	B	Undefined
  100004:	ea00000d 	b	100040 <Undefined>
	B	SVCHandler
  100008:	ea000010 	b	100050 <SVCHandler>
	B	PrefetchAbortHandler
  10000c:	ea00001d 	b	100088 <PrefetchAbortHandler>
	B	DataAbortHandler
  100010:	ea000017 	b	100074 <DataAbortHandler>
	NOP	/* Placeholder for address exception vector*/
  100014:	e320f000 	nop	{0}
	B	IRQHandler
  100018:	ea000000 	b	100020 <IRQHandler>
	B	FIQHandler
  10001c:	ea000003 	b	100030 <FIQHandler>

00100020 <IRQHandler>:


IRQHandler:					/* IRQ vector handler */
	
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code*/
  100020:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	ldr	r2, =prof_pc
	subs	r3, lr, #0
	str	r3, [r2]
#endif

	bl	IRQInterrupt			/* IRQ vector */
  100024:	eb001227 	bl	1048c8 <IRQInterrupt>
	
#ifdef __ARM_NEON__
	vpop    {d16-d31}
	vpop    {d0-d7}
#endif
	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
  100028:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	

	subs	pc, lr, #4			/* adjust return */
  10002c:	e25ef004 	subs	pc, lr, #4

00100030 <FIQHandler>:


FIQHandler:					/* FIQ vector handler */
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
  100030:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}

00100034 <FIQLoop>:
	vpush {d0-d7}
	vpush {d16-d31}
#endif

FIQLoop:
	bl	FIQInterrupt			/* FIQ vector */
  100034:	eb00121c 	bl	1048ac <FIQInterrupt>

#ifdef __ARM_NEON__
	vpop    {d16-d31}
	vpop    {d0-d7}
#endif
	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
  100038:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	subs	pc, lr, #4			/* adjust return */
  10003c:	e25ef004 	subs	pc, lr, #4

00100040 <Undefined>:


Undefined:					/* Undefined handler */
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
  100040:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}

	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
  100044:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

	b	_prestart			
  100048:	ea000013 	b	10009c <_boot>

	movs	pc, lr
  10004c:	e1b0f00e 	movs	pc, lr

00100050 <SVCHandler>:


SVCHandler:					/* SWI handler */
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
  100050:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}

	tst	r0, #0x20			/* check the T bit */
  100054:	e3100020 	tst	r0, #32
	ldrneh	r0, [lr,#-2]			/* Thumb mode */
  100058:	115e00b2 	ldrhne	r0, [lr, #-2]
	bicne	r0, r0, #0xff00			/* Thumb mode */
  10005c:	13c00cff 	bicne	r0, r0, #65280	; 0xff00
	ldreq	r0, [lr,#-4]			/* ARM mode */
  100060:	051e0004 	ldreq	r0, [lr, #-4]
	biceq	r0, r0, #0xff000000		/* ARM mode */
  100064:	03c004ff 	biceq	r0, r0, #-16777216	; 0xff000000

	bl	SWInterrupt			/* SWInterrupt: call C function here */
  100068:	eb00121d 	bl	1048e4 <SWInterrupt>

	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
  10006c:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

	subs	pc, lr, #4			/* adjust return */
  100070:	e25ef004 	subs	pc, lr, #4

00100074 <DataAbortHandler>:


DataAbortHandler:				/* Data Abort handler */
#ifdef CONFIG_ARM_ERRATA_775420
	dsb
  100074:	f57ff04f 	dsb	sy
#endif
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
  100078:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}

	bl	DataAbortInterrupt		/*DataAbortInterrupt :call C function here */
  10007c:	eb00121f 	bl	104900 <DataAbortInterrupt>

	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
  100080:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

	subs	pc, lr, #4			/* adjust return */
  100084:	e25ef004 	subs	pc, lr, #4

00100088 <PrefetchAbortHandler>:

PrefetchAbortHandler:				/* Prefetch Abort handler */
#ifdef CONFIG_ARM_ERRATA_775420
	dsb
  100088:	f57ff04f 	dsb	sy
#endif
	stmdb	sp!,{r0-r3,r12,lr}		/* state save from compiled code */
  10008c:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}

	bl	PrefetchAbortInterrupt		/* PrefetchAbortInterrupt: call C function here */
  100090:	eb001221 	bl	10491c <PrefetchAbortInterrupt>

	ldmia	sp!,{r0-r3,r12,lr}		/* state restore from compiled code */
  100094:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

	subs	pc, lr, #4			/* adjust return */
  100098:	e25ef004 	subs	pc, lr, #4

0010009c <_boot>:
_prestart:
_boot:

#if XPAR_CPU_ID==0
/* only allow cpu0 through */
	mrc	p15,0,r1,c0,c0,5
  10009c:	ee101fb0 	mrc	15, 0, r1, cr0, cr0, {5}
	and	r1, r1, #0xf
  1000a0:	e201100f 	and	r1, r1, #15
	cmp	r1, #0
  1000a4:	e3510000 	cmp	r1, #0
	beq	OKToRun
  1000a8:	0a000001 	beq	1000b4 <OKToRun>

001000ac <EndlessLoop0>:
EndlessLoop0:
	wfe
  1000ac:	e320f002 	wfe
	b	EndlessLoop0
  1000b0:	eafffffd 	b	1000ac <EndlessLoop0>

001000b4 <OKToRun>:
	wfe
	b	EndlessLoop1
#endif

OKToRun:
	mrc     p15, 0, r0, c0, c0, 0		/* Get the revision */
  1000b4:	ee100f10 	mrc	15, 0, r0, cr0, cr0, {0}
	and     r5, r0, #0x00f00000 
  1000b8:	e200560f 	and	r5, r0, #15728640	; 0xf00000
	and     r6, r0, #0x0000000f
  1000bc:	e200600f 	and	r6, r0, #15
	orr     r6, r6, r5, lsr #20-4
  1000c0:	e1866825 	orr	r6, r6, r5, lsr #16

#ifdef CONFIG_ARM_ERRATA_742230
        cmp     r6, #0x22                       /* only present up to r2p2 */
  1000c4:	e3560022 	cmp	r6, #34	; 0x22
        mrcle   p15, 0, r10, c15, c0, 1         /* read diagnostic register */
  1000c8:	de1faf30 	mrcle	15, 0, sl, cr15, cr0, {1}
        orrle   r10, r10, #1 << 4               /* set bit #4 */
  1000cc:	d38aa010 	orrle	sl, sl, #16
        mcrle   p15, 0, r10, c15, c0, 1         /* write diagnostic register */
  1000d0:	de0faf30 	mcrle	15, 0, sl, cr15, cr0, {1}
#endif

#ifdef CONFIG_ARM_ERRATA_743622
	teq     r5, #0x00200000                 /* only present in r2p* */
  1000d4:	e3350602 	teq	r5, #2097152	; 0x200000
	mrceq   p15, 0, r10, c15, c0, 1         /* read diagnostic register */
  1000d8:	0e1faf30 	mrceq	15, 0, sl, cr15, cr0, {1}
	orreq   r10, r10, #1 << 6               /* set bit #6 */
  1000dc:	038aa040 	orreq	sl, sl, #64	; 0x40
	mcreq   p15, 0, r10, c15, c0, 1         /* write diagnostic register */
  1000e0:	0e0faf30 	mcreq	15, 0, sl, cr15, cr0, {1}
#endif

	/* set VBAR to the _vector_table address in linker script */
	ldr	r0, =vector_base
  1000e4:	e59f0270 	ldr	r0, [pc, #624]	; 10035c <finished+0x14>
	mcr	p15, 0, r0, c12, c0, 0
  1000e8:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}

	/*set scu enable bit in scu*/
	ldr	r7, =0xf8f00000
  1000ec:	e59f726c 	ldr	r7, [pc, #620]	; 100360 <finished+0x18>
	ldr	r0, [r7]
  1000f0:	e5970000 	ldr	r0, [r7]
	orr	r0, r0, #0x1  
  1000f4:	e3800001 	orr	r0, r0, #1
	str	r0, [r7]
  1000f8:	e5870000 	str	r0, [r7]

	/*invalidate scu*/
	ldr	r7, =0xf8f0000c
  1000fc:	e59f7260 	ldr	r7, [pc, #608]	; 100364 <finished+0x1c>
	ldr	r6, =0xffff
  100100:	e59f6260 	ldr	r6, [pc, #608]	; 100368 <finished+0x20>
	str	r6, [r7]
  100104:	e5876000 	str	r6, [r7]

	/* Write to ACTLR */
	mrc	p15, 0, r0, c1, c0, 1		/* Read ACTLR*/
  100108:	ee110f30 	mrc	15, 0, r0, cr1, cr0, {1}
	orr	r0, r0, #(0x01 << 6)		/* set SMP bit */
  10010c:	e3800040 	orr	r0, r0, #64	; 0x40
	orr	r0, r0, #(0x01 )		/* */		
  100110:	e3800001 	orr	r0, r0, #1
	mcr	p15, 0, r0, c1, c0, 1		/* Write ACTLR*/
  100114:	ee010f30 	mcr	15, 0, r0, cr1, cr0, {1}

/* Invalidate caches and TLBs */
	mov	r0,#0				/* r0 = 0  */
  100118:	e3a00000 	mov	r0, #0
	mcr	p15, 0, r0, c8, c7, 0		/* invalidate TLBs */
  10011c:	ee080f17 	mcr	15, 0, r0, cr8, cr7, {0}
	mcr	p15, 0, r0, c7, c5, 0		/* invalidate icache */
  100120:	ee070f15 	mcr	15, 0, r0, cr7, cr5, {0}
	mcr	p15, 0, r0, c7, c5, 6		/* Invalidate branch predictor array */
  100124:	ee070fd5 	mcr	15, 0, r0, cr7, cr5, {6}
	bl	invalidate_dcache		/* invalidate dcache */
  100128:	eb000067 	bl	1002cc <invalidate_dcache>

/* Invalidate L2c Cache */
/* For AMP, assume running on CPU1. Don't initialize L2 Cache (up to Linux) */
#if USE_AMP!=1
	ldr	r0,=L2CCCrtl			/* Load L2CC base address base + control register */
  10012c:	e59f0238 	ldr	r0, [pc, #568]	; 10036c <finished+0x24>
	mov	r1, #0				/* force the disable bit */
  100130:	e3a01000 	mov	r1, #0
	str	r1, [r0]			/* disable the L2 Caches */
  100134:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCAuxCrtl			/* Load L2CC base address base + Aux control register */
  100138:	e59f0230 	ldr	r0, [pc, #560]	; 100370 <finished+0x28>
	ldr	r1,[r0]				/* read the register */
  10013c:	e5901000 	ldr	r1, [r0]
	ldr	r2,=L2CCAuxControl		/* set the default bits */
  100140:	e59f222c 	ldr	r2, [pc, #556]	; 100374 <finished+0x2c>
	orr	r1,r1,r2
  100144:	e1811002 	orr	r1, r1, r2
	str	r1, [r0]			/* store the Aux Control Register */
  100148:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCTAGLatReg		/* Load L2CC base address base + TAG Latency address */
  10014c:	e59f0224 	ldr	r0, [pc, #548]	; 100378 <finished+0x30>
	ldr	r1,=L2CCTAGLatency		/* set the latencies for the TAG*/
  100150:	e59f1224 	ldr	r1, [pc, #548]	; 10037c <finished+0x34>
	str	r1, [r0]			/* store the TAG Latency register Register */
  100154:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCDataLatReg		/* Load L2CC base address base + Data Latency address */
  100158:	e59f0220 	ldr	r0, [pc, #544]	; 100380 <finished+0x38>
	ldr	r1,=L2CCDataLatency		/* set the latencies for the Data*/
  10015c:	e59f1220 	ldr	r1, [pc, #544]	; 100384 <finished+0x3c>
	str	r1, [r0]			/* store the Data Latency register Register */
  100160:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCWay			/* Load L2CC base address base + way register*/
  100164:	e59f021c 	ldr	r0, [pc, #540]	; 100388 <finished+0x40>
	ldr	r2, =0xFFFF
  100168:	e59f21f8 	ldr	r2, [pc, #504]	; 100368 <finished+0x20>
	str	r2, [r0]			/* force invalidate */
  10016c:	e5802000 	str	r2, [r0]

	ldr	r0,=L2CCSync			/* need to poll 0x730, PSS_L2CC_CACHE_SYNC_OFFSET */
  100170:	e59f0214 	ldr	r0, [pc, #532]	; 10038c <finished+0x44>

00100174 <Sync>:
						/* Load L2CC base address base + sync register*/
	/* poll for completion */
Sync:	ldr	r1, [r0]
  100174:	e5901000 	ldr	r1, [r0]
	cmp	r1, #0
  100178:	e3510000 	cmp	r1, #0
	bne	Sync
  10017c:	1afffffc 	bne	100174 <Sync>

	ldr	r0,=L2CCIntRaw			/* clear pending interrupts */
  100180:	e59f0208 	ldr	r0, [pc, #520]	; 100390 <finished+0x48>
	ldr	r1,[r0]
  100184:	e5901000 	ldr	r1, [r0]
	ldr	r0,=L2CCIntClear	
  100188:	e59f0204 	ldr	r0, [pc, #516]	; 100394 <finished+0x4c>
	str	r1,[r0]
  10018c:	e5801000 	str	r1, [r0]
#endif

	/* Disable MMU, if enabled */
	mrc	p15, 0, r0, c1, c0, 0		/* read CP15 register 1 */
  100190:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	bic	r0, r0, #0x1			/* clear bit 0 */
  100194:	e3c00001 	bic	r0, r0, #1
	mcr	p15, 0, r0, c1, c0, 0		/* write value back */
  100198:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
	add	r2, r2, #0x100000		/* next section */
	subs	r3, r3, #1
	bge	mmu_loop			/* loop till 512MB is covered */
#endif

	mrs	r0, cpsr			/* get the current PSR */
  10019c:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the irq stack pointer */
  1001a0:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
  1001a4:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x12			/* IRQ mode */
  1001a8:	e3822012 	orr	r2, r2, #18
	msr	cpsr, r2
  1001ac:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=IRQ_stack			/* IRQ stack pointer */
  1001b0:	e59fd1e0 	ldr	sp, [pc, #480]	; 100398 <finished+0x50>

	mrs	r0, cpsr			/* get the current PSR */
  1001b4:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the supervisor stack pointer */
  1001b8:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
  1001bc:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x13			/* supervisor mode */
  1001c0:	e3822013 	orr	r2, r2, #19
	msr	cpsr, r2
  1001c4:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=SPV_stack			/* Supervisor stack pointer */
  1001c8:	e59fd1cc 	ldr	sp, [pc, #460]	; 10039c <finished+0x54>

	mrs	r0, cpsr			/* get the current PSR */
  1001cc:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the Abort  stack pointer */
  1001d0:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
  1001d4:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x17			/* Abort mode */
  1001d8:	e3822017 	orr	r2, r2, #23
	msr	cpsr, r2
  1001dc:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=Abort_stack		/* Abort stack pointer */
  1001e0:	e59fd1b8 	ldr	sp, [pc, #440]	; 1003a0 <finished+0x58>

	mrs	r0, cpsr			/* get the current PSR */
  1001e4:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the FIQ stack pointer */
  1001e8:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
  1001ec:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x11			/* FIQ mode */
  1001f0:	e3822011 	orr	r2, r2, #17
	msr	cpsr, r2
  1001f4:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=FIQ_stack			/* FIQ stack pointer */
  1001f8:	e59fd1a4 	ldr	sp, [pc, #420]	; 1003a4 <finished+0x5c>

	mrs	r0, cpsr			/* get the current PSR */
  1001fc:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the Undefine stack pointer */
  100200:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
  100204:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x1b			/* Undefine mode */
  100208:	e382201b 	orr	r2, r2, #27
	msr	cpsr, r2
  10020c:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=Undef_stack		/* Undefine stack pointer */
  100210:	e59fd190 	ldr	sp, [pc, #400]	; 1003a8 <finished+0x60>

	mrs	r0, cpsr			/* get the current PSR */
  100214:	e10f0000 	mrs	r0, CPSR
	mvn	r1, #0x1f			/* set up the system stack pointer */
  100218:	e3e0101f 	mvn	r1, #31
	and	r2, r1, r0
  10021c:	e0012000 	and	r2, r1, r0
	orr	r2, r2, #0x1F			/* SYS mode */
  100220:	e382201f 	orr	r2, r2, #31
	msr	cpsr, r2
  100224:	e129f002 	msr	CPSR_fc, r2
	ldr	r13,=SYS_stack			/* SYS stack pointer */
  100228:	e59fd17c 	ldr	sp, [pc, #380]	; 1003ac <finished+0x64>

	/* enable MMU and cache */

	ldr	r0,=TblBase			/* Load MMU translation table base */
  10022c:	e59f017c 	ldr	r0, [pc, #380]	; 1003b0 <finished+0x68>
	orr	r0, r0, #0x5B			/* Outer-cacheable, WB */
  100230:	e380005b 	orr	r0, r0, #91	; 0x5b
	mcr	15, 0, r0, c2, c0, 0		/* TTB0 */
  100234:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
	
	
	mvn	r0,#0				/* Load MMU domains -- all ones=manager */
  100238:	e3e00000 	mvn	r0, #0
	mcr	p15,0,r0,c3,c0,0
  10023c:	ee030f10 	mcr	15, 0, r0, cr3, cr0, {0}

	/* Enable mmu, icahce and dcache */
	ldr	r0,=CRValMmuCac
  100240:	e59f016c 	ldr	r0, [pc, #364]	; 1003b4 <finished+0x6c>

	mcr	p15,0,r0,c1,c0,0		/* Enable cache and MMU */
  100244:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
	dsb					/* dsb	allow the MMU to start up */
  100248:	f57ff04f 	dsb	sy

	isb					/* isb	flush prefetch buffer */
  10024c:	f57ff06f 	isb	sy

/* For AMP, assume running on CPU1. Don't initialize L2 Cache (up to Linux) */
#if USE_AMP!=1
	ldr	r0,=SLCRUnlockReg		/* Load SLCR base address base + unlock register */
  100250:	e59f0160 	ldr	r0, [pc, #352]	; 1003b8 <finished+0x70>
	ldr	r1,=SLCRUnlockKey	    /* set unlock key */
  100254:	e59f1160 	ldr	r1, [pc, #352]	; 1003bc <finished+0x74>
	str	r1, [r0]		    /* Unlock SLCR */
  100258:	e5801000 	str	r1, [r0]

   	ldr	r0,=SLCRL2cRamReg		/* Load SLCR base address base + l2c Ram Control register */
  10025c:	e59f015c 	ldr	r0, [pc, #348]	; 1003c0 <finished+0x78>
	ldr	r1,=SLCRL2cRamConfig        /* set the configuration value */
  100260:	e59f115c 	ldr	r1, [pc, #348]	; 1003c4 <finished+0x7c>
	str	r1, [r0]	        /* store the L2c Ram Control Register */
  100264:	e5801000 	str	r1, [r0]

   	ldr	r0,=SLCRlockReg         /* Load SLCR base address base + lock register */
  100268:	e59f0158 	ldr	r0, [pc, #344]	; 1003c8 <finished+0x80>
	ldr	r1,=SLCRlockKey	        /* set lock key */
  10026c:	e59f1158 	ldr	r1, [pc, #344]	; 1003cc <finished+0x84>
	str	r1, [r0]	        /* lock SLCR */
  100270:	e5801000 	str	r1, [r0]

	ldr	r0,=L2CCCrtl			/* Load L2CC base address base + control register */
  100274:	e59f00f0 	ldr	r0, [pc, #240]	; 10036c <finished+0x24>
	ldr	r1,[r0]				/* read the register */
  100278:	e5901000 	ldr	r1, [r0]
	mov	r2, #L2CCControl		/* set the enable bit */
  10027c:	e3a02001 	mov	r2, #1
	orr	r1,r1,r2
  100280:	e1811002 	orr	r1, r1, r2
	str	r1, [r0]			/* enable the L2 Caches */
  100284:	e5801000 	str	r1, [r0]
#endif

	mov	r0, r0
  100288:	e1a00000 	nop			; (mov r0, r0)
	mrc	p15, 0, r1, c1, c0, 2		/* read cp access control register (CACR) into r1 */
  10028c:	ee111f50 	mrc	15, 0, r1, cr1, cr0, {2}
	orr	r1, r1, #(0xf << 20)		/* enable full access for p10 & p11 */
  100290:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
	mcr	p15, 0, r1, c1, c0, 2		/* write back into CACR */
  100294:	ee011f50 	mcr	15, 0, r1, cr1, cr0, {2}

	/* enable vfp */
	fmrx	r1, FPEXC			/* read the exception register */
  100298:	eef81a10 	vmrs	r1, fpexc
	orr	r1,r1, #FPEXC_EN		/* set VFP enable bit, leave the others in orig state */
  10029c:	e3811101 	orr	r1, r1, #1073741824	; 0x40000000
	fmxr	FPEXC, r1			/* write back the exception register */
  1002a0:	eee81a10 	vmsr	fpexc, r1

	mrc	p15,0,r0,c1,c0,0		/* flow prediction enable */
  1002a4:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	orr	r0, r0, #(0x01 << 11)		/* #0x8000 */		
  1002a8:	e3800b02 	orr	r0, r0, #2048	; 0x800
	mcr	p15,0,r0,c1,c0,0
  1002ac:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}

	mrc	p15,0,r0,c1,c0,1		/* read Auxiliary Control Register */
  1002b0:	ee110f30 	mrc	15, 0, r0, cr1, cr0, {1}
	orr	r0, r0, #(0x1 << 2)		/* enable Dside prefetch */
  1002b4:	e3800004 	orr	r0, r0, #4
	orr	r0, r0, #(0x1 << 1)		/* enable L2 Prefetch hint */
  1002b8:	e3800002 	orr	r0, r0, #2
	mcr	p15,0,r0,c1,c0,1		/* write Auxiliary Control Register */
  1002bc:	ee010f30 	mcr	15, 0, r0, cr1, cr0, {1}

	b	_start				/* jump to C startup code */
  1002c0:	ea0011a1 	b	10494c <_start>
	and	r0, r0, r0			/* no op */
  1002c4:	e0000000 	and	r0, r0, r0
	
.Ldone:	b	.Ldone				/* Paranoia: we should never get here */
  1002c8:	eafffffe 	b	1002c8 <Sync+0x154>

001002cc <invalidate_dcache>:
 * the whole D-cache. Need to invalidate each line.
 *
 *************************************************************************
 */
invalidate_dcache:
	mrc	p15, 1, r0, c0, c0, 1		/* read CLIDR */
  1002cc:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
	ands	r3, r0, #0x7000000
  1002d0:	e2103407 	ands	r3, r0, #117440512	; 0x7000000
	mov	r3, r3, lsr #23			/* cache level value (naturally aligned) */
  1002d4:	e1a03ba3 	lsr	r3, r3, #23
	beq	finished
  1002d8:	0a00001a 	beq	100348 <finished>
	mov	r10, #0				/* start with level 0 */
  1002dc:	e3a0a000 	mov	sl, #0

001002e0 <loop1>:
loop1:
	add	r2, r10, r10, lsr #1		/* work out 3xcachelevel */
  1002e0:	e08a20aa 	add	r2, sl, sl, lsr #1
	mov	r1, r0, lsr r2			/* bottom 3 bits are the Cache type for this level */
  1002e4:	e1a01230 	lsr	r1, r0, r2
	and	r1, r1, #7			/* get those 3 bits alone */
  1002e8:	e2011007 	and	r1, r1, #7
	cmp	r1, #2
  1002ec:	e3510002 	cmp	r1, #2
	blt	skip				/* no cache or only instruction cache at this level */
  1002f0:	ba000011 	blt	10033c <skip>
	mcr	p15, 2, r10, c0, c0, 0		/* write the Cache Size selection register */
  1002f4:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
	isb					/* isb to sync the change to the CacheSizeID reg */
  1002f8:	f57ff06f 	isb	sy
	mrc	p15, 1, r1, c0, c0, 0		/* reads current Cache Size ID register */
  1002fc:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
	and	r2, r1, #7			/* extract the line length field */
  100300:	e2012007 	and	r2, r1, #7
	add	r2, r2, #4			/* add 4 for the line length offset (log2 16 bytes) */
  100304:	e2822004 	add	r2, r2, #4
	ldr	r4, =0x3ff
  100308:	e59f40c0 	ldr	r4, [pc, #192]	; 1003d0 <finished+0x88>
	ands	r4, r4, r1, lsr #3		/* r4 is the max number on the way size (right aligned) */
  10030c:	e01441a1 	ands	r4, r4, r1, lsr #3
	clz	r5, r4				/* r5 is the bit position of the way size increment */
  100310:	e16f5f14 	clz	r5, r4
	ldr	r7, =0x7fff
  100314:	e59f70b8 	ldr	r7, [pc, #184]	; 1003d4 <finished+0x8c>
	ands	r7, r7, r1, lsr #13		/* r7 is the max number of the index size (right aligned) */
  100318:	e01776a1 	ands	r7, r7, r1, lsr #13

0010031c <loop2>:
loop2:
	mov	r9, r4				/* r9 working copy of the max way size (right aligned) */
  10031c:	e1a09004 	mov	r9, r4

00100320 <loop3>:
loop3:
	orr	r11, r10, r9, lsl r5		/* factor in the way number and cache number into r11 */
  100320:	e18ab519 	orr	fp, sl, r9, lsl r5
	orr	r11, r11, r7, lsl r2		/* factor in the index number */
  100324:	e18bb217 	orr	fp, fp, r7, lsl r2
	mcr	p15, 0, r11, c7, c14, 2		/* clean & invalidate by set/way */
  100328:	ee07bf5e 	mcr	15, 0, fp, cr7, cr14, {2}
	subs	r9, r9, #1			/* decrement the way number */
  10032c:	e2599001 	subs	r9, r9, #1
	bge	loop3
  100330:	aafffffa 	bge	100320 <loop3>
	subs	r7, r7, #1			/* decrement the index */
  100334:	e2577001 	subs	r7, r7, #1
	bge	loop2
  100338:	aafffff7 	bge	10031c <loop2>

0010033c <skip>:
skip:
	add	r10, r10, #2			/* increment the cache number */
  10033c:	e28aa002 	add	sl, sl, #2
	cmp	r3, r10
  100340:	e153000a 	cmp	r3, sl
	bgt	loop1
  100344:	caffffe5 	bgt	1002e0 <loop1>

00100348 <finished>:

finished:
	mov	r10, #0				/* swith back to cache level 0 */
  100348:	e3a0a000 	mov	sl, #0
	mcr	p15, 2, r10, c0, c0, 0		/* select current cache level in cssr */
  10034c:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
	dsb
  100350:	f57ff04f 	dsb	sy
	isb
  100354:	f57ff06f 	isb	sy

	bx	lr
  100358:	e12fff1e 	bx	lr
	orreq   r10, r10, #1 << 6               /* set bit #6 */
	mcreq   p15, 0, r10, c15, c0, 1         /* write diagnostic register */
#endif

	/* set VBAR to the _vector_table address in linker script */
	ldr	r0, =vector_base
  10035c:	00100000 	.word	0x00100000
	mcr	p15, 0, r0, c12, c0, 0

	/*set scu enable bit in scu*/
	ldr	r7, =0xf8f00000
  100360:	f8f00000 	.word	0xf8f00000
	ldr	r0, [r7]
	orr	r0, r0, #0x1  
	str	r0, [r7]

	/*invalidate scu*/
	ldr	r7, =0xf8f0000c
  100364:	f8f0000c 	.word	0xf8f0000c
	ldr	r6, =0xffff
  100368:	0000ffff 	.word	0x0000ffff
	bl	invalidate_dcache		/* invalidate dcache */

/* Invalidate L2c Cache */
/* For AMP, assume running on CPU1. Don't initialize L2 Cache (up to Linux) */
#if USE_AMP!=1
	ldr	r0,=L2CCCrtl			/* Load L2CC base address base + control register */
  10036c:	f8f02100 	.word	0xf8f02100
	mov	r1, #0				/* force the disable bit */
	str	r1, [r0]			/* disable the L2 Caches */

	ldr	r0,=L2CCAuxCrtl			/* Load L2CC base address base + Aux control register */
  100370:	f8f02104 	.word	0xf8f02104
	ldr	r1,[r0]				/* read the register */
	ldr	r2,=L2CCAuxControl		/* set the default bits */
  100374:	72360000 	.word	0x72360000
	orr	r1,r1,r2
	str	r1, [r0]			/* store the Aux Control Register */

	ldr	r0,=L2CCTAGLatReg		/* Load L2CC base address base + TAG Latency address */
  100378:	f8f02108 	.word	0xf8f02108
	ldr	r1,=L2CCTAGLatency		/* set the latencies for the TAG*/
  10037c:	00000111 	.word	0x00000111
	str	r1, [r0]			/* store the TAG Latency register Register */

	ldr	r0,=L2CCDataLatReg		/* Load L2CC base address base + Data Latency address */
  100380:	f8f0210c 	.word	0xf8f0210c
	ldr	r1,=L2CCDataLatency		/* set the latencies for the Data*/
  100384:	00000121 	.word	0x00000121
	str	r1, [r0]			/* store the Data Latency register Register */

	ldr	r0,=L2CCWay			/* Load L2CC base address base + way register*/
  100388:	f8f0277c 	.word	0xf8f0277c
	ldr	r2, =0xFFFF
	str	r2, [r0]			/* force invalidate */

	ldr	r0,=L2CCSync			/* need to poll 0x730, PSS_L2CC_CACHE_SYNC_OFFSET */
  10038c:	f8f02730 	.word	0xf8f02730
	/* poll for completion */
Sync:	ldr	r1, [r0]
	cmp	r1, #0
	bne	Sync

	ldr	r0,=L2CCIntRaw			/* clear pending interrupts */
  100390:	f8f0221c 	.word	0xf8f0221c
	ldr	r1,[r0]
	ldr	r0,=L2CCIntClear	
  100394:	f8f02220 	.word	0xf8f02220
	mrs	r0, cpsr			/* get the current PSR */
	mvn	r1, #0x1f			/* set up the irq stack pointer */
	and	r2, r1, r0
	orr	r2, r2, #0x12			/* IRQ mode */
	msr	cpsr, r2
	ldr	r13,=IRQ_stack			/* IRQ stack pointer */
  100398:	0012e0d0 	.word	0x0012e0d0
	mrs	r0, cpsr			/* get the current PSR */
	mvn	r1, #0x1f			/* set up the supervisor stack pointer */
	and	r2, r1, r0
	orr	r2, r2, #0x13			/* supervisor mode */
	msr	cpsr, r2
	ldr	r13,=SPV_stack			/* Supervisor stack pointer */
  10039c:	0012e8d0 	.word	0x0012e8d0
	mrs	r0, cpsr			/* get the current PSR */
	mvn	r1, #0x1f			/* set up the Abort  stack pointer */
	and	r2, r1, r0
	orr	r2, r2, #0x17			/* Abort mode */
	msr	cpsr, r2
	ldr	r13,=Abort_stack		/* Abort stack pointer */
  1003a0:	0012ecd0 	.word	0x0012ecd0
	mrs	r0, cpsr			/* get the current PSR */
	mvn	r1, #0x1f			/* set up the FIQ stack pointer */
	and	r2, r1, r0
	orr	r2, r2, #0x11			/* FIQ mode */
	msr	cpsr, r2
	ldr	r13,=FIQ_stack			/* FIQ stack pointer */
  1003a4:	0012f0d0 	.word	0x0012f0d0
	mrs	r0, cpsr			/* get the current PSR */
	mvn	r1, #0x1f			/* set up the Undefine stack pointer */
	and	r2, r1, r0
	orr	r2, r2, #0x1b			/* Undefine mode */
	msr	cpsr, r2
	ldr	r13,=Undef_stack		/* Undefine stack pointer */
  1003a8:	0012f4d0 	.word	0x0012f4d0
	mrs	r0, cpsr			/* get the current PSR */
	mvn	r1, #0x1f			/* set up the system stack pointer */
	and	r2, r1, r0
	orr	r2, r2, #0x1F			/* SYS mode */
	msr	cpsr, r2
	ldr	r13,=SYS_stack			/* SYS stack pointer */
  1003ac:	0012c0d0 	.word	0x0012c0d0

	/* enable MMU and cache */

	ldr	r0,=TblBase			/* Load MMU translation table base */
  1003b0:	00124000 	.word	0x00124000
	
	mvn	r0,#0				/* Load MMU domains -- all ones=manager */
	mcr	p15,0,r0,c3,c0,0

	/* Enable mmu, icahce and dcache */
	ldr	r0,=CRValMmuCac
  1003b4:	00001005 	.word	0x00001005

	isb					/* isb	flush prefetch buffer */

/* For AMP, assume running on CPU1. Don't initialize L2 Cache (up to Linux) */
#if USE_AMP!=1
	ldr	r0,=SLCRUnlockReg		/* Load SLCR base address base + unlock register */
  1003b8:	f8000008 	.word	0xf8000008
	ldr	r1,=SLCRUnlockKey	    /* set unlock key */
  1003bc:	0000df0d 	.word	0x0000df0d
	str	r1, [r0]		    /* Unlock SLCR */

   	ldr	r0,=SLCRL2cRamReg		/* Load SLCR base address base + l2c Ram Control register */
  1003c0:	f8000a1c 	.word	0xf8000a1c
	ldr	r1,=SLCRL2cRamConfig        /* set the configuration value */
  1003c4:	00020202 	.word	0x00020202
	str	r1, [r0]	        /* store the L2c Ram Control Register */

   	ldr	r0,=SLCRlockReg         /* Load SLCR base address base + lock register */
  1003c8:	f8000004 	.word	0xf8000004
	ldr	r1,=SLCRlockKey	        /* set lock key */
  1003cc:	0000767b 	.word	0x0000767b
	mcr	p15, 2, r10, c0, c0, 0		/* write the Cache Size selection register */
	isb					/* isb to sync the change to the CacheSizeID reg */
	mrc	p15, 1, r1, c0, c0, 0		/* reads current Cache Size ID register */
	and	r2, r1, #7			/* extract the line length field */
	add	r2, r2, #4			/* add 4 for the line length offset (log2 16 bytes) */
	ldr	r4, =0x3ff
  1003d0:	000003ff 	.word	0x000003ff
	ands	r4, r4, r1, lsr #3		/* r4 is the max number on the way size (right aligned) */
	clz	r5, r4				/* r5 is the bit position of the way size increment */
	ldr	r7, =0x7fff
  1003d4:	00007fff 	.word	0x00007fff

001003d8 <deregister_tm_clones>:
  1003d8:	e92d4008 	push	{r3, lr}
  1003dc:	e30004ec 	movw	r0, #1260	; 0x4ec
  1003e0:	e59f3024 	ldr	r3, [pc, #36]	; 10040c <deregister_tm_clones+0x34>
  1003e4:	e3400012 	movt	r0, #18
  1003e8:	e0603003 	rsb	r3, r0, r3
  1003ec:	e3530006 	cmp	r3, #6
  1003f0:	98bd8008 	popls	{r3, pc}
  1003f4:	e3003000 	movw	r3, #0
  1003f8:	e3403000 	movt	r3, #0
  1003fc:	e3530000 	cmp	r3, #0
  100400:	08bd8008 	popeq	{r3, pc}
  100404:	e12fff33 	blx	r3
  100408:	e8bd8008 	pop	{r3, pc}
  10040c:	001204ef 	.word	0x001204ef

00100410 <register_tm_clones>:
  100410:	e92d4008 	push	{r3, lr}
  100414:	e30004ec 	movw	r0, #1260	; 0x4ec
  100418:	e30034ec 	movw	r3, #1260	; 0x4ec
  10041c:	e3400012 	movt	r0, #18
  100420:	e3403012 	movt	r3, #18
  100424:	e0603003 	rsb	r3, r0, r3
  100428:	e1a03143 	asr	r3, r3, #2
  10042c:	e0833fa3 	add	r3, r3, r3, lsr #31
  100430:	e1b010c3 	asrs	r1, r3, #1
  100434:	08bd8008 	popeq	{r3, pc}
  100438:	e3002000 	movw	r2, #0
  10043c:	e3402000 	movt	r2, #0
  100440:	e3520000 	cmp	r2, #0
  100444:	08bd8008 	popeq	{r3, pc}
  100448:	e12fff32 	blx	r2
  10044c:	e8bd8008 	pop	{r3, pc}

00100450 <__do_global_dtors_aux>:
  100450:	e92d4010 	push	{r4, lr}
  100454:	e3084018 	movw	r4, #32792	; 0x8018
  100458:	e3404012 	movt	r4, #18
  10045c:	e5d43000 	ldrb	r3, [r4]
  100460:	e3530000 	cmp	r3, #0
  100464:	18bd8010 	popne	{r4, pc}
  100468:	ebffffda 	bl	1003d8 <deregister_tm_clones>
  10046c:	e3003000 	movw	r3, #0
  100470:	e3403000 	movt	r3, #0
  100474:	e3530000 	cmp	r3, #0
  100478:	0a000002 	beq	100488 <__do_global_dtors_aux+0x38>
  10047c:	e30004ec 	movw	r0, #1260	; 0x4ec
  100480:	e3400012 	movt	r0, #18
  100484:	e320f000 	nop	{0}
  100488:	e3a03001 	mov	r3, #1
  10048c:	e5c43000 	strb	r3, [r4]
  100490:	e8bd8010 	pop	{r4, pc}

00100494 <frame_dummy>:
  100494:	e92d4008 	push	{r3, lr}
  100498:	e3003000 	movw	r3, #0
  10049c:	e3403000 	movt	r3, #0
  1004a0:	e3530000 	cmp	r3, #0
  1004a4:	0a000004 	beq	1004bc <frame_dummy+0x28>
  1004a8:	e30004ec 	movw	r0, #1260	; 0x4ec
  1004ac:	e308101c 	movw	r1, #32796	; 0x801c
  1004b0:	e3400012 	movt	r0, #18
  1004b4:	e3401012 	movt	r1, #18
  1004b8:	e320f000 	nop	{0}
  1004bc:	e30004e8 	movw	r0, #1256	; 0x4e8
  1004c0:	e3400012 	movt	r0, #18
  1004c4:	e5903000 	ldr	r3, [r0]
  1004c8:	e3530000 	cmp	r3, #0
  1004cc:	0a000004 	beq	1004e4 <frame_dummy+0x50>
  1004d0:	e3003000 	movw	r3, #0
  1004d4:	e3403000 	movt	r3, #0
  1004d8:	e3530000 	cmp	r3, #0
  1004dc:	0a000000 	beq	1004e4 <frame_dummy+0x50>
  1004e0:	e12fff33 	blx	r3
  1004e4:	e8bd4008 	pop	{r3, lr}
  1004e8:	eaffffc8 	b	100410 <register_tm_clones>

001004ec <arm_cmplx_dot_prod_f32>:
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t numSamples,
  float32_t * realResult,
  float32_t * imagResult)
{
  1004ec:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp}
  1004f0:	e24dd030 	sub	sp, sp, #48	; 0x30
  1004f4:	e58d200c 	str	r2, [sp, #12]
  acc3 = vdupq_n_f32(0.0f);
  acc4 = vdupq_n_f32(0.0f);

  /* First part of the processing with instrinsics.  Compute 16 outputs at a time.     
   ** second and third loop below computes remaining 1 to 15 samples. */
  while(blkCnt > 0)
  1004f8:	e1b02222 	lsrs	r2, r2, #4
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t numSamples,
  float32_t * realResult,
  float32_t * imagResult)
{
  1004fc:	e1a0b000 	mov	fp, r0
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vdupq_n_f32 (float32_t __a)
{
  return (float32x4_t)__builtin_neon_vdup_nv4sf ((__builtin_neon_sf) __a);
  100500:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
  100504:	e1a05001 	mov	r5, r1
  acc3 = vdupq_n_f32(0.0f);
  acc4 = vdupq_n_f32(0.0f);

  /* First part of the processing with instrinsics.  Compute 16 outputs at a time.     
   ** second and third loop below computes remaining 1 to 15 samples. */
  while(blkCnt > 0)
  100508:	e58d2010 	str	r2, [sp, #16]
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t numSamples,
  float32_t * realResult,
  float32_t * imagResult)
{
  10050c:	e58d3014 	str	r3, [sp, #20]
  100510:	f26061f0 	vorr	q11, q8, q8
  100514:	f26041f0 	vorr	q10, q8, q8
  100518:	f26021f0 	vorr	q9, q8, q8
  acc3 = vdupq_n_f32(0.0f);
  acc4 = vdupq_n_f32(0.0f);

  /* First part of the processing with instrinsics.  Compute 16 outputs at a time.     
   ** second and third loop below computes remaining 1 to 15 samples. */
  while(blkCnt > 0)
  10051c:	0a000038 	beq	100604 <arm_cmplx_dot_prod_f32+0x118>
  100520:	e58d2008 	str	r2, [sp, #8]
  100524:	e1a03001 	mov	r3, r1
  100528:	e1a02000 	mov	r2, r0
  10052c:	e58d0018 	str	r0, [sp, #24]
  100530:	e58d101c 	str	r1, [sp, #28]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  100534:	e1a0c002 	mov	ip, r2
  100538:	e1a01003 	mov	r1, r3
  10053c:	e2820020 	add	r0, r2, #32
  100540:	e2839020 	add	r9, r3, #32
  100544:	f46caa8d 	vld1.32	{d26-d27}, [ip]!
  100548:	e282b030 	add	fp, r2, #48	; 0x30
  10054c:	e283a030 	add	sl, r3, #48	; 0x30
  100550:	e59d7008 	ldr	r7, [sp, #8]
  100554:	f4618a8d 	vld1.32	{d24-d25}, [r1]!
  100558:	e2824050 	add	r4, r2, #80	; 0x50
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)
{
  return (float32x4_t)__builtin_neon_vmlav4sf (__a, __b, __c, 3);
  10055c:	f24a0df8 	vmla.f32	q8, q13, q12
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  100560:	e2828040 	add	r8, r2, #64	; 0x40
  100564:	f46cea8f 	vld1.32	{d30-d31}, [ip]
  100568:	e2577001 	subs	r7, r7, #1
  10056c:	e58d4004 	str	r4, [sp, #4]
  100570:	e2835040 	add	r5, r3, #64	; 0x40
  100574:	f4618a8f 	vld1.32	{d24-d25}, [r1]
  100578:	e2834050 	add	r4, r3, #80	; 0x50
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)
{
  return (float32x4_t)__builtin_neon_vmlav4sf (__a, __b, __c, 3);
  10057c:	f24e6df8 	vmla.f32	q11, q15, q12
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  100580:	e283c060 	add	ip, r3, #96	; 0x60
  100584:	f460ca8f 	vld1.32	{d28-d29}, [r0]
  100588:	e2821060 	add	r1, r2, #96	; 0x60
  10058c:	e58d7008 	str	r7, [sp, #8]
  100590:	e2826070 	add	r6, r2, #112	; 0x70
  100594:	f4698a8f 	vld1.32	{d24-d25}, [r9]
  100598:	e2830070 	add	r0, r3, #112	; 0x70
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)
{
  return (float32x4_t)__builtin_neon_vmlav4sf (__a, __b, __c, 3);
  10059c:	f24c4df8 	vmla.f32	q10, q14, q12
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  1005a0:	e2822080 	add	r2, r2, #128	; 0x80
  1005a4:	f46baa8f 	vld1.32	{d26-d27}, [fp]
  1005a8:	e2833080 	add	r3, r3, #128	; 0x80
  1005ac:	e59d7004 	ldr	r7, [sp, #4]
  1005b0:	f46a8a8f 	vld1.32	{d24-d25}, [sl]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)
{
  return (float32x4_t)__builtin_neon_vmlav4sf (__a, __b, __c, 3);
  1005b4:	f24a2df8 	vmla.f32	q9, q13, q12
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  1005b8:	f4286a8f 	vld1.32	{d6-d7}, [r8]
  1005bc:	f4658a8f 	vld1.32	{d24-d25}, [r5]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)
{
  return (float32x4_t)__builtin_neon_vmlav4sf (__a, __b, __c, 3);
  1005c0:	f2460d78 	vmla.f32	q8, q3, q12
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  1005c4:	f467ea8f 	vld1.32	{d30-d31}, [r7]
  1005c8:	f4648a8f 	vld1.32	{d24-d25}, [r4]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)
{
  return (float32x4_t)__builtin_neon_vmlav4sf (__a, __b, __c, 3);
  1005cc:	f24e6df8 	vmla.f32	q11, q15, q12
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  1005d0:	f461ca8f 	vld1.32	{d28-d29}, [r1]
  1005d4:	f46c8a8f 	vld1.32	{d24-d25}, [ip]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)
{
  return (float32x4_t)__builtin_neon_vmlav4sf (__a, __b, __c, 3);
  1005d8:	f24c4df8 	vmla.f32	q10, q14, q12
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  1005dc:	f466aa8f 	vld1.32	{d26-d27}, [r6]
  1005e0:	f4608a8f 	vld1.32	{d24-d25}, [r0]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)
{
  return (float32x4_t)__builtin_neon_vmlav4sf (__a, __b, __c, 3);
  1005e4:	f24a2df8 	vmla.f32	q9, q13, q12
  1005e8:	1affffd1 	bne	100534 <arm_cmplx_dot_prod_f32+0x48>
 * @param  *realResult real part of the result returned here     
 * @param  *imagResult imaginary part of the result returned here     
 * @return none.     
 */

void arm_cmplx_dot_prod_f32(
  1005ec:	e59d2010 	ldr	r2, [sp, #16]
  1005f0:	e59db018 	ldr	fp, [sp, #24]
  1005f4:	e59d501c 	ldr	r5, [sp, #28]
  1005f8:	e1a03382 	lsl	r3, r2, #7
  1005fc:	e08bb003 	add	fp, fp, r3
  100600:	e0855003 	add	r5, r5, r3
    /* Decrement the loop counter */
    blkCnt--;
  }

  blkCnt = numSamples & 15u;
  blkCnt = blkCnt >> 2u;
  100604:	e59d600c 	ldr	r6, [sp, #12]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vaddq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vaddv4sf (__a, __b, 3);
  100608:	f2400de6 	vadd.f32	q8, q8, q11
  10060c:	f2442de2 	vadd.f32	q9, q10, q9
  100610:	e7e14156 	ubfx	r4, r6, #2, #2

  /* If the blockSize is not a multiple of 16, compute remaining output samples.     
   ** Compute multiple of 4 samples at a time in second loop.  
   ** and remaining 1 to 3 samples in third loop. */

  while(blkCnt > 0)
  100614:	e3540000 	cmp	r4, #0
  100618:	0a000011 	beq	100664 <arm_cmplx_dot_prod_f32+0x178>
  10061c:	e1a0c004 	mov	ip, r4
  100620:	e1a00005 	mov	r0, r5
  100624:	e1a0100b 	mov	r1, fp
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  100628:	e1a02001 	mov	r2, r1
  10062c:	e1a03000 	mov	r3, r0
  100630:	e25cc001 	subs	ip, ip, #1
 * @param  *realResult real part of the result returned here     
 * @param  *imagResult imaginary part of the result returned here     
 * @return none.     
 */

void arm_cmplx_dot_prod_f32(
  100634:	e2811020 	add	r1, r1, #32
  100638:	f4626a8d 	vld1.32	{d22-d23}, [r2]!
  10063c:	e2800020 	add	r0, r0, #32
  100640:	f4634a8d 	vld1.32	{d20-d21}, [r3]!
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)
{
  return (float32x4_t)__builtin_neon_vmlav4sf (__a, __b, __c, 3);
  100644:	f2460df4 	vmla.f32	q8, q11, q10
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  100648:	f4626a8f 	vld1.32	{d22-d23}, [r2]
  10064c:	f4634a8f 	vld1.32	{d20-d21}, [r3]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)
{
  return (float32x4_t)__builtin_neon_vmlav4sf (__a, __b, __c, 3);
  100650:	f2462df4 	vmla.f32	q9, q11, q10

  /* If the blockSize is not a multiple of 16, compute remaining output samples.     
   ** Compute multiple of 4 samples at a time in second loop.  
   ** and remaining 1 to 3 samples in third loop. */

  while(blkCnt > 0)
  100654:	1afffff3 	bne	100628 <arm_cmplx_dot_prod_f32+0x13c>
 * @param  *realResult real part of the result returned here     
 * @param  *imagResult imaginary part of the result returned here     
 * @return none.     
 */

void arm_cmplx_dot_prod_f32(
  100658:	e1a04284 	lsl	r4, r4, #5
  10065c:	e08bb004 	add	fp, fp, r4
  100660:	e0855004 	add	r5, r5, r4
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vaddq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vaddv4sf (__a, __b, 3);
  100664:	f2402de2 	vadd.f32	q9, q8, q9

  blkCnt = numSamples & 3u;

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.     
   ** No intrinsics is used. */
  while(blkCnt > 0)
  100668:	e59d700c 	ldr	r7, [sp, #12]
  10066c:	e2174003 	ands	r4, r7, #3
}

__extension__ static __inline float32_t __attribute__ ((__always_inline__))
vgetq_lane_f32 (float32x4_t __a, const int __b)
{
  return (float32_t)__builtin_neon_vget_lanev4sf (__a, __b, 3);
  100670:	ee133b90 	vmov.32	r3, d19[0]
  100674:	ee337b90 	vmov.32	r7, d19[1]
  100678:	ee122b90 	vmov.32	r2, d18[0]
  10067c:	ee326b90 	vmov.32	r6, d18[1]
  100680:	ee063a10 	vmov	s12, r3
  100684:	ee067a90 	vmov	s13, r7
  100688:	ee072a10 	vmov	s14, r2
  10068c:	ee076a90 	vmov	s15, r6
  /* add 2 accumulators */
  acc1 = vaddq_f32(acc1, acc2);

  /*  (a+bi)(c+di)	= (a*c-b*d) + (a*d+b*c)i */
  /* add and get real result       VMOV.32 r0, d0[0]    */
  real_sum = vgetq_lane_f32(acc1, 0) + vgetq_lane_f32(acc1, 2);
  100690:	ee366a07 	vadd.f32	s12, s12, s14

  /* add and get imaginary result */
  imag_sum = vgetq_lane_f32(acc1, 1) + vgetq_lane_f32(acc1, 3);
  100694:	ee766aa7 	vadd.f32	s13, s13, s15

  blkCnt = numSamples & 3u;

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.     
   ** No intrinsics is used. */
  while(blkCnt > 0)
  100698:	0a000059 	beq	100804 <arm_cmplx_dot_prod_f32+0x318>
  10069c:	e1a030a4 	lsr	r3, r4, #1
 * @param  *realResult real part of the result returned here     
 * @param  *imagResult imaginary part of the result returned here     
 * @return none.     
 */

void arm_cmplx_dot_prod_f32(
  1006a0:	e2231001 	eor	r1, r3, #1
  1006a4:	e1a02083 	lsl	r2, r3, #1
  1006a8:	e3540001 	cmp	r4, #1
  1006ac:	93811001 	orrls	r1, r1, #1
  1006b0:	e3510000 	cmp	r1, #0
  1006b4:	1a000019 	bne	100720 <arm_cmplx_dot_prod_f32+0x234>
   ** No intrinsics is used. */
  while(blkCnt > 0)
  {
    /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
    /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
    real_sum += (*pSrcA++) * (*pSrcB++);
  1006b8:	eddf7a5a 	vldr	s15, [pc, #360]	; 100828 <arm_cmplx_dot_prod_f32+0x33c>
 * @param  *realResult real part of the result returned here     
 * @param  *imagResult imaginary part of the result returned here     
 * @return none.     
 */

void arm_cmplx_dot_prod_f32(
  1006bc:	e1a03203 	lsl	r3, r3, #4
   ** No intrinsics is used. */
  while(blkCnt > 0)
  {
    /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
    /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
    real_sum += (*pSrcA++) * (*pSrcB++);
  1006c0:	f46b4a8f 	vld1.32	{d20-d21}, [fp]
  1006c4:	e1540002 	cmp	r4, r2
  1006c8:	e0624004 	rsb	r4, r2, r4
  1006cc:	e08bb003 	add	fp, fp, r3
  1006d0:	f4652a8f 	vld1.32	{d18-d19}, [r5]
  1006d4:	e0855003 	add	r5, r5, r3
  1006d8:	ed8d6a08 	vstr	s12, [sp, #32]
  1006dc:	edcd6a09 	vstr	s13, [sp, #36]	; 0x24
  1006e0:	edcd7a0a 	vstr	s15, [sp, #40]	; 0x28
  1006e4:	edcd7a0b 	vstr	s15, [sp, #44]	; 0x2c
  1006e8:	eddd0b08 	vldr	d16, [sp, #32]
  1006ec:	eddd1b0a 	vldr	d17, [sp, #40]	; 0x28
  1006f0:	f2440df2 	vmla.f32	q8, q10, q9
  1006f4:	ee112b90 	vmov.32	r2, d17[0]
  1006f8:	ee316b90 	vmov.32	r6, d17[1]
  1006fc:	ee103b90 	vmov.32	r3, d16[0]
  100700:	ee307b90 	vmov.32	r7, d16[1]
  100704:	ee062a10 	vmov	s12, r2
  100708:	ee066a90 	vmov	s13, r6
  10070c:	ee073a10 	vmov	s14, r3
  100710:	ee077a90 	vmov	s15, r7
  100714:	ee366a07 	vadd.f32	s12, s12, s14
  100718:	ee766aa7 	vadd.f32	s13, s13, s15
  10071c:	0a000038 	beq	100804 <arm_cmplx_dot_prod_f32+0x318>
 * @param  *realResult real part of the result returned here     
 * @param  *imagResult imaginary part of the result returned here     
 * @return none.     
 */

void arm_cmplx_dot_prod_f32(
  100720:	e2443001 	sub	r3, r4, #1
  100724:	e3530003 	cmp	r3, #3
  100728:	9a00003c 	bls	100820 <arm_cmplx_dot_prod_f32+0x334>
  10072c:	e28b2020 	add	r2, fp, #32
  100730:	e2851020 	add	r1, r5, #32
  100734:	e28bc01c 	add	ip, fp, #28
  100738:	e285001c 	add	r0, r5, #28
   ** No intrinsics is used. */
  while(blkCnt > 0)
  {
    /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
    /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
    real_sum += (*pSrcA++) * (*pSrcB++);
  10073c:	ed113a08 	vldr	s6, [r1, #-32]	; 0xffffffe0
  100740:	f5d2f060 	pld	[r2, #96]	; 0x60
  100744:	ed127a08 	vldr	s14, [r2, #-32]	; 0xffffffe0
 * @param  *realResult real part of the result returned here     
 * @param  *imagResult imaginary part of the result returned here     
 * @return none.     
 */

void arm_cmplx_dot_prod_f32(
  100748:	e1a0b002 	mov	fp, r2
  {
    /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
    /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
    real_sum += (*pSrcA++) * (*pSrcB++);
    /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
    imag_sum += (*pSrcA++) * (*pSrcB++);
  10074c:	ed503a06 	vldr	s7, [r0, #-24]	; 0xffffffe8
 * @param  *realResult real part of the result returned here     
 * @param  *imagResult imaginary part of the result returned here     
 * @return none.     
 */

void arm_cmplx_dot_prod_f32(
  100750:	e1a05001 	mov	r5, r1
  {
    /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
    /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
    real_sum += (*pSrcA++) * (*pSrcB++);
    /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
    imag_sum += (*pSrcA++) * (*pSrcB++);
  100754:	ed5c7a06 	vldr	s15, [ip, #-24]	; 0xffffffe8
  100758:	e2822020 	add	r2, r2, #32
   ** No intrinsics is used. */
  while(blkCnt > 0)
  {
    /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
    /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
    real_sum += (*pSrcA++) * (*pSrcB++);
  10075c:	ed114a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
  100760:	e2811020 	add	r1, r1, #32
  100764:	ed524a0e 	vldr	s9, [r2, #-56]	; 0xffffffc8
    /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
    imag_sum += (*pSrcA++) * (*pSrcB++);
  100768:	e1a06000 	mov	r6, r0
  10076c:	ed105a04 	vldr	s10, [r0, #-16]
  100770:	e1a0700c 	mov	r7, ip
  100774:	ed5c5a04 	vldr	s11, [ip, #-16]
  100778:	e2443005 	sub	r3, r4, #5
   ** No intrinsics is used. */
  while(blkCnt > 0)
  {
    /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
    /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
    real_sum += (*pSrcA++) * (*pSrcB++);
  10077c:	ee237a07 	vmul.f32	s14, s6, s14
  100780:	e3530003 	cmp	r3, #3
    /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
    imag_sum += (*pSrcA++) * (*pSrcB++);
  100784:	ee637aa7 	vmul.f32	s15, s7, s15

    /* Decrement the loop counter */
    blkCnt--;
  100788:	e2443004 	sub	r3, r4, #4
   ** No intrinsics is used. */
  while(blkCnt > 0)
  {
    /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
    /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
    real_sum += (*pSrcA++) * (*pSrcB++);
  10078c:	ed113a0c 	vldr	s6, [r1, #-48]	; 0xffffffd0
    /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
    imag_sum += (*pSrcA++) * (*pSrcB++);

    /* Decrement the loop counter */
    blkCnt--;
  100790:	e1a04003 	mov	r4, r3
   ** No intrinsics is used. */
  while(blkCnt > 0)
  {
    /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
    /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
    real_sum += (*pSrcA++) * (*pSrcB++);
  100794:	ed523a0c 	vldr	s7, [r2, #-48]	; 0xffffffd0
    /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
    imag_sum += (*pSrcA++) * (*pSrcB++);
  100798:	e2800020 	add	r0, r0, #32
   ** No intrinsics is used. */
  while(blkCnt > 0)
  {
    /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
    /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
    real_sum += (*pSrcA++) * (*pSrcB++);
  10079c:	ee047a24 	vmla.f32	s14, s8, s9
    /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
    imag_sum += (*pSrcA++) * (*pSrcB++);
  1007a0:	e28cc020 	add	ip, ip, #32
  1007a4:	ee457a25 	vmla.f32	s15, s10, s11
  1007a8:	ed105a0a 	vldr	s10, [r0, #-40]	; 0xffffffd8
  1007ac:	ed5c5a0a 	vldr	s11, [ip, #-40]	; 0xffffffd8
   ** No intrinsics is used. */
  while(blkCnt > 0)
  {
    /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
    /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
    real_sum += (*pSrcA++) * (*pSrcB++);
  1007b0:	ed114a0a 	vldr	s8, [r1, #-40]	; 0xffffffd8
  1007b4:	ed524a0a 	vldr	s9, [r2, #-40]	; 0xffffffd8
  1007b8:	ee037a23 	vmla.f32	s14, s6, s7
    /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
    imag_sum += (*pSrcA++) * (*pSrcB++);
  1007bc:	ee457a25 	vmla.f32	s15, s10, s11
  1007c0:	ed965a00 	vldr	s10, [r6]
  1007c4:	edd75a00 	vldr	s11, [r7]
   ** No intrinsics is used. */
  while(blkCnt > 0)
  {
    /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
    /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
    real_sum += (*pSrcA++) * (*pSrcB++);
  1007c8:	ee047a24 	vmla.f32	s14, s8, s9
    /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
    imag_sum += (*pSrcA++) * (*pSrcB++);
  1007cc:	ee457a25 	vmla.f32	s15, s10, s11
   ** No intrinsics is used. */
  while(blkCnt > 0)
  {
    /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
    /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
    real_sum += (*pSrcA++) * (*pSrcB++);
  1007d0:	ee366a07 	vadd.f32	s12, s12, s14
    /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
    imag_sum += (*pSrcA++) * (*pSrcB++);
  1007d4:	ee766aa7 	vadd.f32	s13, s13, s15
  1007d8:	8affffd7 	bhi	10073c <arm_cmplx_dot_prod_f32+0x250>
   ** No intrinsics is used. */
  while(blkCnt > 0)
  {
    /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
    /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
    real_sum += (*pSrcA++) * (*pSrcB++);
  1007dc:	ed9b5a00 	vldr	s10, [fp]
 * @param  *realResult real part of the result returned here     
 * @param  *imagResult imaginary part of the result returned here     
 * @return none.     
 */

void arm_cmplx_dot_prod_f32(
  1007e0:	e28bb008 	add	fp, fp, #8
   ** No intrinsics is used. */
  while(blkCnt > 0)
  {
    /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
    /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
    real_sum += (*pSrcA++) * (*pSrcB++);
  1007e4:	edd55a00 	vldr	s11, [r5]

  blkCnt = numSamples & 3u;

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.     
   ** No intrinsics is used. */
  while(blkCnt > 0)
  1007e8:	e2533001 	subs	r3, r3, #1
  {
    /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
    /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
    real_sum += (*pSrcA++) * (*pSrcB++);
    /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
    imag_sum += (*pSrcA++) * (*pSrcB++);
  1007ec:	ed957a01 	vldr	s14, [r5, #4]
 * @param  *realResult real part of the result returned here     
 * @param  *imagResult imaginary part of the result returned here     
 * @return none.     
 */

void arm_cmplx_dot_prod_f32(
  1007f0:	e2855008 	add	r5, r5, #8
  {
    /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
    /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
    real_sum += (*pSrcA++) * (*pSrcB++);
    /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
    imag_sum += (*pSrcA++) * (*pSrcB++);
  1007f4:	ed5b7a01 	vldr	s15, [fp, #-4]
   ** No intrinsics is used. */
  while(blkCnt > 0)
  {
    /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
    /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
    real_sum += (*pSrcA++) * (*pSrcB++);
  1007f8:	ee056a25 	vmla.f32	s12, s10, s11
    /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
    imag_sum += (*pSrcA++) * (*pSrcB++);
  1007fc:	ee476a27 	vmla.f32	s13, s14, s15

  blkCnt = numSamples & 3u;

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.     
   ** No intrinsics is used. */
  while(blkCnt > 0)
  100800:	1afffff5 	bne	1007dc <arm_cmplx_dot_prod_f32+0x2f0>
    /* Decrement the loop counter */
    blkCnt--;
  }

  /* Store the real and imaginary results in the destination buffers */
  *realResult = real_sum;
  100804:	e59d2014 	ldr	r2, [sp, #20]
  *imagResult = imag_sum;
  100808:	e59d3050 	ldr	r3, [sp, #80]	; 0x50
    /* Decrement the loop counter */
    blkCnt--;
  }

  /* Store the real and imaginary results in the destination buffers */
  *realResult = real_sum;
  10080c:	ed826a00 	vstr	s12, [r2]
  *imagResult = imag_sum;
  100810:	edc36a00 	vstr	s13, [r3]
}
  100814:	e28dd030 	add	sp, sp, #48	; 0x30
  100818:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
  10081c:	e12fff1e 	bx	lr
 * @param  *realResult real part of the result returned here     
 * @param  *imagResult imaginary part of the result returned here     
 * @return none.     
 */

void arm_cmplx_dot_prod_f32(
  100820:	e1a03004 	mov	r3, r4
  100824:	eaffffec 	b	1007dc <arm_cmplx_dot_prod_f32+0x2f0>
  100828:	00000000 	.word	0x00000000

0010082c <arm_cmplx_dot_prod_f322>:
   float32_t * pSrcA,
   float32_t * pSrcB,
   uint32_t numSamples,
   float32_t * realResult,
   float32_t * imagResult)
 {
  10082c:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp}
  100830:	e24dd030 	sub	sp, sp, #48	; 0x30
  100834:	e58d200c 	str	r2, [sp, #12]
   acc3 = vdupq_n_f32(0.0f);
   acc4 = vdupq_n_f32(0.0f);
 
   /* First part of the processing with instrinsics.  Compute 16 outputs at a time. 	
	** second and third loop below computes remaining 1 to 15 samples. */
   while(blkCnt > 0)
  100838:	e1b02222 	lsrs	r2, r2, #4
   float32_t * pSrcA,
   float32_t * pSrcB,
   uint32_t numSamples,
   float32_t * realResult,
   float32_t * imagResult)
 {
  10083c:	e1a0b000 	mov	fp, r0
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vdupq_n_f32 (float32_t __a)
{
  return (float32x4_t)__builtin_neon_vdup_nv4sf ((__builtin_neon_sf) __a);
  100840:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
  100844:	e1a05001 	mov	r5, r1
   acc3 = vdupq_n_f32(0.0f);
   acc4 = vdupq_n_f32(0.0f);
 
   /* First part of the processing with instrinsics.  Compute 16 outputs at a time. 	
	** second and third loop below computes remaining 1 to 15 samples. */
   while(blkCnt > 0)
  100848:	e58d2010 	str	r2, [sp, #16]
   float32_t * pSrcA,
   float32_t * pSrcB,
   uint32_t numSamples,
   float32_t * realResult,
   float32_t * imagResult)
 {
  10084c:	e58d3014 	str	r3, [sp, #20]
  100850:	f26061f0 	vorr	q11, q8, q8
  100854:	f26041f0 	vorr	q10, q8, q8
  100858:	f26021f0 	vorr	q9, q8, q8
   acc3 = vdupq_n_f32(0.0f);
   acc4 = vdupq_n_f32(0.0f);
 
   /* First part of the processing with instrinsics.  Compute 16 outputs at a time. 	
	** second and third loop below computes remaining 1 to 15 samples. */
   while(blkCnt > 0)
  10085c:	0a000038 	beq	100944 <arm_cmplx_dot_prod_f322+0x118>
  100860:	e58d2008 	str	r2, [sp, #8]
  100864:	e1a03001 	mov	r3, r1
  100868:	e1a02000 	mov	r2, r0
  10086c:	e58d0018 	str	r0, [sp, #24]
  100870:	e58d101c 	str	r1, [sp, #28]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  100874:	e1a0c002 	mov	ip, r2
  100878:	e1a01003 	mov	r1, r3
  10087c:	e2820020 	add	r0, r2, #32
  100880:	e2839020 	add	r9, r3, #32
  100884:	f46caa8d 	vld1.32	{d26-d27}, [ip]!
  100888:	e282b030 	add	fp, r2, #48	; 0x30
  10088c:	e283a030 	add	sl, r3, #48	; 0x30
  100890:	e59d7008 	ldr	r7, [sp, #8]
  100894:	f4618a8d 	vld1.32	{d24-d25}, [r1]!
  100898:	e2824050 	add	r4, r2, #80	; 0x50
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)
{
  return (float32x4_t)__builtin_neon_vmlav4sf (__a, __b, __c, 3);
  10089c:	f24a0df8 	vmla.f32	q8, q13, q12
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  1008a0:	e2828040 	add	r8, r2, #64	; 0x40
  1008a4:	f46cea8f 	vld1.32	{d30-d31}, [ip]
  1008a8:	e2577001 	subs	r7, r7, #1
  1008ac:	e58d4004 	str	r4, [sp, #4]
  1008b0:	e2835040 	add	r5, r3, #64	; 0x40
  1008b4:	f4618a8f 	vld1.32	{d24-d25}, [r1]
  1008b8:	e2834050 	add	r4, r3, #80	; 0x50
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)
{
  return (float32x4_t)__builtin_neon_vmlav4sf (__a, __b, __c, 3);
  1008bc:	f24e6df8 	vmla.f32	q11, q15, q12
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  1008c0:	e283c060 	add	ip, r3, #96	; 0x60
  1008c4:	f460ca8f 	vld1.32	{d28-d29}, [r0]
  1008c8:	e2821060 	add	r1, r2, #96	; 0x60
  1008cc:	e58d7008 	str	r7, [sp, #8]
  1008d0:	e2826070 	add	r6, r2, #112	; 0x70
  1008d4:	f4698a8f 	vld1.32	{d24-d25}, [r9]
  1008d8:	e2830070 	add	r0, r3, #112	; 0x70
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)
{
  return (float32x4_t)__builtin_neon_vmlav4sf (__a, __b, __c, 3);
  1008dc:	f24c4df8 	vmla.f32	q10, q14, q12
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  1008e0:	e2822080 	add	r2, r2, #128	; 0x80
  1008e4:	f46baa8f 	vld1.32	{d26-d27}, [fp]
  1008e8:	e2833080 	add	r3, r3, #128	; 0x80
  1008ec:	e59d7004 	ldr	r7, [sp, #4]
  1008f0:	f46a8a8f 	vld1.32	{d24-d25}, [sl]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)
{
  return (float32x4_t)__builtin_neon_vmlav4sf (__a, __b, __c, 3);
  1008f4:	f24a2df8 	vmla.f32	q9, q13, q12
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  1008f8:	f4286a8f 	vld1.32	{d6-d7}, [r8]
  1008fc:	f4658a8f 	vld1.32	{d24-d25}, [r5]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)
{
  return (float32x4_t)__builtin_neon_vmlav4sf (__a, __b, __c, 3);
  100900:	f2460d78 	vmla.f32	q8, q3, q12
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  100904:	f467ea8f 	vld1.32	{d30-d31}, [r7]
  100908:	f4648a8f 	vld1.32	{d24-d25}, [r4]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)
{
  return (float32x4_t)__builtin_neon_vmlav4sf (__a, __b, __c, 3);
  10090c:	f24e6df8 	vmla.f32	q11, q15, q12
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  100910:	f461ca8f 	vld1.32	{d28-d29}, [r1]
  100914:	f46c8a8f 	vld1.32	{d24-d25}, [ip]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)
{
  return (float32x4_t)__builtin_neon_vmlav4sf (__a, __b, __c, 3);
  100918:	f24c4df8 	vmla.f32	q10, q14, q12
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  10091c:	f466aa8f 	vld1.32	{d26-d27}, [r6]
  100920:	f4608a8f 	vld1.32	{d24-d25}, [r0]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)
{
  return (float32x4_t)__builtin_neon_vmlav4sf (__a, __b, __c, 3);
  100924:	f24a2df8 	vmla.f32	q9, q13, q12
  100928:	1affffd1 	bne	100874 <arm_cmplx_dot_prod_f322+0x48>
  * @param	*realResult real part of the result returned here	  
  * @param	*imagResult imaginary part of the result returned here	   
  * @return none.	  
  */
 
 void arm_cmplx_dot_prod_f322(
  10092c:	e59d2010 	ldr	r2, [sp, #16]
  100930:	e59db018 	ldr	fp, [sp, #24]
  100934:	e59d501c 	ldr	r5, [sp, #28]
  100938:	e1a03382 	lsl	r3, r2, #7
  10093c:	e08bb003 	add	fp, fp, r3
  100940:	e0855003 	add	r5, r5, r3
	 /* Decrement the loop counter */
	 blkCnt--;
   }
 
   blkCnt = numSamples & 15u;
   blkCnt = blkCnt >> 2u;
  100944:	e59d600c 	ldr	r6, [sp, #12]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vaddq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vaddv4sf (__a, __b, 3);
  100948:	f2400de6 	vadd.f32	q8, q8, q11
  10094c:	f2442de2 	vadd.f32	q9, q10, q9
  100950:	e7e14156 	ubfx	r4, r6, #2, #2
 
   /* If the blockSize is not a multiple of 16, compute remaining output samples.	  
	** Compute multiple of 4 samples at a time in second loop.	
	** and remaining 1 to 3 samples in third loop. */
 
   while(blkCnt > 0)
  100954:	e3540000 	cmp	r4, #0
  100958:	0a000011 	beq	1009a4 <arm_cmplx_dot_prod_f322+0x178>
  10095c:	e1a0c004 	mov	ip, r4
  100960:	e1a00005 	mov	r0, r5
  100964:	e1a0100b 	mov	r1, fp
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  100968:	e1a02001 	mov	r2, r1
  10096c:	e1a03000 	mov	r3, r0
  100970:	e25cc001 	subs	ip, ip, #1
  * @param	*realResult real part of the result returned here	  
  * @param	*imagResult imaginary part of the result returned here	   
  * @return none.	  
  */
 
 void arm_cmplx_dot_prod_f322(
  100974:	e2811020 	add	r1, r1, #32
  100978:	f4626a8d 	vld1.32	{d22-d23}, [r2]!
  10097c:	e2800020 	add	r0, r0, #32
  100980:	f4634a8d 	vld1.32	{d20-d21}, [r3]!
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)
{
  return (float32x4_t)__builtin_neon_vmlav4sf (__a, __b, __c, 3);
  100984:	f2460df4 	vmla.f32	q8, q11, q10
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  100988:	f4626a8f 	vld1.32	{d22-d23}, [r2]
  10098c:	f4634a8f 	vld1.32	{d20-d21}, [r3]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)
{
  return (float32x4_t)__builtin_neon_vmlav4sf (__a, __b, __c, 3);
  100990:	f2462df4 	vmla.f32	q9, q11, q10
 
   /* If the blockSize is not a multiple of 16, compute remaining output samples.	  
	** Compute multiple of 4 samples at a time in second loop.	
	** and remaining 1 to 3 samples in third loop. */
 
   while(blkCnt > 0)
  100994:	1afffff3 	bne	100968 <arm_cmplx_dot_prod_f322+0x13c>
  * @param	*realResult real part of the result returned here	  
  * @param	*imagResult imaginary part of the result returned here	   
  * @return none.	  
  */
 
 void arm_cmplx_dot_prod_f322(
  100998:	e1a04284 	lsl	r4, r4, #5
  10099c:	e08bb004 	add	fp, fp, r4
  1009a0:	e0855004 	add	r5, r5, r4
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vaddq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vaddv4sf (__a, __b, 3);
  1009a4:	f2402de2 	vadd.f32	q9, q8, q9
 
   blkCnt = numSamples & 3u;
 
   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.	  
	** No intrinsics is used. */
   while(blkCnt > 0)
  1009a8:	e59d700c 	ldr	r7, [sp, #12]
  1009ac:	e2174003 	ands	r4, r7, #3
}

__extension__ static __inline float32_t __attribute__ ((__always_inline__))
vgetq_lane_f32 (float32x4_t __a, const int __b)
{
  return (float32_t)__builtin_neon_vget_lanev4sf (__a, __b, 3);
  1009b0:	ee133b90 	vmov.32	r3, d19[0]
  1009b4:	ee337b90 	vmov.32	r7, d19[1]
  1009b8:	ee122b90 	vmov.32	r2, d18[0]
  1009bc:	ee326b90 	vmov.32	r6, d18[1]
  1009c0:	ee063a10 	vmov	s12, r3
  1009c4:	ee067a90 	vmov	s13, r7
  1009c8:	ee072a10 	vmov	s14, r2
  1009cc:	ee076a90 	vmov	s15, r6
   /* add 2 accumulators */
   acc1 = vaddq_f32(acc1, acc2);
 
   /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
   /* add and get real result		VMOV.32 r0, d0[0]	 */
   real_sum = vgetq_lane_f32(acc1, 0) + vgetq_lane_f32(acc1, 2);
  1009d0:	ee366a07 	vadd.f32	s12, s12, s14
 
   /* add and get imaginary result */
   imag_sum = vgetq_lane_f32(acc1, 1) + vgetq_lane_f32(acc1, 3);
  1009d4:	ee766aa7 	vadd.f32	s13, s13, s15
 
   blkCnt = numSamples & 3u;
 
   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.	  
	** No intrinsics is used. */
   while(blkCnt > 0)
  1009d8:	0a000059 	beq	100b44 <arm_cmplx_dot_prod_f322+0x318>
  1009dc:	e1a030a4 	lsr	r3, r4, #1
  * @param	*realResult real part of the result returned here	  
  * @param	*imagResult imaginary part of the result returned here	   
  * @return none.	  
  */
 
 void arm_cmplx_dot_prod_f322(
  1009e0:	e2231001 	eor	r1, r3, #1
  1009e4:	e1a02083 	lsl	r2, r3, #1
  1009e8:	e3540001 	cmp	r4, #1
  1009ec:	93811001 	orrls	r1, r1, #1
  1009f0:	e3510000 	cmp	r1, #0
  1009f4:	1a000019 	bne	100a60 <arm_cmplx_dot_prod_f322+0x234>
	** No intrinsics is used. */
   while(blkCnt > 0)
   {
	 /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
	 /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
	 real_sum += (*pSrcA++) * (*pSrcB++);
  1009f8:	eddf7a5a 	vldr	s15, [pc, #360]	; 100b68 <arm_cmplx_dot_prod_f322+0x33c>
  * @param	*realResult real part of the result returned here	  
  * @param	*imagResult imaginary part of the result returned here	   
  * @return none.	  
  */
 
 void arm_cmplx_dot_prod_f322(
  1009fc:	e1a03203 	lsl	r3, r3, #4
	** No intrinsics is used. */
   while(blkCnt > 0)
   {
	 /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
	 /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
	 real_sum += (*pSrcA++) * (*pSrcB++);
  100a00:	f46b4a8f 	vld1.32	{d20-d21}, [fp]
  100a04:	e1540002 	cmp	r4, r2
  100a08:	e0624004 	rsb	r4, r2, r4
  100a0c:	e08bb003 	add	fp, fp, r3
  100a10:	f4652a8f 	vld1.32	{d18-d19}, [r5]
  100a14:	e0855003 	add	r5, r5, r3
  100a18:	ed8d6a08 	vstr	s12, [sp, #32]
  100a1c:	edcd6a09 	vstr	s13, [sp, #36]	; 0x24
  100a20:	edcd7a0a 	vstr	s15, [sp, #40]	; 0x28
  100a24:	edcd7a0b 	vstr	s15, [sp, #44]	; 0x2c
  100a28:	eddd0b08 	vldr	d16, [sp, #32]
  100a2c:	eddd1b0a 	vldr	d17, [sp, #40]	; 0x28
  100a30:	f2440df2 	vmla.f32	q8, q10, q9
  100a34:	ee112b90 	vmov.32	r2, d17[0]
  100a38:	ee316b90 	vmov.32	r6, d17[1]
  100a3c:	ee103b90 	vmov.32	r3, d16[0]
  100a40:	ee307b90 	vmov.32	r7, d16[1]
  100a44:	ee062a10 	vmov	s12, r2
  100a48:	ee066a90 	vmov	s13, r6
  100a4c:	ee073a10 	vmov	s14, r3
  100a50:	ee077a90 	vmov	s15, r7
  100a54:	ee366a07 	vadd.f32	s12, s12, s14
  100a58:	ee766aa7 	vadd.f32	s13, s13, s15
  100a5c:	0a000038 	beq	100b44 <arm_cmplx_dot_prod_f322+0x318>
  * @param	*realResult real part of the result returned here	  
  * @param	*imagResult imaginary part of the result returned here	   
  * @return none.	  
  */
 
 void arm_cmplx_dot_prod_f322(
  100a60:	e2443001 	sub	r3, r4, #1
  100a64:	e3530003 	cmp	r3, #3
  100a68:	9a00003c 	bls	100b60 <arm_cmplx_dot_prod_f322+0x334>
  100a6c:	e28b2020 	add	r2, fp, #32
  100a70:	e2851020 	add	r1, r5, #32
  100a74:	e28bc01c 	add	ip, fp, #28
  100a78:	e285001c 	add	r0, r5, #28
	** No intrinsics is used. */
   while(blkCnt > 0)
   {
	 /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
	 /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
	 real_sum += (*pSrcA++) * (*pSrcB++);
  100a7c:	ed113a08 	vldr	s6, [r1, #-32]	; 0xffffffe0
  100a80:	f5d2f060 	pld	[r2, #96]	; 0x60
  100a84:	ed127a08 	vldr	s14, [r2, #-32]	; 0xffffffe0
  * @param	*realResult real part of the result returned here	  
  * @param	*imagResult imaginary part of the result returned here	   
  * @return none.	  
  */
 
 void arm_cmplx_dot_prod_f322(
  100a88:	e1a0b002 	mov	fp, r2
   {
	 /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
	 /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
	 real_sum += (*pSrcA++) * (*pSrcB++);
	 /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
	 imag_sum += (*pSrcA++) * (*pSrcB++);
  100a8c:	ed503a06 	vldr	s7, [r0, #-24]	; 0xffffffe8
  * @param	*realResult real part of the result returned here	  
  * @param	*imagResult imaginary part of the result returned here	   
  * @return none.	  
  */
 
 void arm_cmplx_dot_prod_f322(
  100a90:	e1a05001 	mov	r5, r1
   {
	 /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
	 /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
	 real_sum += (*pSrcA++) * (*pSrcB++);
	 /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
	 imag_sum += (*pSrcA++) * (*pSrcB++);
  100a94:	ed5c7a06 	vldr	s15, [ip, #-24]	; 0xffffffe8
  100a98:	e2822020 	add	r2, r2, #32
	** No intrinsics is used. */
   while(blkCnt > 0)
   {
	 /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
	 /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
	 real_sum += (*pSrcA++) * (*pSrcB++);
  100a9c:	ed114a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
  100aa0:	e2811020 	add	r1, r1, #32
  100aa4:	ed524a0e 	vldr	s9, [r2, #-56]	; 0xffffffc8
	 /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
	 imag_sum += (*pSrcA++) * (*pSrcB++);
  100aa8:	e1a06000 	mov	r6, r0
  100aac:	ed105a04 	vldr	s10, [r0, #-16]
  100ab0:	e1a0700c 	mov	r7, ip
  100ab4:	ed5c5a04 	vldr	s11, [ip, #-16]
  100ab8:	e2443005 	sub	r3, r4, #5
	** No intrinsics is used. */
   while(blkCnt > 0)
   {
	 /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
	 /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
	 real_sum += (*pSrcA++) * (*pSrcB++);
  100abc:	ee237a07 	vmul.f32	s14, s6, s14
  100ac0:	e3530003 	cmp	r3, #3
	 /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
	 imag_sum += (*pSrcA++) * (*pSrcB++);
  100ac4:	ee637aa7 	vmul.f32	s15, s7, s15
 
	 /* Decrement the loop counter */
	 blkCnt--;
  100ac8:	e2443004 	sub	r3, r4, #4
	** No intrinsics is used. */
   while(blkCnt > 0)
   {
	 /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
	 /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
	 real_sum += (*pSrcA++) * (*pSrcB++);
  100acc:	ed113a0c 	vldr	s6, [r1, #-48]	; 0xffffffd0
	 /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
	 imag_sum += (*pSrcA++) * (*pSrcB++);
 
	 /* Decrement the loop counter */
	 blkCnt--;
  100ad0:	e1a04003 	mov	r4, r3
	** No intrinsics is used. */
   while(blkCnt > 0)
   {
	 /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
	 /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
	 real_sum += (*pSrcA++) * (*pSrcB++);
  100ad4:	ed523a0c 	vldr	s7, [r2, #-48]	; 0xffffffd0
	 /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
	 imag_sum += (*pSrcA++) * (*pSrcB++);
  100ad8:	e2800020 	add	r0, r0, #32
	** No intrinsics is used. */
   while(blkCnt > 0)
   {
	 /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
	 /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
	 real_sum += (*pSrcA++) * (*pSrcB++);
  100adc:	ee047a24 	vmla.f32	s14, s8, s9
	 /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
	 imag_sum += (*pSrcA++) * (*pSrcB++);
  100ae0:	e28cc020 	add	ip, ip, #32
  100ae4:	ee457a25 	vmla.f32	s15, s10, s11
  100ae8:	ed105a0a 	vldr	s10, [r0, #-40]	; 0xffffffd8
  100aec:	ed5c5a0a 	vldr	s11, [ip, #-40]	; 0xffffffd8
	** No intrinsics is used. */
   while(blkCnt > 0)
   {
	 /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
	 /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
	 real_sum += (*pSrcA++) * (*pSrcB++);
  100af0:	ed114a0a 	vldr	s8, [r1, #-40]	; 0xffffffd8
  100af4:	ed524a0a 	vldr	s9, [r2, #-40]	; 0xffffffd8
  100af8:	ee037a23 	vmla.f32	s14, s6, s7
	 /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
	 imag_sum += (*pSrcA++) * (*pSrcB++);
  100afc:	ee457a25 	vmla.f32	s15, s10, s11
  100b00:	ed965a00 	vldr	s10, [r6]
  100b04:	edd75a00 	vldr	s11, [r7]
	** No intrinsics is used. */
   while(blkCnt > 0)
   {
	 /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
	 /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
	 real_sum += (*pSrcA++) * (*pSrcB++);
  100b08:	ee047a24 	vmla.f32	s14, s8, s9
	 /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
	 imag_sum += (*pSrcA++) * (*pSrcB++);
  100b0c:	ee457a25 	vmla.f32	s15, s10, s11
	** No intrinsics is used. */
   while(blkCnt > 0)
   {
	 /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
	 /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
	 real_sum += (*pSrcA++) * (*pSrcB++);
  100b10:	ee366a07 	vadd.f32	s12, s12, s14
	 /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
	 imag_sum += (*pSrcA++) * (*pSrcB++);
  100b14:	ee766aa7 	vadd.f32	s13, s13, s15
  100b18:	8affffd7 	bhi	100a7c <arm_cmplx_dot_prod_f322+0x250>
	** No intrinsics is used. */
   while(blkCnt > 0)
   {
	 /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
	 /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
	 real_sum += (*pSrcA++) * (*pSrcB++);
  100b1c:	ed9b5a00 	vldr	s10, [fp]
  * @param	*realResult real part of the result returned here	  
  * @param	*imagResult imaginary part of the result returned here	   
  * @return none.	  
  */
 
 void arm_cmplx_dot_prod_f322(
  100b20:	e28bb008 	add	fp, fp, #8
	** No intrinsics is used. */
   while(blkCnt > 0)
   {
	 /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
	 /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
	 real_sum += (*pSrcA++) * (*pSrcB++);
  100b24:	edd55a00 	vldr	s11, [r5]
 
   blkCnt = numSamples & 3u;
 
   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.	  
	** No intrinsics is used. */
   while(blkCnt > 0)
  100b28:	e2533001 	subs	r3, r3, #1
   {
	 /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
	 /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
	 real_sum += (*pSrcA++) * (*pSrcB++);
	 /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
	 imag_sum += (*pSrcA++) * (*pSrcB++);
  100b2c:	ed957a01 	vldr	s14, [r5, #4]
  * @param	*realResult real part of the result returned here	  
  * @param	*imagResult imaginary part of the result returned here	   
  * @return none.	  
  */
 
 void arm_cmplx_dot_prod_f322(
  100b30:	e2855008 	add	r5, r5, #8
   {
	 /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
	 /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
	 real_sum += (*pSrcA++) * (*pSrcB++);
	 /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
	 imag_sum += (*pSrcA++) * (*pSrcB++);
  100b34:	ed5b7a01 	vldr	s15, [fp, #-4]
	** No intrinsics is used. */
   while(blkCnt > 0)
   {
	 /*  (a+bi)(c+di)  = (a*c-b*d) + (a*d+b*c)i */
	 /* CReal = A[0]* B[0] + A[2]* B[2] + A[4]* B[4] + .....+ A[numSamples-2]* B[numSamples-2] */
	 real_sum += (*pSrcA++) * (*pSrcB++);
  100b38:	ee056a25 	vmla.f32	s12, s10, s11
	 /* CImag = A[1]* B[1] + A[3]* B[3] + A[5]* B[5] + .....+ A[numSamples-1]* B[numSamples-1] */
	 imag_sum += (*pSrcA++) * (*pSrcB++);
  100b3c:	ee476a27 	vmla.f32	s13, s14, s15
 
   blkCnt = numSamples & 3u;
 
   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.	  
	** No intrinsics is used. */
   while(blkCnt > 0)
  100b40:	1afffff5 	bne	100b1c <arm_cmplx_dot_prod_f322+0x2f0>
	 /* Decrement the loop counter */
	 blkCnt--;
   }
 
   /* Store the real and imaginary results in the destination buffers */
   *realResult = real_sum;
  100b44:	e59d2014 	ldr	r2, [sp, #20]
   *imagResult = imag_sum;
  100b48:	e59d3050 	ldr	r3, [sp, #80]	; 0x50
	 /* Decrement the loop counter */
	 blkCnt--;
   }
 
   /* Store the real and imaginary results in the destination buffers */
   *realResult = real_sum;
  100b4c:	ed826a00 	vstr	s12, [r2]
   *imagResult = imag_sum;
  100b50:	edc36a00 	vstr	s13, [r3]
 }
  100b54:	e28dd030 	add	sp, sp, #48	; 0x30
  100b58:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
  100b5c:	e12fff1e 	bx	lr
  * @param	*realResult real part of the result returned here	  
  * @param	*imagResult imaginary part of the result returned here	   
  * @return none.	  
  */
 
 void arm_cmplx_dot_prod_f322(
  100b60:	e1a03004 	mov	r3, r4
  100b64:	eaffffec 	b	100b1c <arm_cmplx_dot_prod_f322+0x2f0>
  100b68:	00000000 	.word	0x00000000

00100b6c <test_arm_cmplx_dot_prod_f32>:
** ------------------------------------------------------------------- */   
   
float snr_real, snr_imag;  /* Signal-to-Noise Ratio for real and imaginary outputs */  
  
arm_status test_arm_cmplx_dot_prod_f32( void )   
{   
  100b6c:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
  {   
	  /* points to each configuration */  
      config = &CONFIG[i];   
         
      /* Process the data through the Complex Dot Product */   
      arm_cmplx_dot_prod_f32_test_render(config->inputAF32, config->inputBF32,   
  100b70:	e3074d70 	movw	r4, #32112	; 0x7d70
	  		config->blockSize, testOutput_real, testOutput_imag);   
  100b74:	e59f52ec 	ldr	r5, [pc, #748]	; 100e68 <test_arm_cmplx_dot_prod_f32+0x2fc>
  {   
	  /* points to each configuration */  
      config = &CONFIG[i];   
         
      /* Process the data through the Complex Dot Product */   
      arm_cmplx_dot_prod_f32_test_render(config->inputAF32, config->inputBF32,   
  100b78:	e3404011 	movt	r4, #17
	  		config->blockSize, testOutput_real, testOutput_imag);   
   
      /* compare the Real parts of final result with the reference output */   
      snr_real = arm_snr_f32(&config->outputF32_real, &testOutput_real[0], 1);   
  100b7c:	e3086090 	movw	r6, #32912	; 0x8090
** ------------------------------------------------------------------- */   
   
float snr_real, snr_imag;  /* Signal-to-Noise Ratio for real and imaginary outputs */  
  
arm_status test_arm_cmplx_dot_prod_f32( void )   
{   
  100b80:	ed2d8b02 	vpush	{d8}
  100b84:	e24dd00c 	sub	sp, sp, #12
   
      /* compare the Real parts of final result with the reference output */   
      snr_real = arm_snr_f32(&config->outputF32_real, &testOutput_real[0], 1);   
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_real < SNR_THRESHOLD)   
  100b88:	ed9f8ab5 	vldr	s16, [pc, #724]	; 100e64 <test_arm_cmplx_dot_prod_f32+0x2f8>
 
	/* ----------------------------------------------------------------------   
	** Call the Complex Dot Product process function     
	** ------------------------------------------------------------------- */   
	   
	arm_cmplx_dot_prod_f32(A, B, blockSize, realResult, imagResult);   
  100b8c:	e2453008 	sub	r3, r5, #8
  100b90:	e5940000 	ldr	r0, [r4]
      /* Process the data through the Complex Dot Product */   
      arm_cmplx_dot_prod_f32_test_render(config->inputAF32, config->inputBF32,   
	  		config->blockSize, testOutput_real, testOutput_imag);   
   
      /* compare the Real parts of final result with the reference output */   
      snr_real = arm_snr_f32(&config->outputF32_real, &testOutput_real[0], 1);   
  100b94:	e3406012 	movt	r6, #18
 
	/* ----------------------------------------------------------------------   
	** Call the Complex Dot Product process function     
	** ------------------------------------------------------------------- */   
	   
	arm_cmplx_dot_prod_f32(A, B, blockSize, realResult, imagResult);   
  100b98:	e5941004 	ldr	r1, [r4, #4]
  100b9c:	e5942010 	ldr	r2, [r4, #16]
  100ba0:	e58d5000 	str	r5, [sp]
  100ba4:	ebfffe50 	bl	1004ec <arm_cmplx_dot_prod_f32>
      /* Process the data through the Complex Dot Product */   
      arm_cmplx_dot_prod_f32_test_render(config->inputAF32, config->inputBF32,   
	  		config->blockSize, testOutput_real, testOutput_imag);   
   
      /* compare the Real parts of final result with the reference output */   
      snr_real = arm_snr_f32(&config->outputF32_real, &testOutput_real[0], 1);   
  100ba8:	e2840008 	add	r0, r4, #8
  100bac:	e2451008 	sub	r1, r5, #8
  100bb0:	e3a02001 	mov	r2, #1
  100bb4:	eb00061f 	bl	102438 <arm_snr_f32>
  100bb8:	ee070a90 	vmov	s15, r0
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_real < SNR_THRESHOLD)   
  100bbc:	eef47ac8 	vcmpe.f32	s15, s16
  100bc0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
      /* Process the data through the Complex Dot Product */   
      arm_cmplx_dot_prod_f32_test_render(config->inputAF32, config->inputBF32,   
	  		config->blockSize, testOutput_real, testOutput_imag);   
   
      /* compare the Real parts of final result with the reference output */   
      snr_real = arm_snr_f32(&config->outputF32_real, &testOutput_real[0], 1);   
  100bc4:	e5860000 	str	r0, [r6]
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_real < SNR_THRESHOLD)   
  100bc8:	4a0000a3 	bmi	100e5c <test_arm_cmplx_dot_prod_f32+0x2f0>
		   return the status as ARM_MATH_TEST_FAILURE */  
	  	return(ARM_MATH_TEST_FAILURE); 			   
	  }   
  
	  /* compare the Imaginary parts of final result with the reference output */  
	  snr_imag = arm_snr_f32(&config->outputF32_imag, &testOutput_imag[0], 1);   
  100bcc:	e284000c 	add	r0, r4, #12
  100bd0:	e1a01005 	mov	r1, r5
  100bd4:	e3a02001 	mov	r2, #1
  100bd8:	e308708c 	movw	r7, #32908	; 0x808c
  100bdc:	eb000615 	bl	102438 <arm_snr_f32>
  100be0:	ee070a90 	vmov	s15, r0
  100be4:	e3407012 	movt	r7, #18
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_imag < SNR_THRESHOLD)   
  100be8:	eef47ac8 	vcmpe.f32	s15, s16
  100bec:	eef1fa10 	vmrs	APSR_nzcv, fpscr
		   return the status as ARM_MATH_TEST_FAILURE */  
	  	return(ARM_MATH_TEST_FAILURE); 			   
	  }   
  
	  /* compare the Imaginary parts of final result with the reference output */  
	  snr_imag = arm_snr_f32(&config->outputF32_imag, &testOutput_imag[0], 1);   
  100bf0:	e5870000 	str	r0, [r7]
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_imag < SNR_THRESHOLD)   
  100bf4:	4a000098 	bmi	100e5c <test_arm_cmplx_dot_prod_f32+0x2f0>
 
	/* ----------------------------------------------------------------------   
	** Call the Complex Dot Product process function     
	** ------------------------------------------------------------------- */   
	   
	arm_cmplx_dot_prod_f32(A, B, blockSize, realResult, imagResult);   
  100bf8:	e5940014 	ldr	r0, [r4, #20]
  100bfc:	e2453008 	sub	r3, r5, #8
  100c00:	e5941018 	ldr	r1, [r4, #24]
  100c04:	e5942024 	ldr	r2, [r4, #36]	; 0x24
  100c08:	e58d5000 	str	r5, [sp]
  100c0c:	ebfffe36 	bl	1004ec <arm_cmplx_dot_prod_f32>
      /* Process the data through the Complex Dot Product */   
      arm_cmplx_dot_prod_f32_test_render(config->inputAF32, config->inputBF32,   
	  		config->blockSize, testOutput_real, testOutput_imag);   
   
      /* compare the Real parts of final result with the reference output */   
      snr_real = arm_snr_f32(&config->outputF32_real, &testOutput_real[0], 1);   
  100c10:	e284001c 	add	r0, r4, #28
  100c14:	e2451008 	sub	r1, r5, #8
  100c18:	e3a02001 	mov	r2, #1
  100c1c:	eb000605 	bl	102438 <arm_snr_f32>
  100c20:	ee070a90 	vmov	s15, r0
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_real < SNR_THRESHOLD)   
  100c24:	eef47ac8 	vcmpe.f32	s15, s16
  100c28:	eef1fa10 	vmrs	APSR_nzcv, fpscr
      /* Process the data through the Complex Dot Product */   
      arm_cmplx_dot_prod_f32_test_render(config->inputAF32, config->inputBF32,   
	  		config->blockSize, testOutput_real, testOutput_imag);   
   
      /* compare the Real parts of final result with the reference output */   
      snr_real = arm_snr_f32(&config->outputF32_real, &testOutput_real[0], 1);   
  100c2c:	e5860000 	str	r0, [r6]
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_real < SNR_THRESHOLD)   
  100c30:	4a000089 	bmi	100e5c <test_arm_cmplx_dot_prod_f32+0x2f0>
		   return the status as ARM_MATH_TEST_FAILURE */  
	  	return(ARM_MATH_TEST_FAILURE); 			   
	  }   
  
	  /* compare the Imaginary parts of final result with the reference output */  
	  snr_imag = arm_snr_f32(&config->outputF32_imag, &testOutput_imag[0], 1);   
  100c34:	e2840020 	add	r0, r4, #32
  100c38:	e1a01005 	mov	r1, r5
  100c3c:	e3a02001 	mov	r2, #1
  100c40:	eb0005fc 	bl	102438 <arm_snr_f32>
  100c44:	ee070a90 	vmov	s15, r0
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_imag < SNR_THRESHOLD)   
  100c48:	eef47ac8 	vcmpe.f32	s15, s16
  100c4c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
		   return the status as ARM_MATH_TEST_FAILURE */  
	  	return(ARM_MATH_TEST_FAILURE); 			   
	  }   
  
	  /* compare the Imaginary parts of final result with the reference output */  
	  snr_imag = arm_snr_f32(&config->outputF32_imag, &testOutput_imag[0], 1);   
  100c50:	e5870000 	str	r0, [r7]
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_imag < SNR_THRESHOLD)   
  100c54:	4a000080 	bmi	100e5c <test_arm_cmplx_dot_prod_f32+0x2f0>
 
	/* ----------------------------------------------------------------------   
	** Call the Complex Dot Product process function     
	** ------------------------------------------------------------------- */   
	   
	arm_cmplx_dot_prod_f32(A, B, blockSize, realResult, imagResult);   
  100c58:	e5940028 	ldr	r0, [r4, #40]	; 0x28
  100c5c:	e2453008 	sub	r3, r5, #8
  100c60:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
  100c64:	e5942038 	ldr	r2, [r4, #56]	; 0x38
  100c68:	e58d5000 	str	r5, [sp]
  100c6c:	ebfffe1e 	bl	1004ec <arm_cmplx_dot_prod_f32>
      /* Process the data through the Complex Dot Product */   
      arm_cmplx_dot_prod_f32_test_render(config->inputAF32, config->inputBF32,   
	  		config->blockSize, testOutput_real, testOutput_imag);   
   
      /* compare the Real parts of final result with the reference output */   
      snr_real = arm_snr_f32(&config->outputF32_real, &testOutput_real[0], 1);   
  100c70:	e2840030 	add	r0, r4, #48	; 0x30
  100c74:	e2451008 	sub	r1, r5, #8
  100c78:	e3a02001 	mov	r2, #1
  100c7c:	eb0005ed 	bl	102438 <arm_snr_f32>
  100c80:	ee070a90 	vmov	s15, r0
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_real < SNR_THRESHOLD)   
  100c84:	eef47ac8 	vcmpe.f32	s15, s16
  100c88:	eef1fa10 	vmrs	APSR_nzcv, fpscr
      /* Process the data through the Complex Dot Product */   
      arm_cmplx_dot_prod_f32_test_render(config->inputAF32, config->inputBF32,   
	  		config->blockSize, testOutput_real, testOutput_imag);   
   
      /* compare the Real parts of final result with the reference output */   
      snr_real = arm_snr_f32(&config->outputF32_real, &testOutput_real[0], 1);   
  100c8c:	e5860000 	str	r0, [r6]
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_real < SNR_THRESHOLD)   
  100c90:	4a000071 	bmi	100e5c <test_arm_cmplx_dot_prod_f32+0x2f0>
		   return the status as ARM_MATH_TEST_FAILURE */  
	  	return(ARM_MATH_TEST_FAILURE); 			   
	  }   
  
	  /* compare the Imaginary parts of final result with the reference output */  
	  snr_imag = arm_snr_f32(&config->outputF32_imag, &testOutput_imag[0], 1);   
  100c94:	e2840034 	add	r0, r4, #52	; 0x34
  100c98:	e1a01005 	mov	r1, r5
  100c9c:	e3a02001 	mov	r2, #1
  100ca0:	eb0005e4 	bl	102438 <arm_snr_f32>
  100ca4:	ee070a90 	vmov	s15, r0
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_imag < SNR_THRESHOLD)   
  100ca8:	eef47ac8 	vcmpe.f32	s15, s16
  100cac:	eef1fa10 	vmrs	APSR_nzcv, fpscr
		   return the status as ARM_MATH_TEST_FAILURE */  
	  	return(ARM_MATH_TEST_FAILURE); 			   
	  }   
  
	  /* compare the Imaginary parts of final result with the reference output */  
	  snr_imag = arm_snr_f32(&config->outputF32_imag, &testOutput_imag[0], 1);   
  100cb0:	e5870000 	str	r0, [r7]
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_imag < SNR_THRESHOLD)   
  100cb4:	4a000068 	bmi	100e5c <test_arm_cmplx_dot_prod_f32+0x2f0>
 
	/* ----------------------------------------------------------------------   
	** Call the Complex Dot Product process function     
	** ------------------------------------------------------------------- */   
	   
	arm_cmplx_dot_prod_f32(A, B, blockSize, realResult, imagResult);   
  100cb8:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
  100cbc:	e2453008 	sub	r3, r5, #8
  100cc0:	e5941040 	ldr	r1, [r4, #64]	; 0x40
  100cc4:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
  100cc8:	e58d5000 	str	r5, [sp]
  100ccc:	ebfffe06 	bl	1004ec <arm_cmplx_dot_prod_f32>
      /* Process the data through the Complex Dot Product */   
      arm_cmplx_dot_prod_f32_test_render(config->inputAF32, config->inputBF32,   
	  		config->blockSize, testOutput_real, testOutput_imag);   
   
      /* compare the Real parts of final result with the reference output */   
      snr_real = arm_snr_f32(&config->outputF32_real, &testOutput_real[0], 1);   
  100cd0:	e2840044 	add	r0, r4, #68	; 0x44
  100cd4:	e2451008 	sub	r1, r5, #8
  100cd8:	e3a02001 	mov	r2, #1
  100cdc:	eb0005d5 	bl	102438 <arm_snr_f32>
  100ce0:	ee070a90 	vmov	s15, r0
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_real < SNR_THRESHOLD)   
  100ce4:	eef47ac8 	vcmpe.f32	s15, s16
  100ce8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
      /* Process the data through the Complex Dot Product */   
      arm_cmplx_dot_prod_f32_test_render(config->inputAF32, config->inputBF32,   
	  		config->blockSize, testOutput_real, testOutput_imag);   
   
      /* compare the Real parts of final result with the reference output */   
      snr_real = arm_snr_f32(&config->outputF32_real, &testOutput_real[0], 1);   
  100cec:	e5860000 	str	r0, [r6]
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_real < SNR_THRESHOLD)   
  100cf0:	4a000059 	bmi	100e5c <test_arm_cmplx_dot_prod_f32+0x2f0>
		   return the status as ARM_MATH_TEST_FAILURE */  
	  	return(ARM_MATH_TEST_FAILURE); 			   
	  }   
  
	  /* compare the Imaginary parts of final result with the reference output */  
	  snr_imag = arm_snr_f32(&config->outputF32_imag, &testOutput_imag[0], 1);   
  100cf4:	e2840048 	add	r0, r4, #72	; 0x48
  100cf8:	e1a01005 	mov	r1, r5
  100cfc:	e3a02001 	mov	r2, #1
  100d00:	eb0005cc 	bl	102438 <arm_snr_f32>
  100d04:	ee070a90 	vmov	s15, r0
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_imag < SNR_THRESHOLD)   
  100d08:	eef47ac8 	vcmpe.f32	s15, s16
  100d0c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
		   return the status as ARM_MATH_TEST_FAILURE */  
	  	return(ARM_MATH_TEST_FAILURE); 			   
	  }   
  
	  /* compare the Imaginary parts of final result with the reference output */  
	  snr_imag = arm_snr_f32(&config->outputF32_imag, &testOutput_imag[0], 1);   
  100d10:	e5870000 	str	r0, [r7]
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_imag < SNR_THRESHOLD)   
  100d14:	4a000050 	bmi	100e5c <test_arm_cmplx_dot_prod_f32+0x2f0>
 
	/* ----------------------------------------------------------------------   
	** Call the Complex Dot Product process function     
	** ------------------------------------------------------------------- */   
	   
	arm_cmplx_dot_prod_f32(A, B, blockSize, realResult, imagResult);   
  100d18:	e5940050 	ldr	r0, [r4, #80]	; 0x50
  100d1c:	e2453008 	sub	r3, r5, #8
  100d20:	e5941054 	ldr	r1, [r4, #84]	; 0x54
  100d24:	e5942060 	ldr	r2, [r4, #96]	; 0x60
  100d28:	e58d5000 	str	r5, [sp]
  100d2c:	ebfffdee 	bl	1004ec <arm_cmplx_dot_prod_f32>
      /* Process the data through the Complex Dot Product */   
      arm_cmplx_dot_prod_f32_test_render(config->inputAF32, config->inputBF32,   
	  		config->blockSize, testOutput_real, testOutput_imag);   
   
      /* compare the Real parts of final result with the reference output */   
      snr_real = arm_snr_f32(&config->outputF32_real, &testOutput_real[0], 1);   
  100d30:	e2840058 	add	r0, r4, #88	; 0x58
  100d34:	e2451008 	sub	r1, r5, #8
  100d38:	e3a02001 	mov	r2, #1
  100d3c:	eb0005bd 	bl	102438 <arm_snr_f32>
  100d40:	ee070a90 	vmov	s15, r0
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_real < SNR_THRESHOLD)   
  100d44:	eef47ac8 	vcmpe.f32	s15, s16
  100d48:	eef1fa10 	vmrs	APSR_nzcv, fpscr
      /* Process the data through the Complex Dot Product */   
      arm_cmplx_dot_prod_f32_test_render(config->inputAF32, config->inputBF32,   
	  		config->blockSize, testOutput_real, testOutput_imag);   
   
      /* compare the Real parts of final result with the reference output */   
      snr_real = arm_snr_f32(&config->outputF32_real, &testOutput_real[0], 1);   
  100d4c:	e5860000 	str	r0, [r6]
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_real < SNR_THRESHOLD)   
  100d50:	4a000041 	bmi	100e5c <test_arm_cmplx_dot_prod_f32+0x2f0>
		   return the status as ARM_MATH_TEST_FAILURE */  
	  	return(ARM_MATH_TEST_FAILURE); 			   
	  }   
  
	  /* compare the Imaginary parts of final result with the reference output */  
	  snr_imag = arm_snr_f32(&config->outputF32_imag, &testOutput_imag[0], 1);   
  100d54:	e284005c 	add	r0, r4, #92	; 0x5c
  100d58:	e1a01005 	mov	r1, r5
  100d5c:	e3a02001 	mov	r2, #1
  100d60:	eb0005b4 	bl	102438 <arm_snr_f32>
  100d64:	ee070a90 	vmov	s15, r0
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_imag < SNR_THRESHOLD)   
  100d68:	eef47ac8 	vcmpe.f32	s15, s16
  100d6c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
		   return the status as ARM_MATH_TEST_FAILURE */  
	  	return(ARM_MATH_TEST_FAILURE); 			   
	  }   
  
	  /* compare the Imaginary parts of final result with the reference output */  
	  snr_imag = arm_snr_f32(&config->outputF32_imag, &testOutput_imag[0], 1);   
  100d70:	e5870000 	str	r0, [r7]
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_imag < SNR_THRESHOLD)   
  100d74:	4a000038 	bmi	100e5c <test_arm_cmplx_dot_prod_f32+0x2f0>
 
	/* ----------------------------------------------------------------------   
	** Call the Complex Dot Product process function     
	** ------------------------------------------------------------------- */   
	   
	arm_cmplx_dot_prod_f32(A, B, blockSize, realResult, imagResult);   
  100d78:	e5940064 	ldr	r0, [r4, #100]	; 0x64
  {   
	  /* points to each configuration */  
      config = &CONFIG[i];   
         
      /* Process the data through the Complex Dot Product */   
      arm_cmplx_dot_prod_f32_test_render(config->inputAF32, config->inputBF32,   
  100d7c:	e1a08004 	mov	r8, r4
 
	/* ----------------------------------------------------------------------   
	** Call the Complex Dot Product process function     
	** ------------------------------------------------------------------- */   
	   
	arm_cmplx_dot_prod_f32(A, B, blockSize, realResult, imagResult);   
  100d80:	e5941068 	ldr	r1, [r4, #104]	; 0x68
  100d84:	e2453008 	sub	r3, r5, #8
  100d88:	e5942074 	ldr	r2, [r4, #116]	; 0x74
      /* Process the data through the Complex Dot Product */   
      arm_cmplx_dot_prod_f32_test_render(config->inputAF32, config->inputBF32,   
	  		config->blockSize, testOutput_real, testOutput_imag);   
   
      /* compare the Real parts of final result with the reference output */   
      snr_real = arm_snr_f32(&config->outputF32_real, &testOutput_real[0], 1);   
  100d8c:	e1a0a006 	mov	sl, r6
 
	/* ----------------------------------------------------------------------   
	** Call the Complex Dot Product process function     
	** ------------------------------------------------------------------- */   
	   
	arm_cmplx_dot_prod_f32(A, B, blockSize, realResult, imagResult);   
  100d90:	e58d5000 	str	r5, [sp]
	  /* points to each configuration */  
      config = &CONFIG[i];   
         
      /* Process the data through the Complex Dot Product */   
      arm_cmplx_dot_prod_f32_test_render(config->inputAF32, config->inputBF32,   
	  		config->blockSize, testOutput_real, testOutput_imag);   
  100d94:	e1a04005 	mov	r4, r5
 
	/* ----------------------------------------------------------------------   
	** Call the Complex Dot Product process function     
	** ------------------------------------------------------------------- */   
	   
	arm_cmplx_dot_prod_f32(A, B, blockSize, realResult, imagResult);   
  100d98:	ebfffdd3 	bl	1004ec <arm_cmplx_dot_prod_f32>
      /* Process the data through the Complex Dot Product */   
      arm_cmplx_dot_prod_f32_test_render(config->inputAF32, config->inputBF32,   
	  		config->blockSize, testOutput_real, testOutput_imag);   
   
      /* compare the Real parts of final result with the reference output */   
      snr_real = arm_snr_f32(&config->outputF32_real, &testOutput_real[0], 1);   
  100d9c:	e288006c 	add	r0, r8, #108	; 0x6c
  100da0:	e2451008 	sub	r1, r5, #8
  100da4:	e3a02001 	mov	r2, #1
  100da8:	eb0005a2 	bl	102438 <arm_snr_f32>
  100dac:	ee070a90 	vmov	s15, r0
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_real < SNR_THRESHOLD)   
  100db0:	eef47ac8 	vcmpe.f32	s15, s16
  100db4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
      /* Process the data through the Complex Dot Product */   
      arm_cmplx_dot_prod_f32_test_render(config->inputAF32, config->inputBF32,   
	  		config->blockSize, testOutput_real, testOutput_imag);   
   
      /* compare the Real parts of final result with the reference output */   
      snr_real = arm_snr_f32(&config->outputF32_real, &testOutput_real[0], 1);   
  100db8:	e5860000 	str	r0, [r6]
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_real < SNR_THRESHOLD)   
  100dbc:	4a000026 	bmi	100e5c <test_arm_cmplx_dot_prod_f32+0x2f0>
		   return the status as ARM_MATH_TEST_FAILURE */  
	  	return(ARM_MATH_TEST_FAILURE); 			   
	  }   
  
	  /* compare the Imaginary parts of final result with the reference output */  
	  snr_imag = arm_snr_f32(&config->outputF32_imag, &testOutput_imag[0], 1);   
  100dc0:	e1a01005 	mov	r1, r5
  100dc4:	e2880070 	add	r0, r8, #112	; 0x70
  100dc8:	e3a02001 	mov	r2, #1
  100dcc:	e1a05007 	mov	r5, r7
  100dd0:	eb000598 	bl	102438 <arm_snr_f32>
  100dd4:	ee070a90 	vmov	s15, r0
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_imag < SNR_THRESHOLD)   
  100dd8:	eef47ac8 	vcmpe.f32	s15, s16
  100ddc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
		   return the status as ARM_MATH_TEST_FAILURE */  
	  	return(ARM_MATH_TEST_FAILURE); 			   
	  }   
  
	  /* compare the Imaginary parts of final result with the reference output */  
	  snr_imag = arm_snr_f32(&config->outputF32_imag, &testOutput_imag[0], 1);   
  100de0:	e5870000 	str	r0, [r7]
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_imag < SNR_THRESHOLD)   
  100de4:	4a00001c 	bmi	100e5c <test_arm_cmplx_dot_prod_f32+0x2f0>
 
	/* ----------------------------------------------------------------------   
	** Call the Complex Dot Product process function     
	** ------------------------------------------------------------------- */   
	   
	arm_cmplx_dot_prod_f32(A, B, blockSize, realResult, imagResult);   
  100de8:	e5980078 	ldr	r0, [r8, #120]	; 0x78
  100dec:	e2443008 	sub	r3, r4, #8
  100df0:	e598107c 	ldr	r1, [r8, #124]	; 0x7c
  100df4:	e5982088 	ldr	r2, [r8, #136]	; 0x88
  100df8:	e58d4000 	str	r4, [sp]
  100dfc:	ebfffdba 	bl	1004ec <arm_cmplx_dot_prod_f32>
      /* Process the data through the Complex Dot Product */   
      arm_cmplx_dot_prod_f32_test_render(config->inputAF32, config->inputBF32,   
	  		config->blockSize, testOutput_real, testOutput_imag);   
   
      /* compare the Real parts of final result with the reference output */   
      snr_real = arm_snr_f32(&config->outputF32_real, &testOutput_real[0], 1);   
  100e00:	e2880080 	add	r0, r8, #128	; 0x80
  100e04:	e2441008 	sub	r1, r4, #8
  100e08:	e3a02001 	mov	r2, #1
  100e0c:	eb000589 	bl	102438 <arm_snr_f32>
  100e10:	ee070a90 	vmov	s15, r0
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_real < SNR_THRESHOLD)   
  100e14:	eef47ac8 	vcmpe.f32	s15, s16
  100e18:	eef1fa10 	vmrs	APSR_nzcv, fpscr
      /* Process the data through the Complex Dot Product */   
      arm_cmplx_dot_prod_f32_test_render(config->inputAF32, config->inputBF32,   
	  		config->blockSize, testOutput_real, testOutput_imag);   
   
      /* compare the Real parts of final result with the reference output */   
      snr_real = arm_snr_f32(&config->outputF32_real, &testOutput_real[0], 1);   
  100e1c:	e58a0000 	str	r0, [sl]
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_real < SNR_THRESHOLD)   
  100e20:	4a00000d 	bmi	100e5c <test_arm_cmplx_dot_prod_f32+0x2f0>
		   return the status as ARM_MATH_TEST_FAILURE */  
	  	return(ARM_MATH_TEST_FAILURE); 			   
	  }   
  
	  /* compare the Imaginary parts of final result with the reference output */  
	  snr_imag = arm_snr_f32(&config->outputF32_imag, &testOutput_imag[0], 1);   
  100e24:	e2880084 	add	r0, r8, #132	; 0x84
  100e28:	e1a01004 	mov	r1, r4
  100e2c:	e3a02001 	mov	r2, #1
  100e30:	eb000580 	bl	102438 <arm_snr_f32>
  100e34:	ee070a90 	vmov	s15, r0
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_imag < SNR_THRESHOLD)   
  100e38:	eef47ac8 	vcmpe.f32	s15, s16
  100e3c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
		   return the status as ARM_MATH_TEST_FAILURE */  
	  	return(ARM_MATH_TEST_FAILURE); 			   
	  }   
  
	  /* compare the Imaginary parts of final result with the reference output */  
	  snr_imag = arm_snr_f32(&config->outputF32_imag, &testOutput_imag[0], 1);   
  100e40:	e5850000 	str	r0, [r5]
   
	  /* compare the calculated snr withe the threshold value */  
      if (snr_imag < SNR_THRESHOLD)   
  100e44:	4a000004 	bmi	100e5c <test_arm_cmplx_dot_prod_f32+0x2f0>
	  	return(ARM_MATH_TEST_FAILURE); 			   
	  }  
   }   
   
   /* All tests passed! */   
   return(ARM_MATH_SUCCESS);   
  100e48:	e3a00000 	mov	r0, #0
}   
  100e4c:	e6af0070 	sxtb	r0, r0
  100e50:	e28dd00c 	add	sp, sp, #12
  100e54:	ecbd8b02 	vpop	{d8}
  100e58:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, sl, pc}
	  /* compare the calculated snr withe the threshold value */  
      if (snr_real < SNR_THRESHOLD)   
	  {   
	    /* If the output is not matched with the refereence output values,   
		   return the status as ARM_MATH_TEST_FAILURE */  
	  	return(ARM_MATH_TEST_FAILURE); 			   
  100e5c:	e3a000fa 	mov	r0, #250	; 0xfa
  100e60:	eafffff9 	b	100e4c <test_arm_cmplx_dot_prod_f32+0x2e0>
  100e64:	42e60000 	.word	0x42e60000
  100e68:	00128040 	.word	0x00128040

00100e6c <arm_cmplx_mult_cmplx_f32>:
void arm_cmplx_mult_cmplx_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t numSamples)
{
  100e6c:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp}
  100e70:	e1a07000 	mov	r7, r0
  100e74:	ed2d8b10 	vpush	{d8-d15}
  100e78:	e24dd090 	sub	sp, sp, #144	; 0x90
  100e7c:	e1a08001 	mov	r8, r1
  100e80:	e1a0a002 	mov	sl, r2
  100e84:	e58d305c 	str	r3, [sp, #92]	; 0x5c
  uint32_t blkCnt;                               /* loop counters */

  /* Loop over blockSize number of values */
  blkCnt = numSamples >> 4u;

  while(blkCnt > 0u)
  100e88:	e1b03223 	lsrs	r3, r3, #4
  100e8c:	e58d3060 	str	r3, [sp, #96]	; 0x60
  100e90:	0a0000b0 	beq	101158 <arm_cmplx_mult_cmplx_f32+0x2ec>
  100e94:	e1a00001 	mov	r0, r1
  100e98:	e1a0c002 	mov	ip, r2
  100e9c:	e1a01007 	mov	r1, r7
  100ea0:	e28d9070 	add	r9, sp, #112	; 0x70
  100ea4:	e58d3058 	str	r3, [sp, #88]	; 0x58
  100ea8:	e58d7064 	str	r7, [sp, #100]	; 0x64
  100eac:	e58d8068 	str	r8, [sp, #104]	; 0x68
  100eb0:	e58d206c 	str	r2, [sp, #108]	; 0x6c
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  100eb4:	e1a02001 	mov	r2, r1
  100eb8:	e1a03000 	mov	r3, r0

__extension__ static __inline void __attribute__ ((__always_inline__))
vst2q_f32 (float32_t * __a, float32x4x2_t __b)
{
  union { float32x4x2_t __i; __builtin_neon_oi __o; } __bu = { __b };
  __builtin_neon_vst2v4sf ((__builtin_neon_sf *) __a, __bu.__o);
  100ebc:	e58dc004 	str	ip, [sp, #4]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  100ec0:	e281b020 	add	fp, r1, #32
  100ec4:	f4620a8d 	vld1.32	{d16-d17}, [r2]!
  100ec8:	e281a030 	add	sl, r1, #48	; 0x30
  100ecc:	e2804040 	add	r4, r0, #64	; 0x40
  100ed0:	e2808020 	add	r8, r0, #32
  100ed4:	f4632a8d 	vld1.32	{d18-d19}, [r3]!
  100ed8:	e2807030 	add	r7, r0, #48	; 0x30
  100edc:	e2816040 	add	r6, r1, #64	; 0x40
  100ee0:	e2815050 	add	r5, r1, #80	; 0x50
  100ee4:	f4626a8f 	vld1.32	{d22-d23}, [r2]
  100ee8:	e2812060 	add	r2, r1, #96	; 0x60
  100eec:	f4634a8f 	vld1.32	{d20-d21}, [r3]
  100ef0:	e2803060 	add	r3, r0, #96	; 0x60
  100ef4:	e58d3000 	str	r3, [sp]

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  100ef8:	f3fa0166 	vuzp.32	q8, q11
  100efc:	ecc90b04 	vstmia	r9, {d16-d17}
  100f00:	edc96b04 	vstr	d22, [r9, #16]
  100f04:	edc97b06 	vstr	d23, [r9, #24]
  return __rv;
  100f08:	eddd6b20 	vldr	d22, [sp, #128]	; 0x80
  100f0c:	eddd7b22 	vldr	d23, [sp, #136]	; 0x88
  100f10:	eddd0b1c 	vldr	d16, [sp, #112]	; 0x70
  100f14:	eddd1b1e 	vldr	d17, [sp, #120]	; 0x78

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  100f18:	f3fa2164 	vuzp.32	q9, q10
  100f1c:	ecc92b04 	vstmia	r9, {d18-d19}
  100f20:	edc94b04 	vstr	d20, [r9, #16]
  100f24:	edc95b06 	vstr	d21, [r9, #24]
  return __rv;
  100f28:	eddd4b20 	vldr	d20, [sp, #128]	; 0x80
  100f2c:	eddd5b22 	vldr	d21, [sp, #136]	; 0x88
  100f30:	eddd8b1c 	vldr	d24, [sp, #112]	; 0x70
  100f34:	eddd9b1e 	vldr	d25, [sp, #120]	; 0x78
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  100f38:	f346adf4 	vmul.f32	q13, q11, q10
  100f3c:	f3006df8 	vmul.f32	q3, q8, q12
  100f40:	e59d3058 	ldr	r3, [sp, #88]	; 0x58
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  100f44:	f46b2a8f 	vld1.32	{d18-d19}, [fp]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  100f48:	f3468df8 	vmul.f32	q12, q11, q12
  100f4c:	f3400df4 	vmul.f32	q8, q8, q10
  100f50:	e2533001 	subs	r3, r3, #1
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  100f54:	f46a6a8f 	vld1.32	{d22-d23}, [sl]
  100f58:	e58d3058 	str	r3, [sp, #88]	; 0x58
  100f5c:	f4654a8f 	vld1.32	{d20-d21}, [r5]
    *pDst++ = (a * d) + (b * c);

    /* Decrement the numSamples loop counter */
    blkCnt--;
  }
}
  100f60:	f266cd6a 	vsub.f32	q14, q3, q13
  100f64:	f248ede0 	vadd.f32	q15, q12, q8
  100f68:	f468aa8f 	vld1.32	{d26-d27}, [r8]
  100f6c:	f4276a8f 	vld1.32	{d6-d7}, [r7]
  100f70:	f4660a8f 	vld1.32	{d16-d17}, [r6]

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  100f74:	f3fa2166 	vuzp.32	q9, q11
  100f78:	ecc92b04 	vstmia	r9, {d18-d19}
  100f7c:	edc96b04 	vstr	d22, [r9, #16]
  100f80:	edc97b06 	vstr	d23, [r9, #24]
  return __rv;
  100f84:	eddd8b1c 	vldr	d24, [sp, #112]	; 0x70
  100f88:	eddd9b1e 	vldr	d25, [sp, #120]	; 0x78
  100f8c:	ed9d2b20 	vldr	d2, [sp, #128]	; 0x80
  100f90:	ed9d3b22 	vldr	d3, [sp, #136]	; 0x88
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  100f94:	f4642a8f 	vld1.32	{d18-d19}, [r4]
  100f98:	e2804050 	add	r4, r0, #80	; 0x50

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  100f9c:	f3faa146 	vuzp.32	q13, q3
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  100fa0:	f4646a8f 	vld1.32	{d22-d23}, [r4]

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  100fa4:	ecc9ab04 	vstmia	r9, {d26-d27}
  100fa8:	ed896b04 	vstr	d6, [r9, #16]
  100fac:	ed897b06 	vstr	d7, [r9, #24]
  return __rv;
  100fb0:	ed9d0b1c 	vldr	d0, [sp, #112]	; 0x70
  100fb4:	ed9d1b1e 	vldr	d1, [sp, #120]	; 0x78
  100fb8:	edddab20 	vldr	d26, [sp, #128]	; 0x80
  100fbc:	edddbb22 	vldr	d27, [sp, #136]	; 0x88

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  100fc0:	f3fa0164 	vuzp.32	q8, q10
  100fc4:	ecc90b04 	vstmia	r9, {d16-d17}
  100fc8:	edc94b04 	vstr	d20, [r9, #16]
  100fcc:	edc95b06 	vstr	d21, [r9, #24]

__extension__ static __inline void __attribute__ ((__always_inline__))
vst2q_f32 (float32_t * __a, float32x4x2_t __b)
{
  union { float32x4x2_t __i; __builtin_neon_oi __o; } __bu = { __b };
  __builtin_neon_vst2v4sf ((__builtin_neon_sf *) __a, __bu.__o);
  100fd0:	e59d3004 	ldr	r3, [sp, #4]
__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  return __rv;
  100fd4:	eddd0b1c 	vldr	d16, [sp, #112]	; 0x70
  100fd8:	eddd1b1e 	vldr	d17, [sp, #120]	; 0x78
  100fdc:	eddd4b20 	vldr	d20, [sp, #128]	; 0x80
  100fe0:	eddd5b22 	vldr	d21, [sp, #136]	; 0x88

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  100fe4:	f3fa2166 	vuzp.32	q9, q11
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  100fe8:	f308edd0 	vmul.f32	q7, q12, q0

__extension__ static __inline void __attribute__ ((__always_inline__))
vst2q_f32 (float32_t * __a, float32x4x2_t __b)
{
  union { float32x4x2_t __i; __builtin_neon_oi __o; } __bu = { __b };
  __builtin_neon_vst2v4sf ((__builtin_neon_sf *) __a, __bu.__o);
  100fec:	f443c38d 	vst2.32	{d28-d31}, [r3]!
  100ff0:	e58d3004 	str	r3, [sp, #4]

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  100ff4:	ecc92b04 	vstmia	r9, {d18-d19}
  100ff8:	edc96b04 	vstr	d22, [r9, #16]
  100ffc:	edc97b06 	vstr	d23, [r9, #24]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  101000:	f462ca8f 	vld1.32	{d28-d29}, [r2]
  101004:	e59d3000 	ldr	r3, [sp]
  101008:	e2812070 	add	r2, r1, #112	; 0x70
__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  return __rv;
  10100c:	eddd6b1c 	vldr	d22, [sp, #112]	; 0x70
  101010:	eddd7b1e 	vldr	d23, [sp, #120]	; 0x78
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  101014:	f340edf6 	vmul.f32	q15, q8, q11
  101018:	edcdeb02 	vstr	d30, [sp, #8]
  10101c:	edcdfb04 	vstr	d31, [sp, #16]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  101020:	f4226a8f 	vld1.32	{d6-d7}, [r2]
__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  return __rv;
  101024:	eddd2b20 	vldr	d18, [sp, #128]	; 0x80
  101028:	eddd3b22 	vldr	d19, [sp, #136]	; 0x88

__extension__ static __inline void __attribute__ ((__always_inline__))
vst2q_f32 (float32_t * __a, float32x4x2_t __b)
{
  union { float32x4x2_t __i; __builtin_neon_oi __o; } __bu = { __b };
  __builtin_neon_vst2v4sf ((__builtin_neon_sf *) __a, __bu.__o);
  10102c:	e28d2018 	add	r2, sp, #24
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  101030:	f463ea8f 	vld1.32	{d30-d31}, [r3]
  101034:	e2803070 	add	r3, r0, #112	; 0x70
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  101038:	f302cd7a 	vmul.f32	q6, q1, q13
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  10103c:	e2811080 	add	r1, r1, #128	; 0x80
  101040:	f4234a8f 	vld1.32	{d4-d5}, [r3]

__extension__ static __inline void __attribute__ ((__always_inline__))
vst2q_f32 (float32_t * __a, float32x4x2_t __b)
{
  union { float32x4x2_t __i; __builtin_neon_oi __o; } __bu = { __b };
  __builtin_neon_vst2v4sf ((__builtin_neon_sf *) __a, __bu.__o);
  101044:	e28c3040 	add	r3, ip, #64	; 0x40
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  101048:	e2800080 	add	r0, r0, #128	; 0x80

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  10104c:	f3fac146 	vuzp.32	q14, q3
  101050:	ecc9cb04 	vstmia	r9, {d28-d29}
  101054:	ed896b04 	vstr	d6, [r9, #16]
  101058:	ed897b06 	vstr	d7, [r9, #24]
  return __rv;
  10105c:	edddcb1c 	vldr	d28, [sp, #112]	; 0x70
  101060:	eddddb1e 	vldr	d29, [sp, #120]	; 0x78
  101064:	ed9d6b20 	vldr	d6, [sp, #128]	; 0x80
  101068:	ed9d7b22 	vldr	d7, [sp, #136]	; 0x88

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  10106c:	f3fae144 	vuzp.32	q15, q2
  101070:	ecc9eb04 	vstmia	r9, {d30-d31}
  101074:	ed894b04 	vstr	d4, [r9, #16]
  101078:	ed895b06 	vstr	d5, [r9, #24]
  return __rv;
  10107c:	edddeb20 	vldr	d30, [sp, #128]	; 0x80
  101080:	edddfb22 	vldr	d31, [sp, #136]	; 0x88
  101084:	ed9d4b1c 	vldr	d4, [sp, #112]	; 0x70
  101088:	ed9d5b1e 	vldr	d5, [sp, #120]	; 0x78
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  10108c:	f3022d50 	vmul.f32	q1, q1, q0
  101090:	f30c8dd4 	vmul.f32	q4, q14, q2
  101094:	f3060d7e 	vmul.f32	q0, q3, q15
  101098:	f34ccdfe 	vmul.f32	q14, q14, q15
  10109c:	edddeb02 	vldr	d30, [sp, #8]
  1010a0:	edddfb04 	vldr	d31, [sp, #16]
  1010a4:	f3066d54 	vmul.f32	q3, q3, q2
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vsubq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vsubv4sf (__a, __b, 3);
  1010a8:	f2280d40 	vsub.f32	q0, q4, q0
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  1010ac:	f304adf2 	vmul.f32	q5, q10, q9
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vaddq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vaddv4sf (__a, __b, 3);
  1010b0:	f2066d6c 	vadd.f32	q3, q3, q14
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  1010b4:	f3400df2 	vmul.f32	q8, q8, q9
  1010b8:	f3488dfa 	vmul.f32	q12, q12, q13

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vzipq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vzipv4sf (&__rv.val[0], __a, __b);
  1010bc:	f3ba01c6 	vzip.32	q0, q3
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  1010c0:	f3444df6 	vmul.f32	q10, q10, q11
  1010c4:	f26e2d4c 	vsub.f32	q9, q7, q6
  1010c8:	edcd2b06 	vstr	d18, [sp, #24]
  1010cc:	edcd3b08 	vstr	d19, [sp, #32]
  1010d0:	f26eedca 	vsub.f32	q15, q15, q5
  1010d4:	edcdeb0e 	vstr	d30, [sp, #56]	; 0x38
  1010d8:	edcdfb10 	vstr	d31, [sp, #64]	; 0x40
  1010dc:	f2422d68 	vadd.f32	q9, q1, q12
  1010e0:	edcd2b0a 	vstr	d18, [sp, #40]	; 0x28
  1010e4:	edcd3b0c 	vstr	d19, [sp, #48]	; 0x30
  1010e8:	f244ede0 	vadd.f32	q15, q10, q8
  1010ec:	edcdeb12 	vstr	d30, [sp, #72]	; 0x48
  1010f0:	edcdfb14 	vstr	d31, [sp, #80]	; 0x50

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vzipq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vzipv4sf (&__rv.val[0], __a, __b);
  1010f4:	ec890b04 	vstmia	r9, {d0-d1}
  1010f8:	ed896b04 	vstr	d6, [r9, #16]
  1010fc:	ed897b06 	vstr	d7, [r9, #24]

__extension__ static __inline void __attribute__ ((__always_inline__))
vst2q_f32 (float32_t * __a, float32x4x2_t __b)
{
  union { float32x4x2_t __i; __builtin_neon_oi __o; } __bu = { __b };
  __builtin_neon_vst2v4sf ((__builtin_neon_sf *) __a, __bu.__o);
  101100:	ecd20b08 	vldmia	r2, {d16-d19}
  101104:	e59d2004 	ldr	r2, [sp, #4]
  101108:	f442038f 	vst2.32	{d16-d19}, [r2]
  10110c:	e28d2038 	add	r2, sp, #56	; 0x38
  101110:	ecd20b08 	vldmia	r2, {d16-d19}
  101114:	f443038f 	vst2.32	{d16-d19}, [r3]
}

__extension__ static __inline void __attribute__ ((__always_inline__))
vst1q_f32 (float32_t * __a, float32x4_t __b)
{
  __builtin_neon_vst1v4sf ((__builtin_neon_sf *) __a, __b);
  101118:	e28c3060 	add	r3, ip, #96	; 0x60
  10111c:	eddd0b1c 	vldr	d16, [sp, #112]	; 0x70
  101120:	eddd1b1e 	vldr	d17, [sp, #120]	; 0x78
  101124:	eddd2b20 	vldr	d18, [sp, #128]	; 0x80
  101128:	eddd3b22 	vldr	d19, [sp, #136]	; 0x88
  10112c:	f4430a8f 	vst1.32	{d16-d17}, [r3]
  101130:	e28c3070 	add	r3, ip, #112	; 0x70
  101134:	e28cc080 	add	ip, ip, #128	; 0x80
  101138:	f4432a8f 	vst1.32	{d18-d19}, [r3]
  uint32_t blkCnt;                               /* loop counters */

  /* Loop over blockSize number of values */
  blkCnt = numSamples >> 4u;

  while(blkCnt > 0u)
  10113c:	1affff5c 	bne	100eb4 <arm_cmplx_mult_cmplx_f32+0x48>
 * @param[out]  *pDst  points to the output vector     
 * @param[in]  numSamples number of complex samples in each vector     
 * @return none.     
 */

void arm_cmplx_mult_cmplx_f32(
  101140:	e28d2060 	add	r2, sp, #96	; 0x60
  101144:	e8920584 	ldm	r2, {r2, r7, r8, sl}
  101148:	e1a03382 	lsl	r3, r2, #7
  10114c:	e0877003 	add	r7, r7, r3
  101150:	e0888003 	add	r8, r8, r3
  101154:	e08aa003 	add	sl, sl, r3
    /* Decrement the numSamples loop counter */
    blkCnt--;
  }

  blkCnt = numSamples & 15u;
  blkCnt = blkCnt >> 2u;
  101158:	e59d305c 	ldr	r3, [sp, #92]	; 0x5c
  10115c:	e7e16153 	ubfx	r6, r3, #2, #2

  /* If the blockSize is not a multiple of 16, compute remaining output samples.     
   ** Compute multiple of 4 samples at a time in second loop.  
   ** and remaining 1 to 3 samples in third loop. */
  while(blkCnt > 0u)
  101160:	e3560000 	cmp	r6, #0
  101164:	0a000034 	beq	10123c <arm_cmplx_mult_cmplx_f32+0x3d0>
  101168:	e1a05006 	mov	r5, r6
  10116c:	e1a0400a 	mov	r4, sl
  101170:	e1a0c008 	mov	ip, r8
  101174:	e1a00007 	mov	r0, r7
  101178:	e28d9070 	add	r9, sp, #112	; 0x70
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  10117c:	e1a01000 	mov	r1, r0
  101180:	e1a0200c 	mov	r2, ip
}

__extension__ static __inline void __attribute__ ((__always_inline__))
vst1q_f32 (float32_t * __a, float32x4_t __b)
{
  __builtin_neon_vst1v4sf ((__builtin_neon_sf *) __a, __b);
  101184:	e1a03004 	mov	r3, r4
  101188:	e2555001 	subs	r5, r5, #1
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  10118c:	f4612a8d 	vld1.32	{d18-d19}, [r1]!
 * @param[out]  *pDst  points to the output vector     
 * @param[in]  numSamples number of complex samples in each vector     
 * @return none.     
 */

void arm_cmplx_mult_cmplx_f32(
  101190:	e2800020 	add	r0, r0, #32
  101194:	e28cc020 	add	ip, ip, #32
  101198:	e2844020 	add	r4, r4, #32
  10119c:	f4620a8d 	vld1.32	{d16-d17}, [r2]!
  1011a0:	f4614a8f 	vld1.32	{d20-d21}, [r1]
  1011a4:	f4626a8f 	vld1.32	{d22-d23}, [r2]

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  1011a8:	f3fa2164 	vuzp.32	q9, q10
  1011ac:	ecc92b04 	vstmia	r9, {d18-d19}
  1011b0:	edc94b04 	vstr	d20, [r9, #16]
  1011b4:	edc95b06 	vstr	d21, [r9, #24]
  return __rv;
  1011b8:	eddd4b1c 	vldr	d20, [sp, #112]	; 0x70
  1011bc:	eddd5b1e 	vldr	d21, [sp, #120]	; 0x78
  1011c0:	eddd2b20 	vldr	d18, [sp, #128]	; 0x80
  1011c4:	eddd3b22 	vldr	d19, [sp, #136]	; 0x88

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  1011c8:	f3fa0166 	vuzp.32	q8, q11
  1011cc:	ecc90b04 	vstmia	r9, {d16-d17}
  1011d0:	edc96b04 	vstr	d22, [r9, #16]
  1011d4:	edc97b06 	vstr	d23, [r9, #24]
  return __rv;
  1011d8:	eddd8b1c 	vldr	d24, [sp, #112]	; 0x70
  1011dc:	eddd9b1e 	vldr	d25, [sp, #120]	; 0x78
  1011e0:	eddd6b20 	vldr	d22, [sp, #128]	; 0x80
  1011e4:	eddd7b22 	vldr	d23, [sp, #136]	; 0x88
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  1011e8:	f344adf8 	vmul.f32	q13, q10, q12
  1011ec:	f3420df6 	vmul.f32	q8, q9, q11
  1011f0:	f3444df6 	vmul.f32	q10, q10, q11
  1011f4:	f3422df8 	vmul.f32	q9, q9, q12
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vsubq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vsubv4sf (__a, __b, 3);
  1011f8:	f26a0de0 	vsub.f32	q8, q13, q8
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vaddq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vaddv4sf (__a, __b, 3);
  1011fc:	f2422de4 	vadd.f32	q9, q9, q10

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vzipq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vzipv4sf (&__rv.val[0], __a, __b);
  101200:	f3fa01e2 	vzip.32	q8, q9
  101204:	ecc90b04 	vstmia	r9, {d16-d17}
  101208:	edc92b04 	vstr	d18, [r9, #16]
  10120c:	edc93b06 	vstr	d19, [r9, #24]
}

__extension__ static __inline void __attribute__ ((__always_inline__))
vst1q_f32 (float32_t * __a, float32x4_t __b)
{
  __builtin_neon_vst1v4sf ((__builtin_neon_sf *) __a, __b);
  101210:	eddd0b1c 	vldr	d16, [sp, #112]	; 0x70
  101214:	eddd1b1e 	vldr	d17, [sp, #120]	; 0x78
  101218:	eddd2b20 	vldr	d18, [sp, #128]	; 0x80
  10121c:	eddd3b22 	vldr	d19, [sp, #136]	; 0x88
  101220:	f4430a8d 	vst1.32	{d16-d17}, [r3]!
  101224:	f4432a8f 	vst1.32	{d18-d19}, [r3]
  blkCnt = blkCnt >> 2u;

  /* If the blockSize is not a multiple of 16, compute remaining output samples.     
   ** Compute multiple of 4 samples at a time in second loop.  
   ** and remaining 1 to 3 samples in third loop. */
  while(blkCnt > 0u)
  101228:	1affffd3 	bne	10117c <arm_cmplx_mult_cmplx_f32+0x310>
 * @param[out]  *pDst  points to the output vector     
 * @param[in]  numSamples number of complex samples in each vector     
 * @return none.     
 */

void arm_cmplx_mult_cmplx_f32(
  10122c:	e1a06286 	lsl	r6, r6, #5
  101230:	e0877006 	add	r7, r7, r6
  101234:	e0888006 	add	r8, r8, r6
  101238:	e08aa006 	add	sl, sl, r6

  blkCnt = numSamples & 3u;

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.     
   ** No intrinsics is used. */
  while(blkCnt > 0u)
  10123c:	e59d205c 	ldr	r2, [sp, #92]	; 0x5c
  101240:	e2123003 	ands	r3, r2, #3
  101244:	0a00000e 	beq	101284 <arm_cmplx_mult_cmplx_f32+0x418>
 * @param[out]  *pDst  points to the output vector     
 * @param[in]  numSamples number of complex samples in each vector     
 * @return none.     
 */

void arm_cmplx_mult_cmplx_f32(
  101248:	e2888008 	add	r8, r8, #8
   ** No intrinsics is used. */
  while(blkCnt > 0u)
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a = *pSrcA++;
  10124c:	edd75a00 	vldr	s11, [r7]
    b = *pSrcA++;
  101250:	ed976a01 	vldr	s12, [r7, #4]

  blkCnt = numSamples & 3u;

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.     
   ** No intrinsics is used. */
  while(blkCnt > 0u)
  101254:	e2533001 	subs	r3, r3, #1
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a = *pSrcA++;
    b = *pSrcA++;
    c = *pSrcB++;
    d = *pSrcB++;
  101258:	ed587a01 	vldr	s15, [r8, #-4]
 * @param[out]  *pDst  points to the output vector     
 * @param[in]  numSamples number of complex samples in each vector     
 * @return none.     
 */

void arm_cmplx_mult_cmplx_f32(
  10125c:	e28aa008 	add	sl, sl, #8
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a = *pSrcA++;
    b = *pSrcA++;
    c = *pSrcB++;
  101260:	ed586a02 	vldr	s13, [r8, #-8]
 * @param[out]  *pDst  points to the output vector     
 * @param[in]  numSamples number of complex samples in each vector     
 * @return none.     
 */

void arm_cmplx_mult_cmplx_f32(
  101264:	e2877008 	add	r7, r7, #8
    b = *pSrcA++;
    c = *pSrcB++;
    d = *pSrcB++;

    /* store the result in the destination buffer. */
    *pDst++ = (a * c) - (b * d);
  101268:	ee267a27 	vmul.f32	s14, s12, s15
    *pDst++ = (a * d) + (b * c);
  10126c:	ee657aa7 	vmul.f32	s15, s11, s15
    b = *pSrcA++;
    c = *pSrcB++;
    d = *pSrcB++;

    /* store the result in the destination buffer. */
    *pDst++ = (a * c) - (b * d);
  101270:	ee157aa6 	vnmls.f32	s14, s11, s13
    *pDst++ = (a * d) + (b * c);
  101274:	ee467a26 	vmla.f32	s15, s12, s13
    b = *pSrcA++;
    c = *pSrcB++;
    d = *pSrcB++;

    /* store the result in the destination buffer. */
    *pDst++ = (a * c) - (b * d);
  101278:	ed0a7a02 	vstr	s14, [sl, #-8]
    *pDst++ = (a * d) + (b * c);
  10127c:	ed4a7a01 	vstr	s15, [sl, #-4]

  blkCnt = numSamples & 3u;

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.     
   ** No intrinsics is used. */
  while(blkCnt > 0u)
  101280:	1afffff0 	bne	101248 <arm_cmplx_mult_cmplx_f32+0x3dc>
    *pDst++ = (a * d) + (b * c);

    /* Decrement the numSamples loop counter */
    blkCnt--;
  }
}
  101284:	e28dd090 	add	sp, sp, #144	; 0x90
  101288:	ecbd8b10 	vpop	{d8-d15}
  10128c:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
  101290:	e12fff1e 	bx	lr

00101294 <arm_cmplx_mult_cmplx_f32_dot>:
void arm_cmplx_mult_cmplx_f32_dot(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t numSamples)
{
  101294:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp}
  101298:	e1a06000 	mov	r6, r0
  10129c:	ed2d8b10 	vpush	{d8-d15}
  1012a0:	e24dd0d8 	sub	sp, sp, #216	; 0xd8
  1012a4:	e1a07001 	mov	r7, r1
  1012a8:	e58d30a4 	str	r3, [sp, #164]	; 0xa4
  acc4.val[1] = vdupq_n_f32(0.0f);

  /* Loop over blockSize number of values */
  blkCnt = numSamples >> 4u;

  while(blkCnt > 0u)
  1012ac:	e1b03223 	lsrs	r3, r3, #4
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vdupq_n_f32 (float32_t __a)
{
  return (float32x4_t)__builtin_neon_vdup_nv4sf ((__builtin_neon_sf) __a);
  1012b0:	f280c050 	vmov.i32	q6, #0	; 0x00000000
  1012b4:	ed8dcb08 	vstr	d12, [sp, #32]
  1012b8:	ed8ddb0a 	vstr	d13, [sp, #40]	; 0x28
  1012bc:	e58d30ac 	str	r3, [sp, #172]	; 0xac
  1012c0:	ed8dcb0c 	vstr	d12, [sp, #48]	; 0x30
  1012c4:	ed8ddb0e 	vstr	d13, [sp, #56]	; 0x38
  1012c8:	f22ce15c 	vorr	q7, q6, q6
  1012cc:	ed8dcb10 	vstr	d12, [sp, #64]	; 0x40
  1012d0:	ed8ddb12 	vstr	d13, [sp, #72]	; 0x48
void arm_cmplx_mult_cmplx_f32_dot(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t numSamples)
{
  1012d4:	e58d20a8 	str	r2, [sp, #168]	; 0xa8
  1012d8:	ed8dcb14 	vstr	d12, [sp, #80]	; 0x50
  1012dc:	ed8ddb16 	vstr	d13, [sp, #88]	; 0x58
  1012e0:	ed8dcb18 	vstr	d12, [sp, #96]	; 0x60
  1012e4:	ed8ddb1a 	vstr	d13, [sp, #104]	; 0x68
  1012e8:	ed8dcb1c 	vstr	d12, [sp, #112]	; 0x70
  1012ec:	ed8ddb1e 	vstr	d13, [sp, #120]	; 0x78
  acc4.val[1] = vdupq_n_f32(0.0f);

  /* Loop over blockSize number of values */
  blkCnt = numSamples >> 4u;

  while(blkCnt > 0u)
  1012f0:	0a0000bb 	beq	1015e4 <arm_cmplx_mult_cmplx_f32_dot+0x350>
  1012f4:	f22ca15c 	vorr	q5, q6, q6
  1012f8:	e1a0c001 	mov	ip, r1
  1012fc:	e58d30a0 	str	r3, [sp, #160]	; 0xa0
  101300:	e28d30b8 	add	r3, sp, #184	; 0xb8
  101304:	ed8dcb20 	vstr	d12, [sp, #128]	; 0x80
  101308:	ed8ddb22 	vstr	d13, [sp, #136]	; 0x88
  10130c:	e58d60b0 	str	r6, [sp, #176]	; 0xb0
  101310:	e58d10b4 	str	r1, [sp, #180]	; 0xb4
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  101314:	e1a01000 	mov	r1, r0
  101318:	e1a0200c 	mov	r2, ip
  10131c:	e2804070 	add	r4, r0, #112	; 0x70
  101320:	e280b020 	add	fp, r0, #32
  101324:	f4612a8d 	vld1.32	{d18-d19}, [r1]!
  101328:	e2809030 	add	r9, r0, #48	; 0x30
  10132c:	e58d4010 	str	r4, [sp, #16]
  101330:	e28ca020 	add	sl, ip, #32
  101334:	e59d40a0 	ldr	r4, [sp, #160]	; 0xa0
  101338:	e28c8030 	add	r8, ip, #48	; 0x30
  10133c:	f4620a8d 	vld1.32	{d16-d17}, [r2]!
  101340:	e2807040 	add	r7, r0, #64	; 0x40
  101344:	e28c5040 	add	r5, ip, #64	; 0x40
  101348:	e2806050 	add	r6, r0, #80	; 0x50
  10134c:	f4616a8f 	vld1.32	{d22-d23}, [r1]
  101350:	e2544001 	subs	r4, r4, #1
  101354:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
  101358:	e28c1060 	add	r1, ip, #96	; 0x60
  10135c:	f4624a8f 	vld1.32	{d20-d21}, [r2]
  101360:	e28c2070 	add	r2, ip, #112	; 0x70

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  101364:	f3fa2166 	vuzp.32	q9, q11
  101368:	ecc32b04 	vstmia	r3, {d18-d19}
  10136c:	edc36b04 	vstr	d22, [r3, #16]
  101370:	edc37b06 	vstr	d23, [r3, #24]
  return __rv;
  101374:	eddd2b2e 	vldr	d18, [sp, #184]	; 0xb8
  101378:	eddd3b30 	vldr	d19, [sp, #192]	; 0xc0
  10137c:	edddab32 	vldr	d26, [sp, #200]	; 0xc8
  101380:	edddbb34 	vldr	d27, [sp, #208]	; 0xd0
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  101384:	f46b8a8f 	vld1.32	{d24-d25}, [fp]
  101388:	f469ea8f 	vld1.32	{d30-d31}, [r9]

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  10138c:	f3fa0164 	vuzp.32	q8, q10
  101390:	ecc30b04 	vstmia	r3, {d16-d17}
  101394:	edc34b04 	vstr	d20, [r3, #16]
  101398:	edc35b06 	vstr	d21, [r3, #24]
  return __rv;
  10139c:	edddcb2e 	vldr	d28, [sp, #184]	; 0xb8
  1013a0:	eddddb30 	vldr	d29, [sp, #192]	; 0xc0
  1013a4:	ed9dcb32 	vldr	d12, [sp, #200]	; 0xc8
  1013a8:	ed9ddb34 	vldr	d13, [sp, #208]	; 0xd0
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  1013ac:	f46a0a8f 	vld1.32	{d16-d17}, [sl]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  1013b0:	f3028dfc 	vmul.f32	q4, q9, q14
  1013b4:	ed8d8b24 	vstr	d8, [sp, #144]	; 0x90
  1013b8:	ed8d9b26 	vstr	d9, [sp, #152]	; 0x98
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  1013bc:	f4684a8f 	vld1.32	{d20-d21}, [r8]
  1013c0:	f4676a8f 	vld1.32	{d22-d23}, [r7]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  1013c4:	f30aeddc 	vmul.f32	q7, q13, q6
  1013c8:	f302cddc 	vmul.f32	q6, q9, q6

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  1013cc:	f3fa816e 	vuzp.32	q12, q15
  1013d0:	edc3eb04 	vstr	d30, [r3, #16]
  1013d4:	edc3fb06 	vstr	d31, [r3, #24]
  1013d8:	ecc38b04 	vstmia	r3, {d24-d25}
  return __rv;
  1013dc:	ed9d4b2e 	vldr	d4, [sp, #184]	; 0xb8
  1013e0:	ed9d5b30 	vldr	d5, [sp, #192]	; 0xc0
  1013e4:	ed9d6b32 	vldr	d6, [sp, #200]	; 0xc8
  1013e8:	ed9d7b34 	vldr	d7, [sp, #208]	; 0xd0
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  1013ec:	f4668a8f 	vld1.32	{d24-d25}, [r6]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  1013f0:	f34aedfc 	vmul.f32	q15, q13, q14

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  1013f4:	f3fa0164 	vuzp.32	q8, q10
  1013f8:	ecc30b04 	vstmia	r3, {d16-d17}
  1013fc:	edc34b04 	vstr	d20, [r3, #16]
  101400:	edc35b06 	vstr	d21, [r3, #24]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  101404:	eccdeb04 	vstmia	sp, {d30-d31}
__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  return __rv;
  101408:	ed9d0b2e 	vldr	d0, [sp, #184]	; 0xb8
  10140c:	ed9d1b30 	vldr	d1, [sp, #192]	; 0xc0
  101410:	ed9d2b32 	vldr	d2, [sp, #200]	; 0xc8
  101414:	ed9d3b34 	vldr	d3, [sp, #208]	; 0xd0
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  101418:	f4650a8f 	vld1.32	{d16-d17}, [r5]
  10141c:	e28c5050 	add	r5, ip, #80	; 0x50
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  101420:	f3048d50 	vmul.f32	q4, q2, q0
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  101424:	e28cc080 	add	ip, ip, #128	; 0x80
  101428:	f4654a8f 	vld1.32	{d20-d21}, [r5]
  10142c:	e2805060 	add	r5, r0, #96	; 0x60
  101430:	e2800080 	add	r0, r0, #128	; 0x80

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  101434:	f3fa6168 	vuzp.32	q11, q12
  101438:	ecc36b04 	vstmia	r3, {d22-d23}
  10143c:	edc38b04 	vstr	d24, [r3, #16]
  101440:	edc39b06 	vstr	d25, [r3, #24]
  return __rv;
  101444:	eddd8b2e 	vldr	d24, [sp, #184]	; 0xb8
  101448:	eddd9b30 	vldr	d25, [sp, #192]	; 0xc0
  10144c:	edddcb32 	vldr	d28, [sp, #200]	; 0xc8
  101450:	eddddb34 	vldr	d29, [sp, #208]	; 0xd0

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  101454:	f3fa0164 	vuzp.32	q8, q10
  101458:	ecc30b04 	vstmia	r3, {d16-d17}
  10145c:	edc34b04 	vstr	d20, [r3, #16]
  101460:	edc35b06 	vstr	d21, [r3, #24]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  101464:	e59d4010 	ldr	r4, [sp, #16]
__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  return __rv;
  101468:	edddeb2e 	vldr	d30, [sp, #184]	; 0xb8
  10146c:	edddfb30 	vldr	d31, [sp, #192]	; 0xc0
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  101470:	f4650a8f 	vld1.32	{d16-d17}, [r5]
__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  return __rv;
  101474:	edddab32 	vldr	d26, [sp, #200]	; 0xc8
  101478:	edddbb34 	vldr	d27, [sp, #208]	; 0xd0
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  10147c:	ed8d8b04 	vstr	d8, [sp, #16]
  101480:	ed8d9b06 	vstr	d9, [sp, #24]
  101484:	f3060d50 	vmul.f32	q0, q3, q0
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  101488:	f4612a8f 	vld1.32	{d18-d19}, [r1]
  10148c:	f4644a8f 	vld1.32	{d20-d21}, [r4]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  101490:	f3068d52 	vmul.f32	q4, q3, q1
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  101494:	f4626a8f 	vld1.32	{d22-d23}, [r2]

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  101498:	f3fa0164 	vuzp.32	q8, q10
  10149c:	ecc30b04 	vstmia	r3, {d16-d17}
  1014a0:	edc34b04 	vstr	d20, [r3, #16]
  1014a4:	edc35b06 	vstr	d21, [r3, #24]
  return __rv;
  1014a8:	eddd0b2e 	vldr	d16, [sp, #184]	; 0xb8
  1014ac:	eddd1b30 	vldr	d17, [sp, #192]	; 0xc0
  1014b0:	eddd4b32 	vldr	d20, [sp, #200]	; 0xc8
  1014b4:	eddd5b34 	vldr	d21, [sp, #208]	; 0xd0

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  1014b8:	f3fa2166 	vuzp.32	q9, q11
  1014bc:	ecc32b04 	vstmia	r3, {d18-d19}
  1014c0:	edc36b04 	vstr	d22, [r3, #16]
  1014c4:	edc37b06 	vstr	d23, [r3, #24]
  return __rv;
  1014c8:	eddd6b2e 	vldr	d22, [sp, #184]	; 0xb8
  1014cc:	eddd7b30 	vldr	d23, [sp, #192]	; 0xc0
  1014d0:	eddd2b32 	vldr	d18, [sp, #200]	; 0xc8
  1014d4:	eddd3b34 	vldr	d19, [sp, #208]	; 0xd0
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  1014d8:	f30c6dfa 	vmul.f32	q3, q14, q13
  1014dc:	f3042d52 	vmul.f32	q1, q2, q1
  1014e0:	f34ccdfe 	vmul.f32	q14, q14, q15
  1014e4:	f3084dfe 	vmul.f32	q2, q12, q15
  1014e8:	f340edf6 	vmul.f32	q15, q8, q11
  1014ec:	f3488dfa 	vmul.f32	q12, q12, q13
  1014f0:	f3400df2 	vmul.f32	q8, q8, q9
  1014f4:	f344adf2 	vmul.f32	q13, q10, q9
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vsubq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vsubv4sf (__a, __b, 3);
  1014f8:	eddd2b24 	vldr	d18, [sp, #144]	; 0x90
  1014fc:	eddd3b26 	vldr	d19, [sp, #152]	; 0x98
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  101500:	f3444df6 	vmul.f32	q10, q10, q11
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vaddq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vaddv4sf (__a, __b, 3);
  101504:	ecdd6b04 	vldmia	sp, {d22-d23}
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vsubq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vsubv4sf (__a, __b, 3);
  101508:	f222edce 	vsub.f32	q7, q9, q7
  10150c:	eddd2b04 	vldr	d18, [sp, #16]
  101510:	eddd3b06 	vldr	d19, [sp, #24]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vaddq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vaddv4sf (__a, __b, 3);
  101514:	f206cdcc 	vadd.f32	q6, q11, q6
  101518:	eddd6b20 	vldr	d22, [sp, #128]	; 0x80
  10151c:	eddd7b22 	vldr	d23, [sp, #136]	; 0x88
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vsubq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vsubv4sf (__a, __b, 3);
  101520:	f2228dc8 	vsub.f32	q4, q9, q4
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vaddq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vaddv4sf (__a, __b, 3);
  101524:	f24ccde8 	vadd.f32	q14, q14, q12
  101528:	eddd8b08 	vldr	d24, [sp, #32]
  10152c:	eddd9b0a 	vldr	d25, [sp, #40]	; 0x28
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vsubq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vsubv4sf (__a, __b, 3);
  101530:	f26eadea 	vsub.f32	q13, q15, q13
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vaddq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vaddv4sf (__a, __b, 3);
  101534:	edddeb0c 	vldr	d30, [sp, #48]	; 0x30
  101538:	edddfb0e 	vldr	d31, [sp, #56]	; 0x38
  10153c:	f2444de0 	vadd.f32	q10, q10, q8
  101540:	eddd0b14 	vldr	d16, [sp, #80]	; 0x50
  101544:	eddd1b16 	vldr	d17, [sp, #88]	; 0x58
  101548:	f2002d42 	vadd.f32	q1, q0, q1
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vsubq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vsubv4sf (__a, __b, 3);
  10154c:	f2246d46 	vsub.f32	q3, q2, q3
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vaddq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vaddv4sf (__a, __b, 3);
  101550:	f24c6d66 	vadd.f32	q11, q6, q11
  101554:	edcd6b20 	vstr	d22, [sp, #128]	; 0x80
  101558:	edcd7b22 	vstr	d23, [sp, #136]	; 0x88
  10155c:	f2488d68 	vadd.f32	q12, q4, q12
  101560:	ed9d8b10 	vldr	d8, [sp, #64]	; 0x40
  101564:	ed9d9b12 	vldr	d9, [sp, #72]	; 0x48
  101568:	edcd8b08 	vstr	d24, [sp, #32]
  10156c:	edcd9b0a 	vstr	d25, [sp, #40]	; 0x28
  101570:	f242ed6e 	vadd.f32	q15, q1, q15
  101574:	edcdeb0c 	vstr	d30, [sp, #48]	; 0x30
  101578:	edcdfb0e 	vstr	d31, [sp, #56]	; 0x38
  10157c:	f2068d48 	vadd.f32	q4, q3, q4
  101580:	ed8d8b10 	vstr	d8, [sp, #64]	; 0x40
  101584:	ed8d9b12 	vstr	d9, [sp, #72]	; 0x48
  101588:	f24c0de0 	vadd.f32	q8, q14, q8
  10158c:	edcd0b14 	vstr	d16, [sp, #80]	; 0x50
  101590:	edcd1b16 	vstr	d17, [sp, #88]	; 0x58
  101594:	eddd2b18 	vldr	d18, [sp, #96]	; 0x60
  101598:	eddd3b1a 	vldr	d19, [sp, #104]	; 0x68
  10159c:	eddd6b1c 	vldr	d22, [sp, #112]	; 0x70
  1015a0:	eddd7b1e 	vldr	d23, [sp, #120]	; 0x78
  1015a4:	f24a2de2 	vadd.f32	q9, q13, q9
  1015a8:	edcd2b18 	vstr	d18, [sp, #96]	; 0x60
  1015ac:	edcd3b1a 	vstr	d19, [sp, #104]	; 0x68
  1015b0:	f2446de6 	vadd.f32	q11, q10, q11
  1015b4:	edcd6b1c 	vstr	d22, [sp, #112]	; 0x70
  1015b8:	edcd7b1e 	vstr	d23, [sp, #120]	; 0x78
  1015bc:	f20ead4a 	vadd.f32	q5, q7, q5
  1015c0:	1affff53 	bne	101314 <arm_cmplx_mult_cmplx_f32_dot+0x80>
 * @param[out]  *pDst  points to the output vector     
 * @param[in]  numSamples number of complex samples in each vector     
 * @return none.     
 */
// __INLINE
void arm_cmplx_mult_cmplx_f32_dot(
  1015c4:	e28d40ac 	add	r4, sp, #172	; 0xac
  1015c8:	f22ac15a 	vorr	q6, q5, q5
  1015cc:	e89400d0 	ldm	r4, {r4, r6, r7}
  1015d0:	ed9deb20 	vldr	d14, [sp, #128]	; 0x80
  1015d4:	ed9dfb22 	vldr	d15, [sp, #136]	; 0x88
  1015d8:	e1a03384 	lsl	r3, r4, #7
  1015dc:	e0866003 	add	r6, r6, r3
  1015e0:	e0877003 	add	r7, r7, r3
    /* Decrement the numSamples loop counter */
    blkCnt--;
  }

  blkCnt = numSamples & 15u;
  blkCnt = blkCnt >> 2u;
  1015e4:	e59d30a4 	ldr	r3, [sp, #164]	; 0xa4
  1015e8:	e7e15153 	ubfx	r5, r3, #2, #2

  /* If the blockSize is not a multiple of 16, compute remaining output samples.     
   ** Compute multiple of 4 samples at a time in second loop.  
   ** and remaining 1 to 3 samples in third loop. */
  while(blkCnt > 0u)
  1015ec:	e3550000 	cmp	r5, #0
  1015f0:	0a000028 	beq	101698 <arm_cmplx_mult_cmplx_f32_dot+0x404>
  1015f4:	e1a04005 	mov	r4, r5
  1015f8:	e1a0c007 	mov	ip, r7
  1015fc:	e1a00006 	mov	r0, r6
  101600:	e28d30b8 	add	r3, sp, #184	; 0xb8
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  101604:	e1a01000 	mov	r1, r0
  101608:	e1a0200c 	mov	r2, ip
  10160c:	e2544001 	subs	r4, r4, #1
 * @param[out]  *pDst  points to the output vector     
 * @param[in]  numSamples number of complex samples in each vector     
 * @return none.     
 */
// __INLINE
void arm_cmplx_mult_cmplx_f32_dot(
  101610:	e2800020 	add	r0, r0, #32
  101614:	f4610a8d 	vld1.32	{d16-d17}, [r1]!
  101618:	e28cc020 	add	ip, ip, #32
  10161c:	f4622a8d 	vld1.32	{d18-d19}, [r2]!
  101620:	f4614a8f 	vld1.32	{d20-d21}, [r1]
  101624:	f4626a8f 	vld1.32	{d22-d23}, [r2]

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  101628:	f3fa0164 	vuzp.32	q8, q10
  10162c:	ecc30b04 	vstmia	r3, {d16-d17}
  101630:	edc34b04 	vstr	d20, [r3, #16]
  101634:	edc35b06 	vstr	d21, [r3, #24]
  return __rv;
  101638:	eddd0b2e 	vldr	d16, [sp, #184]	; 0xb8
  10163c:	eddd1b30 	vldr	d17, [sp, #192]	; 0xc0
  101640:	eddd4b32 	vldr	d20, [sp, #200]	; 0xc8
  101644:	eddd5b34 	vldr	d21, [sp, #208]	; 0xd0

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  101648:	f3fa2166 	vuzp.32	q9, q11
  10164c:	ecc32b04 	vstmia	r3, {d18-d19}
  101650:	edc36b04 	vstr	d22, [r3, #16]
  101654:	edc37b06 	vstr	d23, [r3, #24]
  return __rv;
  101658:	eddd6b2e 	vldr	d22, [sp, #184]	; 0xb8
  10165c:	eddd7b30 	vldr	d23, [sp, #192]	; 0xc0
  101660:	eddd2b32 	vldr	d18, [sp, #200]	; 0xc8
  101664:	eddd3b34 	vldr	d19, [sp, #208]	; 0xd0
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  101668:	f340adf6 	vmul.f32	q13, q8, q11
  10166c:	f3448df2 	vmul.f32	q12, q10, q9
  101670:	f3400df2 	vmul.f32	q8, q8, q9
  101674:	f3444df6 	vmul.f32	q10, q10, q11
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vsubq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vsubv4sf (__a, __b, 3);
  101678:	f26a8de8 	vsub.f32	q12, q13, q12
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vaddq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vaddv4sf (__a, __b, 3);
  10167c:	f2440de0 	vadd.f32	q8, q10, q8
  101680:	f208cdcc 	vadd.f32	q6, q12, q6
  101684:	f200edce 	vadd.f32	q7, q8, q7
  blkCnt = blkCnt >> 2u;

  /* If the blockSize is not a multiple of 16, compute remaining output samples.     
   ** Compute multiple of 4 samples at a time in second loop.  
   ** and remaining 1 to 3 samples in third loop. */
  while(blkCnt > 0u)
  101688:	1affffdd 	bne	101604 <arm_cmplx_mult_cmplx_f32_dot+0x370>
 * @param[out]  *pDst  points to the output vector     
 * @param[in]  numSamples number of complex samples in each vector     
 * @return none.     
 */
// __INLINE
void arm_cmplx_mult_cmplx_f32_dot(
  10168c:	e1a05285 	lsl	r5, r5, #5
  101690:	e0866005 	add	r6, r6, r5
  101694:	e0877005 	add	r7, r7, r5

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.     
   ** No intrinsics is used. */
  sum_real =0;
  sum_img =0;
  while(blkCnt > 0u)
  101698:	e59d40a4 	ldr	r4, [sp, #164]	; 0xa4
    c = *pSrcB++;
    d = *pSrcB++;

    /* store the result in the destination buffer. */
    sum_real += ((a * c) - (b * d));
    sum_img += ((a * d) + (b * c));
  10169c:	ed9f5a41 	vldr	s10, [pc, #260]	; 1017a8 <arm_cmplx_mult_cmplx_f32_dot+0x514>

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.     
   ** No intrinsics is used. */
  sum_real =0;
  sum_img =0;
  while(blkCnt > 0u)
  1016a0:	e2143003 	ands	r3, r4, #3
    b = *pSrcA++;
    c = *pSrcB++;
    d = *pSrcB++;

    /* store the result in the destination buffer. */
    sum_real += ((a * c) - (b * d));
  1016a4:	eef04a45 	vmov.f32	s9, s10

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.     
   ** No intrinsics is used. */
  sum_real =0;
  sum_img =0;
  while(blkCnt > 0u)
  1016a8:	0a00000d 	beq	1016e4 <arm_cmplx_mult_cmplx_f32_dot+0x450>
 * @param[out]  *pDst  points to the output vector     
 * @param[in]  numSamples number of complex samples in each vector     
 * @return none.     
 */
// __INLINE
void arm_cmplx_mult_cmplx_f32_dot(
  1016ac:	e2877008 	add	r7, r7, #8
  sum_img =0;
  while(blkCnt > 0u)
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a = *pSrcA++;
  1016b0:	edd65a00 	vldr	s11, [r6]
    b = *pSrcA++;
  1016b4:	ed966a01 	vldr	s12, [r6, #4]

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.     
   ** No intrinsics is used. */
  sum_real =0;
  sum_img =0;
  while(blkCnt > 0u)
  1016b8:	e2533001 	subs	r3, r3, #1
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a = *pSrcA++;
    b = *pSrcA++;
    c = *pSrcB++;
    d = *pSrcB++;
  1016bc:	ed577a01 	vldr	s15, [r7, #-4]
 * @param[out]  *pDst  points to the output vector     
 * @param[in]  numSamples number of complex samples in each vector     
 * @return none.     
 */
// __INLINE
void arm_cmplx_mult_cmplx_f32_dot(
  1016c0:	e2866008 	add	r6, r6, #8
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a = *pSrcA++;
    b = *pSrcA++;
    c = *pSrcB++;
  1016c4:	ed576a02 	vldr	s13, [r7, #-8]
    d = *pSrcB++;

    /* store the result in the destination buffer. */
    sum_real += ((a * c) - (b * d));
  1016c8:	ee267a27 	vmul.f32	s14, s12, s15
    sum_img += ((a * d) + (b * c));
  1016cc:	ee657aa7 	vmul.f32	s15, s11, s15
    b = *pSrcA++;
    c = *pSrcB++;
    d = *pSrcB++;

    /* store the result in the destination buffer. */
    sum_real += ((a * c) - (b * d));
  1016d0:	ee157aa6 	vnmls.f32	s14, s11, s13
    sum_img += ((a * d) + (b * c));
  1016d4:	ee467a26 	vmla.f32	s15, s12, s13
    b = *pSrcA++;
    c = *pSrcB++;
    d = *pSrcB++;

    /* store the result in the destination buffer. */
    sum_real += ((a * c) - (b * d));
  1016d8:	ee744a87 	vadd.f32	s9, s9, s14
    sum_img += ((a * d) + (b * c));
  1016dc:	ee355a27 	vadd.f32	s10, s10, s15

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.     
   ** No intrinsics is used. */
  sum_real =0;
  sum_img =0;
  while(blkCnt > 0u)
  1016e0:	1afffff1 	bne	1016ac <arm_cmplx_mult_cmplx_f32_dot+0x418>
  1016e4:	ed9d8b08 	vldr	d8, [sp, #32]
  1016e8:	ed9d9b0a 	vldr	d9, [sp, #40]	; 0x28
  1016ec:	eddd0b0c 	vldr	d16, [sp, #48]	; 0x30
  1016f0:	eddd1b0e 	vldr	d17, [sp, #56]	; 0x38
  1016f4:	f24c6d48 	vadd.f32	q11, q6, q4
  1016f8:	eddd8b10 	vldr	d24, [sp, #64]	; 0x40
  1016fc:	eddd9b12 	vldr	d25, [sp, #72]	; 0x48
  101700:	f24e4d60 	vadd.f32	q10, q7, q8
  101704:	edddab18 	vldr	d26, [sp, #96]	; 0x60
  101708:	edddbb1a 	vldr	d27, [sp, #104]	; 0x68
  10170c:	edddeb14 	vldr	d30, [sp, #80]	; 0x50
  101710:	edddfb16 	vldr	d31, [sp, #88]	; 0x58
  101714:	ed9d8b1c 	vldr	d8, [sp, #112]	; 0x70
  101718:	ed9d9b1e 	vldr	d9, [sp, #120]	; 0x78
  10171c:	f2482dea 	vadd.f32	q9, q12, q13
  101720:	f24e0dc8 	vadd.f32	q8, q15, q4
  101724:	f2462de2 	vadd.f32	q9, q11, q9
  101728:	f2440de0 	vadd.f32	q8, q10, q8
}

__extension__ static __inline float32_t __attribute__ ((__always_inline__))
vgetq_lane_f32 (float32x4_t __a, const int __b)
{
  return (float32_t)__builtin_neon_vget_lanev4sf (__a, __b, 3);
  10172c:	ee121b90 	vmov.32	r1, d18[0]
  101730:	ee103b90 	vmov.32	r3, d16[0]
  101734:	ee322b90 	vmov.32	r2, d18[1]
  101738:	ee304b90 	vmov.32	r4, d16[1]
  10173c:	ee071a10 	vmov	s14, r1
  101740:	ee073a90 	vmov	s15, r3
  101744:	ee062a10 	vmov	s12, r2
  101748:	ee064a90 	vmov	s13, r4
	acc2.val[0] = vaddq_f32(acc3.val[0], acc4.val[0]);
	acc2.val[1] = vaddq_f32(acc3.val[1], acc4.val[1]);
	acc1.val[0] = vaddq_f32(acc1.val[0], acc2.val[0]);
	acc1.val[1] = vaddq_f32(acc1.val[1], acc2.val[1]);

	sum_real += vgetq_lane_f32(acc1.val[0], 0) + vgetq_lane_f32(acc1.val[0], 1)
  10174c:	ee367a07 	vadd.f32	s14, s12, s14
		+ vgetq_lane_f32(acc1.val[0], 2) + vgetq_lane_f32(acc1.val[0], 3);
	sum_img += vgetq_lane_f32(acc1.val[1], 0) + vgetq_lane_f32(acc1.val[1], 1)
  101750:	ee767aa7 	vadd.f32	s15, s13, s15
  101754:	ee131b90 	vmov.32	r1, d19[0]
  101758:	ee112b90 	vmov.32	r2, d17[0]
  10175c:	ee061a10 	vmov	s12, r1
  101760:	ee062a90 	vmov	s13, r2
	acc2.val[1] = vaddq_f32(acc3.val[1], acc4.val[1]);
	acc1.val[0] = vaddq_f32(acc1.val[0], acc2.val[0]);
	acc1.val[1] = vaddq_f32(acc1.val[1], acc2.val[1]);

	sum_real += vgetq_lane_f32(acc1.val[0], 0) + vgetq_lane_f32(acc1.val[0], 1)
		+ vgetq_lane_f32(acc1.val[0], 2) + vgetq_lane_f32(acc1.val[0], 3);
  101764:	ee377a06 	vadd.f32	s14, s14, s12
	sum_img += vgetq_lane_f32(acc1.val[1], 0) + vgetq_lane_f32(acc1.val[1], 1)
		+ vgetq_lane_f32(acc1.val[1], 2) + vgetq_lane_f32(acc1.val[1], 3);
  101768:	ee777aa6 	vadd.f32	s15, s15, s13
  10176c:	ee333b90 	vmov.32	r3, d19[1]
  101770:	ee314b90 	vmov.32	r4, d17[1]
  101774:	ee063a10 	vmov	s12, r3
  101778:	ee064a90 	vmov	s13, r4
	acc2.val[1] = vaddq_f32(acc3.val[1], acc4.val[1]);
	acc1.val[0] = vaddq_f32(acc1.val[0], acc2.val[0]);
	acc1.val[1] = vaddq_f32(acc1.val[1], acc2.val[1]);

	sum_real += vgetq_lane_f32(acc1.val[0], 0) + vgetq_lane_f32(acc1.val[0], 1)
		+ vgetq_lane_f32(acc1.val[0], 2) + vgetq_lane_f32(acc1.val[0], 3);
  10177c:	ee377a06 	vadd.f32	s14, s14, s12
	sum_img += vgetq_lane_f32(acc1.val[1], 0) + vgetq_lane_f32(acc1.val[1], 1)
		+ vgetq_lane_f32(acc1.val[1], 2) + vgetq_lane_f32(acc1.val[1], 3);
  101780:	ee777aa6 	vadd.f32	s15, s15, s13

	*pDst++=sum_real;
  101784:	e59d10a8 	ldr	r1, [sp, #168]	; 0xa8
	acc2.val[0] = vaddq_f32(acc3.val[0], acc4.val[0]);
	acc2.val[1] = vaddq_f32(acc3.val[1], acc4.val[1]);
	acc1.val[0] = vaddq_f32(acc1.val[0], acc2.val[0]);
	acc1.val[1] = vaddq_f32(acc1.val[1], acc2.val[1]);

	sum_real += vgetq_lane_f32(acc1.val[0], 0) + vgetq_lane_f32(acc1.val[0], 1)
  101788:	ee774a24 	vadd.f32	s9, s14, s9
		+ vgetq_lane_f32(acc1.val[0], 2) + vgetq_lane_f32(acc1.val[0], 3);
	sum_img += vgetq_lane_f32(acc1.val[1], 0) + vgetq_lane_f32(acc1.val[1], 1)
  10178c:	ee375a85 	vadd.f32	s10, s15, s10
		+ vgetq_lane_f32(acc1.val[1], 2) + vgetq_lane_f32(acc1.val[1], 3);

	*pDst++=sum_real;
  101790:	edc14a00 	vstr	s9, [r1]
	*pDst++=sum_img;
  101794:	ed815a01 	vstr	s10, [r1, #4]

}
  101798:	e28dd0d8 	add	sp, sp, #216	; 0xd8
  10179c:	ecbd8b10 	vpop	{d8-d15}
  1017a0:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
  1017a4:	e12fff1e 	bx	lr
  1017a8:	00000000 	.word	0x00000000

001017ac <sp_cmplx_vector_dot_mul_dsp_concept>:
/*

*/

void  sp_cmplx_vector_dot_mul_dsp_concept( unsigned int ui_vector_length )
{
  1017ac:	e1a03000 	mov	r3, r0

	arm_cmplx_mult_cmplx_f32_dot(gf_array_src_a, gf_array_src_b, gf_sum_dsp_concept, ui_vector_length );
  1017b0:	e3051000 	movw	r1, #20480	; 0x5000
  1017b4:	e3010000 	movw	r0, #4096	; 0x1000
  1017b8:	e3092000 	movw	r2, #36864	; 0x9000
  1017bc:	e3400000 	movt	r0, #0
  1017c0:	e3401000 	movt	r1, #0
  1017c4:	e3402000 	movt	r2, #0
  1017c8:	eafffeb1 	b	101294 <arm_cmplx_mult_cmplx_f32_dot>

001017cc <arm_cmplx_mult_cmplx_f32_dot2>:
 * @return none.     
 */
// __INLINE
void arm_cmplx_mult_cmplx_f32_dot2(
  uint32_t numSamples )
{
  1017cc:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp}
  1017d0:	ed2d8b10 	vpush	{d8-d15}
  1017d4:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
  1017d8:	e58d00a8 	str	r0, [sp, #168]	; 0xa8
  acc4.val[1] = vdupq_n_f32(0.0f);

  /* Loop over blockSize number of values */
  blkCnt = numSamples >> 4u;

  while(blkCnt > 0u)
  1017dc:	e1b00220 	lsrs	r0, r0, #4
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vdupq_n_f32 (float32_t __a)
{
  return (float32x4_t)__builtin_neon_vdup_nv4sf ((__builtin_neon_sf) __a);
  1017e0:	f280c050 	vmov.i32	q6, #0	; 0x00000000
  1017e4:	ed8dcb0a 	vstr	d12, [sp, #40]	; 0x28
  1017e8:	ed8ddb0c 	vstr	d13, [sp, #48]	; 0x30
  1017ec:	e58d00ac 	str	r0, [sp, #172]	; 0xac
  1017f0:	ed8dcb0e 	vstr	d12, [sp, #56]	; 0x38
  1017f4:	ed8ddb10 	vstr	d13, [sp, #64]	; 0x40
  1017f8:	f22ce15c 	vorr	q7, q6, q6
  1017fc:	ed8dcb12 	vstr	d12, [sp, #72]	; 0x48
  101800:	ed8ddb14 	vstr	d13, [sp, #80]	; 0x50
  101804:	ed8dcb16 	vstr	d12, [sp, #88]	; 0x58
  101808:	ed8ddb18 	vstr	d13, [sp, #96]	; 0x60
  10180c:	ed8dcb1a 	vstr	d12, [sp, #104]	; 0x68
  101810:	ed8ddb1c 	vstr	d13, [sp, #112]	; 0x70
  101814:	ed8dcb1e 	vstr	d12, [sp, #120]	; 0x78
  101818:	ed8ddb20 	vstr	d13, [sp, #128]	; 0x80
  10181c:	0a00012f 	beq	101ce0 <arm_cmplx_mult_cmplx_f32_dot2+0x514>
  101820:	e59f14d0 	ldr	r1, [pc, #1232]	; 101cf8 <arm_cmplx_mult_cmplx_f32_dot2+0x52c>
  101824:	e28d30b0 	add	r3, sp, #176	; 0xb0
  101828:	e59f24cc 	ldr	r2, [pc, #1228]	; 101cfc <arm_cmplx_mult_cmplx_f32_dot2+0x530>
  10182c:	ed8dcb22 	vstr	d12, [sp, #136]	; 0x88
  101830:	ed8ddb24 	vstr	d13, [sp, #144]	; 0x90
  101834:	f22ca15c 	vorr	q5, q6, q6
  101838:	e58d0024 	str	r0, [sp, #36]	; 0x24
  10183c:	e59d8024 	ldr	r8, [sp, #36]	; 0x24
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  101840:	e1a0c001 	mov	ip, r1
  101844:	e2415010 	sub	r5, r1, #16
  101848:	e1a00002 	mov	r0, r2
  10184c:	e2424010 	sub	r4, r2, #16
  101850:	f46c6a8d 	vld1.32	{d22-d23}, [ip]!
  101854:	e281b020 	add	fp, r1, #32
  101858:	e2829020 	add	r9, r2, #32
  10185c:	f4652a8f 	vld1.32	{d18-d19}, [r5]
  101860:	e2588001 	subs	r8, r8, #1
  101864:	e2825040 	add	r5, r2, #64	; 0x40
  101868:	e58d8024 	str	r8, [sp, #36]	; 0x24
  10186c:	f4604a8d 	vld1.32	{d20-d21}, [r0]!
  101870:	e281a030 	add	sl, r1, #48	; 0x30
  101874:	e58d5000 	str	r5, [sp]
  101878:	e2817050 	add	r7, r1, #80	; 0x50
  10187c:	f4640a8f 	vld1.32	{d16-d17}, [r4]
  101880:	e2816060 	add	r6, r1, #96	; 0x60
  101884:	e2825050 	add	r5, r2, #80	; 0x50
  101888:	e2824060 	add	r4, r2, #96	; 0x60

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  10188c:	f3fa2166 	vuzp.32	q9, q11
  101890:	ecc32b04 	vstmia	r3, {d18-d19}
  101894:	edc36b04 	vstr	d22, [r3, #16]
  101898:	edc37b06 	vstr	d23, [r3, #24]
  return __rv;
  10189c:	eddd2b2c 	vldr	d18, [sp, #176]	; 0xb0
  1018a0:	eddd3b2e 	vldr	d19, [sp, #184]	; 0xb8
  1018a4:	edddab30 	vldr	d26, [sp, #192]	; 0xc0
  1018a8:	edddbb32 	vldr	d27, [sp, #200]	; 0xc8
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  1018ac:	f46c8a8f 	vld1.32	{d24-d25}, [ip]
  1018b0:	f46bea8f 	vld1.32	{d30-d31}, [fp]

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  1018b4:	f3fa0164 	vuzp.32	q8, q10
  1018b8:	ecc30b04 	vstmia	r3, {d16-d17}
  1018bc:	edc34b04 	vstr	d20, [r3, #16]
  1018c0:	edc35b06 	vstr	d21, [r3, #24]
  return __rv;
  1018c4:	edddcb2c 	vldr	d28, [sp, #176]	; 0xb0
  1018c8:	eddddb2e 	vldr	d29, [sp, #184]	; 0xb8
  1018cc:	ed9dcb30 	vldr	d12, [sp, #192]	; 0xc0
  1018d0:	ed9ddb32 	vldr	d13, [sp, #200]	; 0xc8
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  1018d4:	f4600a8f 	vld1.32	{d16-d17}, [r0]
  1018d8:	e2810040 	add	r0, r1, #64	; 0x40
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  1018dc:	f3028dfc 	vmul.f32	q4, q9, q14
  1018e0:	ed8d8b26 	vstr	d8, [sp, #152]	; 0x98
  1018e4:	ed8d9b28 	vstr	d9, [sp, #160]	; 0xa0
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  1018e8:	f4694a8f 	vld1.32	{d20-d21}, [r9]
  1018ec:	e2811080 	add	r1, r1, #128	; 0x80
  1018f0:	f46a6a8f 	vld1.32	{d22-d23}, [sl]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  1018f4:	f30aeddc 	vmul.f32	q7, q13, q6
  1018f8:	f302cddc 	vmul.f32	q6, q9, q6

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  1018fc:	f3fa816e 	vuzp.32	q12, q15
  101900:	edc3eb04 	vstr	d30, [r3, #16]
  101904:	edc3fb06 	vstr	d31, [r3, #24]
  101908:	ecc38b04 	vstmia	r3, {d24-d25}
  return __rv;
  10190c:	ed9d6b2c 	vldr	d6, [sp, #176]	; 0xb0
  101910:	ed9d7b2e 	vldr	d7, [sp, #184]	; 0xb8
  101914:	ed9d2b30 	vldr	d2, [sp, #192]	; 0xc0
  101918:	ed9d3b32 	vldr	d3, [sp, #200]	; 0xc8
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  10191c:	f4608a8f 	vld1.32	{d24-d25}, [r0]
  101920:	e2820030 	add	r0, r2, #48	; 0x30
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  101924:	f34aedfc 	vmul.f32	q15, q13, q14
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  101928:	e2822080 	add	r2, r2, #128	; 0x80

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  10192c:	f3fa0164 	vuzp.32	q8, q10
  101930:	ecc30b04 	vstmia	r3, {d16-d17}
  101934:	edc34b04 	vstr	d20, [r3, #16]
  101938:	edc35b06 	vstr	d21, [r3, #24]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  10193c:	e59d8000 	ldr	r8, [sp]
__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  return __rv;
  101940:	ed9d0b2c 	vldr	d0, [sp, #176]	; 0xb0
  101944:	ed9d1b2e 	vldr	d1, [sp, #184]	; 0xb8
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  101948:	f4600a8f 	vld1.32	{d16-d17}, [r0]
__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  return __rv;
  10194c:	ed9d4b30 	vldr	d4, [sp, #192]	; 0xc0
  101950:	ed9d5b32 	vldr	d5, [sp, #200]	; 0xc8
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  101954:	f3068d50 	vmul.f32	q4, q3, q0
  101958:	f3066d54 	vmul.f32	q3, q3, q2
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  10195c:	f4684a8f 	vld1.32	{d20-d21}, [r8]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  101960:	eccdeb04 	vstmia	sp, {d30-d31}

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  101964:	f3fa6168 	vuzp.32	q11, q12
  101968:	ecc36b04 	vstmia	r3, {d22-d23}
  10196c:	edc38b04 	vstr	d24, [r3, #16]
  101970:	edc39b06 	vstr	d25, [r3, #24]
  return __rv;
  101974:	eddd8b2c 	vldr	d24, [sp, #176]	; 0xb0
  101978:	eddd9b2e 	vldr	d25, [sp, #184]	; 0xb8
  10197c:	edddcb30 	vldr	d28, [sp, #192]	; 0xc0
  101980:	eddddb32 	vldr	d29, [sp, #200]	; 0xc8

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  101984:	f3fa0164 	vuzp.32	q8, q10
  101988:	ecc30b04 	vstmia	r3, {d16-d17}
  10198c:	edc34b04 	vstr	d20, [r3, #16]
  101990:	edc35b06 	vstr	d21, [r3, #24]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  101994:	ed8d8b04 	vstr	d8, [sp, #16]
  101998:	ed8d9b06 	vstr	d9, [sp, #24]
__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  return __rv;
  10199c:	edddeb2c 	vldr	d30, [sp, #176]	; 0xb0
  1019a0:	edddfb2e 	vldr	d31, [sp, #184]	; 0xb8
  1019a4:	edddab30 	vldr	d26, [sp, #192]	; 0xc0
  1019a8:	edddbb32 	vldr	d27, [sp, #200]	; 0xc8
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  1019ac:	f4670a8f 	vld1.32	{d16-d17}, [r7]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  1019b0:	f3028d54 	vmul.f32	q4, q1, q2
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  1019b4:	f4664a8f 	vld1.32	{d20-d21}, [r6]
  1019b8:	f4652a8f 	vld1.32	{d18-d19}, [r5]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  1019bc:	f30c4dfa 	vmul.f32	q2, q14, q13
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  1019c0:	f4646a8f 	vld1.32	{d22-d23}, [r4]

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  1019c4:	f3fa0164 	vuzp.32	q8, q10
  1019c8:	ecc30b04 	vstmia	r3, {d16-d17}
  1019cc:	edc34b04 	vstr	d20, [r3, #16]
  1019d0:	edc35b06 	vstr	d21, [r3, #24]
  return __rv;
  1019d4:	eddd0b2c 	vldr	d16, [sp, #176]	; 0xb0
  1019d8:	eddd1b2e 	vldr	d17, [sp, #184]	; 0xb8
  1019dc:	eddd4b30 	vldr	d20, [sp, #192]	; 0xc0
  1019e0:	eddd5b32 	vldr	d21, [sp, #200]	; 0xc8

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  1019e4:	f3fa2166 	vuzp.32	q9, q11
  1019e8:	ecc32b04 	vstmia	r3, {d18-d19}
  1019ec:	edc36b04 	vstr	d22, [r3, #16]
  1019f0:	edc37b06 	vstr	d23, [r3, #24]
  return __rv;
  1019f4:	eddd6b2c 	vldr	d22, [sp, #176]	; 0xb0
  1019f8:	eddd7b2e 	vldr	d23, [sp, #184]	; 0xb8
  1019fc:	eddd2b30 	vldr	d18, [sp, #192]	; 0xc0
  101a00:	eddd3b32 	vldr	d19, [sp, #200]	; 0xc8
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  101a04:	f3022d50 	vmul.f32	q1, q1, q0
  101a08:	f34ccdfe 	vmul.f32	q14, q14, q15
  101a0c:	f3080dfe 	vmul.f32	q0, q12, q15
  101a10:	f340edf6 	vmul.f32	q15, q8, q11
  101a14:	f3488dfa 	vmul.f32	q12, q12, q13
  101a18:	f3400df2 	vmul.f32	q8, q8, q9
  101a1c:	f344adf2 	vmul.f32	q13, q10, q9
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vsubq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vsubv4sf (__a, __b, 3);
  101a20:	eddd2b26 	vldr	d18, [sp, #152]	; 0x98
  101a24:	eddd3b28 	vldr	d19, [sp, #160]	; 0xa0
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  101a28:	f3444df6 	vmul.f32	q10, q10, q11
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vaddq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vaddv4sf (__a, __b, 3);
  101a2c:	ecdd6b04 	vldmia	sp, {d22-d23}
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vsubq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vsubv4sf (__a, __b, 3);
  101a30:	f222edce 	vsub.f32	q7, q9, q7
  101a34:	eddd2b04 	vldr	d18, [sp, #16]
  101a38:	eddd3b06 	vldr	d19, [sp, #24]
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vaddq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vaddv4sf (__a, __b, 3);
  101a3c:	f206cdcc 	vadd.f32	q6, q11, q6
  101a40:	eddd6b22 	vldr	d22, [sp, #136]	; 0x88
  101a44:	eddd7b24 	vldr	d23, [sp, #144]	; 0x90
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vsubq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vsubv4sf (__a, __b, 3);
  101a48:	f2228dc8 	vsub.f32	q4, q9, q4
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vaddq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vaddv4sf (__a, __b, 3);
  101a4c:	f24ccde8 	vadd.f32	q14, q14, q12
  101a50:	eddd8b0a 	vldr	d24, [sp, #40]	; 0x28
  101a54:	eddd9b0c 	vldr	d25, [sp, #48]	; 0x30
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vsubq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vsubv4sf (__a, __b, 3);
  101a58:	f26eadea 	vsub.f32	q13, q15, q13
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vaddq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vaddv4sf (__a, __b, 3);
  101a5c:	edddeb0e 	vldr	d30, [sp, #56]	; 0x38
  101a60:	edddfb10 	vldr	d31, [sp, #64]	; 0x40
  101a64:	f2444de0 	vadd.f32	q10, q10, q8
  101a68:	eddd0b16 	vldr	d16, [sp, #88]	; 0x58
  101a6c:	eddd1b18 	vldr	d17, [sp, #96]	; 0x60
  101a70:	f2022d46 	vadd.f32	q1, q1, q3
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vsubq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vsubv4sf (__a, __b, 3);
  101a74:	f2204d44 	vsub.f32	q2, q0, q2
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vaddq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vaddv4sf (__a, __b, 3);
  101a78:	f24c6d66 	vadd.f32	q11, q6, q11
  101a7c:	edcd6b22 	vstr	d22, [sp, #136]	; 0x88
  101a80:	edcd7b24 	vstr	d23, [sp, #144]	; 0x90
  101a84:	f2488d68 	vadd.f32	q12, q4, q12
  101a88:	ed9d8b12 	vldr	d8, [sp, #72]	; 0x48
  101a8c:	ed9d9b14 	vldr	d9, [sp, #80]	; 0x50
  101a90:	edcd8b0a 	vstr	d24, [sp, #40]	; 0x28
  101a94:	edcd9b0c 	vstr	d25, [sp, #48]	; 0x30
  101a98:	f242ed6e 	vadd.f32	q15, q1, q15
  101a9c:	edcdeb0e 	vstr	d30, [sp, #56]	; 0x38
  101aa0:	edcdfb10 	vstr	d31, [sp, #64]	; 0x40
  101aa4:	f2048d48 	vadd.f32	q4, q2, q4
  101aa8:	ed8d8b12 	vstr	d8, [sp, #72]	; 0x48
  101aac:	ed8d9b14 	vstr	d9, [sp, #80]	; 0x50
  101ab0:	f24c0de0 	vadd.f32	q8, q14, q8
  101ab4:	edcd0b16 	vstr	d16, [sp, #88]	; 0x58
  101ab8:	edcd1b18 	vstr	d17, [sp, #96]	; 0x60
  101abc:	f20ead4a 	vadd.f32	q5, q7, q5
  101ac0:	eddd2b1a 	vldr	d18, [sp, #104]	; 0x68
  101ac4:	eddd3b1c 	vldr	d19, [sp, #112]	; 0x70
  101ac8:	eddd6b1e 	vldr	d22, [sp, #120]	; 0x78
  101acc:	eddd7b20 	vldr	d23, [sp, #128]	; 0x80
  101ad0:	f24a2de2 	vadd.f32	q9, q13, q9
  101ad4:	edcd2b1a 	vstr	d18, [sp, #104]	; 0x68
  101ad8:	edcd3b1c 	vstr	d19, [sp, #112]	; 0x70
  101adc:	f2446de6 	vadd.f32	q11, q10, q11
  101ae0:	edcd6b1e 	vstr	d22, [sp, #120]	; 0x78
  101ae4:	edcd7b20 	vstr	d23, [sp, #128]	; 0x80
  101ae8:	1affff53 	bne	10183c <arm_cmplx_mult_cmplx_f32_dot2+0x70>
 * @param[out]  *pDst  points to the output vector     
 * @param[in]  numSamples number of complex samples in each vector     
 * @return none.     
 */
// __INLINE
void arm_cmplx_mult_cmplx_f32_dot2(
  101aec:	e59d00ac 	ldr	r0, [sp, #172]	; 0xac
  101af0:	e3011000 	movw	r1, #4096	; 0x1000
  101af4:	e3053000 	movw	r3, #20480	; 0x5000
  101af8:	e3401000 	movt	r1, #0
  101afc:	e3403000 	movt	r3, #0
  101b00:	f22ac15a 	vorr	q6, q5, q5
  101b04:	ed9deb22 	vldr	d14, [sp, #136]	; 0x88
  101b08:	ed9dfb24 	vldr	d15, [sp, #144]	; 0x90
  101b0c:	e1a02380 	lsl	r2, r0, #7
  101b10:	e0821001 	add	r1, r2, r1
  101b14:	e0822003 	add	r2, r2, r3
    /* Decrement the numSamples loop counter */
    blkCnt--;
  }

  blkCnt = numSamples & 15u;
  blkCnt = blkCnt >> 2u;
  101b18:	e59d30a8 	ldr	r3, [sp, #168]	; 0xa8
  101b1c:	e7e17153 	ubfx	r7, r3, #2, #2

  /* If the blockSize is not a multiple of 16, compute remaining output samples.     
   ** Compute multiple of 4 samples at a time in second loop.  
   ** and remaining 1 to 3 samples in third loop. */
  while(blkCnt > 0u)
  101b20:	e3570000 	cmp	r7, #0
  101b24:	0a000028 	beq	101bcc <arm_cmplx_mult_cmplx_f32_dot2+0x400>
  101b28:	e1a06002 	mov	r6, r2
  101b2c:	e1a05001 	mov	r5, r1
  101b30:	e1a04007 	mov	r4, r7
  101b34:	e28d30b0 	add	r3, sp, #176	; 0xb0
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vld1q_f32 (const float32_t * __a)
{
  return (float32x4_t)__builtin_neon_vld1v4sf ((const __builtin_neon_sf *) __a);
  101b38:	e1a0c005 	mov	ip, r5
  101b3c:	e1a00006 	mov	r0, r6
  101b40:	e2544001 	subs	r4, r4, #1
 * @param[out]  *pDst  points to the output vector     
 * @param[in]  numSamples number of complex samples in each vector     
 * @return none.     
 */
// __INLINE
void arm_cmplx_mult_cmplx_f32_dot2(
  101b44:	e2855020 	add	r5, r5, #32
  101b48:	f46c0a8d 	vld1.32	{d16-d17}, [ip]!
  101b4c:	e2866020 	add	r6, r6, #32
  101b50:	f4602a8d 	vld1.32	{d18-d19}, [r0]!
  101b54:	f46c4a8f 	vld1.32	{d20-d21}, [ip]
  101b58:	f4606a8f 	vld1.32	{d22-d23}, [r0]

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  101b5c:	f3fa0164 	vuzp.32	q8, q10
  101b60:	ecc30b04 	vstmia	r3, {d16-d17}
  101b64:	edc34b04 	vstr	d20, [r3, #16]
  101b68:	edc35b06 	vstr	d21, [r3, #24]
  return __rv;
  101b6c:	eddd0b2c 	vldr	d16, [sp, #176]	; 0xb0
  101b70:	eddd1b2e 	vldr	d17, [sp, #184]	; 0xb8
  101b74:	eddd4b30 	vldr	d20, [sp, #192]	; 0xc0
  101b78:	eddd5b32 	vldr	d21, [sp, #200]	; 0xc8

__extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))
vuzpq_f32 (float32x4_t __a, float32x4_t __b)
{
  float32x4x2_t __rv;
  __builtin_neon_vuzpv4sf (&__rv.val[0], __a, __b);
  101b7c:	f3fa2166 	vuzp.32	q9, q11
  101b80:	ecc32b04 	vstmia	r3, {d18-d19}
  101b84:	edc36b04 	vstr	d22, [r3, #16]
  101b88:	edc37b06 	vstr	d23, [r3, #24]
  return __rv;
  101b8c:	eddd6b2c 	vldr	d22, [sp, #176]	; 0xb0
  101b90:	eddd7b2e 	vldr	d23, [sp, #184]	; 0xb8
  101b94:	eddd2b30 	vldr	d18, [sp, #192]	; 0xc0
  101b98:	eddd3b32 	vldr	d19, [sp, #200]	; 0xc8
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vmulq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vmulv4sf (__a, __b, 3);
  101b9c:	f340adf6 	vmul.f32	q13, q8, q11
  101ba0:	f3448df2 	vmul.f32	q12, q10, q9
  101ba4:	f3400df2 	vmul.f32	q8, q8, q9
  101ba8:	f3444df6 	vmul.f32	q10, q10, q11
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vsubq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vsubv4sf (__a, __b, 3);
  101bac:	f26a8de8 	vsub.f32	q12, q13, q12
}

__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))
vaddq_f32 (float32x4_t __a, float32x4_t __b)
{
  return (float32x4_t)__builtin_neon_vaddv4sf (__a, __b, 3);
  101bb0:	f2440de0 	vadd.f32	q8, q10, q8
  101bb4:	f208cdcc 	vadd.f32	q6, q12, q6
  101bb8:	f200edce 	vadd.f32	q7, q8, q7
  blkCnt = blkCnt >> 2u;

  /* If the blockSize is not a multiple of 16, compute remaining output samples.     
   ** Compute multiple of 4 samples at a time in second loop.  
   ** and remaining 1 to 3 samples in third loop. */
  while(blkCnt > 0u)
  101bbc:	1affffdd 	bne	101b38 <arm_cmplx_mult_cmplx_f32_dot2+0x36c>
 * @param[out]  *pDst  points to the output vector     
 * @param[in]  numSamples number of complex samples in each vector     
 * @return none.     
 */
// __INLINE
void arm_cmplx_mult_cmplx_f32_dot2(
  101bc0:	e1a07287 	lsl	r7, r7, #5
  101bc4:	e0811007 	add	r1, r1, r7
  101bc8:	e0822007 	add	r2, r2, r7

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.     
   ** No intrinsics is used. */
  sum_real =0;
  sum_img =0;
  while(blkCnt > 0u)
  101bcc:	e59d50a8 	ldr	r5, [sp, #168]	; 0xa8
    c = *pSrcB++;
    d = *pSrcB++;

    /* store the result in the destination buffer. */
    sum_real += ((a * c) - (b * d));
    sum_img += ((a * d) + (b * c));
  101bd0:	ed9f5a47 	vldr	s10, [pc, #284]	; 101cf4 <arm_cmplx_mult_cmplx_f32_dot2+0x528>

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.     
   ** No intrinsics is used. */
  sum_real =0;
  sum_img =0;
  while(blkCnt > 0u)
  101bd4:	e2153003 	ands	r3, r5, #3
    b = *pSrcA++;
    c = *pSrcB++;
    d = *pSrcB++;

    /* store the result in the destination buffer. */
    sum_real += ((a * c) - (b * d));
  101bd8:	eef04a45 	vmov.f32	s9, s10

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.     
   ** No intrinsics is used. */
  sum_real =0;
  sum_img =0;
  while(blkCnt > 0u)
  101bdc:	0a00000d 	beq	101c18 <arm_cmplx_mult_cmplx_f32_dot2+0x44c>
 * @param[out]  *pDst  points to the output vector     
 * @param[in]  numSamples number of complex samples in each vector     
 * @return none.     
 */
// __INLINE
void arm_cmplx_mult_cmplx_f32_dot2(
  101be0:	e2822008 	add	r2, r2, #8
  sum_img =0;
  while(blkCnt > 0u)
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a = *pSrcA++;
  101be4:	edd15a00 	vldr	s11, [r1]
    b = *pSrcA++;
  101be8:	ed916a01 	vldr	s12, [r1, #4]

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.     
   ** No intrinsics is used. */
  sum_real =0;
  sum_img =0;
  while(blkCnt > 0u)
  101bec:	e2533001 	subs	r3, r3, #1
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a = *pSrcA++;
    b = *pSrcA++;
    c = *pSrcB++;
    d = *pSrcB++;
  101bf0:	ed527a01 	vldr	s15, [r2, #-4]
 * @param[out]  *pDst  points to the output vector     
 * @param[in]  numSamples number of complex samples in each vector     
 * @return none.     
 */
// __INLINE
void arm_cmplx_mult_cmplx_f32_dot2(
  101bf4:	e2811008 	add	r1, r1, #8
  {
    /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
    a = *pSrcA++;
    b = *pSrcA++;
    c = *pSrcB++;
  101bf8:	ed526a02 	vldr	s13, [r2, #-8]
    d = *pSrcB++;

    /* store the result in the destination buffer. */
    sum_real += ((a * c) - (b * d));
  101bfc:	ee267a27 	vmul.f32	s14, s12, s15
    sum_img += ((a * d) + (b * c));
  101c00:	ee657aa7 	vmul.f32	s15, s11, s15
    b = *pSrcA++;
    c = *pSrcB++;
    d = *pSrcB++;

    /* store the result in the destination buffer. */
    sum_real += ((a * c) - (b * d));
  101c04:	ee157aa6 	vnmls.f32	s14, s11, s13
    sum_img += ((a * d) + (b * c));
  101c08:	ee467a26 	vmla.f32	s15, s12, s13
    b = *pSrcA++;
    c = *pSrcB++;
    d = *pSrcB++;

    /* store the result in the destination buffer. */
    sum_real += ((a * c) - (b * d));
  101c0c:	ee744a87 	vadd.f32	s9, s9, s14
    sum_img += ((a * d) + (b * c));
  101c10:	ee355a27 	vadd.f32	s10, s10, s15

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.     
   ** No intrinsics is used. */
  sum_real =0;
  sum_img =0;
  while(blkCnt > 0u)
  101c14:	1afffff1 	bne	101be0 <arm_cmplx_mult_cmplx_f32_dot2+0x414>
  101c18:	ed9d8b0a 	vldr	d8, [sp, #40]	; 0x28
  101c1c:	ed9d9b0c 	vldr	d9, [sp, #48]	; 0x30
  101c20:	eddd0b0e 	vldr	d16, [sp, #56]	; 0x38
  101c24:	eddd1b10 	vldr	d17, [sp, #64]	; 0x40
  101c28:	f24c6d48 	vadd.f32	q11, q6, q4
  101c2c:	eddd8b12 	vldr	d24, [sp, #72]	; 0x48
  101c30:	eddd9b14 	vldr	d25, [sp, #80]	; 0x50
  101c34:	f24e4d60 	vadd.f32	q10, q7, q8
  101c38:	edddab1a 	vldr	d26, [sp, #104]	; 0x68
  101c3c:	edddbb1c 	vldr	d27, [sp, #112]	; 0x70
  101c40:	edddeb16 	vldr	d30, [sp, #88]	; 0x58
  101c44:	edddfb18 	vldr	d31, [sp, #96]	; 0x60
  101c48:	ed9d8b1e 	vldr	d8, [sp, #120]	; 0x78
  101c4c:	ed9d9b20 	vldr	d9, [sp, #128]	; 0x80
	sum_real += vgetq_lane_f32(acc1.val[0], 0) + vgetq_lane_f32(acc1.val[0], 1)
		+ vgetq_lane_f32(acc1.val[0], 2) + vgetq_lane_f32(acc1.val[0], 3);
	sum_img += vgetq_lane_f32(acc1.val[1], 0) + vgetq_lane_f32(acc1.val[1], 1)
		+ vgetq_lane_f32(acc1.val[1], 2) + vgetq_lane_f32(acc1.val[1], 3);

	*pDst++=sum_real;
  101c50:	e3093008 	movw	r3, #36872	; 0x9008
  101c54:	f2482dea 	vadd.f32	q9, q12, q13
  101c58:	e3403000 	movt	r3, #0
  101c5c:	f24e0dc8 	vadd.f32	q8, q15, q4
  101c60:	f2462de2 	vadd.f32	q9, q11, q9
  101c64:	f2440de0 	vadd.f32	q8, q10, q8
}

__extension__ static __inline float32_t __attribute__ ((__always_inline__))
vgetq_lane_f32 (float32x4_t __a, const int __b)
{
  return (float32_t)__builtin_neon_vget_lanev4sf (__a, __b, 3);
  101c68:	ee120b90 	vmov.32	r0, d18[0]
  101c6c:	ee105b90 	vmov.32	r5, d16[0]
  101c70:	ee322b90 	vmov.32	r2, d18[1]
  101c74:	ee308b90 	vmov.32	r8, d16[1]
  101c78:	ee070a10 	vmov	s14, r0
  101c7c:	ee075a90 	vmov	s15, r5
  101c80:	ee062a10 	vmov	s12, r2
  101c84:	ee068a90 	vmov	s13, r8
	acc2.val[0] = vaddq_f32(acc3.val[0], acc4.val[0]);
	acc2.val[1] = vaddq_f32(acc3.val[1], acc4.val[1]);
	acc1.val[0] = vaddq_f32(acc1.val[0], acc2.val[0]);
	acc1.val[1] = vaddq_f32(acc1.val[1], acc2.val[1]);

	sum_real += vgetq_lane_f32(acc1.val[0], 0) + vgetq_lane_f32(acc1.val[0], 1)
  101c88:	ee367a07 	vadd.f32	s14, s12, s14
		+ vgetq_lane_f32(acc1.val[0], 2) + vgetq_lane_f32(acc1.val[0], 3);
	sum_img += vgetq_lane_f32(acc1.val[1], 0) + vgetq_lane_f32(acc1.val[1], 1)
  101c8c:	ee767aa7 	vadd.f32	s15, s13, s15
  101c90:	ee130b90 	vmov.32	r0, d19[0]
  101c94:	ee112b90 	vmov.32	r2, d17[0]
  101c98:	ee060a10 	vmov	s12, r0
  101c9c:	ee062a90 	vmov	s13, r2
	acc2.val[1] = vaddq_f32(acc3.val[1], acc4.val[1]);
	acc1.val[0] = vaddq_f32(acc1.val[0], acc2.val[0]);
	acc1.val[1] = vaddq_f32(acc1.val[1], acc2.val[1]);

	sum_real += vgetq_lane_f32(acc1.val[0], 0) + vgetq_lane_f32(acc1.val[0], 1)
		+ vgetq_lane_f32(acc1.val[0], 2) + vgetq_lane_f32(acc1.val[0], 3);
  101ca0:	ee377a06 	vadd.f32	s14, s14, s12
	sum_img += vgetq_lane_f32(acc1.val[1], 0) + vgetq_lane_f32(acc1.val[1], 1)
		+ vgetq_lane_f32(acc1.val[1], 2) + vgetq_lane_f32(acc1.val[1], 3);
  101ca4:	ee777aa6 	vadd.f32	s15, s15, s13
  101ca8:	ee335b90 	vmov.32	r5, d19[1]
  101cac:	ee318b90 	vmov.32	r8, d17[1]
  101cb0:	ee065a10 	vmov	s12, r5
  101cb4:	ee068a90 	vmov	s13, r8
	acc2.val[1] = vaddq_f32(acc3.val[1], acc4.val[1]);
	acc1.val[0] = vaddq_f32(acc1.val[0], acc2.val[0]);
	acc1.val[1] = vaddq_f32(acc1.val[1], acc2.val[1]);

	sum_real += vgetq_lane_f32(acc1.val[0], 0) + vgetq_lane_f32(acc1.val[0], 1)
		+ vgetq_lane_f32(acc1.val[0], 2) + vgetq_lane_f32(acc1.val[0], 3);
  101cb8:	ee377a06 	vadd.f32	s14, s14, s12
	sum_img += vgetq_lane_f32(acc1.val[1], 0) + vgetq_lane_f32(acc1.val[1], 1)
		+ vgetq_lane_f32(acc1.val[1], 2) + vgetq_lane_f32(acc1.val[1], 3);
  101cbc:	ee777aa6 	vadd.f32	s15, s15, s13
	acc2.val[0] = vaddq_f32(acc3.val[0], acc4.val[0]);
	acc2.val[1] = vaddq_f32(acc3.val[1], acc4.val[1]);
	acc1.val[0] = vaddq_f32(acc1.val[0], acc2.val[0]);
	acc1.val[1] = vaddq_f32(acc1.val[1], acc2.val[1]);

	sum_real += vgetq_lane_f32(acc1.val[0], 0) + vgetq_lane_f32(acc1.val[0], 1)
  101cc0:	ee774a24 	vadd.f32	s9, s14, s9
		+ vgetq_lane_f32(acc1.val[0], 2) + vgetq_lane_f32(acc1.val[0], 3);
	sum_img += vgetq_lane_f32(acc1.val[1], 0) + vgetq_lane_f32(acc1.val[1], 1)
  101cc4:	ee375a85 	vadd.f32	s10, s15, s10
		+ vgetq_lane_f32(acc1.val[1], 2) + vgetq_lane_f32(acc1.val[1], 3);

	*pDst++=sum_real;
  101cc8:	edc34a00 	vstr	s9, [r3]
	*pDst++=sum_img;
  101ccc:	ed835a01 	vstr	s10, [r3, #4]

}
  101cd0:	e28dd0d0 	add	sp, sp, #208	; 0xd0
  101cd4:	ecbd8b10 	vpop	{d8-d15}
  101cd8:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
  101cdc:	e12fff1e 	bx	lr
  float32_t * pSrcA;
  float32_t * pSrcB;
  float32_t * pDst;
  
  pSrcA = gf_array_src_a;
  pSrcB = gf_array_src_b;
  101ce0:	e3052000 	movw	r2, #20480	; 0x5000
  
  float32_t * pSrcA;
  float32_t * pSrcB;
  float32_t * pDst;
  
  pSrcA = gf_array_src_a;
  101ce4:	e3011000 	movw	r1, #4096	; 0x1000
  pSrcB = gf_array_src_b;
  101ce8:	e3402000 	movt	r2, #0
  
  float32_t * pSrcA;
  float32_t * pSrcB;
  float32_t * pDst;
  
  pSrcA = gf_array_src_a;
  101cec:	e3401000 	movt	r1, #0
  101cf0:	eaffff88 	b	101b18 <arm_cmplx_mult_cmplx_f32_dot2+0x34c>
  101cf4:	00000000 	.word	0x00000000
  101cf8:	00001010 	.word	0x00001010
  101cfc:	00005010 	.word	0x00005010

00101d00 <sp_cmplx_vector_dot_mul>:
/*

*/

void  sp_cmplx_vector_dot_mul( unsigned int ui_vector_length )
{
  101d00:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}

	ui_vector_length = ui_vector_length&0xfffffffe;
	//printf("ui_vector_length: %d\n\r", ui_vector_length);

	p_a = gf_array_src_a;
	p_b = gf_array_src_b;
  101d04:	e305c000 	movw	ip, #20480	; 0x5000
	float	sum_img=0;

	ui_vector_length = ui_vector_length&0xfffffffe;
	//printf("ui_vector_length: %d\n\r", ui_vector_length);

	p_a = gf_array_src_a;
  101d08:	e3014000 	movw	r4, #4096	; 0x1000
	p_b = gf_array_src_b;
    for( j=0; j<ui_vector_length; j++ )
  101d0c:	e3d00001 	bics	r0, r0, #1
	float	sum_img=0;

	ui_vector_length = ui_vector_length&0xfffffffe;
	//printf("ui_vector_length: %d\n\r", ui_vector_length);

	p_a = gf_array_src_a;
  101d10:	e3404000 	movt	r4, #0
	p_b = gf_array_src_b;
  101d14:	e340c000 	movt	ip, #0
/*

*/

void  sp_cmplx_vector_dot_mul( unsigned int ui_vector_length )
{
  101d18:	ed2d8b04 	vpush	{d8-d9}
  101d1c:	e24dd00c 	sub	sp, sp, #12

/*

*/

void  sp_cmplx_vector_dot_mul( unsigned int ui_vector_length )
  101d20:	eddf5a5e 	vldr	s11, [pc, #376]	; 101ea0 <sp_cmplx_vector_dot_mul+0x1a0>
	float	sum_img=0;

	ui_vector_length = ui_vector_length&0xfffffffe;
	//printf("ui_vector_length: %d\n\r", ui_vector_length);

	p_a = gf_array_src_a;
  101d24:	edd46a00 	vldr	s13, [r4]
	p_b = gf_array_src_b;
  101d28:	ed9c6a00 	vldr	s12, [ip]
    for( j=0; j<ui_vector_length; j++ )
  101d2c:	0a000059 	beq	101e98 <sp_cmplx_vector_dot_mul+0x198>
  101d30:	e3500004 	cmp	r0, #4

/*

*/

void  sp_cmplx_vector_dot_mul( unsigned int ui_vector_length )
  101d34:	e2409003 	sub	r9, r0, #3
  101d38:	9a000051 	bls	101e84 <sp_cmplx_vector_dot_mul+0x184>
  101d3c:	e2847020 	add	r7, r4, #32
  101d40:	e28ca020 	add	sl, ip, #32
  101d44:	e2846004 	add	r6, r4, #4
  101d48:	e28c5004 	add	r5, ip, #4
  101d4c:	e2844008 	add	r4, r4, #8
  101d50:	e28cc008 	add	ip, ip, #8
	ui_vector_length = ui_vector_length&0xfffffffe;
	//printf("ui_vector_length: %d\n\r", ui_vector_length);

	p_a = gf_array_src_a;
	p_b = gf_array_src_b;
    for( j=0; j<ui_vector_length; j++ )
  101d54:	e3a08000 	mov	r8, #0
	float	*p_b;
	float	a_real;
	float	a_img;
	float	b_real;
	float	b_img;
	float	sum_real=0;
  101d58:	eeb05a65 	vmov.f32	s10, s11
		p_a++;
		a_img = *p_a;
		p_a++;
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
  101d5c:	ed954a00 	vldr	s8, [r5]
  101d60:	e2866020 	add	r6, r6, #32
    {
		//(a+bi)(c+di) = a*c-bd  +(ad+bc)i
		a_real = *p_a;
		p_a++;
		a_img = *p_a;
		p_a++;
  101d64:	edd48a02 	vldr	s17, [r4, #8]
  101d68:	e28cc020 	add	ip, ip, #32
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
		p_b++;
  101d6c:	ed1c8a06 	vldr	s16, [ip, #-24]	; 0xffffffe8
  101d70:	e2844020 	add	r4, r4, #32
    for( j=0; j<ui_vector_length; j++ )
    {
		//(a+bi)(c+di) = a*c-bd  +(ad+bc)i
		a_real = *p_a;
		p_a++;
		a_img = *p_a;
  101d74:	ed564a08 	vldr	s9, [r6, #-32]	; 0xffffffe0
  101d78:	e2855020 	add	r5, r5, #32
		p_a++;
  101d7c:	ed141a08 	vldr	s2, [r4, #-32]	; 0xffffffe0
	ui_vector_length = ui_vector_length&0xfffffffe;
	//printf("ui_vector_length: %d\n\r", ui_vector_length);

	p_a = gf_array_src_a;
	p_b = gf_array_src_b;
    for( j=0; j<ui_vector_length; j++ )
  101d80:	e2888004 	add	r8, r8, #4
		a_img = *p_a;
		p_a++;
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
		p_b++;
  101d84:	ed1c9a08 	vldr	s18, [ip, #-32]	; 0xffffffe0
  101d88:	e2881001 	add	r1, r8, #1
    	sum_real += a_real*b_real-a_img*b_img;
    	sum_img += a_real*b_img+a_img*b_real;
  101d8c:	ee247a26 	vmul.f32	s14, s8, s13
  101d90:	e1590001 	cmp	r9, r1
		p_a++;
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
		p_b++;
    	sum_real += a_real*b_real-a_img*b_img;
  101d94:	ee687a28 	vmul.f32	s15, s16, s17
  101d98:	f5d7f044 	pld	[r7, #68]	; 0x44
		p_a++;
		a_img = *p_a;
		p_a++;
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
  101d9c:	ed152a06 	vldr	s4, [r5, #-24]	; 0xffffffe8
    {
		//(a+bi)(c+di) = a*c-bd  +(ad+bc)i
		a_real = *p_a;
		p_a++;
		a_img = *p_a;
		p_a++;
  101da0:	e1a02007 	mov	r2, r7
    for( j=0; j<ui_vector_length; j++ )
    {
		//(a+bi)(c+di) = a*c-bd  +(ad+bc)i
		a_real = *p_a;
		p_a++;
		a_img = *p_a;
  101da4:	ed562a06 	vldr	s5, [r6, #-24]	; 0xffffffe8
		p_a++;
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
		p_b++;
  101da8:	e1a0300a 	mov	r3, sl
    	sum_real += a_real*b_real-a_img*b_img;
    	sum_img += a_real*b_img+a_img*b_real;
  101dac:	ee047a86 	vmla.f32	s14, s9, s12
  101db0:	e2877020 	add	r7, r7, #32
		p_a++;
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
		p_b++;
    	sum_real += a_real*b_real-a_img*b_img;
  101db4:	ee497a01 	vmla.f32	s15, s18, s2
  101db8:	e28aa020 	add	sl, sl, #32
    {
		//(a+bi)(c+di) = a*c-bd  +(ad+bc)i
		a_real = *p_a;
		p_a++;
		a_img = *p_a;
		p_a++;
  101dbc:	ed541a04 	vldr	s3, [r4, #-16]
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
		p_b++;
  101dc0:	ed5c3a04 	vldr	s7, [ip, #-16]
		p_a++;
		a_img = *p_a;
		p_a++;
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
  101dc4:	ed150a04 	vldr	s0, [r5, #-16]
    for( j=0; j<ui_vector_length; j++ )
    {
		//(a+bi)(c+di) = a*c-bd  +(ad+bc)i
		a_real = *p_a;
		p_a++;
		a_img = *p_a;
  101dc8:	ed163a02 	vldr	s6, [r6, #-8]
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
		p_b++;
    	sum_real += a_real*b_real-a_img*b_img;
    	sum_img += a_real*b_img+a_img*b_real;
  101dcc:	ee027a01 	vmla.f32	s14, s4, s2
		p_a++;
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
		p_b++;
    	sum_real += a_real*b_real-a_img*b_img;
  101dd0:	ee467a26 	vmla.f32	s15, s12, s13
		p_a++;
		a_img = *p_a;
		p_a++;
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
  101dd4:	ed151a02 	vldr	s2, [r5, #-8]
    for( j=0; j<ui_vector_length; j++ )
    {
		//(a+bi)(c+di) = a*c-bd  +(ad+bc)i
		a_real = *p_a;
		p_a++;
		a_img = *p_a;
  101dd8:	ed560a04 	vldr	s1, [r6, #-16]
		p_a++;
  101ddc:	ed546a02 	vldr	s13, [r4, #-8]
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
		p_b++;
  101de0:	ed1c6a02 	vldr	s12, [ip, #-8]
    	sum_real += a_real*b_real-a_img*b_img;
    	sum_img += a_real*b_img+a_img*b_real;
  101de4:	ee027a89 	vmla.f32	s14, s5, s18
		p_a++;
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
		p_b++;
    	sum_real += a_real*b_real-a_img*b_img;
  101de8:	ee437aa1 	vmla.f32	s15, s7, s3
    	sum_img += a_real*b_img+a_img*b_real;
  101dec:	ee007a28 	vmla.f32	s14, s0, s17
		p_a++;
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
		p_b++;
    	sum_real += a_real*b_real-a_img*b_img;
  101df0:	ee417a43 	vmls.f32	s15, s2, s6
    	sum_img += a_real*b_img+a_img*b_real;
  101df4:	ee007a88 	vmla.f32	s14, s1, s16
		p_a++;
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
		p_b++;
    	sum_real += a_real*b_real-a_img*b_img;
  101df8:	ee407a60 	vmls.f32	s15, s0, s1
    	sum_img += a_real*b_img+a_img*b_real;
  101dfc:	ee017a21 	vmla.f32	s14, s2, s3
		p_a++;
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
		p_b++;
    	sum_real += a_real*b_real-a_img*b_img;
  101e00:	ee427a62 	vmls.f32	s15, s4, s5
    	sum_img += a_real*b_img+a_img*b_real;
  101e04:	ee037a23 	vmla.f32	s14, s6, s7
		p_a++;
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
		p_b++;
    	sum_real += a_real*b_real-a_img*b_img;
  101e08:	ee447a64 	vmls.f32	s15, s8, s9
    	sum_img += a_real*b_img+a_img*b_real;
  101e0c:	ee755a87 	vadd.f32	s11, s11, s14
		p_a++;
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
		p_b++;
    	sum_real += a_real*b_real-a_img*b_img;
  101e10:	ee355a27 	vadd.f32	s10, s10, s15
  101e14:	8affffd0 	bhi	101d5c <sp_cmplx_vector_dot_mul+0x5c>

/*

*/

void  sp_cmplx_vector_dot_mul( unsigned int ui_vector_length )
  101e18:	e2822004 	add	r2, r2, #4
  101e1c:	e2833004 	add	r3, r3, #4
    for( j=0; j<ui_vector_length; j++ )
    {
		//(a+bi)(c+di) = a*c-bd  +(ad+bc)i
		a_real = *p_a;
		p_a++;
		a_img = *p_a;
  101e20:	edd24a00 	vldr	s9, [r2]
	ui_vector_length = ui_vector_length&0xfffffffe;
	//printf("ui_vector_length: %d\n\r", ui_vector_length);

	p_a = gf_array_src_a;
	p_b = gf_array_src_b;
    for( j=0; j<ui_vector_length; j++ )
  101e24:	e1500001 	cmp	r0, r1
		p_a++;
		a_img = *p_a;
		p_a++;
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
  101e28:	edd37a00 	vldr	s15, [r3]
  101e2c:	e2822008 	add	r2, r2, #8
  101e30:	e2833008 	add	r3, r3, #8
  101e34:	e2811001 	add	r1, r1, #1
		p_b++;
    	sum_real += a_real*b_real-a_img*b_img;
    	sum_img += a_real*b_img+a_img*b_real;
  101e38:	ee277aa6 	vmul.f32	s14, s15, s13
		p_a++;
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
		p_b++;
    	sum_real += a_real*b_real-a_img*b_img;
  101e3c:	ee677aa4 	vmul.f32	s15, s15, s9
    	sum_img += a_real*b_img+a_img*b_real;
  101e40:	ee047a86 	vmla.f32	s14, s9, s12
		p_a++;
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
		p_b++;
    	sum_real += a_real*b_real-a_img*b_img;
  101e44:	ee567a26 	vnmls.f32	s15, s12, s13
    {
		//(a+bi)(c+di) = a*c-bd  +(ad+bc)i
		a_real = *p_a;
		p_a++;
		a_img = *p_a;
		p_a++;
  101e48:	ed526a01 	vldr	s13, [r2, #-4]
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
		p_b++;
  101e4c:	ed136a01 	vldr	s12, [r3, #-4]
    	sum_real += a_real*b_real-a_img*b_img;
    	sum_img += a_real*b_img+a_img*b_real;
  101e50:	ee755a87 	vadd.f32	s11, s11, s14
		p_a++;
		b_real = *p_b;
		p_b++;
		b_img = *p_b;
		p_b++;
    	sum_real += a_real*b_real-a_img*b_img;
  101e54:	ee355a27 	vadd.f32	s10, s10, s15
	ui_vector_length = ui_vector_length&0xfffffffe;
	//printf("ui_vector_length: %d\n\r", ui_vector_length);

	p_a = gf_array_src_a;
	p_b = gf_array_src_b;
    for( j=0; j<ui_vector_length; j++ )
  101e58:	8afffff0 	bhi	101e20 <sp_cmplx_vector_dot_mul+0x120>
		p_b++;
    	sum_real += a_real*b_real-a_img*b_img;
    	sum_img += a_real*b_img+a_img*b_real;
    }

	gf_sum[0] = sum_real;
  101e5c:	ed8d5a00 	vstr	s10, [sp]
  101e60:	e3093010 	movw	r3, #36880	; 0x9010
  101e64:	edcd5a01 	vstr	s11, [sp, #4]
  101e68:	e3403000 	movt	r3, #0
  101e6c:	eddd0b00 	vldr	d16, [sp]
  101e70:	f443078f 	vst1.32	{d16}, [r3]
	gf_sum[1] = sum_img;

}
  101e74:	e28dd00c 	add	sp, sp, #12
  101e78:	ecbd8b04 	vpop	{d8-d9}
  101e7c:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
  101e80:	e12fff1e 	bx	lr

/*

*/

void  sp_cmplx_vector_dot_mul( unsigned int ui_vector_length )
  101e84:	e1a0300c 	mov	r3, ip
  101e88:	e1a02004 	mov	r2, r4
  101e8c:	e3a01001 	mov	r1, #1
  101e90:	eeb05a65 	vmov.f32	s10, s11
  101e94:	eaffffdf 	b	101e18 <sp_cmplx_vector_dot_mul+0x118>
	float	*p_b;
	float	a_real;
	float	a_img;
	float	b_real;
	float	b_img;
	float	sum_real=0;
  101e98:	eeb05a65 	vmov.f32	s10, s11
  101e9c:	eaffffee 	b	101e5c <sp_cmplx_vector_dot_mul+0x15c>
  101ea0:	00000000 	.word	0x00000000

00101ea4 <sp_cmplx_vector_init>:

void  sp_cmplx_vector_init( void )
{
	int		i;

	print_var_location( gf_array_src_a );
  101ea4:	e30f0e78 	movw	r0, #65144	; 0xfe78
  101ea8:	e30f1e9c 	movw	r1, #65180	; 0xfe9c
  101eac:	e3012000 	movw	r2, #4096	; 0x1000
/************************** Function Implementation ******************************/



void  sp_cmplx_vector_init( void )
{
  101eb0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int		i;

	print_var_location( gf_array_src_a );
  101eb4:	e3400010 	movt	r0, #16
  101eb8:	e3401010 	movt	r1, #16
  101ebc:	e3402000 	movt	r2, #0
	print_var_location( gf_sum_dsp_concept2 );
	xil_printf( "\r\n" );

	for( i=0; i<(VECTOR_MAX_LENGTH*2); i++ )
	{
		gf_array_src_a[i] =  rand()/100;
  101ec0:	e308851f 	movw	r8, #34079	; 0x851f

void  sp_cmplx_vector_init( void )
{
	int		i;

	print_var_location( gf_array_src_a );
  101ec4:	eb000dfd 	bl	1056c0 <xil_printf>
	//print_var_location( gf_array_src_a[0] );
	print_var_location( gf_array_src_b );
  101ec8:	e30f0e78 	movw	r0, #65144	; 0xfe78
  101ecc:	e30f1eac 	movw	r1, #65196	; 0xfeac
  101ed0:	e3400010 	movt	r0, #16
  101ed4:	e3401010 	movt	r1, #16
  101ed8:	e59f22b0 	ldr	r2, [pc, #688]	; 102190 <sp_cmplx_vector_init+0x2ec>
	xil_printf( "\r\n" );

	for( i=0; i<(VECTOR_MAX_LENGTH*2); i++ )
	{
		gf_array_src_a[i] =  rand()/100;
		gf_array_src_b[i] =  rand()/10;
  101edc:	e3067667 	movw	r7, #26215	; 0x6667
{
	int		i;

	print_var_location( gf_array_src_a );
	//print_var_location( gf_array_src_a[0] );
	print_var_location( gf_array_src_b );
  101ee0:	eb000df6 	bl	1056c0 <xil_printf>
	//print_var_location( gf_array_src_b[0] );
	print_var_location( gf_sum_dsp_concept );
  101ee4:	e30f0e78 	movw	r0, #65144	; 0xfe78
  101ee8:	e30f1ebc 	movw	r1, #65212	; 0xfebc
  101eec:	e3400010 	movt	r0, #16
  101ef0:	e3401010 	movt	r1, #16
  101ef4:	e59f2298 	ldr	r2, [pc, #664]	; 102194 <sp_cmplx_vector_init+0x2f0>
	print_var_location( gf_sum_dsp_concept2 );
	xil_printf( "\r\n" );

	for( i=0; i<(VECTOR_MAX_LENGTH*2); i++ )
  101ef8:	e3a0a000 	mov	sl, #0

	print_var_location( gf_array_src_a );
	//print_var_location( gf_array_src_a[0] );
	print_var_location( gf_array_src_b );
	//print_var_location( gf_array_src_b[0] );
	print_var_location( gf_sum_dsp_concept );
  101efc:	eb000def 	bl	1056c0 <xil_printf>
	print_var_location( gf_sum_dsp_concept2 );
  101f00:	e30f0e78 	movw	r0, #65144	; 0xfe78
  101f04:	e30f1ed0 	movw	r1, #65232	; 0xfed0
  101f08:	e3400010 	movt	r0, #16
  101f0c:	e59f6284 	ldr	r6, [pc, #644]	; 102198 <sp_cmplx_vector_init+0x2f4>
  101f10:	e3401010 	movt	r1, #16
  101f14:	e59f2280 	ldr	r2, [pc, #640]	; 10219c <sp_cmplx_vector_init+0x2f8>
  101f18:	eb000de8 	bl	1056c0 <xil_printf>
	xil_printf( "\r\n" );
  101f1c:	e30f0e98 	movw	r0, #65176	; 0xfe98
  101f20:	e59f5278 	ldr	r5, [pc, #632]	; 1021a0 <sp_cmplx_vector_init+0x2fc>
  101f24:	e3400010 	movt	r0, #16

	for( i=0; i<(VECTOR_MAX_LENGTH*2); i++ )
	{
		gf_array_src_a[i] =  rand()/100;
  101f28:	e34581eb 	movt	r8, #20971	; 0x51eb
  101f2c:	e246b01c 	sub	fp, r6, #28
		gf_array_src_b[i] =  rand()/10;
  101f30:	e3467666 	movt	r7, #26214	; 0x6666
	//print_var_location( gf_array_src_a[0] );
	print_var_location( gf_array_src_b );
	//print_var_location( gf_array_src_b[0] );
	print_var_location( gf_sum_dsp_concept );
	print_var_location( gf_sum_dsp_concept2 );
	xil_printf( "\r\n" );
  101f34:	eb000de1 	bl	1056c0 <xil_printf>

	for( i=0; i<(VECTOR_MAX_LENGTH*2); i++ )
	{
		gf_array_src_a[i] =  rand()/100;
  101f38:	eb001295 	bl	106994 <rand>
  101f3c:	e0c12098 	smull	r2, r1, r8, r0
  101f40:	e1a00fc0 	asr	r0, r0, #31

/************************** Function Implementation ******************************/



void  sp_cmplx_vector_init( void )
  101f44:	e1a0910a 	lsl	r9, sl, #2
	//print_var_location( gf_array_src_b[0] );
	print_var_location( gf_sum_dsp_concept );
	print_var_location( gf_sum_dsp_concept2 );
	xil_printf( "\r\n" );

	for( i=0; i<(VECTOR_MAX_LENGTH*2); i++ )
  101f48:	e28aa008 	add	sl, sl, #8

/************************** Function Implementation ******************************/



void  sp_cmplx_vector_init( void )
  101f4c:	e26a4a01 	rsb	r4, sl, #4096	; 0x1000
  101f50:	e08bc009 	add	ip, fp, r9
  101f54:	f5dcf01c 	pld	[ip, #28]
	print_var_location( gf_sum_dsp_concept2 );
	xil_printf( "\r\n" );

	for( i=0; i<(VECTOR_MAX_LENGTH*2); i++ )
	{
		gf_array_src_a[i] =  rand()/100;
  101f58:	e06002c1 	rsb	r0, r0, r1, asr #5
  101f5c:	ee070a90 	vmov	s15, r0
  101f60:	eef87ae7 	vcvt.f32.s32	s15, s15
  101f64:	ed467a07 	vstr	s15, [r6, #-28]	; 0xffffffe4
		gf_array_src_b[i] =  rand()/10;
  101f68:	eb001289 	bl	106994 <rand>
  101f6c:	e0c13097 	smull	r3, r1, r7, r0
  101f70:	e1a00fc0 	asr	r0, r0, #31

/************************** Function Implementation ******************************/



void  sp_cmplx_vector_init( void )
  101f74:	e59f3214 	ldr	r3, [pc, #532]	; 102190 <sp_cmplx_vector_init+0x2ec>
  101f78:	e0832009 	add	r2, r3, r9
	xil_printf( "\r\n" );

	for( i=0; i<(VECTOR_MAX_LENGTH*2); i++ )
	{
		gf_array_src_a[i] =  rand()/100;
		gf_array_src_b[i] =  rand()/10;
  101f7c:	e0600141 	rsb	r0, r0, r1, asr #2
  101f80:	f5d2f01c 	pld	[r2, #28]
  101f84:	ee070a90 	vmov	s15, r0
  101f88:	eef87ae7 	vcvt.f32.s32	s15, s15
  101f8c:	ed457a07 	vstr	s15, [r5, #-28]	; 0xffffffe4
	print_var_location( gf_sum_dsp_concept2 );
	xil_printf( "\r\n" );

	for( i=0; i<(VECTOR_MAX_LENGTH*2); i++ )
	{
		gf_array_src_a[i] =  rand()/100;
  101f90:	eb00127f 	bl	106994 <rand>
  101f94:	e0c23098 	smull	r3, r2, r8, r0
  101f98:	e1a00fc0 	asr	r0, r0, #31
  101f9c:	e06002c2 	rsb	r0, r0, r2, asr #5
  101fa0:	ee070a90 	vmov	s15, r0
  101fa4:	eef87ae7 	vcvt.f32.s32	s15, s15
  101fa8:	ed467a06 	vstr	s15, [r6, #-24]	; 0xffffffe8
		gf_array_src_b[i] =  rand()/10;
  101fac:	eb001278 	bl	106994 <rand>
  101fb0:	e0c23097 	smull	r3, r2, r7, r0
  101fb4:	e1a00fc0 	asr	r0, r0, #31
  101fb8:	e0600142 	rsb	r0, r0, r2, asr #2
  101fbc:	ee070a90 	vmov	s15, r0
  101fc0:	eef87ae7 	vcvt.f32.s32	s15, s15
  101fc4:	ed457a06 	vstr	s15, [r5, #-24]	; 0xffffffe8
	print_var_location( gf_sum_dsp_concept2 );
	xil_printf( "\r\n" );

	for( i=0; i<(VECTOR_MAX_LENGTH*2); i++ )
	{
		gf_array_src_a[i] =  rand()/100;
  101fc8:	eb001271 	bl	106994 <rand>
  101fcc:	e0c23098 	smull	r3, r2, r8, r0
  101fd0:	e1a00fc0 	asr	r0, r0, #31
  101fd4:	e06002c2 	rsb	r0, r0, r2, asr #5
  101fd8:	ee070a90 	vmov	s15, r0
  101fdc:	eef87ae7 	vcvt.f32.s32	s15, s15
  101fe0:	ed467a05 	vstr	s15, [r6, #-20]	; 0xffffffec
		gf_array_src_b[i] =  rand()/10;
  101fe4:	eb00126a 	bl	106994 <rand>
  101fe8:	e0c23097 	smull	r3, r2, r7, r0
  101fec:	e1a00fc0 	asr	r0, r0, #31
  101ff0:	e0600142 	rsb	r0, r0, r2, asr #2
  101ff4:	ee070a90 	vmov	s15, r0
  101ff8:	eef87ae7 	vcvt.f32.s32	s15, s15
  101ffc:	ed457a05 	vstr	s15, [r5, #-20]	; 0xffffffec
	print_var_location( gf_sum_dsp_concept2 );
	xil_printf( "\r\n" );

	for( i=0; i<(VECTOR_MAX_LENGTH*2); i++ )
	{
		gf_array_src_a[i] =  rand()/100;
  102000:	eb001263 	bl	106994 <rand>
  102004:	e0c23098 	smull	r3, r2, r8, r0
  102008:	e1a00fc0 	asr	r0, r0, #31
  10200c:	e06002c2 	rsb	r0, r0, r2, asr #5
  102010:	ee070a90 	vmov	s15, r0
  102014:	eef87ae7 	vcvt.f32.s32	s15, s15
  102018:	ed467a04 	vstr	s15, [r6, #-16]
		gf_array_src_b[i] =  rand()/10;
  10201c:	eb00125c 	bl	106994 <rand>
  102020:	e0c23097 	smull	r3, r2, r7, r0
  102024:	e1a00fc0 	asr	r0, r0, #31
  102028:	e0600142 	rsb	r0, r0, r2, asr #2
  10202c:	ee070a90 	vmov	s15, r0
  102030:	eef87ae7 	vcvt.f32.s32	s15, s15
  102034:	ed457a04 	vstr	s15, [r5, #-16]
	print_var_location( gf_sum_dsp_concept2 );
	xil_printf( "\r\n" );

	for( i=0; i<(VECTOR_MAX_LENGTH*2); i++ )
	{
		gf_array_src_a[i] =  rand()/100;
  102038:	eb001255 	bl	106994 <rand>
  10203c:	e0c23098 	smull	r3, r2, r8, r0
  102040:	e1a00fc0 	asr	r0, r0, #31
  102044:	e06002c2 	rsb	r0, r0, r2, asr #5
  102048:	ee070a90 	vmov	s15, r0
  10204c:	eef87ae7 	vcvt.f32.s32	s15, s15
  102050:	ed467a03 	vstr	s15, [r6, #-12]
		gf_array_src_b[i] =  rand()/10;
  102054:	eb00124e 	bl	106994 <rand>
  102058:	e0c23097 	smull	r3, r2, r7, r0
  10205c:	e1a00fc0 	asr	r0, r0, #31
  102060:	e0600142 	rsb	r0, r0, r2, asr #2
  102064:	ee070a90 	vmov	s15, r0
  102068:	eef87ae7 	vcvt.f32.s32	s15, s15
  10206c:	ed457a03 	vstr	s15, [r5, #-12]
	print_var_location( gf_sum_dsp_concept2 );
	xil_printf( "\r\n" );

	for( i=0; i<(VECTOR_MAX_LENGTH*2); i++ )
	{
		gf_array_src_a[i] =  rand()/100;
  102070:	eb001247 	bl	106994 <rand>
  102074:	e0c23098 	smull	r3, r2, r8, r0
  102078:	e1a00fc0 	asr	r0, r0, #31
  10207c:	e06002c2 	rsb	r0, r0, r2, asr #5
  102080:	ee070a90 	vmov	s15, r0
  102084:	eef87ae7 	vcvt.f32.s32	s15, s15
  102088:	ed467a02 	vstr	s15, [r6, #-8]
		gf_array_src_b[i] =  rand()/10;
  10208c:	eb001240 	bl	106994 <rand>
  102090:	e0c23097 	smull	r3, r2, r7, r0
  102094:	e1a00fc0 	asr	r0, r0, #31
  102098:	e0600142 	rsb	r0, r0, r2, asr #2
  10209c:	ee070a90 	vmov	s15, r0
  1020a0:	eef87ae7 	vcvt.f32.s32	s15, s15
  1020a4:	ed457a02 	vstr	s15, [r5, #-8]
	print_var_location( gf_sum_dsp_concept2 );
	xil_printf( "\r\n" );

	for( i=0; i<(VECTOR_MAX_LENGTH*2); i++ )
	{
		gf_array_src_a[i] =  rand()/100;
  1020a8:	eb001239 	bl	106994 <rand>
  1020ac:	e0c23098 	smull	r3, r2, r8, r0
  1020b0:	e1a00fc0 	asr	r0, r0, #31
  1020b4:	e06002c2 	rsb	r0, r0, r2, asr #5
  1020b8:	ee070a90 	vmov	s15, r0
  1020bc:	eef87ae7 	vcvt.f32.s32	s15, s15
  1020c0:	ed467a01 	vstr	s15, [r6, #-4]
		gf_array_src_b[i] =  rand()/10;
  1020c4:	eb001232 	bl	106994 <rand>
  1020c8:	e0c23097 	smull	r3, r2, r7, r0
  1020cc:	e1a00fc0 	asr	r0, r0, #31
  1020d0:	e0600142 	rsb	r0, r0, r2, asr #2
  1020d4:	ee070a90 	vmov	s15, r0
  1020d8:	eef87ae7 	vcvt.f32.s32	s15, s15
  1020dc:	ed457a01 	vstr	s15, [r5, #-4]
	print_var_location( gf_sum_dsp_concept2 );
	xil_printf( "\r\n" );

	for( i=0; i<(VECTOR_MAX_LENGTH*2); i++ )
	{
		gf_array_src_a[i] =  rand()/100;
  1020e0:	eb00122b 	bl	106994 <rand>
  1020e4:	e0c23098 	smull	r3, r2, r8, r0
  1020e8:	e1a00fc0 	asr	r0, r0, #31
  1020ec:	e06002c2 	rsb	r0, r0, r2, asr #5
  1020f0:	ee070a90 	vmov	s15, r0
  1020f4:	eef87ae7 	vcvt.f32.s32	s15, s15
  1020f8:	ee172a90 	vmov	r2, s15
  1020fc:	e4862020 	str	r2, [r6], #32
		gf_array_src_b[i] =  rand()/10;
  102100:	eb001223 	bl	106994 <rand>
  102104:	e0c23097 	smull	r3, r2, r7, r0
  102108:	e1a00fc0 	asr	r0, r0, #31
  10210c:	e3003ff8 	movw	r3, #4088	; 0xff8
  102110:	e15a0003 	cmp	sl, r3
  102114:	e0600142 	rsb	r0, r0, r2, asr #2
  102118:	ee070a90 	vmov	s15, r0
  10211c:	eef87ae7 	vcvt.f32.s32	s15, s15
  102120:	ee172a90 	vmov	r2, s15
  102124:	e4852020 	str	r2, [r5], #32
  102128:	1affff82 	bne	101f38 <sp_cmplx_vector_init+0x94>
  10212c:	e59f5070 	ldr	r5, [pc, #112]	; 1021a4 <sp_cmplx_vector_init+0x300>
	print_var_location( gf_sum_dsp_concept2 );
	xil_printf( "\r\n" );

	for( i=0; i<(VECTOR_MAX_LENGTH*2); i++ )
	{
		gf_array_src_a[i] =  rand()/100;
  102130:	e308851f 	movw	r8, #34079	; 0x851f
  102134:	e59f606c 	ldr	r6, [pc, #108]	; 1021a8 <sp_cmplx_vector_init+0x304>
		gf_array_src_b[i] =  rand()/10;
  102138:	e3067667 	movw	r7, #26215	; 0x6667
	print_var_location( gf_sum_dsp_concept2 );
	xil_printf( "\r\n" );

	for( i=0; i<(VECTOR_MAX_LENGTH*2); i++ )
	{
		gf_array_src_a[i] =  rand()/100;
  10213c:	e34581eb 	movt	r8, #20971	; 0x51eb
		gf_array_src_b[i] =  rand()/10;
  102140:	e3467666 	movt	r7, #26214	; 0x6666
	print_var_location( gf_sum_dsp_concept2 );
	xil_printf( "\r\n" );

	for( i=0; i<(VECTOR_MAX_LENGTH*2); i++ )
	{
		gf_array_src_a[i] =  rand()/100;
  102144:	eb001212 	bl	106994 <rand>
  102148:	e0c32098 	smull	r2, r3, r8, r0
  10214c:	e1a00fc0 	asr	r0, r0, #31
  102150:	e06002c3 	rsb	r0, r0, r3, asr #5
  102154:	ee070a90 	vmov	s15, r0
  102158:	eef87ae7 	vcvt.f32.s32	s15, s15
  10215c:	ee173a90 	vmov	r3, s15
  102160:	e5a53004 	str	r3, [r5, #4]!
		gf_array_src_b[i] =  rand()/10;
  102164:	eb00120a 	bl	106994 <rand>
  102168:	e0c32097 	smull	r2, r3, r7, r0
  10216c:	e1a00fc0 	asr	r0, r0, #31
	//print_var_location( gf_array_src_b[0] );
	print_var_location( gf_sum_dsp_concept );
	print_var_location( gf_sum_dsp_concept2 );
	xil_printf( "\r\n" );

	for( i=0; i<(VECTOR_MAX_LENGTH*2); i++ )
  102170:	e2544001 	subs	r4, r4, #1
	{
		gf_array_src_a[i] =  rand()/100;
		gf_array_src_b[i] =  rand()/10;
  102174:	e0600143 	rsb	r0, r0, r3, asr #2
  102178:	ee070a90 	vmov	s15, r0
  10217c:	eef87ae7 	vcvt.f32.s32	s15, s15
  102180:	ee173a90 	vmov	r3, s15
  102184:	e5a63004 	str	r3, [r6, #4]!
	//print_var_location( gf_array_src_b[0] );
	print_var_location( gf_sum_dsp_concept );
	print_var_location( gf_sum_dsp_concept2 );
	xil_printf( "\r\n" );

	for( i=0; i<(VECTOR_MAX_LENGTH*2); i++ )
  102188:	1affffed 	bne	102144 <sp_cmplx_vector_init+0x2a0>
	{
		gf_array_src_a[i] =  rand()/100;
		gf_array_src_b[i] =  rand()/10;
	}
 }
  10218c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  102190:	00005000 	.word	0x00005000
  102194:	00009000 	.word	0x00009000
  102198:	0000101c 	.word	0x0000101c
  10219c:	00009008 	.word	0x00009008
  1021a0:	0000501c 	.word	0x0000501c
  1021a4:	00004fdc 	.word	0x00004fdc
  1021a8:	00008fdc 	.word	0x00008fdc
  1021ac:	00000000 	.word	0x00000000

001021b0 <global_timer_test>:
	XTime tLastCycles;
	u64 tLastUS;
	u64 tPrevUS;
	u64 tLastSecond;

	xil_printf("Global Timer standalone driver test.\n\r" );
  1021b0:	e300004c 	movw	r0, #76	; 0x4c




void global_timer_test( void )
{
  1021b4:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
	XTime tLastCycles;
	u64 tLastUS;
	u64 tPrevUS;
	u64 tLastSecond;

	xil_printf("Global Timer standalone driver test.\n\r" );
  1021b8:	e3400011 	movt	r0, #17




void global_timer_test( void )
{
  1021bc:	ed2d8b04 	vpush	{d8-d9}
  1021c0:	e24dd024 	sub	sp, sp, #36	; 0x24
	xil_printf("CPU frequency: %dHz=%dMHz.\n\r", 
				XPAR_CPU_CORTEXA9_CORE_CLOCK_FREQ_HZ, XPAR_CPU_CORTEXA9_CORE_CLOCK_FREQ_HZ/1000000 );
	xil_printf("Global Timer frequency: %dHz=%dMHz.\n\r", 
				COUNTS_PER_SECOND, COUNTS_PER_SECOND/1000000 );

	XTime_GetTime(&tBegin);
  1021c4:	e3a08cca 	mov	r8, #51712	; 0xca00
	XTime tLastCycles;
	u64 tLastUS;
	u64 tPrevUS;
	u64 tLastSecond;

	xil_printf("Global Timer standalone driver test.\n\r" );
  1021c8:	eb000d3c 	bl	1056c0 <xil_printf>
	xil_printf("CPU frequency: %dHz=%dMHz.\n\r", 
  1021cc:	e30f0ee4 	movw	r0, #65252	; 0xfee4
  1021d0:	e30816bf 	movw	r1, #34495	; 0x86bf
  1021d4:	e3400010 	movt	r0, #16
  1021d8:	e34217bc 	movt	r1, #10172	; 0x27bc
  1021dc:	e300229a 	movw	r2, #666	; 0x29a
		//for ( u32InnerLoop=0; u32InnerLoop<DDR_TEST_WORD; u32InnerLoop++ )
		{
		}
		XTime_GetTime(&tCur);
		tLastCycles = ( tCur - tBegin );
		tLastUS = ( tLastCycles*1000000 ) / COUNTS_PER_SECOND;
  1021e0:	e304a240 	movw	sl, #16960	; 0x4240
	u64 tLastUS;
	u64 tPrevUS;
	u64 tLastSecond;

	xil_printf("Global Timer standalone driver test.\n\r" );
	xil_printf("CPU frequency: %dHz=%dMHz.\n\r", 
  1021e4:	eb000d35 	bl	1056c0 <xil_printf>
				XPAR_CPU_CORTEXA9_CORE_CLOCK_FREQ_HZ, XPAR_CPU_CORTEXA9_CORE_CLOCK_FREQ_HZ/1000000 );
	xil_printf("Global Timer frequency: %dHz=%dMHz.\n\r", 
  1021e8:	e30f0f04 	movw	r0, #65284	; 0xff04
  1021ec:	e304135f 	movw	r1, #17247	; 0x435f
  1021f0:	e3400010 	movt	r0, #16
  1021f4:	e34113de 	movt	r1, #5086	; 0x13de
  1021f8:	e300214d 	movw	r2, #333	; 0x14d
				COUNTS_PER_SECOND, COUNTS_PER_SECOND/1000000 );

	XTime_GetTime(&tBegin);
  1021fc:	e3438b9a 	movt	r8, #15258	; 0x3b9a
	u64 tLastSecond;

	xil_printf("Global Timer standalone driver test.\n\r" );
	xil_printf("CPU frequency: %dHz=%dMHz.\n\r", 
				XPAR_CPU_CORTEXA9_CORE_CLOCK_FREQ_HZ, XPAR_CPU_CORTEXA9_CORE_CLOCK_FREQ_HZ/1000000 );
	xil_printf("Global Timer frequency: %dHz=%dMHz.\n\r", 
  102200:	eb000d2e 	bl	1056c0 <xil_printf>
				COUNTS_PER_SECOND, COUNTS_PER_SECOND/1000000 );

	XTime_GetTime(&tBegin);
  102204:	e28d0010 	add	r0, sp, #16
	tPrevUS = 0;
  102208:	ed9f8b2c 	vldr	d8, [pc, #176]	; 1022c0 <global_timer_test+0x110>
		//for ( u32InnerLoop=0; u32InnerLoop<DDR_TEST_WORD; u32InnerLoop++ )
		{
		}
		XTime_GetTime(&tCur);
		tLastCycles = ( tCur - tBegin );
		tLastUS = ( tLastCycles*1000000 ) / COUNTS_PER_SECOND;
  10220c:	e340a00f 	movt	sl, #15
		tLastSecond = tLastUS/1000000;
		if( tLastUS>(tPrevUS+1000000) )
  102210:	ed9f9b2c 	vldr	d9, [pc, #176]	; 1022c8 <global_timer_test+0x118>
	xil_printf("CPU frequency: %dHz=%dMHz.\n\r", 
				XPAR_CPU_CORTEXA9_CORE_CLOCK_FREQ_HZ, XPAR_CPU_CORTEXA9_CORE_CLOCK_FREQ_HZ/1000000 );
	xil_printf("Global Timer frequency: %dHz=%dMHz.\n\r", 
				COUNTS_PER_SECOND, COUNTS_PER_SECOND/1000000 );

	XTime_GetTime(&tBegin);
  102214:	eb000e4d 	bl	105b50 <XTime_GetTime>
  102218:	ea000001 	b	102224 <global_timer_test+0x74>
	tPrevUS = 0;
	for ( u32Loop=0; u32Loop<1000000000; u32Loop++ )
  10221c:	e2588001 	subs	r8, r8, #1
  102220:	0a000020 	beq	1022a8 <global_timer_test+0xf8>
	{
		//for ( u32InnerLoop=0; u32InnerLoop<DDR_TEST_WORD; u32InnerLoop++ )
		{
		}
		XTime_GetTime(&tCur);
  102224:	e28d0018 	add	r0, sp, #24
  102228:	eb000e48 	bl	105b50 <XTime_GetTime>
		tLastCycles = ( tCur - tBegin );
  10222c:	e1cd01d0 	ldrd	r0, [sp, #16]
		tLastUS = ( tLastCycles*1000000 ) / COUNTS_PER_SECOND;
  102230:	e304235f 	movw	r2, #17247	; 0x435f
	{
		//for ( u32InnerLoop=0; u32InnerLoop<DDR_TEST_WORD; u32InnerLoop++ )
		{
		}
		XTime_GetTime(&tCur);
		tLastCycles = ( tCur - tBegin );
  102234:	e1cd61d8 	ldrd	r6, [sp, #24]
		tLastUS = ( tLastCycles*1000000 ) / COUNTS_PER_SECOND;
  102238:	e34123de 	movt	r2, #5086	; 0x13de
  10223c:	e3a03000 	mov	r3, #0
	{
		//for ( u32InnerLoop=0; u32InnerLoop<DDR_TEST_WORD; u32InnerLoop++ )
		{
		}
		XTime_GetTime(&tCur);
		tLastCycles = ( tCur - tBegin );
  102240:	e0566000 	subs	r6, r6, r0
  102244:	e0c77001 	sbc	r7, r7, r1
		tLastUS = ( tLastCycles*1000000 ) / COUNTS_PER_SECOND;
  102248:	e0810a96 	umull	r0, r1, r6, sl
  10224c:	e021179a 	mla	r1, sl, r7, r1
  102250:	eb000f01 	bl	105e5c <__aeabi_uldivmod>
		tLastSecond = tLastUS/1000000;
		if( tLastUS>(tPrevUS+1000000) )
  102254:	f2780809 	vadd.i64	d16, d8, d9
		//for ( u32InnerLoop=0; u32InnerLoop<DDR_TEST_WORD; u32InnerLoop++ )
		{
		}
		XTime_GetTime(&tCur);
		tLastCycles = ( tCur - tBegin );
		tLastUS = ( tLastCycles*1000000 ) / COUNTS_PER_SECOND;
  102258:	e1a04000 	mov	r4, r0
  10225c:	e1a05001 	mov	r5, r1
		tLastSecond = tLastUS/1000000;
		if( tLastUS>(tPrevUS+1000000) )
  102260:	ec532b30 	vmov	r2, r3, d16
  102264:	e1530005 	cmp	r3, r5
  102268:	01520004 	cmpeq	r2, r4
  10226c:	2affffea 	bcs	10221c <global_timer_test+0x6c>
		{
		}
		XTime_GetTime(&tCur);
		tLastCycles = ( tCur - tBegin );
		tLastUS = ( tLastCycles*1000000 ) / COUNTS_PER_SECOND;
		tLastSecond = tLastUS/1000000;
  102270:	e3042240 	movw	r2, #16960	; 0x4240
  102274:	e3a03000 	mov	r3, #0
  102278:	e340200f 	movt	r2, #15
		if( tLastUS>(tPrevUS+1000000) )
		{
			printf("It lasts %llu cycles, %llu us, %llu second\n\r", tLastCycles, tLastUS, tLastSecond );
  10227c:	e1cd40f0 	strd	r4, [sp]
		{
		}
		XTime_GetTime(&tCur);
		tLastCycles = ( tCur - tBegin );
		tLastUS = ( tLastCycles*1000000 ) / COUNTS_PER_SECOND;
		tLastSecond = tLastUS/1000000;
  102280:	eb000ef5 	bl	105e5c <__aeabi_uldivmod>
		if( tLastUS>(tPrevUS+1000000) )
		{
			printf("It lasts %llu cycles, %llu us, %llu second\n\r", tLastCycles, tLastUS, tLastSecond );
  102284:	e1cd00f8 	strd	r0, [sp, #8]
  102288:	e3000074 	movw	r0, #116	; 0x74
  10228c:	e3400011 	movt	r0, #17
  102290:	e1a02006 	mov	r2, r6
  102294:	e1a03007 	mov	r3, r7
  102298:	ec454b18 	vmov	d8, r4, r5
  10229c:	eb0011a5 	bl	106938 <printf>
	xil_printf("Global Timer frequency: %dHz=%dMHz.\n\r", 
				COUNTS_PER_SECOND, COUNTS_PER_SECOND/1000000 );

	XTime_GetTime(&tBegin);
	tPrevUS = 0;
	for ( u32Loop=0; u32Loop<1000000000; u32Loop++ )
  1022a0:	e2588001 	subs	r8, r8, #1
  1022a4:	1affffde 	bne	102224 <global_timer_test+0x74>
			printf("It lasts %llu cycles, %llu us, %llu second\n\r", tLastCycles, tLastUS, tLastSecond );
			tPrevUS = tLastUS;
		}
	}

	xil_printf("\n\r");
  1022a8:	e3000070 	movw	r0, #112	; 0x70
  1022ac:	e3400011 	movt	r0, #17
  1022b0:	eb000d02 	bl	1056c0 <xil_printf>

}
  1022b4:	e28dd024 	add	sp, sp, #36	; 0x24
  1022b8:	ecbd8b04 	vpop	{d8-d9}
  1022bc:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, sl, pc}
	...
  1022c8:	000f4240 	.word	0x000f4240
  1022cc:	00000000 	.word	0x00000000

001022d0 <func1_time_measure>:
void func1_time_measure
( 
	test_func1_pointer_strct  func_ptr, 
	unsigned int ui_test_num 
)
{
  1022d0:	e92d4070 	push	{r4, r5, r6, lr}
  1022d4:	e24dd020 	sub	sp, sp, #32
  1022d8:	e1a05001 	mov	r5, r1
  1022dc:	e1a06000 	mov	r6, r0
	XTime tBegin, tEnd;
	XTime tLastCycles;
	u64 tLastUS;
	u64 tLastSecond;

	XTime_GetTime(&tBegin);
  1022e0:	e28d0010 	add	r0, sp, #16
  1022e4:	eb000e19 	bl	105b50 <XTime_GetTime>
	for ( u32Loop=0; u32Loop<ui_test_num; u32Loop++ )
  1022e8:	e3550000 	cmp	r5, #0
  1022ec:	13a04000 	movne	r4, #0
  1022f0:	0a000003 	beq	102304 <func1_time_measure+0x34>
  1022f4:	e2844001 	add	r4, r4, #1
	{
		func_ptr( );
  1022f8:	e12fff36 	blx	r6
	XTime tLastCycles;
	u64 tLastUS;
	u64 tLastSecond;

	XTime_GetTime(&tBegin);
	for ( u32Loop=0; u32Loop<ui_test_num; u32Loop++ )
  1022fc:	e1540005 	cmp	r4, r5
  102300:	1afffffb 	bne	1022f4 <func1_time_measure+0x24>
	{
		func_ptr( );
	}
	XTime_GetTime(&tEnd);
  102304:	e28d0018 	add	r0, sp, #24
  102308:	eb000e10 	bl	105b50 <XTime_GetTime>
	tLastCycles = ( tEnd - tBegin );
  10230c:	e1cd01d0 	ldrd	r0, [sp, #16]
	tLastUS = ( tLastCycles*1000000 )/COUNTS_PER_SECOND;
  102310:	e304c240 	movw	ip, #16960	; 0x4240
	for ( u32Loop=0; u32Loop<ui_test_num; u32Loop++ )
	{
		func_ptr( );
	}
	XTime_GetTime(&tEnd);
	tLastCycles = ( tEnd - tBegin );
  102314:	e1cd41d8 	ldrd	r4, [sp, #24]
	tLastUS = ( tLastCycles*1000000 )/COUNTS_PER_SECOND;
  102318:	e340c00f 	movt	ip, #15
  10231c:	e304235f 	movw	r2, #17247	; 0x435f
  102320:	e3a03000 	mov	r3, #0
  102324:	e34123de 	movt	r2, #5086	; 0x13de
	for ( u32Loop=0; u32Loop<ui_test_num; u32Loop++ )
	{
		func_ptr( );
	}
	XTime_GetTime(&tEnd);
	tLastCycles = ( tEnd - tBegin );
  102328:	e0544000 	subs	r4, r4, r0
  10232c:	e0c55001 	sbc	r5, r5, r1
	tLastUS = ( tLastCycles*1000000 )/COUNTS_PER_SECOND;
  102330:	e0810c94 	umull	r0, r1, r4, ip
  102334:	e021159c 	mla	r1, ip, r5, r1
  102338:	eb000ec7 	bl	105e5c <__aeabi_uldivmod>
	tLastSecond = tLastUS/1000000;
  10233c:	e3042240 	movw	r2, #16960	; 0x4240
  102340:	e3a03000 	mov	r3, #0
  102344:	e340200f 	movt	r2, #15
	printf("It lasts %llu cycles, %llu us = %llu second\n\r", tLastCycles, tLastUS, tLastSecond );
  102348:	e88d0003 	stm	sp, {r0, r1}
		func_ptr( );
	}
	XTime_GetTime(&tEnd);
	tLastCycles = ( tEnd - tBegin );
	tLastUS = ( tLastCycles*1000000 )/COUNTS_PER_SECOND;
	tLastSecond = tLastUS/1000000;
  10234c:	eb000ec2 	bl	105e5c <__aeabi_uldivmod>
	printf("It lasts %llu cycles, %llu us = %llu second\n\r", tLastCycles, tLastUS, tLastSecond );
  102350:	e1cd00f8 	strd	r0, [sp, #8]
  102354:	e30000a4 	movw	r0, #164	; 0xa4
  102358:	e1a02004 	mov	r2, r4
  10235c:	e1a03005 	mov	r3, r5
  102360:	e3400011 	movt	r0, #17
  102364:	eb001173 	bl	106938 <printf>
	//xil_printf("\n\r");

}
  102368:	e28dd020 	add	sp, sp, #32
  10236c:	e8bd8070 	pop	{r4, r5, r6, pc}

00102370 <func2_time_measure>:
( 
	test_func2_pointer_strct  func_ptr, 
	unsigned int ui_test_param, 
	unsigned int ui_test_num 
)
{
  102370:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  102374:	e1a05001 	mov	r5, r1
  102378:	e1a07000 	mov	r7, r0
	XTime tBegin, tEnd;
	XTime tLastCycles;
	u64 tLastUS;
	u64 tLastSecond;

	printf( "Test number:%d, test parameter:%d=0x%08x\r\n", 
  10237c:	e30000d4 	movw	r0, #212	; 0xd4
( 
	test_func2_pointer_strct  func_ptr, 
	unsigned int ui_test_param, 
	unsigned int ui_test_num 
)
{
  102380:	e24dd024 	sub	sp, sp, #36	; 0x24
	XTime tBegin, tEnd;
	XTime tLastCycles;
	u64 tLastUS;
	u64 tLastSecond;

	printf( "Test number:%d, test parameter:%d=0x%08x\r\n", 
  102384:	e1a01002 	mov	r1, r2
  102388:	e1a03005 	mov	r3, r5
( 
	test_func2_pointer_strct  func_ptr, 
	unsigned int ui_test_param, 
	unsigned int ui_test_num 
)
{
  10238c:	e1a06002 	mov	r6, r2
	XTime tBegin, tEnd;
	XTime tLastCycles;
	u64 tLastUS;
	u64 tLastSecond;

	printf( "Test number:%d, test parameter:%d=0x%08x\r\n", 
  102390:	e3400011 	movt	r0, #17
  102394:	e1a02005 	mov	r2, r5
  102398:	eb001166 	bl	106938 <printf>
		ui_test_num, ui_test_param, ui_test_param );
	usleep(10000);
  10239c:	e3020710 	movw	r0, #10000	; 0x2710
  1023a0:	eb000930 	bl	104868 <usleep>

	XTime_GetTime(&tBegin);
  1023a4:	e28d0010 	add	r0, sp, #16
  1023a8:	eb000de8 	bl	105b50 <XTime_GetTime>
	for ( u32Loop=0; u32Loop<ui_test_num; u32Loop++ )
  1023ac:	e3560000 	cmp	r6, #0
  1023b0:	13a04000 	movne	r4, #0
  1023b4:	0a000004 	beq	1023cc <func2_time_measure+0x5c>
	{
		func_ptr(ui_test_param);
  1023b8:	e1a00005 	mov	r0, r5
	printf( "Test number:%d, test parameter:%d=0x%08x\r\n", 
		ui_test_num, ui_test_param, ui_test_param );
	usleep(10000);

	XTime_GetTime(&tBegin);
	for ( u32Loop=0; u32Loop<ui_test_num; u32Loop++ )
  1023bc:	e2844001 	add	r4, r4, #1
	{
		func_ptr(ui_test_param);
  1023c0:	e12fff37 	blx	r7
	printf( "Test number:%d, test parameter:%d=0x%08x\r\n", 
		ui_test_num, ui_test_param, ui_test_param );
	usleep(10000);

	XTime_GetTime(&tBegin);
	for ( u32Loop=0; u32Loop<ui_test_num; u32Loop++ )
  1023c4:	e1540006 	cmp	r4, r6
  1023c8:	1afffffa 	bne	1023b8 <func2_time_measure+0x48>
	{
		func_ptr(ui_test_param);
	}
	XTime_GetTime(&tEnd);
  1023cc:	e28d0018 	add	r0, sp, #24
  1023d0:	eb000dde 	bl	105b50 <XTime_GetTime>
	tLastCycles = ( tEnd - tBegin );
  1023d4:	e1cd01d0 	ldrd	r0, [sp, #16]
	tLastUS = ( tLastCycles*1000000 )/COUNTS_PER_SECOND;
  1023d8:	e304c240 	movw	ip, #16960	; 0x4240
	for ( u32Loop=0; u32Loop<ui_test_num; u32Loop++ )
	{
		func_ptr(ui_test_param);
	}
	XTime_GetTime(&tEnd);
	tLastCycles = ( tEnd - tBegin );
  1023dc:	e1cd41d8 	ldrd	r4, [sp, #24]
	tLastUS = ( tLastCycles*1000000 )/COUNTS_PER_SECOND;
  1023e0:	e340c00f 	movt	ip, #15
  1023e4:	e304235f 	movw	r2, #17247	; 0x435f
  1023e8:	e3a03000 	mov	r3, #0
  1023ec:	e34123de 	movt	r2, #5086	; 0x13de
	for ( u32Loop=0; u32Loop<ui_test_num; u32Loop++ )
	{
		func_ptr(ui_test_param);
	}
	XTime_GetTime(&tEnd);
	tLastCycles = ( tEnd - tBegin );
  1023f0:	e0544000 	subs	r4, r4, r0
  1023f4:	e0c55001 	sbc	r5, r5, r1
	tLastUS = ( tLastCycles*1000000 )/COUNTS_PER_SECOND;
  1023f8:	e0810c94 	umull	r0, r1, r4, ip
  1023fc:	e021159c 	mla	r1, ip, r5, r1
  102400:	eb000e95 	bl	105e5c <__aeabi_uldivmod>
	tLastSecond = tLastUS/1000000;
  102404:	e3042240 	movw	r2, #16960	; 0x4240
  102408:	e3a03000 	mov	r3, #0
  10240c:	e340200f 	movt	r2, #15
	printf("It lasts %llu cycles, %llu us, %llu second\n\r", tLastCycles, tLastUS, tLastSecond );
  102410:	e88d0003 	stm	sp, {r0, r1}
		func_ptr(ui_test_param);
	}
	XTime_GetTime(&tEnd);
	tLastCycles = ( tEnd - tBegin );
	tLastUS = ( tLastCycles*1000000 )/COUNTS_PER_SECOND;
	tLastSecond = tLastUS/1000000;
  102414:	eb000e90 	bl	105e5c <__aeabi_uldivmod>
	printf("It lasts %llu cycles, %llu us, %llu second\n\r", tLastCycles, tLastUS, tLastSecond );
  102418:	e1cd00f8 	strd	r0, [sp, #8]
  10241c:	e3000074 	movw	r0, #116	; 0x74
  102420:	e1a02004 	mov	r2, r4
  102424:	e1a03005 	mov	r3, r5
  102428:	e3400011 	movt	r0, #17
  10242c:	eb001141 	bl	106938 <printf>
	//xil_printf("\n\r");

}
  102430:	e28dd024 	add	sp, sp, #36	; 0x24
  102434:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00102438 <arm_snr_f32>:
  uint32_t i;
  float SNR;
  int temp;
  int *test;

  for (i = 0; i < buffSize; i++)
  102438:	e3520000 	cmp	r2, #0
 * The function Caluclates signal to noise ratio for the reference output 
 * and test output 
 */

float arm_snr_f32(float *pRef, float *pTest, uint32_t buffSize)
{
  10243c:	e92d0070 	push	{r4, r5, r6}
  uint32_t i;
  float SNR;
  int temp;
  int *test;

  for (i = 0; i < buffSize; i++)
  102440:	0a00002f 	beq	102504 <arm_snr_f32+0xcc>
    {
 	  /* Checking for a NAN value in pRef array */
	  test =   (int *)(&pRef[i]);
      temp =  *test;

	  if(temp == 0x7FC00000)
  102444:	e5903000 	ldr	r3, [r0]
  102448:	e3a05000 	mov	r5, #0
  10244c:	e3475fc0 	movt	r5, #32704	; 0x7fc0
  102450:	e1530005 	cmp	r3, r5
  102454:	0a000026 	beq	1024f4 <arm_snr_f32+0xbc>

	  /* Checking for a NAN value in pTest array */
	  test =   (int *)(&pTest[i]);
      temp =  *test;

	  if(temp == 0x7FC00000)
  102458:	e5913000 	ldr	r3, [r1]
  10245c:	e1530005 	cmp	r3, r5
  102460:	0a000023 	beq	1024f4 <arm_snr_f32+0xbc>
 * and test output 
 */

float arm_snr_f32(float *pRef, float *pTest, uint32_t buffSize)
{
  float EnergySignal = 0.0, EnergyError = 0.0;
  102464:	ed9f7a28 	vldr	s14, [pc, #160]	; 10250c <arm_snr_f32+0xd4>
 * @return float	SNR
 * The function Caluclates signal to noise ratio for the reference output 
 * and test output 
 */

float arm_snr_f32(float *pRef, float *pTest, uint32_t buffSize)
  102468:	e2814004 	add	r4, r1, #4
  10246c:	e280c004 	add	ip, r0, #4
  uint32_t i;
  float SNR;
  int temp;
  int *test;

  for (i = 0; i < buffSize; i++)
  102470:	e3a03000 	mov	r3, #0
 * and test output 
 */

float arm_snr_f32(float *pRef, float *pTest, uint32_t buffSize)
{
  float EnergySignal = 0.0, EnergyError = 0.0;
  102474:	eef06a47 	vmov.f32	s13, s14
  102478:	ea000005 	b	102494 <arm_snr_f32+0x5c>
    {
 	  /* Checking for a NAN value in pRef array */
	  test =   (int *)(&pRef[i]);
      temp =  *test;

	  if(temp == 0x7FC00000)
  10247c:	e5906000 	ldr	r6, [r0]
  102480:	e1560005 	cmp	r6, r5
  102484:	0a00001a 	beq	1024f4 <arm_snr_f32+0xbc>

	  /* Checking for a NAN value in pTest array */
	  test =   (int *)(&pTest[i]);
      temp =  *test;

	  if(temp == 0x7FC00000)
  102488:	e5916000 	ldr	r6, [r1]
  10248c:	e1560005 	cmp	r6, r5
  102490:	0a000017 	beq	1024f4 <arm_snr_f32+0xbc>
	  {
	  		return(0);
	  }
      EnergySignal += pRef[i] * pRef[i];
  102494:	edd07a00 	vldr	s15, [r0]
  uint32_t i;
  float SNR;
  int temp;
  int *test;

  for (i = 0; i < buffSize; i++)
  102498:	e2833001 	add	r3, r3, #1
	  if(temp == 0x7FC00000)
	  {
	  		return(0);
	  }
      EnergySignal += pRef[i] * pRef[i];
      EnergyError += (pRef[i] - pTest[i]) * (pRef[i] - pTest[i]); 
  10249c:	ed916a00 	vldr	s12, [r1]
  uint32_t i;
  float SNR;
  int temp;
  int *test;

  for (i = 0; i < buffSize; i++)
  1024a0:	e1530002 	cmp	r3, r2
    {
 	  /* Checking for a NAN value in pRef array */
	  test =   (int *)(&pRef[i]);
  1024a4:	e1a0000c 	mov	r0, ip
	  {
	  		return(0);
	  }

	  /* Checking for a NAN value in pTest array */
	  test =   (int *)(&pTest[i]);
  1024a8:	e1a01004 	mov	r1, r4
  1024ac:	e28cc004 	add	ip, ip, #4
  1024b0:	e2844004 	add	r4, r4, #4

	  if(temp == 0x7FC00000)
	  {
	  		return(0);
	  }
      EnergySignal += pRef[i] * pRef[i];
  1024b4:	ee476aa7 	vmla.f32	s13, s15, s15
      EnergyError += (pRef[i] - pTest[i]) * (pRef[i] - pTest[i]); 
  1024b8:	ee777ac6 	vsub.f32	s15, s15, s12
  1024bc:	ee077aa7 	vmla.f32	s14, s15, s15
  uint32_t i;
  float SNR;
  int temp;
  int *test;

  for (i = 0; i < buffSize; i++)
  1024c0:	1affffed 	bne	10247c <arm_snr_f32+0x44>

	/* Checking for a NAN value in EnergyError */
	test =   (int *)(&EnergyError);
    temp =  *test;

    if(temp == 0x7FC00000)
  1024c4:	e3a03000 	mov	r3, #0
  1024c8:	ee172a10 	vmov	r2, s14
  1024cc:	e3473fc0 	movt	r3, #32704	; 0x7fc0
  1024d0:	e1520003 	cmp	r2, r3
  1024d4:	0a000006 	beq	1024f4 <arm_snr_f32+0xbc>
    {
  		return(0);
    }
	
	/* Checking for EnergyError for Zero */
	if(EnergyError == 0)
  1024d8:	eeb57a40 	vcmp.f32	s14, #0.0
  1024dc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1024e0:	0a000007 	beq	102504 <arm_snr_f32+0xcc>
	{
		return(130.0f);
	}
	  //SNR = 10 * log10 (EnergySignal / EnergyError);
	  SNR = 10 * (EnergySignal / EnergyError);
  1024e4:	ee867a87 	vdiv.f32	s14, s13, s14
  1024e8:	eef27a04 	vmov.f32	s15, #36	; 0x24
  1024ec:	ee677a27 	vmul.f32	s15, s14, s15
  1024f0:	ea000000 	b	1024f8 <arm_snr_f32+0xc0>
	  test =   (int *)(&pRef[i]);
      temp =  *test;

	  if(temp == 0x7FC00000)
	  {
	  		return(0);
  1024f4:	eddf7a04 	vldr	s15, [pc, #16]	; 10250c <arm_snr_f32+0xd4>
	  //SNR = 10 * log10 (EnergySignal / EnergyError);
	  SNR = 10 * (EnergySignal / EnergyError);

  return (SNR);

}
  1024f8:	ee170a90 	vmov	r0, s15
  1024fc:	e8bd0070 	pop	{r4, r5, r6}
  102500:	e12fff1e 	bx	lr
    }
	
	/* Checking for EnergyError for Zero */
	if(EnergyError == 0)
	{
		return(130.0f);
  102504:	eddf7a01 	vldr	s15, [pc, #4]	; 102510 <arm_snr_f32+0xd8>
  102508:	eafffffa 	b	1024f8 <arm_snr_f32+0xc0>
  10250c:	00000000 	.word	0x00000000
  102510:	43020000 	.word	0x43020000

00102514 <arm_provide_guard_bits_q15>:
void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
                            uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  102514:	e3510000 	cmp	r1, #0
 * to avoid overflow 
 */

void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
                            uint32_t guard_bits)
{
  102518:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp}
  10251c:	e24dd028 	sub	sp, sp, #40	; 0x28
  102520:	e1a07002 	mov	r7, r2
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  102524:	e58d101c 	str	r1, [sp, #28]
 * to avoid overflow 
 */

void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
                            uint32_t guard_bits)
{
  102528:	e58d0020 	str	r0, [sp, #32]
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  10252c:	0a0000db 	beq	1028a0 <arm_provide_guard_bits_q15+0x38c>
 * @return none
 * The function Provides the guard bits for the buffer 
 * to avoid overflow 
 */

void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
  102530:	e7e130d0 	ubfx	r3, r0, #1, #2
  102534:	e2633000 	rsb	r3, r3, #0
  102538:	e2033007 	and	r3, r3, #7
  10253c:	e1530001 	cmp	r3, r1
  102540:	31a01003 	movcc	r1, r3
  102544:	e59d301c 	ldr	r3, [sp, #28]
  102548:	e58d1018 	str	r1, [sp, #24]
  10254c:	e3530007 	cmp	r3, #7
  102550:	91a0a003 	movls	sl, r3
  102554:	958da018 	strls	sl, [sp, #24]
  102558:	8a0000d7 	bhi	1028bc <arm_provide_guard_bits_q15+0x3a8>
  10255c:	e59dc018 	ldr	ip, [sp, #24]
  102560:	e35c0010 	cmp	ip, #16
  102564:	e24c000f 	sub	r0, ip, #15
  102568:	e58d0024 	str	r0, [sp, #36]	; 0x24
  10256c:	9a0000ce 	bls	1028ac <arm_provide_guard_bits_q15+0x398>
  102570:	e59d1020 	ldr	r1, [sp, #32]
  102574:	e3a00000 	mov	r0, #0
  102578:	e281202e 	add	r2, r1, #46	; 0x2e
  10257c:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
  102580:	e2803011 	add	r3, r0, #17
                            uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  102584:	e2800010 	add	r0, r0, #16
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  102588:	e15242fa 	ldrsh	r4, [r2, #-42]	; 0xffffffd6
void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
                            uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  10258c:	e58d0000 	str	r0, [sp]
  102590:	f5d2f000 	pld	[r2]
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  102594:	e15202f6 	ldrsh	r0, [r2, #-38]	; 0xffffffda
  102598:	e153000c 	cmp	r3, ip
  10259c:	e152c2f8 	ldrsh	ip, [r2, #-40]	; 0xffffffd8
  1025a0:	e2822020 	add	r2, r2, #32
  1025a4:	e152b4fe 	ldrsh	fp, [r2, #-78]	; 0xffffffb2
  1025a8:	e1a04754 	asr	r4, r4, r7
  1025ac:	e152a4fc 	ldrsh	sl, [r2, #-76]	; 0xffffffb4
  1025b0:	e15214f4 	ldrsh	r1, [r2, #-68]	; 0xffffffbc
  1025b4:	e1a00750 	asr	r0, r0, r7
  1025b8:	e15234f2 	ldrsh	r3, [r2, #-66]	; 0xffffffbe
  1025bc:	e1a0c75c 	asr	ip, ip, r7
  1025c0:	e1a0b75b 	asr	fp, fp, r7
  1025c4:	e58d4004 	str	r4, [sp, #4]
  1025c8:	e1a0a75a 	asr	sl, sl, r7
  1025cc:	e58dc008 	str	ip, [sp, #8]
  1025d0:	e58d000c 	str	r0, [sp, #12]
  1025d4:	e1a01751 	asr	r1, r1, r7
  1025d8:	e15203f0 	ldrsh	r0, [r2, #-48]	; 0xffffffd0
  1025dc:	e1a03753 	asr	r3, r3, r7
  1025e0:	e142b4be 	strh	fp, [r2, #-78]	; 0xffffffb2
  1025e4:	e142a4bc 	strh	sl, [r2, #-76]	; 0xffffffb4
  1025e8:	e99d0c00 	ldmib	sp, {sl, fp}
  1025ec:	e58d1010 	str	r1, [sp, #16]
  1025f0:	e15264f0 	ldrsh	r6, [r2, #-64]	; 0xffffffc0
  1025f4:	e15253fe 	ldrsh	r5, [r2, #-62]	; 0xffffffc2
  1025f8:	e15243fc 	ldrsh	r4, [r2, #-60]	; 0xffffffc4
  1025fc:	e152c3fa 	ldrsh	ip, [r2, #-58]	; 0xffffffc6
  102600:	e15213f8 	ldrsh	r1, [r2, #-56]	; 0xffffffc8
  102604:	e1a06756 	asr	r6, r6, r7
  102608:	e15293f4 	ldrsh	r9, [r2, #-52]	; 0xffffffcc
  10260c:	e1a05755 	asr	r5, r5, r7
  102610:	e15283f2 	ldrsh	r8, [r2, #-50]	; 0xffffffce
  102614:	e1a04754 	asr	r4, r4, r7
  102618:	e142a4ba 	strh	sl, [r2, #-74]	; 0xffffffb6
  10261c:	e1a0a750 	asr	sl, r0, r7
  102620:	e142b4b8 	strh	fp, [r2, #-72]	; 0xffffffb8
  102624:	e1a0c75c 	asr	ip, ip, r7
  102628:	e59d000c 	ldr	r0, [sp, #12]
  10262c:	e1a01751 	asr	r1, r1, r7
  102630:	e58d3014 	str	r3, [sp, #20]
  102634:	e1a09759 	asr	r9, r9, r7
  102638:	e15233f6 	ldrsh	r3, [r2, #-54]	; 0xffffffca
  10263c:	e1a08758 	asr	r8, r8, r7
  102640:	e59db010 	ldr	fp, [sp, #16]
  102644:	e14204b6 	strh	r0, [r2, #-70]	; 0xffffffba
void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
                            uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  102648:	e59d0000 	ldr	r0, [sp]
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  10264c:	e142b4b4 	strh	fp, [r2, #-68]	; 0xffffffbc
  102650:	e1a03753 	asr	r3, r3, r7
  102654:	e59db014 	ldr	fp, [sp, #20]
  102658:	e14264b0 	strh	r6, [r2, #-64]	; 0xffffffc0
  10265c:	e14253be 	strh	r5, [r2, #-62]	; 0xffffffc2
  102660:	e142b4b2 	strh	fp, [r2, #-66]	; 0xffffffbe
  102664:	e14243bc 	strh	r4, [r2, #-60]	; 0xffffffc4
  102668:	e142c3ba 	strh	ip, [r2, #-58]	; 0xffffffc6
  10266c:	e14213b8 	strh	r1, [r2, #-56]	; 0xffffffc8
  102670:	e14233b6 	strh	r3, [r2, #-54]	; 0xffffffca
  102674:	e14293b4 	strh	r9, [r2, #-52]	; 0xffffffcc
  102678:	e14283b2 	strh	r8, [r2, #-50]	; 0xffffffce
  10267c:	e142a3b0 	strh	sl, [r2, #-48]	; 0xffffffd0
  102680:	3affffbd 	bcc	10257c <arm_provide_guard_bits_q15+0x68>
  102684:	e59d1000 	ldr	r1, [sp]
 * @return none
 * The function Provides the guard bits for the buffer 
 * to avoid overflow 
 */

void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
  102688:	e59d0020 	ldr	r0, [sp, #32]
  10268c:	e0803081 	add	r3, r0, r1, lsl #1
  102690:	e1a00001 	mov	r0, r1
  102694:	e59d1018 	ldr	r1, [sp, #24]
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  102698:	e1d320f0 	ldrsh	r2, [r3]
void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
                            uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  10269c:	e2800001 	add	r0, r0, #1
  1026a0:	e1510000 	cmp	r1, r0
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  1026a4:	e1a02752 	asr	r2, r2, r7
  1026a8:	e0c320b2 	strh	r2, [r3], #2
  1026ac:	8afffff9 	bhi	102698 <arm_provide_guard_bits_q15+0x184>
  1026b0:	e59d301c 	ldr	r3, [sp, #28]
  1026b4:	e59da018 	ldr	sl, [sp, #24]
  1026b8:	e153000a 	cmp	r3, sl
  1026bc:	0a000077 	beq	1028a0 <arm_provide_guard_bits_q15+0x38c>
  1026c0:	e59dc01c 	ldr	ip, [sp, #28]
  1026c4:	e59d1018 	ldr	r1, [sp, #24]
  1026c8:	e061500c 	rsb	r5, r1, ip
  1026cc:	e1a0c1a5 	lsr	ip, r5, #3
  1026d0:	e1b0418c 	lsls	r4, ip, #3
  1026d4:	0a000013 	beq	102728 <arm_provide_guard_bits_q15+0x214>
  1026d8:	e59d3020 	ldr	r3, [sp, #32]
  1026dc:	eea27b90 	vdup.32	q9, r7
  1026e0:	f3f923e2 	vneg.s32	q9, q9
  1026e4:	e0832081 	add	r2, r3, r1, lsl #1
void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
                            uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  1026e8:	e3a03000 	mov	r3, #0
  1026ec:	e1a01002 	mov	r1, r2
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  1026f0:	ecf10b04 	vldmia	r1!, {d16-d17}
  1026f4:	f2d06a30 	vmovl.s16	q11, d16
  1026f8:	f2d00a31 	vmovl.s16	q8, d17
  1026fc:	e2833001 	add	r3, r3, #1
  102700:	e15c0003 	cmp	ip, r3
  102704:	f26264e6 	vshl.s32	q11, q11, q9
  102708:	f26204e0 	vshl.s32	q8, q8, q9
  10270c:	f3f64226 	vmovn.i32	d20, q11
  102710:	f3f65220 	vmovn.i32	d21, q8
  102714:	ece24b04 	vstmia	r2!, {d20-d21}
  102718:	8afffff4 	bhi	1026f0 <arm_provide_guard_bits_q15+0x1dc>
  10271c:	e1550004 	cmp	r5, r4
  102720:	e0800004 	add	r0, r0, r4
  102724:	0a00005d 	beq	1028a0 <arm_provide_guard_bits_q15+0x38c>
 * @return none
 * The function Provides the guard bits for the buffer 
 * to avoid overflow 
 */

void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
  102728:	e59dc01c 	ldr	ip, [sp, #28]
  10272c:	e2803001 	add	r3, r0, #1
  102730:	e59da01c 	ldr	sl, [sp, #28]
  102734:	e15c0003 	cmp	ip, r3
  102738:	e24aa00f 	sub	sl, sl, #15
  10273c:	33a02000 	movcc	r2, #0
  102740:	23a02001 	movcs	r2, #1
  102744:	e153000a 	cmp	r3, sl
  102748:	23a02000 	movcs	r2, #0
  10274c:	e58da018 	str	sl, [sp, #24]
  102750:	e35c000e 	cmp	ip, #14
  102754:	93a03000 	movls	r3, #0
  102758:	82023001 	andhi	r3, r2, #1
  10275c:	e3530000 	cmp	r3, #0
  102760:	0a000044 	beq	102878 <arm_provide_guard_bits_q15+0x364>
  102764:	e59d1020 	ldr	r1, [sp, #32]
  102768:	e2803019 	add	r3, r0, #25
  10276c:	e0812083 	add	r2, r1, r3, lsl #1
  102770:	e59dc018 	ldr	ip, [sp, #24]
  102774:	e2803011 	add	r3, r0, #17
                            uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  102778:	e2800010 	add	r0, r0, #16
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  10277c:	e15242fe 	ldrsh	r4, [r2, #-46]	; 0xffffffd2
void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
                            uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  102780:	e58d0000 	str	r0, [sp]
  102784:	f5d2f000 	pld	[r2]
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  102788:	e15202fa 	ldrsh	r0, [r2, #-42]	; 0xffffffd6
  10278c:	e15c0003 	cmp	ip, r3
  102790:	e152c2fc 	ldrsh	ip, [r2, #-44]	; 0xffffffd4
  102794:	e2822020 	add	r2, r2, #32
  102798:	e152b5f2 	ldrsh	fp, [r2, #-82]	; 0xffffffae
  10279c:	e1a04754 	asr	r4, r4, r7
  1027a0:	e152a5f0 	ldrsh	sl, [r2, #-80]	; 0xffffffb0
  1027a4:	e15214f8 	ldrsh	r1, [r2, #-72]	; 0xffffffb8
  1027a8:	e1a00750 	asr	r0, r0, r7
  1027ac:	e15234f6 	ldrsh	r3, [r2, #-70]	; 0xffffffba
  1027b0:	e1a0c75c 	asr	ip, ip, r7
  1027b4:	e1a0b75b 	asr	fp, fp, r7
  1027b8:	e58d4004 	str	r4, [sp, #4]
  1027bc:	e1a0a75a 	asr	sl, sl, r7
  1027c0:	e58dc008 	str	ip, [sp, #8]
  1027c4:	e58d000c 	str	r0, [sp, #12]
  1027c8:	e1a01751 	asr	r1, r1, r7
  1027cc:	e15203f4 	ldrsh	r0, [r2, #-52]	; 0xffffffcc
  1027d0:	e1a03753 	asr	r3, r3, r7
  1027d4:	e142b5b2 	strh	fp, [r2, #-82]	; 0xffffffae
  1027d8:	e142a5b0 	strh	sl, [r2, #-80]	; 0xffffffb0
  1027dc:	e99d0c00 	ldmib	sp, {sl, fp}
  1027e0:	e58d1010 	str	r1, [sp, #16]
  1027e4:	e15264f4 	ldrsh	r6, [r2, #-68]	; 0xffffffbc
  1027e8:	e15254f2 	ldrsh	r5, [r2, #-66]	; 0xffffffbe
  1027ec:	e15244f0 	ldrsh	r4, [r2, #-64]	; 0xffffffc0
  1027f0:	e152c3fe 	ldrsh	ip, [r2, #-62]	; 0xffffffc2
  1027f4:	e15213fc 	ldrsh	r1, [r2, #-60]	; 0xffffffc4
  1027f8:	e1a06756 	asr	r6, r6, r7
  1027fc:	e15293f8 	ldrsh	r9, [r2, #-56]	; 0xffffffc8
  102800:	e1a05755 	asr	r5, r5, r7
  102804:	e15283f6 	ldrsh	r8, [r2, #-54]	; 0xffffffca
  102808:	e1a04754 	asr	r4, r4, r7
  10280c:	e142a4be 	strh	sl, [r2, #-78]	; 0xffffffb2
  102810:	e1a0a750 	asr	sl, r0, r7
  102814:	e142b4bc 	strh	fp, [r2, #-76]	; 0xffffffb4
  102818:	e1a0c75c 	asr	ip, ip, r7
  10281c:	e59d000c 	ldr	r0, [sp, #12]
  102820:	e1a01751 	asr	r1, r1, r7
  102824:	e58d3014 	str	r3, [sp, #20]
  102828:	e1a09759 	asr	r9, r9, r7
  10282c:	e15233fa 	ldrsh	r3, [r2, #-58]	; 0xffffffc6
  102830:	e1a08758 	asr	r8, r8, r7
  102834:	e59db010 	ldr	fp, [sp, #16]
  102838:	e14204ba 	strh	r0, [r2, #-74]	; 0xffffffb6
void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
                            uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  10283c:	e59d0000 	ldr	r0, [sp]
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  102840:	e142b4b8 	strh	fp, [r2, #-72]	; 0xffffffb8
  102844:	e1a03753 	asr	r3, r3, r7
  102848:	e59db014 	ldr	fp, [sp, #20]
  10284c:	e14264b4 	strh	r6, [r2, #-68]	; 0xffffffbc
  102850:	e14254b2 	strh	r5, [r2, #-66]	; 0xffffffbe
  102854:	e142b4b6 	strh	fp, [r2, #-70]	; 0xffffffba
  102858:	e14244b0 	strh	r4, [r2, #-64]	; 0xffffffc0
  10285c:	e142c3be 	strh	ip, [r2, #-62]	; 0xffffffc2
  102860:	e14213bc 	strh	r1, [r2, #-60]	; 0xffffffc4
  102864:	e14233ba 	strh	r3, [r2, #-58]	; 0xffffffc6
  102868:	e14293b8 	strh	r9, [r2, #-56]	; 0xffffffc8
  10286c:	e14283b6 	strh	r8, [r2, #-54]	; 0xffffffca
  102870:	e142a3b4 	strh	sl, [r2, #-52]	; 0xffffffcc
  102874:	8affffbd 	bhi	102770 <arm_provide_guard_bits_q15+0x25c>
 * @return none
 * The function Provides the guard bits for the buffer 
 * to avoid overflow 
 */

void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
  102878:	e59dc020 	ldr	ip, [sp, #32]
  10287c:	e1a01000 	mov	r1, r0
  102880:	e08c3080 	add	r3, ip, r0, lsl #1
  102884:	e59d001c 	ldr	r0, [sp, #28]
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  102888:	e1d320f0 	ldrsh	r2, [r3]
void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
                            uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  10288c:	e2811001 	add	r1, r1, #1
  102890:	e1500001 	cmp	r0, r1
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  102894:	e1a02752 	asr	r2, r2, r7
  102898:	e0c320b2 	strh	r2, [r3], #2
void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
                            uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  10289c:	8afffff9 	bhi	102888 <arm_provide_guard_bits_q15+0x374>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
    }
}
  1028a0:	e28dd028 	add	sp, sp, #40	; 0x28
  1028a4:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
  1028a8:	e12fff1e 	bx	lr
 * @return none
 * The function Provides the guard bits for the buffer 
 * to avoid overflow 
 */

void arm_provide_guard_bits_q15 (q15_t * input_buf, uint32_t blockSize,
  1028ac:	e3a0c000 	mov	ip, #0
  1028b0:	e58dc000 	str	ip, [sp]
  1028b4:	e1a0100c 	mov	r1, ip
  1028b8:	eaffff72 	b	102688 <arm_provide_guard_bits_q15+0x174>
  1028bc:	e3510000 	cmp	r1, #0
  1028c0:	1affff25 	bne	10255c <arm_provide_guard_bits_q15+0x48>
                            uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  1028c4:	e59d0018 	ldr	r0, [sp, #24]
  1028c8:	eaffff7c 	b	1026c0 <arm_provide_guard_bits_q15+0x1ac>

001028cc <arm_float_to_q12_20>:

void arm_float_to_q12_20(float *pIn, q31_t * pOut, uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  1028cc:	e3520000 	cmp	r2, #0
 * @return none
 * The function converts floating point values to fixed point(q12.20) values 
 */

void arm_float_to_q12_20(float *pIn, q31_t * pOut, uint32_t numSamples)
{
  1028d0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  1028d4:	0a0000b8 	beq	102bbc <arm_float_to_q12_20+0x2f0>
  1028d8:	e3520008 	cmp	r2, #8
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point(q12.20) values 
 */

void arm_float_to_q12_20(float *pIn, q31_t * pOut, uint32_t numSamples)
  1028dc:	e2427007 	sub	r7, r2, #7
  1028e0:	9a0000b7 	bls	102bc4 <arm_float_to_q12_20+0x2f8>
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
  1028e4:	ed9f7ab8 	vldr	s14, [pc, #736]	; 102bcc <arm_float_to_q12_20+0x300>
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point(q12.20) values 
 */

void arm_float_to_q12_20(float *pIn, q31_t * pOut, uint32_t numSamples)
  1028e8:	e280c030 	add	ip, r0, #48	; 0x30
  1028ec:	e2813030 	add	r3, r1, #48	; 0x30
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  1028f0:	e3a05000 	mov	r5, #0
  1028f4:	eef77a00 	vmov.f32	s15, #112	; 0x70
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1028f8:	eef61b00 	vmov.f64	d17, #96	; 0x60
  1028fc:	eefe0b00 	vmov.f64	d16, #224	; 0xe0
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
  102900:	ed5c6a0c 	vldr	s13, [ip, #-48]	; 0xffffffd0
  102904:	f5dcf000 	pld	[ip]
  102908:	f5d3f000 	pld	[r3]
  10290c:	eef46a67 	vcmp.f32	s13, s15
  102910:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  102914:	030f4fff 	movweq	r4, #65535	; 0xffff
  102918:	0340400f 	movteq	r4, #15
  10291c:	0a000009 	beq	102948 <arm_float_to_q12_20+0x7c>
  102920:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  102924:	eef56ac0 	vcmpe.f32	s13, #0.0
  102928:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  10292c:	def02b60 	vmovle.f64	d18, d16
  102930:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
  102934:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  102938:	eef83be6 	vcvt.f64.s32	d19, s13
  10293c:	ee732ba2 	vadd.f64	d18, d19, d18
  102940:	eefd6be2 	vcvt.s32.f64	s13, d18
  102944:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
  102948:	ed5c6a0b 	vldr	s13, [ip, #-44]	; 0xffffffd4
  10294c:	e5034030 	str	r4, [r3, #-48]	; 0xffffffd0
  102950:	eef46a67 	vcmp.f32	s13, s15
  102954:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  102958:	030f4fff 	movweq	r4, #65535	; 0xffff
  10295c:	0340400f 	movteq	r4, #15
  102960:	0a000009 	beq	10298c <arm_float_to_q12_20+0xc0>
  102964:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  102968:	eef56ac0 	vcmpe.f32	s13, #0.0
  10296c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  102970:	def02b60 	vmovle.f64	d18, d16
  102974:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
  102978:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  10297c:	eef83be6 	vcvt.f64.s32	d19, s13
  102980:	ee732ba2 	vadd.f64	d18, d19, d18
  102984:	eefd6be2 	vcvt.s32.f64	s13, d18
  102988:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
  10298c:	ed5c6a0a 	vldr	s13, [ip, #-40]	; 0xffffffd8
  102990:	e503402c 	str	r4, [r3, #-44]	; 0xffffffd4
  102994:	eef46a67 	vcmp.f32	s13, s15
  102998:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  10299c:	030f4fff 	movweq	r4, #65535	; 0xffff
  1029a0:	0340400f 	movteq	r4, #15
  1029a4:	0a000009 	beq	1029d0 <arm_float_to_q12_20+0x104>
  1029a8:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1029ac:	eef56ac0 	vcmpe.f32	s13, #0.0
  1029b0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1029b4:	def02b60 	vmovle.f64	d18, d16
  1029b8:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
  1029bc:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1029c0:	eef83be6 	vcvt.f64.s32	d19, s13
  1029c4:	ee732ba2 	vadd.f64	d18, d19, d18
  1029c8:	eefd6be2 	vcvt.s32.f64	s13, d18
  1029cc:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
  1029d0:	ed5c6a09 	vldr	s13, [ip, #-36]	; 0xffffffdc
  1029d4:	e5034028 	str	r4, [r3, #-40]	; 0xffffffd8
  1029d8:	eef46a67 	vcmp.f32	s13, s15
  1029dc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1029e0:	030f4fff 	movweq	r4, #65535	; 0xffff
  1029e4:	0340400f 	movteq	r4, #15
  1029e8:	0a000009 	beq	102a14 <arm_float_to_q12_20+0x148>
  1029ec:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1029f0:	eef56ac0 	vcmpe.f32	s13, #0.0
  1029f4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1029f8:	def02b60 	vmovle.f64	d18, d16
  1029fc:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
  102a00:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  102a04:	eef83be6 	vcvt.f64.s32	d19, s13
  102a08:	ee732ba2 	vadd.f64	d18, d19, d18
  102a0c:	eefd6be2 	vcvt.s32.f64	s13, d18
  102a10:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
  102a14:	ed5c6a08 	vldr	s13, [ip, #-32]	; 0xffffffe0
  102a18:	e5034024 	str	r4, [r3, #-36]	; 0xffffffdc
  102a1c:	eef46a67 	vcmp.f32	s13, s15
  102a20:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  102a24:	030f4fff 	movweq	r4, #65535	; 0xffff
  102a28:	0340400f 	movteq	r4, #15
  102a2c:	0a000009 	beq	102a58 <arm_float_to_q12_20+0x18c>
  102a30:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  102a34:	eef56ac0 	vcmpe.f32	s13, #0.0
  102a38:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  102a3c:	def02b60 	vmovle.f64	d18, d16
  102a40:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
  102a44:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  102a48:	eef83be6 	vcvt.f64.s32	d19, s13
  102a4c:	ee732ba2 	vadd.f64	d18, d19, d18
  102a50:	eefd6be2 	vcvt.s32.f64	s13, d18
  102a54:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
  102a58:	ed5c6a07 	vldr	s13, [ip, #-28]	; 0xffffffe4
  102a5c:	e5034020 	str	r4, [r3, #-32]	; 0xffffffe0
  102a60:	eef46a67 	vcmp.f32	s13, s15
  102a64:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  102a68:	030f4fff 	movweq	r4, #65535	; 0xffff
  102a6c:	0340400f 	movteq	r4, #15
  102a70:	0a000009 	beq	102a9c <arm_float_to_q12_20+0x1d0>
  102a74:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  102a78:	eef56ac0 	vcmpe.f32	s13, #0.0
  102a7c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  102a80:	def02b60 	vmovle.f64	d18, d16
  102a84:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
  102a88:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  102a8c:	eef83be6 	vcvt.f64.s32	d19, s13
  102a90:	ee732ba2 	vadd.f64	d18, d19, d18
  102a94:	eefd6be2 	vcvt.s32.f64	s13, d18
  102a98:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
  102a9c:	ed5c6a06 	vldr	s13, [ip, #-24]	; 0xffffffe8
  102aa0:	e503401c 	str	r4, [r3, #-28]	; 0xffffffe4
  102aa4:	eef46a67 	vcmp.f32	s13, s15
  102aa8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  102aac:	030f4fff 	movweq	r4, #65535	; 0xffff
  102ab0:	0340400f 	movteq	r4, #15
  102ab4:	0a000009 	beq	102ae0 <arm_float_to_q12_20+0x214>
  102ab8:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  102abc:	eef56ac0 	vcmpe.f32	s13, #0.0
  102ac0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  102ac4:	def02b60 	vmovle.f64	d18, d16
  102ac8:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
  102acc:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  102ad0:	eef83be6 	vcvt.f64.s32	d19, s13
  102ad4:	ee732ba2 	vadd.f64	d18, d19, d18
  102ad8:	eefd6be2 	vcvt.s32.f64	s13, d18
  102adc:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
  102ae0:	ed5c6a05 	vldr	s13, [ip, #-20]	; 0xffffffec
  102ae4:	e5034018 	str	r4, [r3, #-24]	; 0xffffffe8
  102ae8:	eef46a67 	vcmp.f32	s13, s15
  102aec:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  102af0:	030f6fff 	movweq	r6, #65535	; 0xffff
  102af4:	0340600f 	movteq	r6, #15
  102af8:	0a000009 	beq	102b24 <arm_float_to_q12_20+0x258>
  102afc:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  102b00:	eef56ac0 	vcmpe.f32	s13, #0.0
  102b04:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  102b08:	def02b60 	vmovle.f64	d18, d16
  102b0c:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
  102b10:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  102b14:	eef83be6 	vcvt.f64.s32	d19, s13
  102b18:	ee732ba2 	vadd.f64	d18, d19, d18
  102b1c:	eefd6be2 	vcvt.s32.f64	s13, d18
  102b20:	ee166a90 	vmov	r6, s13
  102b24:	e2858009 	add	r8, r5, #9

void arm_float_to_q12_20(float *pIn, q31_t * pOut, uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  102b28:	e2854008 	add	r4, r5, #8
  102b2c:	e1570008 	cmp	r7, r8
  102b30:	e5036014 	str	r6, [r3, #-20]	; 0xffffffec
  102b34:	e28cc020 	add	ip, ip, #32
  102b38:	e2833020 	add	r3, r3, #32
  102b3c:	e1a05004 	mov	r5, r4
  102b40:	8affff6e 	bhi	102900 <arm_float_to_q12_20+0x34>
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point(q12.20) values 
 */

void arm_float_to_q12_20(float *pIn, q31_t * pOut, uint32_t numSamples)
  102b44:	e2443001 	sub	r3, r4, #1
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
  102b48:	ed9f6a1f 	vldr	s12, [pc, #124]	; 102bcc <arm_float_to_q12_20+0x300>
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point(q12.20) values 
 */

void arm_float_to_q12_20(float *pIn, q31_t * pOut, uint32_t numSamples)
  102b4c:	e1a03103 	lsl	r3, r3, #2
  102b50:	eef76a00 	vmov.f32	s13, #112	; 0x70
  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  102b54:	eef63b00 	vmov.f64	d19, #96	; 0x60
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point(q12.20) values 
 */

void arm_float_to_q12_20(float *pIn, q31_t * pOut, uint32_t numSamples)
  102b58:	e0800003 	add	r0, r0, r3
  102b5c:	e0811003 	add	r1, r1, r3
  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  102b60:	eefe2b00 	vmov.f64	d18, #224	; 0xe0
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
  102b64:	e2800004 	add	r0, r0, #4
  102b68:	edd07a00 	vldr	s15, [r0]
  102b6c:	e30f3fff 	movw	r3, #65535	; 0xffff
  102b70:	e2811004 	add	r1, r1, #4
  102b74:	e340300f 	movt	r3, #15
  102b78:	ee277a86 	vmul.f32	s14, s15, s12
  102b7c:	eef47a66 	vcmp.f32	s15, s13
  102b80:	eef1fa10 	vmrs	APSR_nzcv, fpscr

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  102b84:	eef57ac0 	vcmpe.f32	s15, #0.0
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1048576.0f corresponds to pow(2, 20) */
      pOut[i] = (q31_t) (pIn[i] * 1048576.0f);
  102b88:	eebd7ac7 	vcvt.s32.f32	s14, s14
  102b8c:	0a000006 	beq	102bac <arm_float_to_q12_20+0x2e0>

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  102b90:	eef80bc7 	vcvt.f64.s32	d16, s14
  102b94:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  102b98:	def01b62 	vmovle.f64	d17, d18
  102b9c:	cef01b63 	vmovgt.f64	d17, d19
  102ba0:	ee700ba1 	vadd.f64	d16, d16, d17
  102ba4:	eefd7be0 	vcvt.s32.f64	s15, d16
  102ba8:	ee173a90 	vmov	r3, s15

void arm_float_to_q12_20(float *pIn, q31_t * pOut, uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  102bac:	e2844001 	add	r4, r4, #1
  102bb0:	e5813000 	str	r3, [r1]
  102bb4:	e1520004 	cmp	r2, r4
  102bb8:	8affffe9 	bhi	102b64 <arm_float_to_q12_20+0x298>
      if (pIn[i] == (float) 1.0)
        {
          pOut[i] = 0x000FFFFF;
        }
    }
}
  102bbc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
  102bc0:	e12fff1e 	bx	lr
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point(q12.20) values 
 */

void arm_float_to_q12_20(float *pIn, q31_t * pOut, uint32_t numSamples)
  102bc4:	e3a04000 	mov	r4, #0
  102bc8:	eaffffdd 	b	102b44 <arm_float_to_q12_20+0x278>
  102bcc:	49800000 	.word	0x49800000

00102bd0 <arm_compare_fixed_q15>:
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  102bd0:	e3520000 	cmp	r2, #0
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q15(q15_t *pIn, q15_t * pOut, uint32_t numSamples)
{
  102bd4:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp}
  102bd8:	e24dd020 	sub	sp, sp, #32
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  102bdc:	e58d2010 	str	r2, [sp, #16]
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q15(q15_t *pIn, q15_t * pOut, uint32_t numSamples)
{
  102be0:	e58d0014 	str	r0, [sp, #20]
  102be4:	e58d101c 	str	r1, [sp, #28]
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  102be8:	0a00019c 	beq	103260 <arm_compare_fixed_q15+0x690>
 * @param  q15_t* 	Pointer to Test buffer
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q15(q15_t *pIn, q15_t * pOut, uint32_t numSamples)
  102bec:	e7e120d0 	ubfx	r2, r0, #1, #2
  102bf0:	e1a03000 	mov	r3, r0
  102bf4:	e59d0010 	ldr	r0, [sp, #16]
  102bf8:	e2622000 	rsb	r2, r2, #0
  102bfc:	e2022007 	and	r2, r2, #7
  102c00:	e1520000 	cmp	r2, r0
  102c04:	31a00002 	movcc	r0, r2
  102c08:	e59d2010 	ldr	r2, [sp, #16]
  102c0c:	e58d000c 	str	r0, [sp, #12]
  102c10:	e3520007 	cmp	r2, #7
  102c14:	958d200c 	strls	r2, [sp, #12]
  102c18:	8a00019e 	bhi	103298 <arm_compare_fixed_q15+0x6c8>
  102c1c:	e59d000c 	ldr	r0, [sp, #12]
  102c20:	e3500010 	cmp	r0, #16
  102c24:	e240100f 	sub	r1, r0, #15
  102c28:	e58d1018 	str	r1, [sp, #24]
  102c2c:	9a000190 	bls	103274 <arm_compare_fixed_q15+0x6a4>
  102c30:	e3a02000 	mov	r2, #0
  102c34:	e3a0c000 	mov	ip, #0
  102c38:	e58d2000 	str	r2, [sp]
  102c3c:	e59d201c 	ldr	r2, [sp, #28]
  102c40:	e28c1011 	add	r1, ip, #17
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102c44:	e1d300f0 	ldrsh	r0, [r3]
  102c48:	e58d1008 	str	r1, [sp, #8]
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  102c4c:	e28cc010 	add	ip, ip, #16
  {
  	diff = pIn[i] - pOut[i];
  102c50:	e1d210f0 	ldrsh	r1, [r2]
  102c54:	f5d3f022 	pld	[r3, #34]	; 0x22
  102c58:	e1d3b0f2 	ldrsh	fp, [r3, #2]
  102c5c:	f5d2f022 	pld	[r2, #34]	; 0x22
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  102c60:	e58dc004 	str	ip, [sp, #4]
  102c64:	e2833020 	add	r3, r3, #32
  {
  	diff = pIn[i] - pOut[i];
  102c68:	e1d2c0f2 	ldrsh	ip, [r2, #2]
  102c6c:	e0610000 	rsb	r0, r1, r0
  102c70:	e15351fc 	ldrsh	r5, [r3, #-28]	; 0xffffffe4
  	diffCrnt = (diff > 0) ? diff : -diff;
  102c74:	e3500000 	cmp	r0, #0
  102c78:	b2600000 	rsblt	r0, r0, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102c7c:	e1d210f4 	ldrsh	r1, [r2, #4]
  102c80:	e2822020 	add	r2, r2, #32
  102c84:	e15341fa 	ldrsh	r4, [r3, #-26]	; 0xffffffe6
  102c88:	e06cb00b 	rsb	fp, ip, fp
  102c8c:	e152c1fa 	ldrsh	ip, [r2, #-26]	; 0xffffffe6
  	diffCrnt = (diff > 0) ? diff : -diff;
  102c90:	e35b0000 	cmp	fp, #0
  102c94:	b26bb000 	rsblt	fp, fp, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102c98:	e15391f8 	ldrsh	r9, [r3, #-24]	; 0xffffffe8
  102c9c:	e0615005 	rsb	r5, r1, r5
  102ca0:	e15211f8 	ldrsh	r1, [r2, #-24]	; 0xffffffe8
  102ca4:	e15b0000 	cmp	fp, r0
  102ca8:	31a0b000 	movcc	fp, r0
  102cac:	e15371f6 	ldrsh	r7, [r3, #-22]	; 0xffffffea
  	diffCrnt = (diff > 0) ? diff : -diff;
  102cb0:	e3550000 	cmp	r5, #0
  102cb4:	b2655000 	rsblt	r5, r5, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102cb8:	e15201f6 	ldrsh	r0, [r2, #-22]	; 0xffffffea
  102cbc:	e06c4004 	rsb	r4, ip, r4
  102cc0:	e153a1f4 	ldrsh	sl, [r3, #-20]	; 0xffffffec
  	diffCrnt = (diff > 0) ? diff : -diff;
  102cc4:	e3540000 	cmp	r4, #0
  102cc8:	b2644000 	rsblt	r4, r4, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102ccc:	e152c1f4 	ldrsh	ip, [r2, #-20]	; 0xffffffec
  102cd0:	e15b0005 	cmp	fp, r5
  102cd4:	31a0b005 	movcc	fp, r5
  102cd8:	e15361f2 	ldrsh	r6, [r3, #-18]	; 0xffffffee
  102cdc:	e0619009 	rsb	r9, r1, r9
  102ce0:	e15211f2 	ldrsh	r1, [r2, #-18]	; 0xffffffee
  	diffCrnt = (diff > 0) ? diff : -diff;
  102ce4:	e3590000 	cmp	r9, #0
  102ce8:	b2699000 	rsblt	r9, r9, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102cec:	e15381f0 	ldrsh	r8, [r3, #-16]
  102cf0:	e15b0004 	cmp	fp, r4
  102cf4:	31a0b004 	movcc	fp, r4
  102cf8:	e0607007 	rsb	r7, r0, r7
  102cfc:	e15241f0 	ldrsh	r4, [r2, #-16]
  102d00:	e15350fe 	ldrsh	r5, [r3, #-14]
  	diffCrnt = (diff > 0) ? diff : -diff;
  102d04:	e3570000 	cmp	r7, #0
  102d08:	b2677000 	rsblt	r7, r7, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102d0c:	e15200fe 	ldrsh	r0, [r2, #-14]
  102d10:	e15b0009 	cmp	fp, r9
  102d14:	31a0b009 	movcc	fp, r9
  102d18:	e06ca00a 	rsb	sl, ip, sl
  102d1c:	e15390fc 	ldrsh	r9, [r3, #-12]
  102d20:	e152c0fc 	ldrsh	ip, [r2, #-12]
  	diffCrnt = (diff > 0) ? diff : -diff;
  102d24:	e35a0000 	cmp	sl, #0
  102d28:	b26aa000 	rsblt	sl, sl, #0
  102d2c:	e15b0007 	cmp	fp, r7
  102d30:	31a0b007 	movcc	fp, r7
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102d34:	e0616006 	rsb	r6, r1, r6
  	diffCrnt = (diff > 0) ? diff : -diff;
  102d38:	e3560000 	cmp	r6, #0
  102d3c:	b2666000 	rsblt	r6, r6, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102d40:	e15210fa 	ldrsh	r1, [r2, #-10]
  102d44:	e15370fa 	ldrsh	r7, [r3, #-10]
  102d48:	e15b000a 	cmp	fp, sl
  102d4c:	31a0b00a 	movcc	fp, sl
  102d50:	e0644008 	rsb	r4, r4, r8
  102d54:	e153a0f8 	ldrsh	sl, [r3, #-8]
  	diffCrnt = (diff > 0) ? diff : -diff;
  102d58:	e3540000 	cmp	r4, #0
  102d5c:	b2644000 	rsblt	r4, r4, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102d60:	e15280f8 	ldrsh	r8, [r2, #-8]
  102d64:	e15b0006 	cmp	fp, r6
  102d68:	31a0b006 	movcc	fp, r6
  102d6c:	e0600005 	rsb	r0, r0, r5
  	diffCrnt = (diff > 0) ? diff : -diff;
  102d70:	e3500000 	cmp	r0, #0
  102d74:	b2600000 	rsblt	r0, r0, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102d78:	e15360f6 	ldrsh	r6, [r3, #-6]
  102d7c:	e15250f6 	ldrsh	r5, [r2, #-6]
  102d80:	e15b0004 	cmp	fp, r4
  102d84:	31a0b004 	movcc	fp, r4
  102d88:	e06c9009 	rsb	r9, ip, r9
  102d8c:	e15340f4 	ldrsh	r4, [r3, #-4]
  102d90:	e152c0f4 	ldrsh	ip, [r2, #-4]
  102d94:	e15b0000 	cmp	fp, r0
  102d98:	31a0b000 	movcc	fp, r0
  	diffCrnt = (diff > 0) ? diff : -diff;
  102d9c:	e3590000 	cmp	r9, #0
  102da0:	b2699000 	rsblt	r9, r9, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102da4:	e0617007 	rsb	r7, r1, r7
  102da8:	e15300f2 	ldrsh	r0, [r3, #-2]
  	diffCrnt = (diff > 0) ? diff : -diff;
  102dac:	e3570000 	cmp	r7, #0
  102db0:	b2677000 	rsblt	r7, r7, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102db4:	e15210f2 	ldrsh	r1, [r2, #-2]
  102db8:	e15b0009 	cmp	fp, r9
  102dbc:	21a0900b 	movcs	r9, fp
  102dc0:	e068800a 	rsb	r8, r8, sl
  102dc4:	e1590007 	cmp	r9, r7
  102dc8:	31a09007 	movcc	r9, r7
  	diffCrnt = (diff > 0) ? diff : -diff;
  102dcc:	e3580000 	cmp	r8, #0
  102dd0:	b2688000 	rsblt	r8, r8, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102dd4:	e0655006 	rsb	r5, r5, r6
  	diffCrnt = (diff > 0) ? diff : -diff;
  102dd8:	e3550000 	cmp	r5, #0
  102ddc:	b2655000 	rsblt	r5, r5, #0
  102de0:	e1590008 	cmp	r9, r8
  102de4:	21a08009 	movcs	r8, r9
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102de8:	e06cc004 	rsb	ip, ip, r4
  102dec:	e1580005 	cmp	r8, r5
  102df0:	31a08005 	movcc	r8, r5
  	diffCrnt = (diff > 0) ? diff : -diff;
  102df4:	e35c0000 	cmp	ip, #0
  102df8:	b26cc000 	rsblt	ip, ip, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102dfc:	e0610000 	rsb	r0, r1, r0
  	diffCrnt = (diff > 0) ? diff : -diff;
  102e00:	e3500000 	cmp	r0, #0
  102e04:	b2600000 	rsblt	r0, r0, #0
  102e08:	e158000c 	cmp	r8, ip
  102e0c:	21a01008 	movcs	r1, r8
  102e10:	31a0100c 	movcc	r1, ip
  102e14:	e1510000 	cmp	r1, r0
  102e18:	31a01000 	movcc	r1, r0
  102e1c:	e59d0000 	ldr	r0, [sp]
  102e20:	e1500001 	cmp	r0, r1
  102e24:	31a00001 	movcc	r0, r1
  102e28:	e58d0000 	str	r0, [sp]
  102e2c:	e59d1008 	ldr	r1, [sp, #8]
  102e30:	e59d0018 	ldr	r0, [sp, #24]
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  102e34:	e59dc004 	ldr	ip, [sp, #4]
  102e38:	e1510000 	cmp	r1, r0
  102e3c:	3affff7f 	bcc	102c40 <arm_compare_fixed_q15+0x70>
  102e40:	e59d2004 	ldr	r2, [sp, #4]
 * @param  q15_t* 	Pointer to Test buffer
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q15(q15_t *pIn, q15_t * pOut, uint32_t numSamples)
  102e44:	e1a00082 	lsl	r0, r2, #1
  102e48:	e1a0c002 	mov	ip, r2
  102e4c:	e59d2014 	ldr	r2, [sp, #20]
  102e50:	e3a03000 	mov	r3, #0
  102e54:	e59d101c 	ldr	r1, [sp, #28]
  102e58:	e59d600c 	ldr	r6, [sp, #12]
  102e5c:	e0824000 	add	r4, r2, r0
  102e60:	e59d2000 	ldr	r2, [sp]
  102e64:	e0810000 	add	r0, r1, r0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102e68:	e19450f3 	ldrsh	r5, [r4, r3]
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  102e6c:	e28cc001 	add	ip, ip, #1
  {
  	diff = pIn[i] - pOut[i];
  102e70:	e19010f3 	ldrsh	r1, [r0, r3]
  102e74:	e2833002 	add	r3, r3, #2
  102e78:	e0611005 	rsb	r1, r1, r5
  	diffCrnt = (diff > 0) ? diff : -diff;
  102e7c:	e3510000 	cmp	r1, #0
  102e80:	b2611000 	rsblt	r1, r1, #0
  102e84:	e1520001 	cmp	r2, r1
  102e88:	31a02001 	movcc	r2, r1
  102e8c:	e156000c 	cmp	r6, ip
  102e90:	8afffff4 	bhi	102e68 <arm_compare_fixed_q15+0x298>
  102e94:	e58d2000 	str	r2, [sp]
  102e98:	e59d300c 	ldr	r3, [sp, #12]
  102e9c:	e59d2010 	ldr	r2, [sp, #16]
  102ea0:	e1520003 	cmp	r2, r3
  102ea4:	0a0000f9 	beq	103290 <arm_compare_fixed_q15+0x6c0>
  102ea8:	e0634002 	rsb	r4, r3, r2
  102eac:	e1a001a4 	lsr	r0, r4, #3
  102eb0:	e1b05180 	lsls	r5, r0, #3
  102eb4:	0a000041 	beq	102fc0 <arm_compare_fixed_q15+0x3f0>
  102eb8:	e59d1000 	ldr	r1, [sp]
  102ebc:	e1a07083 	lsl	r7, r3, #1
  102ec0:	e59d2014 	ldr	r2, [sp, #20]
  102ec4:	e3500002 	cmp	r0, #2
  102ec8:	e59d301c 	ldr	r3, [sp, #28]
  102ecc:	eea01b90 	vdup.32	q8, r1
  102ed0:	e0821007 	add	r1, r2, r7
  102ed4:	e0837007 	add	r7, r3, r7
  102ed8:	9a0000ea 	bls	103288 <arm_compare_fixed_q15+0x6b8>
 * @param  q15_t* 	Pointer to Test buffer
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q15(q15_t *pIn, q15_t * pOut, uint32_t numSamples)
  102edc:	e2408003 	sub	r8, r0, #3
  102ee0:	e2812020 	add	r2, r1, #32
  102ee4:	e3c88001 	bic	r8, r8, #1
  102ee8:	e3a03000 	mov	r3, #0
  102eec:	e2888002 	add	r8, r8, #2
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102ef0:	e1a06007 	mov	r6, r7
  102ef4:	ed526b08 	vldr	d22, [r2, #-32]	; 0xffffffe0
  102ef8:	ed527b06 	vldr	d23, [r2, #-24]	; 0xffffffe8
  102efc:	f2d0ca37 	vmovl.s16	q14, d23
  102f00:	ed524b04 	vldr	d20, [r2, #-16]
  102f04:	ed525b02 	vldr	d21, [r2, #-8]
  102f08:	f4662a4d 	vld1.16	{d18-d19}, [r6]!
  102f0c:	e2833002 	add	r3, r3, #2
  102f10:	f2d06a36 	vmovl.s16	q11, d22
  102f14:	e1530008 	cmp	r3, r8
  102f18:	f2d0aa33 	vmovl.s16	q13, d19
  102f1c:	f5d2f090 	pld	[r2, #144]	; 0x90
  102f20:	f2d08a32 	vmovl.s16	q12, d18
 * @param  q15_t* 	Pointer to Test buffer
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q15(q15_t *pIn, q15_t * pOut, uint32_t numSamples)
  102f24:	e1a01002 	mov	r1, r2
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102f28:	f4662a4f 	vld1.16	{d18-d19}, [r6]
 * @param  q15_t* 	Pointer to Test buffer
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q15(q15_t *pIn, q15_t * pOut, uint32_t numSamples)
  102f2c:	e2877020 	add	r7, r7, #32
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  	diffCrnt = (diff > 0) ? diff : -diff;
  102f30:	f26cc7ea 	vabd.s32	q14, q14, q13
  102f34:	e2822020 	add	r2, r2, #32
  102f38:	f26667e8 	vabd.s32	q11, q11, q12
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102f3c:	f2d0aa34 	vmovl.s16	q13, d20
  102f40:	f2d08a32 	vmovl.s16	q12, d18
  102f44:	f2d04a35 	vmovl.s16	q10, d21
  102f48:	f36c66e6 	vmax.u32	q11, q14, q11
  	diffCrnt = (diff > 0) ? diff : -diff;
  102f4c:	f26a87e8 	vabd.s32	q12, q13, q12
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102f50:	f2d02a33 	vmovl.s16	q9, d19
  102f54:	f36666e8 	vmax.u32	q11, q11, q12
  	diffCrnt = (diff > 0) ? diff : -diff;
  102f58:	f26427e2 	vabd.s32	q9, q10, q9
  102f5c:	f36626e2 	vmax.u32	q9, q11, q9
  102f60:	f36006e2 	vmax.u32	q8, q8, q9
  102f64:	1affffe1 	bne	102ef0 <arm_compare_fixed_q15+0x320>
  102f68:	e1a02007 	mov	r2, r7
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  102f6c:	f4622a4d 	vld1.16	{d18-d19}, [r2]!
  102f70:	ecf14b04 	vldmia	r1!, {d20-d21}
  102f74:	f2d08a35 	vmovl.s16	q12, d21
  102f78:	e2833001 	add	r3, r3, #1
  102f7c:	f2d06a33 	vmovl.s16	q11, d19
  102f80:	e1500003 	cmp	r0, r3
  102f84:	f2d04a34 	vmovl.s16	q10, d20
  102f88:	f2d02a32 	vmovl.s16	q9, d18
  	diffCrnt = (diff > 0) ? diff : -diff;
  102f8c:	f26867e6 	vabd.s32	q11, q12, q11
  102f90:	f26427e2 	vabd.s32	q9, q10, q9
  102f94:	f36626e2 	vmax.u32	q9, q11, q9
  102f98:	f36006e2 	vmax.u32	q8, q8, q9
  102f9c:	8afffff2 	bhi	102f6c <arm_compare_fixed_q15+0x39c>
  102fa0:	f36006a1 	vmax.u32	d16, d16, d17
  102fa4:	e1540005 	cmp	r4, r5
  102fa8:	f2c02050 	vmov.i32	q9, #0	; 0x00000000
  102fac:	e08cc005 	add	ip, ip, r5
  102fb0:	f3602aa0 	vpmax.u32	d18, d16, d16
  102fb4:	ee120b90 	vmov.32	r0, d18[0]
  102fb8:	e58d0000 	str	r0, [sp]
  102fbc:	0a0000a9 	beq	103268 <arm_compare_fixed_q15+0x698>
 * @param  q15_t* 	Pointer to Test buffer
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q15(q15_t *pIn, q15_t * pOut, uint32_t numSamples)
  102fc0:	e59d0010 	ldr	r0, [sp, #16]
  102fc4:	e28c3001 	add	r3, ip, #1
  102fc8:	e59d1010 	ldr	r1, [sp, #16]
  102fcc:	e1500003 	cmp	r0, r3
  102fd0:	e241100f 	sub	r1, r1, #15
  102fd4:	33a02000 	movcc	r2, #0
  102fd8:	23a02001 	movcs	r2, #1
  102fdc:	e1530001 	cmp	r3, r1
  102fe0:	23a02000 	movcs	r2, #0
  102fe4:	e58d100c 	str	r1, [sp, #12]
  102fe8:	e350000e 	cmp	r0, #14
  102fec:	93a03000 	movls	r3, #0
  102ff0:	82023001 	andhi	r3, r2, #1
  102ff4:	e3530000 	cmp	r3, #0
  102ff8:	0a000084 	beq	103210 <arm_compare_fixed_q15+0x640>
  102ffc:	e59d0014 	ldr	r0, [sp, #20]
  103000:	e1a0208c 	lsl	r2, ip, #1
  103004:	e59d101c 	ldr	r1, [sp, #28]
  103008:	e0803002 	add	r3, r0, r2
  10300c:	e0812002 	add	r2, r1, r2
  103010:	e28c1011 	add	r1, ip, #17
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  103014:	e1d300f0 	ldrsh	r0, [r3]
  103018:	e58d1008 	str	r1, [sp, #8]
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  10301c:	e28cc010 	add	ip, ip, #16
  {
  	diff = pIn[i] - pOut[i];
  103020:	e1d210f0 	ldrsh	r1, [r2]
  103024:	f5d3f026 	pld	[r3, #38]	; 0x26
  103028:	e1d3b0f2 	ldrsh	fp, [r3, #2]
  10302c:	f5d2f026 	pld	[r2, #38]	; 0x26
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  103030:	e58dc004 	str	ip, [sp, #4]
  103034:	e2833020 	add	r3, r3, #32
  {
  	diff = pIn[i] - pOut[i];
  103038:	e1d2c0f2 	ldrsh	ip, [r2, #2]
  10303c:	e0610000 	rsb	r0, r1, r0
  103040:	e15351fc 	ldrsh	r5, [r3, #-28]	; 0xffffffe4
  	diffCrnt = (diff > 0) ? diff : -diff;
  103044:	e3500000 	cmp	r0, #0
  103048:	b2600000 	rsblt	r0, r0, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  10304c:	e1d210f4 	ldrsh	r1, [r2, #4]
  103050:	e2822020 	add	r2, r2, #32
  103054:	e15341fa 	ldrsh	r4, [r3, #-26]	; 0xffffffe6
  103058:	e06cb00b 	rsb	fp, ip, fp
  10305c:	e152c1fa 	ldrsh	ip, [r2, #-26]	; 0xffffffe6
  	diffCrnt = (diff > 0) ? diff : -diff;
  103060:	e35b0000 	cmp	fp, #0
  103064:	b26bb000 	rsblt	fp, fp, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  103068:	e15391f8 	ldrsh	r9, [r3, #-24]	; 0xffffffe8
  10306c:	e0615005 	rsb	r5, r1, r5
  103070:	e15211f8 	ldrsh	r1, [r2, #-24]	; 0xffffffe8
  103074:	e15b0000 	cmp	fp, r0
  103078:	31a0b000 	movcc	fp, r0
  10307c:	e15371f6 	ldrsh	r7, [r3, #-22]	; 0xffffffea
  	diffCrnt = (diff > 0) ? diff : -diff;
  103080:	e3550000 	cmp	r5, #0
  103084:	b2655000 	rsblt	r5, r5, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  103088:	e15201f6 	ldrsh	r0, [r2, #-22]	; 0xffffffea
  10308c:	e06c4004 	rsb	r4, ip, r4
  103090:	e153a1f4 	ldrsh	sl, [r3, #-20]	; 0xffffffec
  	diffCrnt = (diff > 0) ? diff : -diff;
  103094:	e3540000 	cmp	r4, #0
  103098:	b2644000 	rsblt	r4, r4, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  10309c:	e152c1f4 	ldrsh	ip, [r2, #-20]	; 0xffffffec
  1030a0:	e15b0005 	cmp	fp, r5
  1030a4:	31a0b005 	movcc	fp, r5
  1030a8:	e15361f2 	ldrsh	r6, [r3, #-18]	; 0xffffffee
  1030ac:	e0619009 	rsb	r9, r1, r9
  1030b0:	e15211f2 	ldrsh	r1, [r2, #-18]	; 0xffffffee
  	diffCrnt = (diff > 0) ? diff : -diff;
  1030b4:	e3590000 	cmp	r9, #0
  1030b8:	b2699000 	rsblt	r9, r9, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  1030bc:	e15381f0 	ldrsh	r8, [r3, #-16]
  1030c0:	e15b0004 	cmp	fp, r4
  1030c4:	31a0b004 	movcc	fp, r4
  1030c8:	e0607007 	rsb	r7, r0, r7
  1030cc:	e15241f0 	ldrsh	r4, [r2, #-16]
  1030d0:	e15350fe 	ldrsh	r5, [r3, #-14]
  	diffCrnt = (diff > 0) ? diff : -diff;
  1030d4:	e3570000 	cmp	r7, #0
  1030d8:	b2677000 	rsblt	r7, r7, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  1030dc:	e15200fe 	ldrsh	r0, [r2, #-14]
  1030e0:	e15b0009 	cmp	fp, r9
  1030e4:	31a0b009 	movcc	fp, r9
  1030e8:	e06ca00a 	rsb	sl, ip, sl
  1030ec:	e15390fc 	ldrsh	r9, [r3, #-12]
  1030f0:	e152c0fc 	ldrsh	ip, [r2, #-12]
  	diffCrnt = (diff > 0) ? diff : -diff;
  1030f4:	e35a0000 	cmp	sl, #0
  1030f8:	b26aa000 	rsblt	sl, sl, #0
  1030fc:	e15b0007 	cmp	fp, r7
  103100:	31a0b007 	movcc	fp, r7
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  103104:	e0616006 	rsb	r6, r1, r6
  	diffCrnt = (diff > 0) ? diff : -diff;
  103108:	e3560000 	cmp	r6, #0
  10310c:	b2666000 	rsblt	r6, r6, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  103110:	e15210fa 	ldrsh	r1, [r2, #-10]
  103114:	e15370fa 	ldrsh	r7, [r3, #-10]
  103118:	e15b000a 	cmp	fp, sl
  10311c:	31a0b00a 	movcc	fp, sl
  103120:	e0644008 	rsb	r4, r4, r8
  103124:	e153a0f8 	ldrsh	sl, [r3, #-8]
  	diffCrnt = (diff > 0) ? diff : -diff;
  103128:	e3540000 	cmp	r4, #0
  10312c:	b2644000 	rsblt	r4, r4, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  103130:	e15280f8 	ldrsh	r8, [r2, #-8]
  103134:	e15b0006 	cmp	fp, r6
  103138:	31a0b006 	movcc	fp, r6
  10313c:	e0600005 	rsb	r0, r0, r5
  	diffCrnt = (diff > 0) ? diff : -diff;
  103140:	e3500000 	cmp	r0, #0
  103144:	b2600000 	rsblt	r0, r0, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  103148:	e15360f6 	ldrsh	r6, [r3, #-6]
  10314c:	e15250f6 	ldrsh	r5, [r2, #-6]
  103150:	e15b0004 	cmp	fp, r4
  103154:	31a0b004 	movcc	fp, r4
  103158:	e06c9009 	rsb	r9, ip, r9
  10315c:	e15340f4 	ldrsh	r4, [r3, #-4]
  103160:	e152c0f4 	ldrsh	ip, [r2, #-4]
  103164:	e15b0000 	cmp	fp, r0
  103168:	31a0b000 	movcc	fp, r0
  	diffCrnt = (diff > 0) ? diff : -diff;
  10316c:	e3590000 	cmp	r9, #0
  103170:	b2699000 	rsblt	r9, r9, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  103174:	e0617007 	rsb	r7, r1, r7
  103178:	e15300f2 	ldrsh	r0, [r3, #-2]
  	diffCrnt = (diff > 0) ? diff : -diff;
  10317c:	e3570000 	cmp	r7, #0
  103180:	b2677000 	rsblt	r7, r7, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  103184:	e15210f2 	ldrsh	r1, [r2, #-2]
  103188:	e15b0009 	cmp	fp, r9
  10318c:	21a0900b 	movcs	r9, fp
  103190:	e068800a 	rsb	r8, r8, sl
  103194:	e1590007 	cmp	r9, r7
  103198:	31a09007 	movcc	r9, r7
  	diffCrnt = (diff > 0) ? diff : -diff;
  10319c:	e3580000 	cmp	r8, #0
  1031a0:	b2688000 	rsblt	r8, r8, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  1031a4:	e0655006 	rsb	r5, r5, r6
  	diffCrnt = (diff > 0) ? diff : -diff;
  1031a8:	e3550000 	cmp	r5, #0
  1031ac:	b2655000 	rsblt	r5, r5, #0
  1031b0:	e1590008 	cmp	r9, r8
  1031b4:	21a08009 	movcs	r8, r9
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  1031b8:	e06cc004 	rsb	ip, ip, r4
  1031bc:	e1580005 	cmp	r8, r5
  1031c0:	31a08005 	movcc	r8, r5
  	diffCrnt = (diff > 0) ? diff : -diff;
  1031c4:	e35c0000 	cmp	ip, #0
  1031c8:	b26cc000 	rsblt	ip, ip, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  1031cc:	e0610000 	rsb	r0, r1, r0
  	diffCrnt = (diff > 0) ? diff : -diff;
  1031d0:	e3500000 	cmp	r0, #0
  1031d4:	b2600000 	rsblt	r0, r0, #0
  1031d8:	e158000c 	cmp	r8, ip
  1031dc:	21a01008 	movcs	r1, r8
  1031e0:	31a0100c 	movcc	r1, ip
  1031e4:	e1510000 	cmp	r1, r0
  1031e8:	31a01000 	movcc	r1, r0
  1031ec:	e59d0000 	ldr	r0, [sp]
  1031f0:	e1500001 	cmp	r0, r1
  1031f4:	31a00001 	movcc	r0, r1
  1031f8:	e58d0000 	str	r0, [sp]
  1031fc:	e59d100c 	ldr	r1, [sp, #12]
  103200:	e59d0008 	ldr	r0, [sp, #8]
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  103204:	e59dc004 	ldr	ip, [sp, #4]
  103208:	e1510000 	cmp	r1, r0
  10320c:	8affff7f 	bhi	103010 <arm_compare_fixed_q15+0x440>
 * @param  q15_t* 	Pointer to Test buffer
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q15(q15_t *pIn, q15_t * pOut, uint32_t numSamples)
  103210:	e59d2014 	ldr	r2, [sp, #20]
  103214:	e1a0008c 	lsl	r0, ip, #1
  103218:	e59d101c 	ldr	r1, [sp, #28]
  10321c:	e1a0600c 	mov	r6, ip
  103220:	e59d5010 	ldr	r5, [sp, #16]
  103224:	e3a03000 	mov	r3, #0
  103228:	e082c000 	add	ip, r2, r0
  10322c:	e59d2000 	ldr	r2, [sp]
  103230:	e0810000 	add	r0, r1, r0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  103234:	e19c40f3 	ldrsh	r4, [ip, r3]
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  103238:	e2866001 	add	r6, r6, #1
  {
  	diff = pIn[i] - pOut[i];
  10323c:	e19010f3 	ldrsh	r1, [r0, r3]
  103240:	e2833002 	add	r3, r3, #2
  103244:	e0611004 	rsb	r1, r1, r4
  	diffCrnt = (diff > 0) ? diff : -diff;
  103248:	e3510000 	cmp	r1, #0
  10324c:	b2611000 	rsblt	r1, r1, #0
  103250:	e1520001 	cmp	r2, r1
  103254:	31a02001 	movcc	r2, r1
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  103258:	e1550006 	cmp	r5, r6
  10325c:	8afffff4 	bhi	103234 <arm_compare_fixed_q15+0x664>
  103260:	e1a00002 	mov	r0, r2

uint32_t arm_compare_fixed_q15(q15_t *pIn, q15_t * pOut, uint32_t numSamples)
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;
  103264:	e58d2000 	str	r2, [sp]
		maxDiff = diffCrnt;
	}	
  }

  return(maxDiff);
}
  103268:	e28dd020 	add	sp, sp, #32
  10326c:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
  103270:	e12fff1e 	bx	lr
 * @param  q15_t* 	Pointer to Test buffer
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q15(q15_t *pIn, q15_t * pOut, uint32_t numSamples)
  103274:	e3a01000 	mov	r1, #0
  103278:	e58d1000 	str	r1, [sp]
  10327c:	e1a02001 	mov	r2, r1
  103280:	e58d1004 	str	r1, [sp, #4]
  103284:	eafffeee 	b	102e44 <arm_compare_fixed_q15+0x274>
  103288:	e3a03000 	mov	r3, #0
  10328c:	eaffff35 	b	102f68 <arm_compare_fixed_q15+0x398>
  103290:	e59d0000 	ldr	r0, [sp]
  103294:	eafffff3 	b	103268 <arm_compare_fixed_q15+0x698>
  103298:	e3500000 	cmp	r0, #0
  10329c:	1afffe5e 	bne	102c1c <arm_compare_fixed_q15+0x4c>
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;
  1032a0:	e59d000c 	ldr	r0, [sp, #12]
  1032a4:	e59d2010 	ldr	r2, [sp, #16]
  1032a8:	e58d0000 	str	r0, [sp]

  for (i = 0; i < numSamples; i++)
  1032ac:	e1a0c000 	mov	ip, r0
  1032b0:	e1a03000 	mov	r3, r0
  1032b4:	eafffefb 	b	102ea8 <arm_compare_fixed_q15+0x2d8>

001032b8 <arm_compare_fixed_q31>:
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  1032b8:	e3520000 	cmp	r2, #0
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q31(q31_t *pIn, q31_t * pOut, uint32_t numSamples)
{
  1032bc:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp}
  1032c0:	e24dd008 	sub	sp, sp, #8
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  1032c4:	0a0000e5 	beq	103660 <arm_compare_fixed_q31+0x3a8>
 * @param  q31_t* 	Pointer to Test buffer
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q31(q31_t *pIn, q31_t * pOut, uint32_t numSamples)
  1032c8:	e7a05150 	sbfx	r5, r0, #2, #1
  1032cc:	e2055003 	and	r5, r5, #3
  1032d0:	e1550002 	cmp	r5, r2
  1032d4:	21a05002 	movcs	r5, r2
  1032d8:	e3520003 	cmp	r2, #3
  1032dc:	91a05002 	movls	r5, r2
  1032e0:	8a0000e0 	bhi	103668 <arm_compare_fixed_q31+0x3b0>
  1032e4:	e3550008 	cmp	r5, #8
  1032e8:	e3a03000 	mov	r3, #0
  1032ec:	e245b007 	sub	fp, r5, #7
  1032f0:	9a0000d6 	bls	103650 <arm_compare_fixed_q31+0x398>
  1032f4:	e2804044 	add	r4, r0, #68	; 0x44
  1032f8:	e281c044 	add	ip, r1, #68	; 0x44
  1032fc:	e1a08003 	mov	r8, r3
  103300:	e58d1004 	str	r1, [sp, #4]
  103304:	e58d2000 	str	r2, [sp]
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  103308:	e5142040 	ldr	r2, [r4, #-64]	; 0xffffffc0
  10330c:	e2887009 	add	r7, r8, #9
  103310:	e51c1040 	ldr	r1, [ip, #-64]	; 0xffffffc0
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  103314:	e2886008 	add	r6, r8, #8
  {
  	diff = pIn[i] - pOut[i];
  103318:	e5149044 	ldr	r9, [r4, #-68]	; 0xffffffbc
  10331c:	f5d4f000 	pld	[r4]
  103320:	e51ca044 	ldr	sl, [ip, #-68]	; 0xffffffbc
  103324:	f5dcf000 	pld	[ip]
  103328:	e0618002 	rsb	r8, r1, r2
  10332c:	e514103c 	ldr	r1, [r4, #-60]	; 0xffffffc4
  103330:	e51c203c 	ldr	r2, [ip, #-60]	; 0xffffffc4
  	diffCrnt = (diff > 0) ? diff : -diff;
  103334:	e3580000 	cmp	r8, #0
  103338:	b2688000 	rsblt	r8, r8, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  10333c:	e06aa009 	rsb	sl, sl, r9
  103340:	e2844020 	add	r4, r4, #32
  	diffCrnt = (diff > 0) ? diff : -diff;
  103344:	e35a0000 	cmp	sl, #0
  103348:	b26aa000 	rsblt	sl, sl, #0
  10334c:	e28cc020 	add	ip, ip, #32
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  103350:	e0629001 	rsb	r9, r2, r1
  103354:	e5141058 	ldr	r1, [r4, #-88]	; 0xffffffa8
  103358:	e51c2058 	ldr	r2, [ip, #-88]	; 0xffffffa8
  10335c:	e158000a 	cmp	r8, sl
  103360:	21a0a008 	movcs	sl, r8
  	diffCrnt = (diff > 0) ? diff : -diff;
  103364:	e3590000 	cmp	r9, #0
  103368:	b2699000 	rsblt	r9, r9, #0
  10336c:	e15a0009 	cmp	sl, r9
  103370:	31a0a009 	movcc	sl, r9
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  103374:	e0628001 	rsb	r8, r2, r1
  103378:	e5141054 	ldr	r1, [r4, #-84]	; 0xffffffac
  10337c:	e51c2054 	ldr	r2, [ip, #-84]	; 0xffffffac
  	diffCrnt = (diff > 0) ? diff : -diff;
  103380:	e3580000 	cmp	r8, #0
  103384:	b2688000 	rsblt	r8, r8, #0
  103388:	e15a0008 	cmp	sl, r8
  10338c:	31a0a008 	movcc	sl, r8
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  103390:	e0629001 	rsb	r9, r2, r1
  103394:	e5141050 	ldr	r1, [r4, #-80]	; 0xffffffb0
  103398:	e51c2050 	ldr	r2, [ip, #-80]	; 0xffffffb0
  	diffCrnt = (diff > 0) ? diff : -diff;
  10339c:	e3590000 	cmp	r9, #0
  1033a0:	b2699000 	rsblt	r9, r9, #0
  1033a4:	e15a0009 	cmp	sl, r9
  1033a8:	31a0a009 	movcc	sl, r9
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  1033ac:	e0628001 	rsb	r8, r2, r1
  1033b0:	e514104c 	ldr	r1, [r4, #-76]	; 0xffffffb4
  1033b4:	e51c204c 	ldr	r2, [ip, #-76]	; 0xffffffb4
  	diffCrnt = (diff > 0) ? diff : -diff;
  1033b8:	e3580000 	cmp	r8, #0
  1033bc:	b2688000 	rsblt	r8, r8, #0
  1033c0:	e15a0008 	cmp	sl, r8
  1033c4:	31a0a008 	movcc	sl, r8
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  1033c8:	e0629001 	rsb	r9, r2, r1
  1033cc:	e5141048 	ldr	r1, [r4, #-72]	; 0xffffffb8
  1033d0:	e51c2048 	ldr	r2, [ip, #-72]	; 0xffffffb8
  	diffCrnt = (diff > 0) ? diff : -diff;
  1033d4:	e3590000 	cmp	r9, #0
  1033d8:	b2699000 	rsblt	r9, r9, #0
  1033dc:	e15a0009 	cmp	sl, r9
  1033e0:	31a0a009 	movcc	sl, r9
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  1033e4:	e0628001 	rsb	r8, r2, r1
  	diffCrnt = (diff > 0) ? diff : -diff;
  1033e8:	e3580000 	cmp	r8, #0
  1033ec:	b2688000 	rsblt	r8, r8, #0
  1033f0:	e15a0008 	cmp	sl, r8
  1033f4:	31a0a008 	movcc	sl, r8
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  1033f8:	e1a08006 	mov	r8, r6
  1033fc:	e153000a 	cmp	r3, sl
  103400:	31a0300a 	movcc	r3, sl
  103404:	e157000b 	cmp	r7, fp
  103408:	3affffbe 	bcc	103308 <arm_compare_fixed_q31+0x50>
  10340c:	e59d1004 	ldr	r1, [sp, #4]
  103410:	e59d2000 	ldr	r2, [sp]
 * @param  q31_t* 	Pointer to Test buffer
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q31(q31_t *pIn, q31_t * pOut, uint32_t numSamples)
  103414:	e1a08106 	lsl	r8, r6, #2
  103418:	e3a0c000 	mov	ip, #0
  10341c:	e080a008 	add	sl, r0, r8
  103420:	e0818008 	add	r8, r1, r8
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  103424:	e79a700c 	ldr	r7, [sl, ip]
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  103428:	e2866001 	add	r6, r6, #1
  {
  	diff = pIn[i] - pOut[i];
  10342c:	e798400c 	ldr	r4, [r8, ip]
  103430:	e28cc004 	add	ip, ip, #4
  103434:	e0644007 	rsb	r4, r4, r7
  	diffCrnt = (diff > 0) ? diff : -diff;
  103438:	e3540000 	cmp	r4, #0
  10343c:	b2644000 	rsblt	r4, r4, #0
  103440:	e1530004 	cmp	r3, r4
  103444:	31a03004 	movcc	r3, r4
  103448:	e1550006 	cmp	r5, r6
  10344c:	8afffff4 	bhi	103424 <arm_compare_fixed_q31+0x16c>
  103450:	e1520005 	cmp	r2, r5
  103454:	0a000079 	beq	103640 <arm_compare_fixed_q31+0x388>
  103458:	e0658002 	rsb	r8, r5, r2
  10345c:	e1a04128 	lsr	r4, r8, #2
  103460:	e1b07104 	lsls	r7, r4, #2
  103464:	0a000012 	beq	1034b4 <arm_compare_fixed_q31+0x1fc>
  103468:	e1a05105 	lsl	r5, r5, #2
  10346c:	eea03b90 	vdup.32	q8, r3
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  103470:	e3a03000 	mov	r3, #0
  103474:	e080c005 	add	ip, r0, r5
  103478:	e0815005 	add	r5, r1, r5
  {
  	diff = pIn[i] - pOut[i];
  10347c:	f4652a8d 	vld1.32	{d18-d19}, [r5]!
  103480:	ecfc4b04 	vldmia	ip!, {d20-d21}
  103484:	e2833001 	add	r3, r3, #1
  	diffCrnt = (diff > 0) ? diff : -diff;
  103488:	f26427e2 	vabd.s32	q9, q10, q9
  10348c:	e1540003 	cmp	r4, r3
  103490:	f36006e2 	vmax.u32	q8, q8, q9
  103494:	8afffff8 	bhi	10347c <arm_compare_fixed_q31+0x1c4>
  103498:	f36006a1 	vmax.u32	d16, d16, d17
  10349c:	e1580007 	cmp	r8, r7
  1034a0:	f2c02050 	vmov.i32	q9, #0	; 0x00000000
  1034a4:	e0866007 	add	r6, r6, r7
  1034a8:	f3602aa0 	vpmax.u32	d18, d16, d16
  1034ac:	ee123b90 	vmov.32	r3, d18[0]
  1034b0:	0a000062 	beq	103640 <arm_compare_fixed_q31+0x388>
 * @param  q31_t* 	Pointer to Test buffer
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q31(q31_t *pIn, q31_t * pOut, uint32_t numSamples)
  1034b4:	e286c001 	add	ip, r6, #1
  1034b8:	e242b007 	sub	fp, r2, #7
  1034bc:	e152000c 	cmp	r2, ip
  1034c0:	33a04000 	movcc	r4, #0
  1034c4:	23a04001 	movcs	r4, #1
  1034c8:	e15c000b 	cmp	ip, fp
  1034cc:	23a04000 	movcs	r4, #0
  1034d0:	e3520006 	cmp	r2, #6
  1034d4:	93a0c000 	movls	ip, #0
  1034d8:	8204c001 	andhi	ip, r4, #1
  1034dc:	e35c0000 	cmp	ip, #0
  1034e0:	0a00005c 	beq	103658 <arm_compare_fixed_q31+0x3a0>
  1034e4:	e286c013 	add	ip, r6, #19
  1034e8:	e58d2004 	str	r2, [sp, #4]
  1034ec:	e1a0c10c 	lsl	ip, ip, #2
  1034f0:	e080400c 	add	r4, r0, ip
  1034f4:	e081c00c 	add	ip, r1, ip
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  1034f8:	e514904c 	ldr	r9, [r4, #-76]	; 0xffffffb4
  1034fc:	e2867009 	add	r7, r6, #9
  103500:	e5148048 	ldr	r8, [r4, #-72]	; 0xffffffb8
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  103504:	e2865008 	add	r5, r6, #8
  {
  	diff = pIn[i] - pOut[i];
  103508:	e51c2048 	ldr	r2, [ip, #-72]	; 0xffffffb8
  10350c:	f5d4f000 	pld	[r4]
  103510:	e51ca04c 	ldr	sl, [ip, #-76]	; 0xffffffb4
  103514:	f5dcf000 	pld	[ip]
  103518:	e2844020 	add	r4, r4, #32
  10351c:	e28cc020 	add	ip, ip, #32
  103520:	e0626008 	rsb	r6, r2, r8
  103524:	e51c2064 	ldr	r2, [ip, #-100]	; 0xffffff9c
  103528:	e06aa009 	rsb	sl, sl, r9
  10352c:	e5149064 	ldr	r9, [r4, #-100]	; 0xffffff9c
  	diffCrnt = (diff > 0) ? diff : -diff;
  103530:	e3560000 	cmp	r6, #0
  103534:	b2666000 	rsblt	r6, r6, #0
  103538:	e35a0000 	cmp	sl, #0
  10353c:	b26aa000 	rsblt	sl, sl, #0
  103540:	e156000a 	cmp	r6, sl
  103544:	21a0a006 	movcs	sl, r6
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  103548:	e5146060 	ldr	r6, [r4, #-96]	; 0xffffffa0
  10354c:	e0628009 	rsb	r8, r2, r9
  103550:	e51c2060 	ldr	r2, [ip, #-96]	; 0xffffffa0
  	diffCrnt = (diff > 0) ? diff : -diff;
  103554:	e3580000 	cmp	r8, #0
  103558:	b2688000 	rsblt	r8, r8, #0
  10355c:	e15a0008 	cmp	sl, r8
  103560:	31a0a008 	movcc	sl, r8
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  103564:	e514805c 	ldr	r8, [r4, #-92]	; 0xffffffa4
  103568:	e0629006 	rsb	r9, r2, r6
  10356c:	e51c205c 	ldr	r2, [ip, #-92]	; 0xffffffa4
  	diffCrnt = (diff > 0) ? diff : -diff;
  103570:	e3590000 	cmp	r9, #0
  103574:	b2699000 	rsblt	r9, r9, #0
  103578:	e15a0009 	cmp	sl, r9
  10357c:	31a0a009 	movcc	sl, r9
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  103580:	e5149058 	ldr	r9, [r4, #-88]	; 0xffffffa8
  103584:	e0626008 	rsb	r6, r2, r8
  103588:	e51c2058 	ldr	r2, [ip, #-88]	; 0xffffffa8
  	diffCrnt = (diff > 0) ? diff : -diff;
  10358c:	e3560000 	cmp	r6, #0
  103590:	b2666000 	rsblt	r6, r6, #0
  103594:	e15a0006 	cmp	sl, r6
  103598:	31a0a006 	movcc	sl, r6
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  10359c:	e5146054 	ldr	r6, [r4, #-84]	; 0xffffffac
  1035a0:	e0628009 	rsb	r8, r2, r9
  1035a4:	e51c2054 	ldr	r2, [ip, #-84]	; 0xffffffac
  	diffCrnt = (diff > 0) ? diff : -diff;
  1035a8:	e3580000 	cmp	r8, #0
  1035ac:	b2688000 	rsblt	r8, r8, #0
  1035b0:	e15a0008 	cmp	sl, r8
  1035b4:	21a0800a 	movcs	r8, sl
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  1035b8:	e514a050 	ldr	sl, [r4, #-80]	; 0xffffffb0
  1035bc:	e0629006 	rsb	r9, r2, r6
  1035c0:	e51c2050 	ldr	r2, [ip, #-80]	; 0xffffffb0
  	diffCrnt = (diff > 0) ? diff : -diff;
  1035c4:	e3590000 	cmp	r9, #0
  1035c8:	b2699000 	rsblt	r9, r9, #0
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  1035cc:	e062600a 	rsb	r6, r2, sl
  1035d0:	e1580009 	cmp	r8, r9
  1035d4:	21a0a008 	movcs	sl, r8
  1035d8:	31a0a009 	movcc	sl, r9
  	diffCrnt = (diff > 0) ? diff : -diff;
  1035dc:	e3560000 	cmp	r6, #0
  1035e0:	b2666000 	rsblt	r6, r6, #0
  1035e4:	e15a0006 	cmp	sl, r6
  1035e8:	31a0a006 	movcc	sl, r6
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  1035ec:	e1a06005 	mov	r6, r5
  1035f0:	e153000a 	cmp	r3, sl
  1035f4:	31a0300a 	movcc	r3, sl
  1035f8:	e15b0007 	cmp	fp, r7
  1035fc:	8affffbd 	bhi	1034f8 <arm_compare_fixed_q31+0x240>
  103600:	e59d2004 	ldr	r2, [sp, #4]
 * @param  q31_t* 	Pointer to Test buffer
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q31(q31_t *pIn, q31_t * pOut, uint32_t numSamples)
  103604:	e1a04105 	lsl	r4, r5, #2
  103608:	e3a0c000 	mov	ip, #0
  10360c:	e0800004 	add	r0, r0, r4
  103610:	e0811004 	add	r1, r1, r4
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  {
  	diff = pIn[i] - pOut[i];
  103614:	e790600c 	ldr	r6, [r0, ip]
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  103618:	e2855001 	add	r5, r5, #1
  {
  	diff = pIn[i] - pOut[i];
  10361c:	e791400c 	ldr	r4, [r1, ip]
  103620:	e28cc004 	add	ip, ip, #4
  103624:	e0644006 	rsb	r4, r4, r6
  	diffCrnt = (diff > 0) ? diff : -diff;
  103628:	e3540000 	cmp	r4, #0
  10362c:	b2644000 	rsblt	r4, r4, #0
  103630:	e1530004 	cmp	r3, r4
  103634:	31a03004 	movcc	r3, r4
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;

  for (i = 0; i < numSamples; i++)
  103638:	e1520005 	cmp	r2, r5
  10363c:	8afffff4 	bhi	103614 <arm_compare_fixed_q31+0x35c>
		maxDiff = diffCrnt;
	}
  }

  return(maxDiff);
}
  103640:	e1a00003 	mov	r0, r3
  103644:	e28dd008 	add	sp, sp, #8
  103648:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
  10364c:	e12fff1e 	bx	lr
 * @param  q31_t* 	Pointer to Test buffer
 * @param  uint32_t 	number of samples in the buffer
 * @return none 
 */

uint32_t arm_compare_fixed_q31(q31_t *pIn, q31_t * pOut, uint32_t numSamples)
  103650:	e1a06003 	mov	r6, r3
  103654:	eaffff6e 	b	103414 <arm_compare_fixed_q31+0x15c>
  103658:	e1a05006 	mov	r5, r6
  10365c:	eaffffe8 	b	103604 <arm_compare_fixed_q31+0x34c>
{
  uint32_t i; 
  int32_t diff, diffCrnt = 0;
  uint32_t maxDiff = 0;
  103660:	e1a03002 	mov	r3, r2
  103664:	eafffff5 	b	103640 <arm_compare_fixed_q31+0x388>
  103668:	e3550000 	cmp	r5, #0
  10366c:	1affff1c 	bne	1032e4 <arm_compare_fixed_q31+0x2c>
  103670:	e1a03005 	mov	r3, r5

  for (i = 0; i < numSamples; i++)
  103674:	e1a06005 	mov	r6, r5
  103678:	eaffff76 	b	103458 <arm_compare_fixed_q31+0x1a0>

0010367c <arm_provide_guard_bits_q31>:
								 uint32_t blockSize,
                                 uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  10367c:	e3510000 	cmp	r1, #0
 */

void arm_provide_guard_bits_q31 (q31_t * input_buf, 
								 uint32_t blockSize,
                                 uint32_t guard_bits)
{
  103680:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp}
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  103684:	0a000079 	beq	103870 <arm_provide_guard_bits_q31+0x1f4>
 * @return none
 * The function Provides the guard bits for the buffer 
 * to avoid overflow 
 */

void arm_provide_guard_bits_q31 (q31_t * input_buf, 
  103688:	e7a0c150 	sbfx	ip, r0, #2, #1
  10368c:	e20cc003 	and	ip, ip, #3
  103690:	e15c0001 	cmp	ip, r1
  103694:	21a0c001 	movcs	ip, r1
  103698:	e3510003 	cmp	r1, #3
  10369c:	91a0c001 	movls	ip, r1
  1036a0:	8a000078 	bhi	103888 <arm_provide_guard_bits_q31+0x20c>
  1036a4:	e35c0008 	cmp	ip, #8
  1036a8:	e24cb007 	sub	fp, ip, #7
  1036ac:	9a000071 	bls	103878 <arm_provide_guard_bits_q31+0x1fc>
  1036b0:	e280305c 	add	r3, r0, #92	; 0x5c
  1036b4:	e3a05000 	mov	r5, #0
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  1036b8:	e513905c 	ldr	r9, [r3, #-92]	; 0xffffffa4
  1036bc:	e2854009 	add	r4, r5, #9
  1036c0:	e5138058 	ldr	r8, [r3, #-88]	; 0xffffffa8
  1036c4:	e154000b 	cmp	r4, fp
  1036c8:	e5137054 	ldr	r7, [r3, #-84]	; 0xffffffac
								 uint32_t blockSize,
                                 uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  1036cc:	e2854008 	add	r4, r5, #8
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  1036d0:	e5136050 	ldr	r6, [r3, #-80]	; 0xffffffb0
  1036d4:	f5d3f000 	pld	[r3]
  1036d8:	e1a09259 	asr	r9, r9, r2
  1036dc:	e513504c 	ldr	r5, [r3, #-76]	; 0xffffffb4
  1036e0:	e1a08258 	asr	r8, r8, r2
  1036e4:	e2833020 	add	r3, r3, #32
  1036e8:	e503907c 	str	r9, [r3, #-124]	; 0xffffff84
  1036ec:	e1a07257 	asr	r7, r7, r2
  1036f0:	e5139068 	ldr	r9, [r3, #-104]	; 0xffffff98
  1036f4:	e1a06256 	asr	r6, r6, r2
  1036f8:	e5038078 	str	r8, [r3, #-120]	; 0xffffff88
  1036fc:	e1a05255 	asr	r5, r5, r2
  103700:	e5037074 	str	r7, [r3, #-116]	; 0xffffff8c
  103704:	e503506c 	str	r5, [r3, #-108]	; 0xffffff94
								 uint32_t blockSize,
                                 uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  103708:	e1a05004 	mov	r5, r4
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  10370c:	e1a0a259 	asr	sl, r9, r2
  103710:	e5139064 	ldr	r9, [r3, #-100]	; 0xffffff9c
  103714:	e5036070 	str	r6, [r3, #-112]	; 0xffffff90
  103718:	e503a068 	str	sl, [r3, #-104]	; 0xffffff98
  10371c:	e1a08259 	asr	r8, r9, r2
  103720:	e5139060 	ldr	r9, [r3, #-96]	; 0xffffffa0
  103724:	e5038064 	str	r8, [r3, #-100]	; 0xffffff9c
  103728:	e1a07259 	asr	r7, r9, r2
  10372c:	e5037060 	str	r7, [r3, #-96]	; 0xffffffa0
  103730:	3affffe0 	bcc	1036b8 <arm_provide_guard_bits_q31+0x3c>
 * @return none
 * The function Provides the guard bits for the buffer 
 * to avoid overflow 
 */

void arm_provide_guard_bits_q31 (q31_t * input_buf, 
  103734:	e0803104 	add	r3, r0, r4, lsl #2
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  103738:	e5935000 	ldr	r5, [r3]
								 uint32_t blockSize,
                                 uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  10373c:	e2844001 	add	r4, r4, #1
  103740:	e15c0004 	cmp	ip, r4
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  103744:	e1a05255 	asr	r5, r5, r2
  103748:	e4835004 	str	r5, [r3], #4
  10374c:	8afffff9 	bhi	103738 <arm_provide_guard_bits_q31+0xbc>
  103750:	e151000c 	cmp	r1, ip
  103754:	0a000045 	beq	103870 <arm_provide_guard_bits_q31+0x1f4>
  103758:	e06c8001 	rsb	r8, ip, r1
  10375c:	e1a06128 	lsr	r6, r8, #2
  103760:	e1b07106 	lsls	r7, r6, #2
  103764:	0a00000d 	beq	1037a0 <arm_provide_guard_bits_q31+0x124>
  103768:	eea22b90 	vdup.32	q9, r2
  10376c:	e080c10c 	add	ip, r0, ip, lsl #2
								 uint32_t blockSize,
                                 uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  103770:	e3a03000 	mov	r3, #0
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  103774:	f3f923e2 	vneg.s32	q9, q9
  103778:	e1a0500c 	mov	r5, ip
  10377c:	e2833001 	add	r3, r3, #1
  103780:	ecf50b04 	vldmia	r5!, {d16-d17}
  103784:	e1560003 	cmp	r6, r3
  103788:	f26204e0 	vshl.s32	q8, q8, q9
  10378c:	ecec0b04 	vstmia	ip!, {d16-d17}
  103790:	8afffff9 	bhi	10377c <arm_provide_guard_bits_q31+0x100>
  103794:	e1580007 	cmp	r8, r7
  103798:	e0844007 	add	r4, r4, r7
  10379c:	0a000033 	beq	103870 <arm_provide_guard_bits_q31+0x1f4>
 * @return none
 * The function Provides the guard bits for the buffer 
 * to avoid overflow 
 */

void arm_provide_guard_bits_q31 (q31_t * input_buf, 
  1037a0:	e2843001 	add	r3, r4, #1
  1037a4:	e241b007 	sub	fp, r1, #7
  1037a8:	e1510003 	cmp	r1, r3
  1037ac:	33a0c000 	movcc	ip, #0
  1037b0:	23a0c001 	movcs	ip, #1
  1037b4:	e153000b 	cmp	r3, fp
  1037b8:	23a0c000 	movcs	ip, #0
  1037bc:	e3510006 	cmp	r1, #6
  1037c0:	93a03000 	movls	r3, #0
  1037c4:	820c3001 	andhi	r3, ip, #1
  1037c8:	e3530000 	cmp	r3, #0
  1037cc:	0a00002b 	beq	103880 <arm_provide_guard_bits_q31+0x204>
  1037d0:	e2843019 	add	r3, r4, #25
  1037d4:	e0803103 	add	r3, r0, r3, lsl #2
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  1037d8:	e5139064 	ldr	r9, [r3, #-100]	; 0xffffff9c
  1037dc:	e284c009 	add	ip, r4, #9
  1037e0:	e5138060 	ldr	r8, [r3, #-96]	; 0xffffffa0
  1037e4:	e15b000c 	cmp	fp, ip
  1037e8:	e513605c 	ldr	r6, [r3, #-92]	; 0xffffffa4
								 uint32_t blockSize,
                                 uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  1037ec:	e284c008 	add	ip, r4, #8
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  1037f0:	e5135058 	ldr	r5, [r3, #-88]	; 0xffffffa8
  1037f4:	f5d3f000 	pld	[r3]
  1037f8:	e1a09259 	asr	r9, r9, r2
  1037fc:	e5134054 	ldr	r4, [r3, #-84]	; 0xffffffac
  103800:	e1a08258 	asr	r8, r8, r2
  103804:	e513a050 	ldr	sl, [r3, #-80]	; 0xffffffb0
  103808:	e5039064 	str	r9, [r3, #-100]	; 0xffffff9c
  10380c:	e1a06256 	asr	r6, r6, r2
  103810:	e5038060 	str	r8, [r3, #-96]	; 0xffffffa0
  103814:	e1a05255 	asr	r5, r5, r2
  103818:	e513804c 	ldr	r8, [r3, #-76]	; 0xffffffb4
  10381c:	e1a04254 	asr	r4, r4, r2
  103820:	e5139048 	ldr	r9, [r3, #-72]	; 0xffffffb8
  103824:	e1a0a25a 	asr	sl, sl, r2
  103828:	e503605c 	str	r6, [r3, #-92]	; 0xffffffa4
  10382c:	e2833020 	add	r3, r3, #32
  103830:	e5034074 	str	r4, [r3, #-116]	; 0xffffff8c
								 uint32_t blockSize,
                                 uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  103834:	e1a0400c 	mov	r4, ip
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  103838:	e1a07258 	asr	r7, r8, r2
  10383c:	e5035078 	str	r5, [r3, #-120]	; 0xffffff88
  103840:	e1a06259 	asr	r6, r9, r2
  103844:	e503a070 	str	sl, [r3, #-112]	; 0xffffff90
  103848:	e503706c 	str	r7, [r3, #-108]	; 0xffffff94
  10384c:	e5036068 	str	r6, [r3, #-104]	; 0xffffff98
  103850:	8affffe0 	bhi	1037d8 <arm_provide_guard_bits_q31+0x15c>
 * @return none
 * The function Provides the guard bits for the buffer 
 * to avoid overflow 
 */

void arm_provide_guard_bits_q31 (q31_t * input_buf, 
  103854:	e080010c 	add	r0, r0, ip, lsl #2
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  103858:	e5903000 	ldr	r3, [r0]
								 uint32_t blockSize,
                                 uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  10385c:	e28cc001 	add	ip, ip, #1
  103860:	e151000c 	cmp	r1, ip
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  103864:	e1a03253 	asr	r3, r3, r2
  103868:	e4803004 	str	r3, [r0], #4
								 uint32_t blockSize,
                                 uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  10386c:	8afffff9 	bhi	103858 <arm_provide_guard_bits_q31+0x1dc>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
    }
}
  103870:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
  103874:	e12fff1e 	bx	lr
 * @return none
 * The function Provides the guard bits for the buffer 
 * to avoid overflow 
 */

void arm_provide_guard_bits_q31 (q31_t * input_buf, 
  103878:	e3a04000 	mov	r4, #0
  10387c:	eaffffac 	b	103734 <arm_provide_guard_bits_q31+0xb8>
  103880:	e1a0c004 	mov	ip, r4
  103884:	eafffff2 	b	103854 <arm_provide_guard_bits_q31+0x1d8>
  103888:	e35c0000 	cmp	ip, #0
  10388c:	1affff84 	bne	1036a4 <arm_provide_guard_bits_q31+0x28>
								 uint32_t blockSize,
                                 uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  103890:	e1a0400c 	mov	r4, ip
  103894:	eaffffaf 	b	103758 <arm_provide_guard_bits_q31+0xdc>

00103898 <arm_provide_guard_bits_q7>:
								uint32_t blockSize,
                                uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  103898:	e3510000 	cmp	r1, #0
 */

void arm_provide_guard_bits_q7 (q7_t * input_buf, 
								uint32_t blockSize,
                                uint32_t guard_bits)
{
  10389c:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp}
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  1038a0:	0a00006f 	beq	103a64 <arm_provide_guard_bits_q7+0x1cc>
 * @return none
 * The function Provides the guard bits for the buffer 
 * to avoid overflow 
 */

void arm_provide_guard_bits_q7 (q7_t * input_buf, 
  1038a4:	e2004007 	and	r4, r0, #7
  1038a8:	e2644000 	rsb	r4, r4, #0
  1038ac:	e204400f 	and	r4, r4, #15
  1038b0:	e1540001 	cmp	r4, r1
  1038b4:	21a04001 	movcs	r4, r1
  1038b8:	e351000f 	cmp	r1, #15
  1038bc:	91a04001 	movls	r4, r1
  1038c0:	8a00006d 	bhi	103a7c <arm_provide_guard_bits_q7+0x1e4>
  1038c4:	e3a03000 	mov	r3, #0
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  1038c8:	e190c0d3 	ldrsb	ip, [r0, r3]
  1038cc:	e1a0c25c 	asr	ip, ip, r2
  1038d0:	e7c0c003 	strb	ip, [r0, r3]
								uint32_t blockSize,
                                uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  1038d4:	e2833001 	add	r3, r3, #1
  1038d8:	e1530004 	cmp	r3, r4
  1038dc:	3afffff9 	bcc	1038c8 <arm_provide_guard_bits_q7+0x30>
  1038e0:	e1510004 	cmp	r1, r4
  1038e4:	0a00005e 	beq	103a64 <arm_provide_guard_bits_q7+0x1cc>
  1038e8:	e0648001 	rsb	r8, r4, r1
  1038ec:	e1a07228 	lsr	r7, r8, #4
  1038f0:	e1b0a207 	lsls	sl, r7, #4
  1038f4:	0a000054 	beq	103a4c <arm_provide_guard_bits_q7+0x1b4>
  1038f8:	e3570002 	cmp	r7, #2
  1038fc:	e0809004 	add	r9, r0, r4
  103900:	9a000059 	bls	103a6c <arm_provide_guard_bits_q7+0x1d4>
  103904:	eea02b90 	vdup.32	q8, r2
 * @return none
 * The function Provides the guard bits for the buffer 
 * to avoid overflow 
 */

void arm_provide_guard_bits_q7 (q7_t * input_buf, 
  103908:	e247b003 	sub	fp, r7, #3
  10390c:	e2894020 	add	r4, r9, #32
  103910:	e3cbb001 	bic	fp, fp, #1
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  103914:	f3f923e0 	vneg.s32	q9, q8
 * @return none
 * The function Provides the guard bits for the buffer 
 * to avoid overflow 
 */

void arm_provide_guard_bits_q7 (q7_t * input_buf, 
  103918:	e28bb002 	add	fp, fp, #2
  10391c:	e1a05004 	mov	r5, r4
  103920:	e3a0c000 	mov	ip, #0
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  103924:	ed544b08 	vldr	d20, [r4, #-32]	; 0xffffffe0
  103928:	ed545b06 	vldr	d21, [r4, #-24]	; 0xffffffe8
  10392c:	f2c86a34 	vmovl.s8	q11, d20
  103930:	f2c84a35 	vmovl.s8	q10, d21
 * @return none
 * The function Provides the guard bits for the buffer 
 * to avoid overflow 
 */

void arm_provide_guard_bits_q7 (q7_t * input_buf, 
  103934:	e1a06005 	mov	r6, r5
  103938:	f5d4f080 	pld	[r4, #128]	; 0x80
  10393c:	e1a09004 	mov	r9, r4
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
    {
      input_buf[i] = input_buf[i] >> guard_bits;
  103940:	f2d0ca36 	vmovl.s16	q14, d22
  103944:	e2855020 	add	r5, r5, #32
  103948:	f2d0aa34 	vmovl.s16	q13, d20
  10394c:	e2844020 	add	r4, r4, #32
  103950:	f2d06a37 	vmovl.s16	q11, d23
  103954:	e28cc002 	add	ip, ip, #2
  103958:	f2d04a35 	vmovl.s16	q10, d21
  10395c:	e15c000b 	cmp	ip, fp
  103960:	f262c4ec 	vshl.s32	q14, q14, q9
  103964:	f26264e6 	vshl.s32	q11, q11, q9
  103968:	f262a4ea 	vshl.s32	q13, q13, q9
  10396c:	f26244e4 	vshl.s32	q10, q10, q9
  103970:	f3f6822c 	vmovn.i32	d24, q14
  103974:	f3f69226 	vmovn.i32	d25, q11
  103978:	f3f6622a 	vmovn.i32	d22, q13
  10397c:	f3f67224 	vmovn.i32	d23, q10
  103980:	f3f24228 	vmovn.i16	d20, q12
  103984:	f3f25226 	vmovn.i16	d21, q11
  103988:	ed454b10 	vstr	d20, [r5, #-64]	; 0xffffffc0
  10398c:	ed455b0e 	vstr	d21, [r5, #-56]	; 0xffffffc8
  103990:	ed544b0c 	vldr	d20, [r4, #-48]	; 0xffffffd0
  103994:	ed545b0a 	vldr	d21, [r4, #-40]	; 0xffffffd8
  103998:	f2c86a34 	vmovl.s8	q11, d20
  10399c:	f2c84a35 	vmovl.s8	q10, d21
  1039a0:	f2d0ca36 	vmovl.s16	q14, d22
  1039a4:	f2d0aa34 	vmovl.s16	q13, d20
  1039a8:	f2d06a37 	vmovl.s16	q11, d23
  1039ac:	f2d04a35 	vmovl.s16	q10, d21
  1039b0:	f262c4ec 	vshl.s32	q14, q14, q9
  1039b4:	f26264e6 	vshl.s32	q11, q11, q9
  1039b8:	f26244e4 	vshl.s32	q10, q10, q9
  1039bc:	f262a4ea 	vshl.s32	q13, q13, q9
  1039c0:	f3f6822c 	vmovn.i32	d24, q14
  1039c4:	f3f69226 	vmovn.i32	d25, q11
  1039c8:	f3f6622a 	vmovn.i32	d22, q13
  1039cc:	f3f67224 	vmovn.i32	d23, q10
  1039d0:	f3f24228 	vmovn.i16	d20, q12
  1039d4:	f3f25226 	vmovn.i16	d21, q11
  1039d8:	ed454b0c 	vstr	d20, [r5, #-48]	; 0xffffffd0
  1039dc:	ed455b0a 	vstr	d21, [r5, #-40]	; 0xffffffd8
  1039e0:	1affffcf 	bne	103924 <arm_provide_guard_bits_q7+0x8c>
  1039e4:	f3f903e0 	vneg.s32	q8, q8
  1039e8:	e1a04009 	mov	r4, r9
  1039ec:	ecf42b04 	vldmia	r4!, {d18-d19}
  1039f0:	f2c84a32 	vmovl.s8	q10, d18
  1039f4:	f2c82a33 	vmovl.s8	q9, d19
  1039f8:	e28cc001 	add	ip, ip, #1
  1039fc:	e157000c 	cmp	r7, ip
  103a00:	f2d0aa34 	vmovl.s16	q13, d20
  103a04:	f2d08a32 	vmovl.s16	q12, d18
  103a08:	f2d04a35 	vmovl.s16	q10, d21
  103a0c:	f2d02a33 	vmovl.s16	q9, d19
  103a10:	f260a4ea 	vshl.s32	q13, q13, q8
  103a14:	f26044e4 	vshl.s32	q10, q10, q8
  103a18:	f26024e2 	vshl.s32	q9, q9, q8
  103a1c:	f26084e8 	vshl.s32	q12, q12, q8
  103a20:	f3f6622a 	vmovn.i32	d22, q13
  103a24:	f3f67224 	vmovn.i32	d23, q10
  103a28:	f3f64228 	vmovn.i32	d20, q12
  103a2c:	f3f65222 	vmovn.i32	d21, q9
  103a30:	f3f22226 	vmovn.i16	d18, q11
  103a34:	f3f23224 	vmovn.i16	d19, q10
  103a38:	ece62b04 	vstmia	r6!, {d18-d19}
  103a3c:	8affffea 	bhi	1039ec <arm_provide_guard_bits_q7+0x154>
  103a40:	e158000a 	cmp	r8, sl
  103a44:	e083300a 	add	r3, r3, sl
  103a48:	0a000005 	beq	103a64 <arm_provide_guard_bits_q7+0x1cc>
  103a4c:	e190c0d3 	ldrsb	ip, [r0, r3]
  103a50:	e1a0c25c 	asr	ip, ip, r2
  103a54:	e7c0c003 	strb	ip, [r0, r3]
								uint32_t blockSize,
                                uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  103a58:	e2833001 	add	r3, r3, #1
  103a5c:	e1510003 	cmp	r1, r3
  103a60:	8afffff9 	bhi	103a4c <arm_provide_guard_bits_q7+0x1b4>
    {
      input_buf[i] = input_buf[i] >> guard_bits;
    }
}
  103a64:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
  103a68:	e12fff1e 	bx	lr
 * @return none
 * The function Provides the guard bits for the buffer 
 * to avoid overflow 
 */

void arm_provide_guard_bits_q7 (q7_t * input_buf, 
  103a6c:	e1a06009 	mov	r6, r9
  103a70:	e3a0c000 	mov	ip, #0
  103a74:	eea02b90 	vdup.32	q8, r2
  103a78:	eaffffd9 	b	1039e4 <arm_provide_guard_bits_q7+0x14c>
  103a7c:	e3540000 	cmp	r4, #0
  103a80:	1affff8f 	bne	1038c4 <arm_provide_guard_bits_q7+0x2c>
								uint32_t blockSize,
                                uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < blockSize; i++)
  103a84:	e1a03004 	mov	r3, r4
  103a88:	eaffff96 	b	1038e8 <arm_provide_guard_bits_q7+0x50>

00103a8c <arm_calc_guard_bits>:

uint32_t arm_calc_guard_bits (uint32_t num_adds)
{
  uint32_t i = 1, j = 0;

  if (num_adds == 1)
  103a8c:	e3500001 	cmp	r0, #1
    {
      return (0);
  103a90:	e3a02000 	mov	r2, #0

uint32_t arm_calc_guard_bits (uint32_t num_adds)
{
  uint32_t i = 1, j = 0;

  if (num_adds == 1)
  103a94:	0a000005 	beq	103ab0 <arm_calc_guard_bits+0x24>
    {
      return (0);
    }

  while (i < num_adds)
  103a98:	9a000004 	bls	103ab0 <arm_calc_guard_bits+0x24>
  103a9c:	e3a03001 	mov	r3, #1
    {
      i = i * 2;
  103aa0:	e1a03083 	lsl	r3, r3, #1
      j++;
  103aa4:	e2822001 	add	r2, r2, #1
  if (num_adds == 1)
    {
      return (0);
    }

  while (i < num_adds)
  103aa8:	e1500003 	cmp	r0, r3
  103aac:	8afffffb 	bhi	103aa0 <arm_calc_guard_bits+0x14>
      i = i * 2;
      j++;
    }

  return (j);
}
  103ab0:	e1a00002 	mov	r0, r2
  103ab4:	e12fff1e 	bx	lr

00103ab8 <arm_apply_guard_bits>:
						   uint32_t numSamples, 
						   uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  103ab8:	e3510000 	cmp	r1, #0
 */

void arm_apply_guard_bits (float32_t * pIn, 
						   uint32_t numSamples, 
						   uint32_t guard_bits)
{
  103abc:	e92d00f0 	push	{r4, r5, r6, r7}
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  103ac0:	0a000027 	beq	103b64 <arm_apply_guard_bits+0xac>
  103ac4:	e1a0c122 	lsr	ip, r2, #2
 * @brief  Converts Q15 to floating-point
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 */

void arm_apply_guard_bits (float32_t * pIn, 
  103ac8:	e0805101 	add	r5, r0, r1, lsl #2

  uint32_t i, val = 1;

  for (i = 0; i < numShifts; i++)
    {
      val = val * 2;
  103acc:	f2c02052 	vmov.i32	q9, #2	; 0x00000002
 * @brief  Converts Q15 to floating-point
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 */

void arm_apply_guard_bits (float32_t * pIn, 
  103ad0:	e1a0610c 	lsl	r6, ip, #2
  103ad4:	e35c0000 	cmp	ip, #0
  103ad8:	13520003 	cmpne	r2, #3
  103adc:	f2c04050 	vmov.i32	q10, #0	; 0x00000000
  103ae0:	83a04000 	movhi	r4, #0
  103ae4:	93a04001 	movls	r4, #1
  103ae8:	81a07006 	movhi	r7, r6
  103aec:	93a07000 	movls	r7, #0
uint32_t arm_calc_2pow(uint32_t numShifts)
{

  uint32_t i, val = 1;

  for (i = 0; i < numShifts; i++)
  103af0:	e3520000 	cmp	r2, #0
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
      pIn[i] = pIn[i] * arm_calc_2pow(guard_bits);
  103af4:	ecf07a01 	vldmia	r0!, {s15}
uint32_t arm_calc_2pow(uint32_t numShifts)
{

  uint32_t i, val = 1;

  for (i = 0; i < numShifts; i++)
  103af8:	0a00001b 	beq	103b6c <arm_apply_guard_bits+0xb4>
  103afc:	e3540000 	cmp	r4, #0
  103b00:	1a00001b 	bne	103b74 <arm_apply_guard_bits+0xbc>
  103b04:	f2c00051 	vmov.i32	q8, #1	; 0x00000001
  103b08:	e1a03004 	mov	r3, r4
  103b0c:	e2833001 	add	r3, r3, #1
    {
      val = val * 2;
  103b10:	f26009f2 	vmul.i32	q8, q8, q9
  103b14:	e15c0003 	cmp	ip, r3
  103b18:	8afffffb 	bhi	103b0c <arm_apply_guard_bits+0x54>
  103b1c:	f2f068e4 	vext.8	q11, q8, q10, #8
  103b20:	e1520006 	cmp	r2, r6
  103b24:	f26609f0 	vmul.i32	q8, q11, q8
  103b28:	f2f064e4 	vext.8	q11, q8, q10, #4
  103b2c:	f26609f0 	vmul.i32	q8, q11, q8
  103b30:	ee101b90 	vmov.32	r1, d16[0]
  103b34:	0a000004 	beq	103b4c <arm_apply_guard_bits+0x94>
uint32_t arm_calc_2pow(uint32_t numShifts)
{

  uint32_t i, val = 1;

  for (i = 0; i < numShifts; i++)
  103b38:	e1a03007 	mov	r3, r7
  103b3c:	e2833001 	add	r3, r3, #1
    {
      val = val * 2;
  103b40:	e1a01081 	lsl	r1, r1, #1
uint32_t arm_calc_2pow(uint32_t numShifts)
{

  uint32_t i, val = 1;

  for (i = 0; i < numShifts; i++)
  103b44:	e1520003 	cmp	r2, r3
  103b48:	8afffffb 	bhi	103b3c <arm_apply_guard_bits+0x84>
  103b4c:	ee061a90 	vmov	s13, r1
  103b50:	eeb87a66 	vcvt.f32.u32	s14, s13
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
      pIn[i] = pIn[i] * arm_calc_2pow(guard_bits);
  103b54:	ee677a27 	vmul.f32	s15, s14, s15
						   uint32_t numSamples, 
						   uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  103b58:	e1500005 	cmp	r0, r5
    {
      pIn[i] = pIn[i] * arm_calc_2pow(guard_bits);
  103b5c:	ed407a01 	vstr	s15, [r0, #-4]
						   uint32_t numSamples, 
						   uint32_t guard_bits)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  103b60:	1affffe2 	bne	103af0 <arm_apply_guard_bits+0x38>
    {
      pIn[i] = pIn[i] * arm_calc_2pow(guard_bits);
    }
}
  103b64:	e8bd00f0 	pop	{r4, r5, r6, r7}
  103b68:	e12fff1e 	bx	lr
uint32_t arm_calc_2pow(uint32_t numShifts)
{

  uint32_t i, val = 1;

  for (i = 0; i < numShifts; i++)
  103b6c:	eeb77a00 	vmov.f32	s14, #112	; 0x70
  103b70:	eafffff7 	b	103b54 <arm_apply_guard_bits+0x9c>
 * @return pow(2, numShifts)
 */
uint32_t arm_calc_2pow(uint32_t numShifts)
{

  uint32_t i, val = 1;
  103b74:	e3a01001 	mov	r1, #1
  103b78:	eaffffee 	b	103b38 <arm_apply_guard_bits+0x80>

00103b7c <arm_calc_2pow>:

  for (i = 0; i < numShifts; i++)
  103b7c:	e2501000 	subs	r1, r0, #0
  103b80:	0a000019 	beq	103bec <arm_calc_2pow+0x70>
  103b84:	e1a00121 	lsr	r0, r1, #2
  103b88:	e3500000 	cmp	r0, #0
  103b8c:	13510003 	cmpne	r1, #3
/** 
 * @brief  Calculates pow(2, numShifts)
 * @param  uint32_t 	number of shifts
 * @return pow(2, numShifts)
 */
uint32_t arm_calc_2pow(uint32_t numShifts)
  103b90:	e1a03100 	lsl	r3, r0, #2
  103b94:	83a02000 	movhi	r2, #0
  103b98:	93a02001 	movls	r2, #1
  103b9c:	9a000014 	bls	103bf4 <arm_calc_2pow+0x78>
  103ba0:	f2c00051 	vmov.i32	q8, #1	; 0x00000001

  uint32_t i, val = 1;

  for (i = 0; i < numShifts; i++)
    {
      val = val * 2;
  103ba4:	f2c02052 	vmov.i32	q9, #2	; 0x00000002
  103ba8:	e2822001 	add	r2, r2, #1
  103bac:	f26009f2 	vmul.i32	q8, q8, q9
  103bb0:	e1500002 	cmp	r0, r2
  103bb4:	8afffffb 	bhi	103ba8 <arm_calc_2pow+0x2c>
  103bb8:	f2c02050 	vmov.i32	q9, #0	; 0x00000000
  103bbc:	e1510003 	cmp	r1, r3
  103bc0:	f2f048e2 	vext.8	q10, q8, q9, #8
  103bc4:	f26409f0 	vmul.i32	q8, q10, q8
  103bc8:	f2f024e2 	vext.8	q9, q8, q9, #4
  103bcc:	f26209f0 	vmul.i32	q8, q9, q8
  103bd0:	ee100b90 	vmov.32	r0, d16[0]
  103bd4:	0a000009 	beq	103c00 <arm_calc_2pow+0x84>
uint32_t arm_calc_2pow(uint32_t numShifts)
{

  uint32_t i, val = 1;

  for (i = 0; i < numShifts; i++)
  103bd8:	e2833001 	add	r3, r3, #1
    {
      val = val * 2;
  103bdc:	e1a00080 	lsl	r0, r0, #1
uint32_t arm_calc_2pow(uint32_t numShifts)
{

  uint32_t i, val = 1;

  for (i = 0; i < numShifts; i++)
  103be0:	e1510003 	cmp	r1, r3
  103be4:	8afffffb 	bhi	103bd8 <arm_calc_2pow+0x5c>
  103be8:	e12fff1e 	bx	lr
 * @return pow(2, numShifts)
 */
uint32_t arm_calc_2pow(uint32_t numShifts)
{

  uint32_t i, val = 1;
  103bec:	e3a00001 	mov	r0, #1
    {
      val = val * 2;
    }	

  return(val);
}
  103bf0:	e12fff1e 	bx	lr
 * @return pow(2, numShifts)
 */
uint32_t arm_calc_2pow(uint32_t numShifts)
{

  uint32_t i, val = 1;
  103bf4:	e3a00001 	mov	r0, #1

  for (i = 0; i < numShifts; i++)
  103bf8:	e3a03000 	mov	r3, #0
  103bfc:	eafffff5 	b	103bd8 <arm_calc_2pow+0x5c>
  103c00:	e12fff1e 	bx	lr

00103c04 <arm_float_to_q14>:
void arm_float_to_q14 (float *pIn, q15_t * pOut, 
                       uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  103c04:	e3520000 	cmp	r2, #0
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q14 (float *pIn, q15_t * pOut, 
                       uint32_t numSamples)
{
  103c08:	e92d01f0 	push	{r4, r5, r6, r7, r8}
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  103c0c:	0a0000c9 	beq	103f38 <arm_float_to_q14+0x334>
  103c10:	e3520008 	cmp	r2, #8
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q14 (float *pIn, q15_t * pOut, 
  103c14:	e2428007 	sub	r8, r2, #7
  103c18:	9a0000c8 	bls	103f40 <arm_float_to_q14+0x33c>
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
  103c1c:	ed9f7ac9 	vldr	s14, [pc, #804]	; 103f48 <arm_float_to_q14+0x344>
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q14 (float *pIn, q15_t * pOut, 
  103c20:	e280c030 	add	ip, r0, #48	; 0x30
  103c24:	e2813018 	add	r3, r1, #24
                       uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  103c28:	e3a05000 	mov	r5, #0
  103c2c:	eef07a00 	vmov.f32	s15, #0
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103c30:	eef61b00 	vmov.f64	d17, #96	; 0x60
  103c34:	eefe0b00 	vmov.f64	d16, #224	; 0xe0
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
  103c38:	ed5c6a0c 	vldr	s13, [ip, #-48]	; 0xffffffd0
  103c3c:	f5dcf000 	pld	[ip]
  103c40:	f5d3f000 	pld	[r3]
  103c44:	eef46a67 	vcmp.f32	s13, s15
  103c48:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103c4c:	03074fff 	movweq	r4, #32767	; 0x7fff
  103c50:	0a00000c 	beq	103c88 <arm_float_to_q14+0x84>
  103c54:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103c58:	eef56ac0 	vcmpe.f32	s13, #0.0
  103c5c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103c60:	def02b60 	vmovle.f64	d18, d16
  103c64:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
  103c68:	eebd6ac6 	vcvt.s32.f32	s12, s12
  103c6c:	ee164a10 	vmov	r4, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103c70:	e6bf4074 	sxth	r4, r4
  103c74:	ee064a90 	vmov	s13, r4
  103c78:	eef83be6 	vcvt.f64.s32	d19, s13
  103c7c:	ee732ba2 	vadd.f64	d18, d19, d18
  103c80:	eefd6be2 	vcvt.s32.f64	s13, d18
  103c84:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
  103c88:	ed5c6a0b 	vldr	s13, [ip, #-44]	; 0xffffffd4
  103c8c:	e14341b8 	strh	r4, [r3, #-24]	; 0xffffffe8
  103c90:	eef46a67 	vcmp.f32	s13, s15
  103c94:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103c98:	03074fff 	movweq	r4, #32767	; 0x7fff
  103c9c:	0a00000c 	beq	103cd4 <arm_float_to_q14+0xd0>
  103ca0:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103ca4:	eef56ac0 	vcmpe.f32	s13, #0.0
  103ca8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103cac:	def02b60 	vmovle.f64	d18, d16
  103cb0:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
  103cb4:	eebd6ac6 	vcvt.s32.f32	s12, s12
  103cb8:	ee164a10 	vmov	r4, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103cbc:	e6bf4074 	sxth	r4, r4
  103cc0:	ee064a90 	vmov	s13, r4
  103cc4:	eef83be6 	vcvt.f64.s32	d19, s13
  103cc8:	ee732ba2 	vadd.f64	d18, d19, d18
  103ccc:	eefd6be2 	vcvt.s32.f64	s13, d18
  103cd0:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
  103cd4:	ed5c6a0a 	vldr	s13, [ip, #-40]	; 0xffffffd8
  103cd8:	e14341b6 	strh	r4, [r3, #-22]	; 0xffffffea
  103cdc:	eef46a67 	vcmp.f32	s13, s15
  103ce0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103ce4:	03074fff 	movweq	r4, #32767	; 0x7fff
  103ce8:	0a00000c 	beq	103d20 <arm_float_to_q14+0x11c>
  103cec:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103cf0:	eef56ac0 	vcmpe.f32	s13, #0.0
  103cf4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103cf8:	def02b60 	vmovle.f64	d18, d16
  103cfc:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
  103d00:	eebd6ac6 	vcvt.s32.f32	s12, s12
  103d04:	ee164a10 	vmov	r4, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103d08:	e6bf4074 	sxth	r4, r4
  103d0c:	ee064a90 	vmov	s13, r4
  103d10:	eef83be6 	vcvt.f64.s32	d19, s13
  103d14:	ee732ba2 	vadd.f64	d18, d19, d18
  103d18:	eefd6be2 	vcvt.s32.f64	s13, d18
  103d1c:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
  103d20:	ed5c6a09 	vldr	s13, [ip, #-36]	; 0xffffffdc
  103d24:	e14341b4 	strh	r4, [r3, #-20]	; 0xffffffec
  103d28:	eef46a67 	vcmp.f32	s13, s15
  103d2c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103d30:	03074fff 	movweq	r4, #32767	; 0x7fff
  103d34:	0a00000c 	beq	103d6c <arm_float_to_q14+0x168>
  103d38:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103d3c:	eef56ac0 	vcmpe.f32	s13, #0.0
  103d40:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103d44:	def02b60 	vmovle.f64	d18, d16
  103d48:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
  103d4c:	eebd6ac6 	vcvt.s32.f32	s12, s12
  103d50:	ee164a10 	vmov	r4, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103d54:	e6bf4074 	sxth	r4, r4
  103d58:	ee064a90 	vmov	s13, r4
  103d5c:	eef83be6 	vcvt.f64.s32	d19, s13
  103d60:	ee732ba2 	vadd.f64	d18, d19, d18
  103d64:	eefd6be2 	vcvt.s32.f64	s13, d18
  103d68:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
  103d6c:	ed5c6a08 	vldr	s13, [ip, #-32]	; 0xffffffe0
  103d70:	e14341b2 	strh	r4, [r3, #-18]	; 0xffffffee
  103d74:	eef46a67 	vcmp.f32	s13, s15
  103d78:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103d7c:	03074fff 	movweq	r4, #32767	; 0x7fff
  103d80:	0a00000c 	beq	103db8 <arm_float_to_q14+0x1b4>
  103d84:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103d88:	eef56ac0 	vcmpe.f32	s13, #0.0
  103d8c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103d90:	def02b60 	vmovle.f64	d18, d16
  103d94:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
  103d98:	eebd6ac6 	vcvt.s32.f32	s12, s12
  103d9c:	ee164a10 	vmov	r4, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103da0:	e6bf4074 	sxth	r4, r4
  103da4:	ee064a90 	vmov	s13, r4
  103da8:	eef83be6 	vcvt.f64.s32	d19, s13
  103dac:	ee732ba2 	vadd.f64	d18, d19, d18
  103db0:	eefd6be2 	vcvt.s32.f64	s13, d18
  103db4:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
  103db8:	ed5c6a07 	vldr	s13, [ip, #-28]	; 0xffffffe4
  103dbc:	e14341b0 	strh	r4, [r3, #-16]
  103dc0:	eef46a67 	vcmp.f32	s13, s15
  103dc4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103dc8:	03074fff 	movweq	r4, #32767	; 0x7fff
  103dcc:	0a00000c 	beq	103e04 <arm_float_to_q14+0x200>
  103dd0:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103dd4:	eef56ac0 	vcmpe.f32	s13, #0.0
  103dd8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103ddc:	def02b60 	vmovle.f64	d18, d16
  103de0:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
  103de4:	eebd6ac6 	vcvt.s32.f32	s12, s12
  103de8:	ee164a10 	vmov	r4, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103dec:	e6bf4074 	sxth	r4, r4
  103df0:	ee064a90 	vmov	s13, r4
  103df4:	eef83be6 	vcvt.f64.s32	d19, s13
  103df8:	ee732ba2 	vadd.f64	d18, d19, d18
  103dfc:	eefd6be2 	vcvt.s32.f64	s13, d18
  103e00:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
  103e04:	ed5c6a06 	vldr	s13, [ip, #-24]	; 0xffffffe8
  103e08:	e14340be 	strh	r4, [r3, #-14]
  103e0c:	eef46a67 	vcmp.f32	s13, s15
  103e10:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103e14:	03074fff 	movweq	r4, #32767	; 0x7fff
  103e18:	0a00000c 	beq	103e50 <arm_float_to_q14+0x24c>
  103e1c:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103e20:	eef56ac0 	vcmpe.f32	s13, #0.0
  103e24:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103e28:	def02b60 	vmovle.f64	d18, d16
  103e2c:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
  103e30:	eebd6ac6 	vcvt.s32.f32	s12, s12
  103e34:	ee164a10 	vmov	r4, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103e38:	e6bf4074 	sxth	r4, r4
  103e3c:	ee064a90 	vmov	s13, r4
  103e40:	eef83be6 	vcvt.f64.s32	d19, s13
  103e44:	ee732ba2 	vadd.f64	d18, d19, d18
  103e48:	eefd6be2 	vcvt.s32.f64	s13, d18
  103e4c:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
  103e50:	ed5c6a05 	vldr	s13, [ip, #-20]	; 0xffffffec
  103e54:	e14340bc 	strh	r4, [r3, #-12]
  103e58:	eef46a67 	vcmp.f32	s13, s15
  103e5c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103e60:	03076fff 	movweq	r6, #32767	; 0x7fff
  103e64:	0a00000c 	beq	103e9c <arm_float_to_q14+0x298>
  103e68:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103e6c:	eef56ac0 	vcmpe.f32	s13, #0.0
  103e70:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103e74:	def02b60 	vmovle.f64	d18, d16
  103e78:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
  103e7c:	eebd6ac6 	vcvt.s32.f32	s12, s12
  103e80:	ee164a10 	vmov	r4, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103e84:	e6bf4074 	sxth	r4, r4
  103e88:	ee064a90 	vmov	s13, r4
  103e8c:	eef83be6 	vcvt.f64.s32	d19, s13
  103e90:	ee732ba2 	vadd.f64	d18, d19, d18
  103e94:	eefd6be2 	vcvt.s32.f64	s13, d18
  103e98:	ee166a90 	vmov	r6, s13
  103e9c:	e2857009 	add	r7, r5, #9
void arm_float_to_q14 (float *pIn, q15_t * pOut, 
                       uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  103ea0:	e2854008 	add	r4, r5, #8
  103ea4:	e1580007 	cmp	r8, r7
  103ea8:	e14360ba 	strh	r6, [r3, #-10]
  103eac:	e28cc020 	add	ip, ip, #32
  103eb0:	e2833010 	add	r3, r3, #16
  103eb4:	e1a05004 	mov	r5, r4
  103eb8:	8affff5e 	bhi	103c38 <arm_float_to_q14+0x34>
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q14 (float *pIn, q15_t * pOut, 
  103ebc:	e2443001 	sub	r3, r4, #1
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
  103ec0:	ed9f6a20 	vldr	s12, [pc, #128]	; 103f48 <arm_float_to_q14+0x344>
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q14 (float *pIn, q15_t * pOut, 
  103ec4:	e0800103 	add	r0, r0, r3, lsl #2
  103ec8:	e0811083 	add	r1, r1, r3, lsl #1
  103ecc:	eef06a00 	vmov.f32	s13, #0
  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103ed0:	eef63b00 	vmov.f64	d19, #96	; 0x60
  103ed4:	eefe2b00 	vmov.f64	d18, #224	; 0xe0
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
  103ed8:	e2800004 	add	r0, r0, #4
  103edc:	edd07a00 	vldr	s15, [r0]
  103ee0:	e3073fff 	movw	r3, #32767	; 0x7fff
  103ee4:	e2811002 	add	r1, r1, #2
  103ee8:	ee277a86 	vmul.f32	s14, s15, s12
  103eec:	eef47a66 	vcmp.f32	s15, s13
  103ef0:	eef1fa10 	vmrs	APSR_nzcv, fpscr

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103ef4:	eef57ac0 	vcmpe.f32	s15, #0.0
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 16384.0f corresponds to pow(2, 14) */
      pOut[i] = (q15_t) (pIn[i] * 16384.0f);
  103ef8:	eebd7ac7 	vcvt.s32.f32	s14, s14
  103efc:	ee17ca10 	vmov	ip, s14
  103f00:	0a000008 	beq	103f28 <arm_float_to_q14+0x324>

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103f04:	e6bfc07c 	sxth	ip, ip
  103f08:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103f0c:	def01b62 	vmovle.f64	d17, d18
  103f10:	cef01b63 	vmovgt.f64	d17, d19
  103f14:	ee07ca90 	vmov	s15, ip
  103f18:	eef80be7 	vcvt.f64.s32	d16, s15
  103f1c:	ee700ba1 	vadd.f64	d16, d16, d17
  103f20:	eefd7be0 	vcvt.s32.f64	s15, d16
  103f24:	ee173a90 	vmov	r3, s15
void arm_float_to_q14 (float *pIn, q15_t * pOut, 
                       uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  103f28:	e2844001 	add	r4, r4, #1
  103f2c:	e1c130b0 	strh	r3, [r1]
  103f30:	e1520004 	cmp	r2, r4
  103f34:	8affffe7 	bhi	103ed8 <arm_float_to_q14+0x2d4>
          pOut[i] = 0x7FFF;
        }

    }

}
  103f38:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
  103f3c:	e12fff1e 	bx	lr
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q14 (float *pIn, q15_t * pOut, 
  103f40:	e3a04000 	mov	r4, #0
  103f44:	eaffffdc 	b	103ebc <arm_float_to_q14+0x2b8>
  103f48:	46800000 	.word	0x46800000

00103f4c <arm_float_to_q30>:
void arm_float_to_q30 (float *pIn, q31_t * pOut, 
					   uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  103f4c:	e3520000 	cmp	r2, #0
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q30 (float *pIn, q31_t * pOut, 
					   uint32_t numSamples)
{
  103f50:	e92d01f0 	push	{r4, r5, r6, r7, r8}
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  103f54:	0a0000af 	beq	104218 <arm_float_to_q30+0x2cc>
  103f58:	e3520008 	cmp	r2, #8
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q30 (float *pIn, q31_t * pOut, 
  103f5c:	e2428007 	sub	r8, r2, #7
  103f60:	9a0000ae 	bls	104220 <arm_float_to_q30+0x2d4>
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
  103f64:	ed9f7aaf 	vldr	s14, [pc, #700]	; 104228 <arm_float_to_q30+0x2dc>
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q30 (float *pIn, q31_t * pOut, 
  103f68:	e280c030 	add	ip, r0, #48	; 0x30
  103f6c:	e2813030 	add	r3, r1, #48	; 0x30
					   uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  103f70:	e3a05000 	mov	r5, #0
  103f74:	eef07a00 	vmov.f32	s15, #0
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103f78:	eef61b00 	vmov.f64	d17, #96	; 0x60
  103f7c:	eefe0b00 	vmov.f64	d16, #224	; 0xe0
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
  103f80:	ed5c6a0c 	vldr	s13, [ip, #-48]	; 0xffffffd0
  103f84:	f5dcf000 	pld	[ip]
  103f88:	f5d3f000 	pld	[r3]
  103f8c:	eef46a67 	vcmp.f32	s13, s15
  103f90:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103f94:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  103f98:	0a000009 	beq	103fc4 <arm_float_to_q30+0x78>
  103f9c:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103fa0:	eef56ac0 	vcmpe.f32	s13, #0.0
  103fa4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103fa8:	def02b60 	vmovle.f64	d18, d16
  103fac:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
  103fb0:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103fb4:	eef83be6 	vcvt.f64.s32	d19, s13
  103fb8:	ee732ba2 	vadd.f64	d18, d19, d18
  103fbc:	eefd6be2 	vcvt.s32.f64	s13, d18
  103fc0:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
  103fc4:	ed5c6a0b 	vldr	s13, [ip, #-44]	; 0xffffffd4
  103fc8:	e5034030 	str	r4, [r3, #-48]	; 0xffffffd0
  103fcc:	eef46a67 	vcmp.f32	s13, s15
  103fd0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103fd4:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  103fd8:	0a000009 	beq	104004 <arm_float_to_q30+0xb8>
  103fdc:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103fe0:	eef56ac0 	vcmpe.f32	s13, #0.0
  103fe4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  103fe8:	def02b60 	vmovle.f64	d18, d16
  103fec:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
  103ff0:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  103ff4:	eef83be6 	vcvt.f64.s32	d19, s13
  103ff8:	ee732ba2 	vadd.f64	d18, d19, d18
  103ffc:	eefd6be2 	vcvt.s32.f64	s13, d18
  104000:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
  104004:	ed5c6a0a 	vldr	s13, [ip, #-40]	; 0xffffffd8
  104008:	e503402c 	str	r4, [r3, #-44]	; 0xffffffd4
  10400c:	eef46a67 	vcmp.f32	s13, s15
  104010:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104014:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  104018:	0a000009 	beq	104044 <arm_float_to_q30+0xf8>
  10401c:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104020:	eef56ac0 	vcmpe.f32	s13, #0.0
  104024:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104028:	def02b60 	vmovle.f64	d18, d16
  10402c:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
  104030:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104034:	eef83be6 	vcvt.f64.s32	d19, s13
  104038:	ee732ba2 	vadd.f64	d18, d19, d18
  10403c:	eefd6be2 	vcvt.s32.f64	s13, d18
  104040:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
  104044:	ed5c6a09 	vldr	s13, [ip, #-36]	; 0xffffffdc
  104048:	e5034028 	str	r4, [r3, #-40]	; 0xffffffd8
  10404c:	eef46a67 	vcmp.f32	s13, s15
  104050:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104054:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  104058:	0a000009 	beq	104084 <arm_float_to_q30+0x138>
  10405c:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104060:	eef56ac0 	vcmpe.f32	s13, #0.0
  104064:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104068:	def02b60 	vmovle.f64	d18, d16
  10406c:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
  104070:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104074:	eef83be6 	vcvt.f64.s32	d19, s13
  104078:	ee732ba2 	vadd.f64	d18, d19, d18
  10407c:	eefd6be2 	vcvt.s32.f64	s13, d18
  104080:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
  104084:	ed5c6a08 	vldr	s13, [ip, #-32]	; 0xffffffe0
  104088:	e5034024 	str	r4, [r3, #-36]	; 0xffffffdc
  10408c:	eef46a67 	vcmp.f32	s13, s15
  104090:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104094:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  104098:	0a000009 	beq	1040c4 <arm_float_to_q30+0x178>
  10409c:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1040a0:	eef56ac0 	vcmpe.f32	s13, #0.0
  1040a4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1040a8:	def02b60 	vmovle.f64	d18, d16
  1040ac:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
  1040b0:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1040b4:	eef83be6 	vcvt.f64.s32	d19, s13
  1040b8:	ee732ba2 	vadd.f64	d18, d19, d18
  1040bc:	eefd6be2 	vcvt.s32.f64	s13, d18
  1040c0:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
  1040c4:	ed5c6a07 	vldr	s13, [ip, #-28]	; 0xffffffe4
  1040c8:	e5034020 	str	r4, [r3, #-32]	; 0xffffffe0
  1040cc:	eef46a67 	vcmp.f32	s13, s15
  1040d0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1040d4:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  1040d8:	0a000009 	beq	104104 <arm_float_to_q30+0x1b8>
  1040dc:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1040e0:	eef56ac0 	vcmpe.f32	s13, #0.0
  1040e4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1040e8:	def02b60 	vmovle.f64	d18, d16
  1040ec:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
  1040f0:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1040f4:	eef83be6 	vcvt.f64.s32	d19, s13
  1040f8:	ee732ba2 	vadd.f64	d18, d19, d18
  1040fc:	eefd6be2 	vcvt.s32.f64	s13, d18
  104100:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
  104104:	ed5c6a06 	vldr	s13, [ip, #-24]	; 0xffffffe8
  104108:	e503401c 	str	r4, [r3, #-28]	; 0xffffffe4
  10410c:	eef46a67 	vcmp.f32	s13, s15
  104110:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104114:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  104118:	0a000009 	beq	104144 <arm_float_to_q30+0x1f8>
  10411c:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104120:	eef56ac0 	vcmpe.f32	s13, #0.0
  104124:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104128:	def02b60 	vmovle.f64	d18, d16
  10412c:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
  104130:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104134:	eef83be6 	vcvt.f64.s32	d19, s13
  104138:	ee732ba2 	vadd.f64	d18, d19, d18
  10413c:	eefd6be2 	vcvt.s32.f64	s13, d18
  104140:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
  104144:	ed5c6a05 	vldr	s13, [ip, #-20]	; 0xffffffec
  104148:	e5034018 	str	r4, [r3, #-24]	; 0xffffffe8
  10414c:	eef46a67 	vcmp.f32	s13, s15
  104150:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104154:	03e06102 	mvneq	r6, #-2147483648	; 0x80000000
  104158:	0a000009 	beq	104184 <arm_float_to_q30+0x238>
  10415c:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104160:	eef56ac0 	vcmpe.f32	s13, #0.0
  104164:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104168:	def02b60 	vmovle.f64	d18, d16
  10416c:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
  104170:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104174:	eef83be6 	vcvt.f64.s32	d19, s13
  104178:	ee732ba2 	vadd.f64	d18, d19, d18
  10417c:	eefd6be2 	vcvt.s32.f64	s13, d18
  104180:	ee166a90 	vmov	r6, s13
  104184:	e2857009 	add	r7, r5, #9
void arm_float_to_q30 (float *pIn, q31_t * pOut, 
					   uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  104188:	e2854008 	add	r4, r5, #8
  10418c:	e1580007 	cmp	r8, r7
  104190:	e5036014 	str	r6, [r3, #-20]	; 0xffffffec
  104194:	e28cc020 	add	ip, ip, #32
  104198:	e2833020 	add	r3, r3, #32
  10419c:	e1a05004 	mov	r5, r4
  1041a0:	8affff76 	bhi	103f80 <arm_float_to_q30+0x34>
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q30 (float *pIn, q31_t * pOut, 
  1041a4:	e2443001 	sub	r3, r4, #1
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
  1041a8:	ed9f6a1e 	vldr	s12, [pc, #120]	; 104228 <arm_float_to_q30+0x2dc>
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q30 (float *pIn, q31_t * pOut, 
  1041ac:	e1a03103 	lsl	r3, r3, #2
  1041b0:	eef06a00 	vmov.f32	s13, #0
  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1041b4:	eef63b00 	vmov.f64	d19, #96	; 0x60
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q30 (float *pIn, q31_t * pOut, 
  1041b8:	e0800003 	add	r0, r0, r3
  1041bc:	e0811003 	add	r1, r1, r3
  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1041c0:	eefe2b00 	vmov.f64	d18, #224	; 0xe0
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
  1041c4:	e2800004 	add	r0, r0, #4
  1041c8:	edd07a00 	vldr	s15, [r0]
  1041cc:	e3e03102 	mvn	r3, #-2147483648	; 0x80000000
  1041d0:	e2811004 	add	r1, r1, #4
  1041d4:	ee277a86 	vmul.f32	s14, s15, s12
  1041d8:	eef47a66 	vcmp.f32	s15, s13
  1041dc:	eef1fa10 	vmrs	APSR_nzcv, fpscr

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1041e0:	eef57ac0 	vcmpe.f32	s15, #0.0
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 1073741824.0f);
  1041e4:	eebd7ac7 	vcvt.s32.f32	s14, s14
  1041e8:	0a000006 	beq	104208 <arm_float_to_q30+0x2bc>

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1041ec:	eef80bc7 	vcvt.f64.s32	d16, s14
  1041f0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1041f4:	def01b62 	vmovle.f64	d17, d18
  1041f8:	cef01b63 	vmovgt.f64	d17, d19
  1041fc:	ee700ba1 	vadd.f64	d16, d16, d17
  104200:	eefd7be0 	vcvt.s32.f64	s15, d16
  104204:	ee173a90 	vmov	r3, s15
void arm_float_to_q30 (float *pIn, q31_t * pOut, 
					   uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  104208:	e2844001 	add	r4, r4, #1
  10420c:	e5813000 	str	r3, [r1]
  104210:	e1520004 	cmp	r2, r4
  104214:	8affffea 	bhi	1041c4 <arm_float_to_q30+0x278>
      if (pIn[i] == (float) 2.0)
        {
          pOut[i] = 0x7FFFFFFF;
        }
    }
}
  104218:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
  10421c:	e12fff1e 	bx	lr
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q30 (float *pIn, q31_t * pOut, 
  104220:	e3a04000 	mov	r4, #0
  104224:	eaffffde 	b	1041a4 <arm_float_to_q30+0x258>
  104228:	4e800000 	.word	0x4e800000

0010422c <arm_float_to_q29>:
void arm_float_to_q29 (float *pIn, q31_t * pOut, 
					   uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  10422c:	e3520000 	cmp	r2, #0
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q29 (float *pIn, q31_t * pOut, 
					   uint32_t numSamples)
{
  104230:	e92d01f0 	push	{r4, r5, r6, r7, r8}
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  104234:	0a0000af 	beq	1044f8 <arm_float_to_q29+0x2cc>
  104238:	e3520008 	cmp	r2, #8
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q29 (float *pIn, q31_t * pOut, 
  10423c:	e2428007 	sub	r8, r2, #7
  104240:	9a0000ae 	bls	104500 <arm_float_to_q29+0x2d4>
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
  104244:	ed9f7aaf 	vldr	s14, [pc, #700]	; 104508 <arm_float_to_q29+0x2dc>
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q29 (float *pIn, q31_t * pOut, 
  104248:	e280c030 	add	ip, r0, #48	; 0x30
  10424c:	e2813030 	add	r3, r1, #48	; 0x30
					   uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  104250:	e3a05000 	mov	r5, #0
  104254:	eef17a00 	vmov.f32	s15, #16
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104258:	eef61b00 	vmov.f64	d17, #96	; 0x60
  10425c:	eefe0b00 	vmov.f64	d16, #224	; 0xe0
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
  104260:	ed5c6a0c 	vldr	s13, [ip, #-48]	; 0xffffffd0
  104264:	f5dcf000 	pld	[ip]
  104268:	f5d3f000 	pld	[r3]
  10426c:	eef46a67 	vcmp.f32	s13, s15
  104270:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104274:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  104278:	0a000009 	beq	1042a4 <arm_float_to_q29+0x78>
  10427c:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104280:	eef56ac0 	vcmpe.f32	s13, #0.0
  104284:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104288:	def02b60 	vmovle.f64	d18, d16
  10428c:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
  104290:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104294:	eef83be6 	vcvt.f64.s32	d19, s13
  104298:	ee732ba2 	vadd.f64	d18, d19, d18
  10429c:	eefd6be2 	vcvt.s32.f64	s13, d18
  1042a0:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
  1042a4:	ed5c6a0b 	vldr	s13, [ip, #-44]	; 0xffffffd4
  1042a8:	e5034030 	str	r4, [r3, #-48]	; 0xffffffd0
  1042ac:	eef46a67 	vcmp.f32	s13, s15
  1042b0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1042b4:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  1042b8:	0a000009 	beq	1042e4 <arm_float_to_q29+0xb8>
  1042bc:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1042c0:	eef56ac0 	vcmpe.f32	s13, #0.0
  1042c4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1042c8:	def02b60 	vmovle.f64	d18, d16
  1042cc:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
  1042d0:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1042d4:	eef83be6 	vcvt.f64.s32	d19, s13
  1042d8:	ee732ba2 	vadd.f64	d18, d19, d18
  1042dc:	eefd6be2 	vcvt.s32.f64	s13, d18
  1042e0:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
  1042e4:	ed5c6a0a 	vldr	s13, [ip, #-40]	; 0xffffffd8
  1042e8:	e503402c 	str	r4, [r3, #-44]	; 0xffffffd4
  1042ec:	eef46a67 	vcmp.f32	s13, s15
  1042f0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1042f4:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  1042f8:	0a000009 	beq	104324 <arm_float_to_q29+0xf8>
  1042fc:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104300:	eef56ac0 	vcmpe.f32	s13, #0.0
  104304:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104308:	def02b60 	vmovle.f64	d18, d16
  10430c:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
  104310:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104314:	eef83be6 	vcvt.f64.s32	d19, s13
  104318:	ee732ba2 	vadd.f64	d18, d19, d18
  10431c:	eefd6be2 	vcvt.s32.f64	s13, d18
  104320:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
  104324:	ed5c6a09 	vldr	s13, [ip, #-36]	; 0xffffffdc
  104328:	e5034028 	str	r4, [r3, #-40]	; 0xffffffd8
  10432c:	eef46a67 	vcmp.f32	s13, s15
  104330:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104334:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  104338:	0a000009 	beq	104364 <arm_float_to_q29+0x138>
  10433c:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104340:	eef56ac0 	vcmpe.f32	s13, #0.0
  104344:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104348:	def02b60 	vmovle.f64	d18, d16
  10434c:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
  104350:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104354:	eef83be6 	vcvt.f64.s32	d19, s13
  104358:	ee732ba2 	vadd.f64	d18, d19, d18
  10435c:	eefd6be2 	vcvt.s32.f64	s13, d18
  104360:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
  104364:	ed5c6a08 	vldr	s13, [ip, #-32]	; 0xffffffe0
  104368:	e5034024 	str	r4, [r3, #-36]	; 0xffffffdc
  10436c:	eef46a67 	vcmp.f32	s13, s15
  104370:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104374:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  104378:	0a000009 	beq	1043a4 <arm_float_to_q29+0x178>
  10437c:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104380:	eef56ac0 	vcmpe.f32	s13, #0.0
  104384:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104388:	def02b60 	vmovle.f64	d18, d16
  10438c:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
  104390:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104394:	eef83be6 	vcvt.f64.s32	d19, s13
  104398:	ee732ba2 	vadd.f64	d18, d19, d18
  10439c:	eefd6be2 	vcvt.s32.f64	s13, d18
  1043a0:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
  1043a4:	ed5c6a07 	vldr	s13, [ip, #-28]	; 0xffffffe4
  1043a8:	e5034020 	str	r4, [r3, #-32]	; 0xffffffe0
  1043ac:	eef46a67 	vcmp.f32	s13, s15
  1043b0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1043b4:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  1043b8:	0a000009 	beq	1043e4 <arm_float_to_q29+0x1b8>
  1043bc:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1043c0:	eef56ac0 	vcmpe.f32	s13, #0.0
  1043c4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1043c8:	def02b60 	vmovle.f64	d18, d16
  1043cc:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
  1043d0:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1043d4:	eef83be6 	vcvt.f64.s32	d19, s13
  1043d8:	ee732ba2 	vadd.f64	d18, d19, d18
  1043dc:	eefd6be2 	vcvt.s32.f64	s13, d18
  1043e0:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
  1043e4:	ed5c6a06 	vldr	s13, [ip, #-24]	; 0xffffffe8
  1043e8:	e503401c 	str	r4, [r3, #-28]	; 0xffffffe4
  1043ec:	eef46a67 	vcmp.f32	s13, s15
  1043f0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1043f4:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  1043f8:	0a000009 	beq	104424 <arm_float_to_q29+0x1f8>
  1043fc:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104400:	eef56ac0 	vcmpe.f32	s13, #0.0
  104404:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104408:	def02b60 	vmovle.f64	d18, d16
  10440c:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
  104410:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104414:	eef83be6 	vcvt.f64.s32	d19, s13
  104418:	ee732ba2 	vadd.f64	d18, d19, d18
  10441c:	eefd6be2 	vcvt.s32.f64	s13, d18
  104420:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
  104424:	ed5c6a05 	vldr	s13, [ip, #-20]	; 0xffffffec
  104428:	e5034018 	str	r4, [r3, #-24]	; 0xffffffe8
  10442c:	eef46a67 	vcmp.f32	s13, s15
  104430:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104434:	03e06102 	mvneq	r6, #-2147483648	; 0x80000000
  104438:	0a000009 	beq	104464 <arm_float_to_q29+0x238>
  10443c:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104440:	eef56ac0 	vcmpe.f32	s13, #0.0
  104444:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104448:	def02b60 	vmovle.f64	d18, d16
  10444c:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
  104450:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104454:	eef83be6 	vcvt.f64.s32	d19, s13
  104458:	ee732ba2 	vadd.f64	d18, d19, d18
  10445c:	eefd6be2 	vcvt.s32.f64	s13, d18
  104460:	ee166a90 	vmov	r6, s13
  104464:	e2857009 	add	r7, r5, #9
void arm_float_to_q29 (float *pIn, q31_t * pOut, 
					   uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  104468:	e2854008 	add	r4, r5, #8
  10446c:	e1580007 	cmp	r8, r7
  104470:	e5036014 	str	r6, [r3, #-20]	; 0xffffffec
  104474:	e28cc020 	add	ip, ip, #32
  104478:	e2833020 	add	r3, r3, #32
  10447c:	e1a05004 	mov	r5, r4
  104480:	8affff76 	bhi	104260 <arm_float_to_q29+0x34>
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q29 (float *pIn, q31_t * pOut, 
  104484:	e2443001 	sub	r3, r4, #1
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
  104488:	ed9f6a1e 	vldr	s12, [pc, #120]	; 104508 <arm_float_to_q29+0x2dc>
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q29 (float *pIn, q31_t * pOut, 
  10448c:	e1a03103 	lsl	r3, r3, #2
  104490:	eef16a00 	vmov.f32	s13, #16
  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104494:	eef63b00 	vmov.f64	d19, #96	; 0x60
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q29 (float *pIn, q31_t * pOut, 
  104498:	e0800003 	add	r0, r0, r3
  10449c:	e0811003 	add	r1, r1, r3
  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1044a0:	eefe2b00 	vmov.f64	d18, #224	; 0xe0
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
  1044a4:	e2800004 	add	r0, r0, #4
  1044a8:	edd07a00 	vldr	s15, [r0]
  1044ac:	e3e03102 	mvn	r3, #-2147483648	; 0x80000000
  1044b0:	e2811004 	add	r1, r1, #4
  1044b4:	ee277a86 	vmul.f32	s14, s15, s12
  1044b8:	eef47a66 	vcmp.f32	s15, s13
  1044bc:	eef1fa10 	vmrs	APSR_nzcv, fpscr

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1044c0:	eef57ac0 	vcmpe.f32	s15, #0.0
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	  /* 1073741824.0f corresponds to pow(2, 30) */
      pOut[i] = (q31_t) (pIn[i] * 536870912.0f);
  1044c4:	eebd7ac7 	vcvt.s32.f32	s14, s14
  1044c8:	0a000006 	beq	1044e8 <arm_float_to_q29+0x2bc>

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1044cc:	eef80bc7 	vcvt.f64.s32	d16, s14
  1044d0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1044d4:	def01b62 	vmovle.f64	d17, d18
  1044d8:	cef01b63 	vmovgt.f64	d17, d19
  1044dc:	ee700ba1 	vadd.f64	d16, d16, d17
  1044e0:	eefd7be0 	vcvt.s32.f64	s15, d16
  1044e4:	ee173a90 	vmov	r3, s15
void arm_float_to_q29 (float *pIn, q31_t * pOut, 
					   uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  1044e8:	e2844001 	add	r4, r4, #1
  1044ec:	e5813000 	str	r3, [r1]
  1044f0:	e1520004 	cmp	r2, r4
  1044f4:	8affffea 	bhi	1044a4 <arm_float_to_q29+0x278>
      if (pIn[i] == (float) 4.0)
        {
          pOut[i] = 0x7FFFFFFF;
        }
    }
}
  1044f8:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
  1044fc:	e12fff1e 	bx	lr
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q29 (float *pIn, q31_t * pOut, 
  104500:	e3a04000 	mov	r4, #0
  104504:	eaffffde 	b	104484 <arm_float_to_q29+0x258>
  104508:	4e000000 	.word	0x4e000000

0010450c <arm_float_to_q28>:
void arm_float_to_q28 (float *pIn, q31_t * pOut, 
                       uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  10450c:	e3520000 	cmp	r2, #0
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q28 (float *pIn, q31_t * pOut, 
                       uint32_t numSamples)
{
  104510:	e92d01f0 	push	{r4, r5, r6, r7, r8}
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  104514:	0a0000af 	beq	1047d8 <arm_float_to_q28+0x2cc>
  104518:	e3520008 	cmp	r2, #8
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q28 (float *pIn, q31_t * pOut, 
  10451c:	e2428007 	sub	r8, r2, #7
  104520:	9a0000ae 	bls	1047e0 <arm_float_to_q28+0x2d4>
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
  104524:	ed9f7aaf 	vldr	s14, [pc, #700]	; 1047e8 <arm_float_to_q28+0x2dc>
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q28 (float *pIn, q31_t * pOut, 
  104528:	e280c030 	add	ip, r0, #48	; 0x30
  10452c:	e2813030 	add	r3, r1, #48	; 0x30
                       uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  104530:	e3a05000 	mov	r5, #0
  104534:	eef27a00 	vmov.f32	s15, #32
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104538:	eef61b00 	vmov.f64	d17, #96	; 0x60
  10453c:	eefe0b00 	vmov.f64	d16, #224	; 0xe0
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
  104540:	ed5c6a0c 	vldr	s13, [ip, #-48]	; 0xffffffd0
  104544:	f5dcf000 	pld	[ip]
  104548:	f5d3f000 	pld	[r3]
  10454c:	eef46a67 	vcmp.f32	s13, s15
  104550:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104554:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  104558:	0a000009 	beq	104584 <arm_float_to_q28+0x78>
  10455c:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104560:	eef56ac0 	vcmpe.f32	s13, #0.0
  104564:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104568:	def02b60 	vmovle.f64	d18, d16
  10456c:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
  104570:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104574:	eef83be6 	vcvt.f64.s32	d19, s13
  104578:	ee732ba2 	vadd.f64	d18, d19, d18
  10457c:	eefd6be2 	vcvt.s32.f64	s13, d18
  104580:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
  104584:	ed5c6a0b 	vldr	s13, [ip, #-44]	; 0xffffffd4
  104588:	e5034030 	str	r4, [r3, #-48]	; 0xffffffd0
  10458c:	eef46a67 	vcmp.f32	s13, s15
  104590:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104594:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  104598:	0a000009 	beq	1045c4 <arm_float_to_q28+0xb8>
  10459c:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1045a0:	eef56ac0 	vcmpe.f32	s13, #0.0
  1045a4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1045a8:	def02b60 	vmovle.f64	d18, d16
  1045ac:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
  1045b0:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1045b4:	eef83be6 	vcvt.f64.s32	d19, s13
  1045b8:	ee732ba2 	vadd.f64	d18, d19, d18
  1045bc:	eefd6be2 	vcvt.s32.f64	s13, d18
  1045c0:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
  1045c4:	ed5c6a0a 	vldr	s13, [ip, #-40]	; 0xffffffd8
  1045c8:	e503402c 	str	r4, [r3, #-44]	; 0xffffffd4
  1045cc:	eef46a67 	vcmp.f32	s13, s15
  1045d0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1045d4:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  1045d8:	0a000009 	beq	104604 <arm_float_to_q28+0xf8>
  1045dc:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1045e0:	eef56ac0 	vcmpe.f32	s13, #0.0
  1045e4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1045e8:	def02b60 	vmovle.f64	d18, d16
  1045ec:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
  1045f0:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1045f4:	eef83be6 	vcvt.f64.s32	d19, s13
  1045f8:	ee732ba2 	vadd.f64	d18, d19, d18
  1045fc:	eefd6be2 	vcvt.s32.f64	s13, d18
  104600:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
  104604:	ed5c6a09 	vldr	s13, [ip, #-36]	; 0xffffffdc
  104608:	e5034028 	str	r4, [r3, #-40]	; 0xffffffd8
  10460c:	eef46a67 	vcmp.f32	s13, s15
  104610:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104614:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  104618:	0a000009 	beq	104644 <arm_float_to_q28+0x138>
  10461c:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104620:	eef56ac0 	vcmpe.f32	s13, #0.0
  104624:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104628:	def02b60 	vmovle.f64	d18, d16
  10462c:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
  104630:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104634:	eef83be6 	vcvt.f64.s32	d19, s13
  104638:	ee732ba2 	vadd.f64	d18, d19, d18
  10463c:	eefd6be2 	vcvt.s32.f64	s13, d18
  104640:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
  104644:	ed5c6a08 	vldr	s13, [ip, #-32]	; 0xffffffe0
  104648:	e5034024 	str	r4, [r3, #-36]	; 0xffffffdc
  10464c:	eef46a67 	vcmp.f32	s13, s15
  104650:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104654:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  104658:	0a000009 	beq	104684 <arm_float_to_q28+0x178>
  10465c:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104660:	eef56ac0 	vcmpe.f32	s13, #0.0
  104664:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104668:	def02b60 	vmovle.f64	d18, d16
  10466c:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
  104670:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104674:	eef83be6 	vcvt.f64.s32	d19, s13
  104678:	ee732ba2 	vadd.f64	d18, d19, d18
  10467c:	eefd6be2 	vcvt.s32.f64	s13, d18
  104680:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
  104684:	ed5c6a07 	vldr	s13, [ip, #-28]	; 0xffffffe4
  104688:	e5034020 	str	r4, [r3, #-32]	; 0xffffffe0
  10468c:	eef46a67 	vcmp.f32	s13, s15
  104690:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104694:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  104698:	0a000009 	beq	1046c4 <arm_float_to_q28+0x1b8>
  10469c:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1046a0:	eef56ac0 	vcmpe.f32	s13, #0.0
  1046a4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1046a8:	def02b60 	vmovle.f64	d18, d16
  1046ac:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
  1046b0:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1046b4:	eef83be6 	vcvt.f64.s32	d19, s13
  1046b8:	ee732ba2 	vadd.f64	d18, d19, d18
  1046bc:	eefd6be2 	vcvt.s32.f64	s13, d18
  1046c0:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
  1046c4:	ed5c6a06 	vldr	s13, [ip, #-24]	; 0xffffffe8
  1046c8:	e503401c 	str	r4, [r3, #-28]	; 0xffffffe4
  1046cc:	eef46a67 	vcmp.f32	s13, s15
  1046d0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1046d4:	03e04102 	mvneq	r4, #-2147483648	; 0x80000000
  1046d8:	0a000009 	beq	104704 <arm_float_to_q28+0x1f8>
  1046dc:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1046e0:	eef56ac0 	vcmpe.f32	s13, #0.0
  1046e4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1046e8:	def02b60 	vmovle.f64	d18, d16
  1046ec:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
  1046f0:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1046f4:	eef83be6 	vcvt.f64.s32	d19, s13
  1046f8:	ee732ba2 	vadd.f64	d18, d19, d18
  1046fc:	eefd6be2 	vcvt.s32.f64	s13, d18
  104700:	ee164a90 	vmov	r4, s13
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
  104704:	ed5c6a05 	vldr	s13, [ip, #-20]	; 0xffffffec
  104708:	e5034018 	str	r4, [r3, #-24]	; 0xffffffe8
  10470c:	eef46a67 	vcmp.f32	s13, s15
  104710:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104714:	03e06102 	mvneq	r6, #-2147483648	; 0x80000000
  104718:	0a000009 	beq	104744 <arm_float_to_q28+0x238>
  10471c:	ee266a87 	vmul.f32	s12, s13, s14

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104720:	eef56ac0 	vcmpe.f32	s13, #0.0
  104724:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  104728:	def02b60 	vmovle.f64	d18, d16
  10472c:	cef02b61 	vmovgt.f64	d18, d17
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
  104730:	eefd6ac6 	vcvt.s32.f32	s13, s12

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104734:	eef83be6 	vcvt.f64.s32	d19, s13
  104738:	ee732ba2 	vadd.f64	d18, d19, d18
  10473c:	eefd6be2 	vcvt.s32.f64	s13, d18
  104740:	ee166a90 	vmov	r6, s13
  104744:	e2857009 	add	r7, r5, #9
void arm_float_to_q28 (float *pIn, q31_t * pOut, 
                       uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  104748:	e2854008 	add	r4, r5, #8
  10474c:	e1580007 	cmp	r8, r7
  104750:	e5036014 	str	r6, [r3, #-20]	; 0xffffffec
  104754:	e28cc020 	add	ip, ip, #32
  104758:	e2833020 	add	r3, r3, #32
  10475c:	e1a05004 	mov	r5, r4
  104760:	8affff76 	bhi	104540 <arm_float_to_q28+0x34>
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q28 (float *pIn, q31_t * pOut, 
  104764:	e2443001 	sub	r3, r4, #1
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
  104768:	ed9f6a1e 	vldr	s12, [pc, #120]	; 1047e8 <arm_float_to_q28+0x2dc>
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q28 (float *pIn, q31_t * pOut, 
  10476c:	e1a03103 	lsl	r3, r3, #2
  104770:	eef26a00 	vmov.f32	s13, #32
  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104774:	eef63b00 	vmov.f64	d19, #96	; 0x60
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q28 (float *pIn, q31_t * pOut, 
  104778:	e0800003 	add	r0, r0, r3
  10477c:	e0811003 	add	r1, r1, r3
  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  104780:	eefe2b00 	vmov.f64	d18, #224	; 0xe0
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
  104784:	e2800004 	add	r0, r0, #4
  104788:	edd07a00 	vldr	s15, [r0]
  10478c:	e3e03102 	mvn	r3, #-2147483648	; 0x80000000
  104790:	e2811004 	add	r1, r1, #4
  104794:	ee277a86 	vmul.f32	s14, s15, s12
  104798:	eef47a66 	vcmp.f32	s15, s13
  10479c:	eef1fa10 	vmrs	APSR_nzcv, fpscr

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1047a0:	eef57ac0 	vcmpe.f32	s15, #0.0
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
	/* 268435456.0f corresponds to pow(2, 28) */
      pOut[i] = (q31_t) (pIn[i] * 268435456.0f);
  1047a4:	eebd7ac7 	vcvt.s32.f32	s14, s14
  1047a8:	0a000006 	beq	1047c8 <arm_float_to_q28+0x2bc>

      pOut[i] += pIn[i] > 0 ? 0.5 : -0.5;
  1047ac:	eef80bc7 	vcvt.f64.s32	d16, s14
  1047b0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1047b4:	def01b62 	vmovle.f64	d17, d18
  1047b8:	cef01b63 	vmovgt.f64	d17, d19
  1047bc:	ee700ba1 	vadd.f64	d16, d16, d17
  1047c0:	eefd7be0 	vcvt.s32.f64	s15, d16
  1047c4:	ee173a90 	vmov	r3, s15
void arm_float_to_q28 (float *pIn, q31_t * pOut, 
                       uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  1047c8:	e2844001 	add	r4, r4, #1
  1047cc:	e5813000 	str	r3, [r1]
  1047d0:	e1520004 	cmp	r2, r4
  1047d4:	8affffea 	bhi	104784 <arm_float_to_q28+0x278>
      if (pIn[i] == (float) 8.0)
        {
          pOut[i] = 0x7FFFFFFF;
        }
    }
}
  1047d8:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
  1047dc:	e12fff1e 	bx	lr
 * @param  uint32_t 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_float_to_q28 (float *pIn, q31_t * pOut, 
  1047e0:	e3a04000 	mov	r4, #0
  1047e4:	eaffffde 	b	104764 <arm_float_to_q28+0x258>
  1047e8:	4d800000 	.word	0x4d800000

001047ec <arm_clip_f32>:

void arm_clip_f32 (float *pIn, uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  1047ec:	e3510000 	cmp	r1, #0
  1047f0:	012fff1e 	bxeq	lr
    {
      if(pIn[i] > 1.0f)
  1047f4:	eeb77a00 	vmov.f32	s14, #112	; 0x70
 * @param  numSamples 	number of samples in the buffer
 * @return none
 * The function converts floating point values to fixed point values 
 */

void arm_clip_f32 (float *pIn, uint32_t numSamples)
  1047f8:	e0803101 	add	r3, r0, r1, lsl #2
    {
      if(pIn[i] > 1.0f)
	  {
	    pIn[i] = 1.0;
	  }
	  else if( pIn[i] < -1.0f)
  1047fc:	eeff6a00 	vmov.f32	s13, #240	; 0xf0
  104800:	ea000001 	b	10480c <arm_clip_f32+0x20>

void arm_clip_f32 (float *pIn, uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  104804:	e1500003 	cmp	r0, r3
  104808:	0a000009 	beq	104834 <arm_clip_f32+0x48>
    {
      if(pIn[i] > 1.0f)
  10480c:	ecf07a01 	vldmia	r0!, {s15}
  104810:	eef47ac7 	vcmpe.f32	s15, s14
  104814:	eef1fa10 	vmrs	APSR_nzcv, fpscr
	  {
	    pIn[i] = 1.0;
  104818:	cd007a01 	vstrgt	s14, [r0, #-4]
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
    {
      if(pIn[i] > 1.0f)
  10481c:	cafffff8 	bgt	104804 <arm_clip_f32+0x18>
	  {
	    pIn[i] = 1.0;
	  }
	  else if( pIn[i] < -1.0f)
  104820:	eef47ae6 	vcmpe.f32	s15, s13
  104824:	eef1fa10 	vmrs	APSR_nzcv, fpscr
	  {
	    pIn[i] = -1.0;
  104828:	4d406a01 	vstrmi	s13, [r0, #-4]

void arm_clip_f32 (float *pIn, uint32_t numSamples)
{
  uint32_t i;

  for (i = 0; i < numSamples; i++)
  10482c:	e1500003 	cmp	r0, r3
  104830:	1afffff5 	bne	10480c <arm_clip_f32+0x20>
  104834:	e12fff1e 	bx	lr

00104838 <enable_caches>:
 #define UART_BAUD 9600
#endif

void
enable_caches()
{
  104838:	e12fff1e 	bx	lr

0010483c <disable_caches>:
#endif
}

void
disable_caches()
{
  10483c:	e92d4008 	push	{r3, lr}
    Xil_DCacheDisable();
  104840:	eb000248 	bl	105168 <Xil_DCacheDisable>
    Xil_ICacheDisable();
}
  104844:	e8bd4008 	pop	{r3, lr}

void
disable_caches()
{
    Xil_DCacheDisable();
    Xil_ICacheDisable();
  104848:	ea00023d 	b	105144 <Xil_ICacheDisable>

0010484c <init_uart>:
}

void
init_uart()
{
  10484c:	e12fff1e 	bx	lr

00104850 <init_platform>:
#endif
}

void
init_platform()
{
  104850:	e12fff1e 	bx	lr

00104854 <cleanup_platform>:
    init_uart();
}

void
cleanup_platform()
{
  104854:	e92d4008 	push	{r3, lr}
}

void
disable_caches()
{
    Xil_DCacheDisable();
  104858:	eb000242 	bl	105168 <Xil_DCacheDisable>

void
cleanup_platform()
{
    disable_caches();
}
  10485c:	e8bd4008 	pop	{r3, lr}

void
disable_caches()
{
    Xil_DCacheDisable();
    Xil_ICacheDisable();
  104860:	ea000237 	b	105144 <Xil_ICacheDisable>

00104864 <nanosleep>:
* @return	None
*
* @note		None.
*
****************************************************************************/
void nanosleep(unsigned int nanoseconds){
  104864:	e12fff1e 	bx	lr

00104868 <usleep>:
*
* @note		None.
*
****************************************************************************/
int usleep(unsigned int useconds)
{
  104868:	e92d4070 	push	{r4, r5, r6, lr}
  10486c:	e24dd008 	sub	sp, sp, #8
  104870:	e1a06000 	mov	r6, r0
	XTime tEnd, tCur;

	XTime_GetTime(&tCur);
  104874:	e1a0000d 	mov	r0, sp
  104878:	eb0004b4 	bl	105b50 <XTime_GetTime>
	tEnd = tCur + ((XTime) useconds) * COUNTS_PER_USECOND;
  10487c:	e1cd40d0 	ldrd	r4, [sp]
  104880:	e300314d 	movw	r3, #333	; 0x14d
  104884:	e0a54693 	umlal	r4, r5, r3, r6
	do
	{
		XTime_GetTime(&tCur);
  104888:	e1a0000d 	mov	r0, sp
  10488c:	eb0004af 	bl	105b50 <XTime_GetTime>
	} while (tCur < tEnd);
  104890:	e1cd20d0 	ldrd	r2, [sp]
  104894:	e1530005 	cmp	r3, r5
  104898:	01520004 	cmpeq	r2, r4
  10489c:	3afffff9 	bcc	104888 <usleep+0x20>

	return 0;
}
  1048a0:	e3a00000 	mov	r0, #0
  1048a4:	e28dd008 	add	sp, sp, #8
  1048a8:	e8bd8070 	pop	{r4, r5, r6, pc}

001048ac <FIQInterrupt>:
*
* @note		None.
*
******************************************************************************/
void FIQInterrupt(void)
{
  1048ac:	e92d4008 	push	{r3, lr}
	XExc_VectorTable[XIL_EXCEPTION_ID_FIQ_INT].Handler(XExc_VectorTable[
  1048b0:	e3083094 	movw	r3, #32916	; 0x8094
  1048b4:	e3403012 	movt	r3, #18
  1048b8:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  1048bc:	e5930034 	ldr	r0, [r3, #52]	; 0x34
  1048c0:	e12fff32 	blx	r2
  1048c4:	e8bd8008 	pop	{r3, pc}

001048c8 <IRQInterrupt>:
*
* @note		None.
*
******************************************************************************/
void IRQInterrupt(void)
{
  1048c8:	e92d4008 	push	{r3, lr}
	XExc_VectorTable[XIL_EXCEPTION_ID_IRQ_INT].Handler(XExc_VectorTable[
  1048cc:	e3083094 	movw	r3, #32916	; 0x8094
  1048d0:	e3403012 	movt	r3, #18
  1048d4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1048d8:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
  1048dc:	e12fff32 	blx	r2
  1048e0:	e8bd8008 	pop	{r3, pc}

001048e4 <SWInterrupt>:
*
* @note		None.
*
******************************************************************************/
void SWInterrupt(void)
{
  1048e4:	e92d4008 	push	{r3, lr}
	XExc_VectorTable[XIL_EXCEPTION_ID_SWI_INT].Handler(XExc_VectorTable[
  1048e8:	e3083094 	movw	r3, #32916	; 0x8094
  1048ec:	e3403012 	movt	r3, #18
  1048f0:	e5932010 	ldr	r2, [r3, #16]
  1048f4:	e5930014 	ldr	r0, [r3, #20]
  1048f8:	e12fff32 	blx	r2
  1048fc:	e8bd8008 	pop	{r3, pc}

00104900 <DataAbortInterrupt>:
*
* @note		None.
*
******************************************************************************/
void DataAbortInterrupt(void)
{
  104900:	e92d4008 	push	{r3, lr}
	XExc_VectorTable[XIL_EXCEPTION_ID_DATA_ABORT_INT].Handler(
  104904:	e3083094 	movw	r3, #32916	; 0x8094
  104908:	e3403012 	movt	r3, #18
  10490c:	e5932020 	ldr	r2, [r3, #32]
  104910:	e5930024 	ldr	r0, [r3, #36]	; 0x24
  104914:	e12fff32 	blx	r2
  104918:	e8bd8008 	pop	{r3, pc}

0010491c <PrefetchAbortInterrupt>:
*
* @note		None.
*
******************************************************************************/
void PrefetchAbortInterrupt(void)
{
  10491c:	e92d4008 	push	{r3, lr}
	XExc_VectorTable[XIL_EXCEPTION_ID_PREFETCH_ABORT_INT].Handler(
  104920:	e3083094 	movw	r3, #32916	; 0x8094
  104924:	e3403012 	movt	r3, #18
  104928:	e5932018 	ldr	r2, [r3, #24]
  10492c:	e593001c 	ldr	r0, [r3, #28]
  104930:	e12fff32 	blx	r2
  104934:	e8bd8008 	pop	{r3, pc}
  104938:	00128014 	.word	0x00128014
  10493c:	00128014 	.word	0x00128014
  104940:	00128018 	.word	0x00128018
  104944:	001280d0 	.word	0x001280d0
  104948:	0012c0d0 	.word	0x0012c0d0

0010494c <_start>:
	.long	__stack

    
	.globl	_start
_start:
	bl      __cpu_init		/* Initialize the CPU first (BSP provides this) */
  10494c:	eb000493 	bl	105ba0 <__cpu_init>

	mov	r0, #0
  104950:	e3a00000 	mov	r0, #0
	
	/* clear sbss */
	ldr 	r1,.Lsbss_start		/* calculate beginning of the SBSS */
  104954:	e51f1024 	ldr	r1, [pc, #-36]	; 104938 <PrefetchAbortInterrupt+0x1c>
	ldr	r2,.Lsbss_end		/* calculate end of the SBSS */
  104958:	e51f2024 	ldr	r2, [pc, #-36]	; 10493c <PrefetchAbortInterrupt+0x20>

.Lloop_sbss:
	cmp	r1,r2
  10495c:	e1510002 	cmp	r1, r2
	bge	.Lenclsbss		/* If no SBSS, no clearing required */
  104960:	aa000001 	bge	10496c <_start+0x20>
	str	r0, [r1], #4
  104964:	e4810004 	str	r0, [r1], #4
	b	.Lloop_sbss
  104968:	eafffffb 	b	10495c <_start+0x10>

.Lenclsbss:  
	/* clear bss */
	ldr	r1,.Lbss_start		/* calculate beginning of the BSS */
  10496c:	e51f1034 	ldr	r1, [pc, #-52]	; 104940 <PrefetchAbortInterrupt+0x24>
	ldr	r2,.Lbss_end		/* calculate end of the BSS */
  104970:	e51f2034 	ldr	r2, [pc, #-52]	; 104944 <PrefetchAbortInterrupt+0x28>

.Lloop_bss:	
	cmp	r1,r2
  104974:	e1510002 	cmp	r1, r2
	bge	.Lenclbss		/* If no BSS, no clearing required */
  104978:	aa000001 	bge	104984 <_start+0x38>
	str	r0, [r1], #4
  10497c:	e4810004 	str	r0, [r1], #4
	b	.Lloop_bss
  104980:	eafffffb 	b	104974 <_start+0x28>

.Lenclbss:

	/* set stack pointer */
	ldr	r13,.Lstack		/* stack address */
  104984:	e51fd044 	ldr	sp, [pc, #-68]	; 104948 <PrefetchAbortInterrupt+0x2c>

    /* Reset and start Global Timer */
	mov	r0, #0x0
  104988:	e3a00000 	mov	r0, #0
	mov	r1, #0x0
  10498c:	e3a01000 	mov	r1, #0
    bl XTime_SetTime
  104990:	eb00045a 	bl	105b00 <XTime_SetTime>
	/* Setup profiling stuff */
	bl	_profile_init
#endif /* PROFILING */

   /* run global constructors */ 
   bl __libc_init_array 
  104994:	eb0007bb 	bl	106888 <__libc_init_array>

	/* make sure argc and argv are valid */
	mov	r0, #0
  104998:	e3a00000 	mov	r0, #0
	mov	r1, #0
  10499c:	e3a01000 	mov	r1, #0

	/* Let her rip */
	bl	main
  1049a0:	eb002c2d 	bl	10fa5c <main>

   /* Cleanup global constructors */ 
   bl __libc_fini_array 
  1049a4:	eb0007a8 	bl	10684c <__libc_fini_array>
	/* Cleanup profiling stuff */
	bl	_profile_clean
#endif /* PROFILING */

        /* All done */
	bl	exit
  1049a8:	eb00079a 	bl	106818 <exit>

.Lexit:	/* should never get here */
	b .Lexit
  1049ac:	eafffffe 	b	1049ac <_start+0x60>

001049b0 <Xil_DCacheInvalidateRange>:
	const unsigned cacheline = 32;
	unsigned int end;
	volatile u32 *L2CCOffset = (volatile u32 *) (XPS_L2CC_BASEADDR +
				    XPS_L2CC_CACHE_INVLD_PA_OFFSET);

	if (len != 0) {
  1049b0:	e3510000 	cmp	r1, #0
*
* @note		None.
*
****************************************************************************/
void Xil_DCacheInvalidateRange(unsigned int adr, unsigned len)
{
  1049b4:	e92d4070 	push	{r4, r5, r6, lr}
	const unsigned cacheline = 32;
	unsigned int end;
	volatile u32 *L2CCOffset = (volatile u32 *) (XPS_L2CC_BASEADDR +
				    XPS_L2CC_CACHE_INVLD_PA_OFFSET);

	if (len != 0) {
  1049b8:	0a00001a 	beq	104a28 <Xil_DCacheInvalidateRange+0x78>
		/* Back the starting address up to the start of a cache line
		 * perform cache operations until adr+len
		 */
		end = adr + len;
  1049bc:	e0815000 	add	r5, r1, r0
		adr = adr & ~(cacheline - 1);
  1049c0:	e3c0401f 	bic	r4, r0, #31

		/* Select L1 Data cache in CSSR */
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
  1049c4:	e3a03000 	mov	r3, #0
  1049c8:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}

		while (adr < end) {
  1049cc:	e1550004 	cmp	r5, r4
  1049d0:	9a000014 	bls	104a28 <Xil_DCacheInvalidateRange+0x78>
			/* Invalidate L2 cache line */
			*L2CCOffset = adr;
  1049d4:	e3a06a02 	mov	r6, #8192	; 0x2000
  1049d8:	e34f68f0 	movt	r6, #63728	; 0xf8f0
  1049dc:	e5864770 	str	r4, [r6, #1904]	; 0x770
static inline void Xil_L2CacheSync(void)
{
	register unsigned int L2CCReg;

	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  1049e0:	e3020730 	movw	r0, #10032	; 0x2730
  1049e4:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  1049e8:	eb000273 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  1049ec:	e2501000 	subs	r1, r0, #0
  1049f0:	1afffffa 	bne	1049e0 <Xil_DCacheInvalidateRange+0x30>

#ifdef CONFIG_PL310_ERRATA_753970
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DUMMY_CACHE_SYNC_OFFSET, 0x0);
  1049f4:	e3a00d9d 	mov	r0, #10048	; 0x2740
  1049f8:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  1049fc:	eb000274 	bl	1053d4 <Xil_Out32>
#else
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_SYNC_OFFSET, 0x0);
#endif	
	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  104a00:	e3020730 	movw	r0, #10032	; 0x2730
  104a04:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104a08:	eb00026b 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  104a0c:	e3500000 	cmp	r0, #0
  104a10:	1afffffa 	bne	104a00 <Xil_DCacheInvalidateRange+0x50>

		while (adr < end) {
			/* Invalidate L2 cache line */
			*L2CCOffset = adr;
			Xil_L2CacheSync();
			dsb();
  104a14:	f57ff04f 	dsb	sy
#ifdef __GNUC__
			/* Invalidate L1 Data cache line */
			__asm__ __volatile__("mcr " \
  104a18:	ee074f36 	mcr	15, 0, r4, cr7, cr6, {1}
#else
			{ volatile register unsigned int Reg
				__asm(XREG_CP15_INVAL_DC_LINE_MVA_POC);
			  Reg = adr; }
#endif
			adr += cacheline;
  104a1c:	e2844020 	add	r4, r4, #32
		adr = adr & ~(cacheline - 1);

		/* Select L1 Data cache in CSSR */
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);

		while (adr < end) {
  104a20:	e1550004 	cmp	r5, r4
  104a24:	8affffec 	bhi	1049dc <Xil_DCacheInvalidateRange+0x2c>
#endif
			adr += cacheline;
		}
	}
	/* Wait for L1 and L2 invalidate to complete */
	dsb();
  104a28:	f57ff04f 	dsb	sy
  104a2c:	e8bd8070 	pop	{r4, r5, r6, pc}

00104a30 <Xil_DCacheFlushRange>:
	const unsigned cacheline = 32;
	unsigned int end;
	volatile u32 *L2CCOffset = (volatile u32 *) (XPS_L2CC_BASEADDR +
				    XPS_L2CC_CACHE_INV_CLN_PA_OFFSET);

	if (len != 0) {
  104a30:	e3510000 	cmp	r1, #0
*
* @note		None.
*
****************************************************************************/
void Xil_DCacheFlushRange(unsigned int adr, unsigned len)
{
  104a34:	e92d4070 	push	{r4, r5, r6, lr}
	const unsigned cacheline = 32;
	unsigned int end;
	volatile u32 *L2CCOffset = (volatile u32 *) (XPS_L2CC_BASEADDR +
				    XPS_L2CC_CACHE_INV_CLN_PA_OFFSET);

	if (len != 0) {
  104a38:	0a00001a 	beq	104aa8 <Xil_DCacheFlushRange+0x78>
		/* Back the starting address up to the start of a cache line
		 * perform cache operations until adr+len
		 */
		end = adr + len;
  104a3c:	e0815000 	add	r5, r1, r0
		adr = adr & ~(cacheline - 1);
  104a40:	e3c0401f 	bic	r4, r0, #31

		/* Select cache L0 Data cache in CSSR */
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
  104a44:	e3a03000 	mov	r3, #0
  104a48:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}

		while (adr < end) {
  104a4c:	e1550004 	cmp	r5, r4
  104a50:	9a000014 	bls	104aa8 <Xil_DCacheFlushRange+0x78>
			{ volatile register unsigned int Reg
				__asm(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC);
			  Reg = adr; }
#endif
			/* Flush L2 cache line */
			*L2CCOffset = adr;
  104a54:	e3a06a02 	mov	r6, #8192	; 0x2000
  104a58:	e34f68f0 	movt	r6, #63728	; 0xf8f0
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);

		while (adr < end) {
#ifdef __GNUC__
			/* Flush L1 Data cache line */
			__asm__ __volatile__("mcr " \
  104a5c:	ee074f3e 	mcr	15, 0, r4, cr7, cr14, {1}
			{ volatile register unsigned int Reg
				__asm(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC);
			  Reg = adr; }
#endif
			/* Flush L2 cache line */
			*L2CCOffset = adr;
  104a60:	e58647f0 	str	r4, [r6, #2032]	; 0x7f0
static inline void Xil_L2CacheSync(void)
{
	register unsigned int L2CCReg;

	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  104a64:	e3020730 	movw	r0, #10032	; 0x2730
  104a68:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104a6c:	eb000252 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  104a70:	e2501000 	subs	r1, r0, #0
  104a74:	1afffffa 	bne	104a64 <Xil_DCacheFlushRange+0x34>

#ifdef CONFIG_PL310_ERRATA_753970
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DUMMY_CACHE_SYNC_OFFSET, 0x0);
  104a78:	e3a00d9d 	mov	r0, #10048	; 0x2740
  104a7c:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104a80:	eb000253 	bl	1053d4 <Xil_Out32>
#else
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_SYNC_OFFSET, 0x0);
#endif	
	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  104a84:	e3020730 	movw	r0, #10032	; 0x2730
  104a88:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104a8c:	eb00024a 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  104a90:	e3500000 	cmp	r0, #0
  104a94:	1afffffa 	bne	104a84 <Xil_DCacheFlushRange+0x54>
			  Reg = adr; }
#endif
			/* Flush L2 cache line */
			*L2CCOffset = adr;
			Xil_L2CacheSync();
			dsb();
  104a98:	f57ff04f 	dsb	sy
			adr += cacheline;
  104a9c:	e2844020 	add	r4, r4, #32
		adr = adr & ~(cacheline - 1);

		/* Select cache L0 Data cache in CSSR */
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);

		while (adr < end) {
  104aa0:	e1550004 	cmp	r5, r4
  104aa4:	8affffec 	bhi	104a5c <Xil_DCacheFlushRange+0x2c>
			adr += cacheline;
		}
	}

	/* Wait for L1 and L2 flush to complete */
	dsb();
  104aa8:	f57ff04f 	dsb	sy
  104aac:	e8bd8070 	pop	{r4, r5, r6, pc}

00104ab0 <Xil_ICacheInvalidateRange>:
	const unsigned cacheline = 32;
	unsigned int end;
	volatile u32 *L2CCOffset = (volatile u32 *) (XPS_L2CC_BASEADDR +
				    XPS_L2CC_CACHE_INVLD_PA_OFFSET);

	if (len != 0) {
  104ab0:	e3510000 	cmp	r1, #0
*
* @note		None.
*
****************************************************************************/
void Xil_ICacheInvalidateRange(unsigned int adr, unsigned len)
{
  104ab4:	e92d4070 	push	{r4, r5, r6, lr}
	const unsigned cacheline = 32;
	unsigned int end;
	volatile u32 *L2CCOffset = (volatile u32 *) (XPS_L2CC_BASEADDR +
				    XPS_L2CC_CACHE_INVLD_PA_OFFSET);

	if (len != 0) {
  104ab8:	0a00001a 	beq	104b28 <Xil_ICacheInvalidateRange+0x78>
		/* Back the starting address up to the start of a cache line
		 * perform cache operations until adr+len
		 */
		end = adr + len;
  104abc:	e0815000 	add	r5, r1, r0
		adr = adr & ~(cacheline - 1);
  104ac0:	e3c0401f 	bic	r4, r0, #31

		/* Select cache L0 I-cache in CSSR */
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1);
  104ac4:	e3a03001 	mov	r3, #1
  104ac8:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}

		while (adr < end) {
  104acc:	e1550004 	cmp	r5, r4
  104ad0:	9a000014 	bls	104b28 <Xil_ICacheInvalidateRange+0x78>
		/* Invalidate L2 cache line */
		*L2CCOffset = adr;
  104ad4:	e3a06a02 	mov	r6, #8192	; 0x2000
  104ad8:	e34f68f0 	movt	r6, #63728	; 0xf8f0
  104adc:	e5864770 	str	r4, [r6, #1904]	; 0x770
static inline void Xil_L2CacheSync(void)
{
	register unsigned int L2CCReg;

	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  104ae0:	e3020730 	movw	r0, #10032	; 0x2730
  104ae4:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104ae8:	eb000233 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  104aec:	e2501000 	subs	r1, r0, #0
  104af0:	1afffffa 	bne	104ae0 <Xil_ICacheInvalidateRange+0x30>

#ifdef CONFIG_PL310_ERRATA_753970
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DUMMY_CACHE_SYNC_OFFSET, 0x0);
  104af4:	e3a00d9d 	mov	r0, #10048	; 0x2740
  104af8:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104afc:	eb000234 	bl	1053d4 <Xil_Out32>
#else
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_SYNC_OFFSET, 0x0);
#endif	
	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  104b00:	e3020730 	movw	r0, #10032	; 0x2730
  104b04:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104b08:	eb00022b 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  104b0c:	e3500000 	cmp	r0, #0
  104b10:	1afffffa 	bne	104b00 <Xil_ICacheInvalidateRange+0x50>

		while (adr < end) {
		/* Invalidate L2 cache line */
		*L2CCOffset = adr;
		Xil_L2CacheSync();
		dsb();
  104b14:	f57ff04f 	dsb	sy
#ifdef __GNUC__
			/* Invalidate L1 I-cache line */
			__asm__ __volatile__("mcr " \
  104b18:	ee074f35 	mcr	15, 0, r4, cr7, cr5, {1}
			{ volatile register unsigned int Reg
				__asm(XREG_CP15_INVAL_IC_LINE_MVA_POU);
			  Reg = adr; }
#endif

			adr += cacheline;
  104b1c:	e2844020 	add	r4, r4, #32
		adr = adr & ~(cacheline - 1);

		/* Select cache L0 I-cache in CSSR */
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1);

		while (adr < end) {
  104b20:	e1550004 	cmp	r5, r4
  104b24:	8affffec 	bhi	104adc <Xil_ICacheInvalidateRange+0x2c>
			adr += cacheline;
		}
	}

	/* Wait for L1 and L2 invalidate to complete */
	dsb();
  104b28:	f57ff04f 	dsb	sy
  104b2c:	e8bd8070 	pop	{r4, r5, r6, pc}

00104b30 <Xil_L1DCacheInvalidate>:
*		the whole D-cache. This function invalidates each line by
*		set/way.
*
****************************************************************************/
void Xil_L1DCacheInvalidate(void)
{
  104b30:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	register unsigned int CsidReg, C7Reg;
	unsigned int CacheSize, LineSize, NumWays;
	unsigned int Way, WayIndex, Set, SetIndex, NumSet;

	/* Select cache level 0 and D cache in CSSR */
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
  104b34:	e3a03000 	mov	r3, #0
  104b38:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	isb();
  104b3c:	f57ff06f 	isb	sy
#ifdef __GNUC__
	CsidReg = mfcp(XREG_CP15_CACHE_SIZE_ID);
  104b40:	ee304f10 	mrc	15, 1, r4, cr0, cr0, {0}
#else
	{ volatile register unsigned int Reg __asm(XREG_CP15_CACHE_SIZE_ID);
	  CsidReg = Reg; }
#endif
	/* Determine Cache Size */
	CacheSize = (CsidReg >> 13) & 0x1FF;
  104b44:	e7e806d4 	ubfx	r0, r4, #13, #9
	CacheSize +=1;
	CacheSize *=128;    /* to get number of bytes */

	/* Number of Ways */
	NumWays = (CsidReg & 0x3ff) >> 3;
  104b48:	e7e681d4 	ubfx	r8, r4, #3, #7
	{ volatile register unsigned int Reg __asm(XREG_CP15_CACHE_SIZE_ID);
	  CsidReg = Reg; }
#endif
	/* Determine Cache Size */
	CacheSize = (CsidReg >> 13) & 0x1FF;
	CacheSize +=1;
  104b4c:	e2800001 	add	r0, r0, #1
	CacheSize *=128;    /* to get number of bytes */

	/* Number of Ways */
	NumWays = (CsidReg & 0x3ff) >> 3;
	NumWays += 1;
  104b50:	e2888001 	add	r8, r8, #1
  104b54:	e3a05001 	mov	r5, #1

	Way = 0UL;
	Set = 0UL;

	/* Invalidate all the cachelines */
	for (WayIndex =0; WayIndex < NumWays; WayIndex++) {
  104b58:	e3a06000 	mov	r6, #0
	NumWays += 1;

	/* Get the cacheline size, way size, index size from csidr */
	LineSize = (CsidReg & 0x07) + 4;

	NumSet = CacheSize/NumWays;
  104b5c:	e1a01008 	mov	r1, r8
  104b60:	e1a00380 	lsl	r0, r0, #7
  104b64:	eb000438 	bl	105c4c <__aeabi_uidiv>
	/* Number of Ways */
	NumWays = (CsidReg & 0x3ff) >> 3;
	NumWays += 1;

	/* Get the cacheline size, way size, index size from csidr */
	LineSize = (CsidReg & 0x07) + 4;
  104b68:	e2043007 	and	r3, r4, #7
  104b6c:	e2833004 	add	r3, r3, #4

	NumSet = CacheSize/NumWays;
	NumSet /= (1 << LineSize);

	Way = 0UL;
	Set = 0UL;
  104b70:	e1a07006 	mov	r7, r6
  104b74:	e1a05315 	lsl	r5, r5, r3

	/* Get the cacheline size, way size, index size from csidr */
	LineSize = (CsidReg & 0x07) + 4;

	NumSet = CacheSize/NumWays;
	NumSet /= (1 << LineSize);
  104b78:	e1a00330 	lsr	r0, r0, r3
* @note		In Cortex A9, there is no cp instruction for invalidating
*		the whole D-cache. This function invalidates each line by
*		set/way.
*
****************************************************************************/
void Xil_L1DCacheInvalidate(void)
  104b7c:	e2401001 	sub	r1, r0, #1
  104b80:	e0215195 	mla	r1, r5, r1, r5
	Way = 0UL;
	Set = 0UL;

	/* Invalidate all the cachelines */
	for (WayIndex =0; WayIndex < NumWays; WayIndex++) {
		for (SetIndex =0; SetIndex < NumSet; SetIndex++) {
  104b84:	e3500000 	cmp	r0, #0
  104b88:	e1a04f06 	lsl	r4, r6, #30
  104b8c:	11a02007 	movne	r2, r7
  104b90:	13a03000 	movne	r3, #0
  104b94:	0a000006 	beq	104bb4 <Xil_L1DCacheInvalidate+0x84>
			C7Reg = Way | Set;
  104b98:	e182c004 	orr	ip, r2, r4
#ifdef __GNUC__
			/* Invalidate by Set/Way */
			__asm__ __volatile__("mcr " \
  104b9c:	ee07cf56 	mcr	15, 0, ip, cr7, cr6, {2}
	Way = 0UL;
	Set = 0UL;

	/* Invalidate all the cachelines */
	for (WayIndex =0; WayIndex < NumWays; WayIndex++) {
		for (SetIndex =0; SetIndex < NumSet; SetIndex++) {
  104ba0:	e2833001 	add	r3, r3, #1
			//mtcp(XREG_CP15_INVAL_DC_LINE_SW, C7Reg);
			{ volatile register unsigned int Reg
				__asm(XREG_CP15_INVAL_DC_LINE_SW);
			  Reg = C7Reg; }
#endif
			Set += (1 << LineSize);
  104ba4:	e0822005 	add	r2, r2, r5
	Way = 0UL;
	Set = 0UL;

	/* Invalidate all the cachelines */
	for (WayIndex =0; WayIndex < NumWays; WayIndex++) {
		for (SetIndex =0; SetIndex < NumSet; SetIndex++) {
  104ba8:	e1530000 	cmp	r3, r0
  104bac:	1afffff9 	bne	104b98 <Xil_L1DCacheInvalidate+0x68>
  104bb0:	e0877001 	add	r7, r7, r1

	Way = 0UL;
	Set = 0UL;

	/* Invalidate all the cachelines */
	for (WayIndex =0; WayIndex < NumWays; WayIndex++) {
  104bb4:	e2866001 	add	r6, r6, #1
  104bb8:	e1580006 	cmp	r8, r6
  104bbc:	8afffff0 	bhi	104b84 <Xil_L1DCacheInvalidate+0x54>
		}
		Way += 0x40000000;
	}

	/* Wait for L1 invalidate to complete */
	dsb();
  104bc0:	f57ff04f 	dsb	sy
  104bc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00104bc8 <Xil_L1DCacheEnable>:
*
* @note		None.
*
****************************************************************************/
void Xil_L1DCacheEnable(void)
{
  104bc8:	e92d4010 	push	{r4, lr}
	register unsigned int CtrlReg;

	/* enable caches only if they are disabled */
#ifdef __GNUC__
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
  104bcc:	ee114f10 	mrc	15, 0, r4, cr1, cr0, {0}
#else
	{ volatile register unsigned int Reg __asm(XREG_CP15_SYS_CONTROL);
	  CtrlReg = Reg; }
#endif
	if (CtrlReg & XREG_CP15_CONTROL_C_BIT) {
  104bd0:	e3140004 	tst	r4, #4
  104bd4:	18bd8010 	popne	{r4, pc}
		return;
	}

	/* clean and invalidate the Data cache */
	Xil_L1DCacheInvalidate();
  104bd8:	ebffffd4 	bl	104b30 <Xil_L1DCacheInvalidate>

	/* enable the Data cache */
	CtrlReg |= (XREG_CP15_CONTROL_C_BIT);
  104bdc:	e3844004 	orr	r4, r4, #4

	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
  104be0:	ee014f10 	mcr	15, 0, r4, cr1, cr0, {0}
  104be4:	e8bd8010 	pop	{r4, pc}

00104be8 <Xil_L1DCacheInvalidateLine>:
* @note		The bottom 5 bits are set to 0, forced by architecture.
*
****************************************************************************/
void Xil_L1DCacheInvalidateLine(unsigned int adr)
{
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
  104be8:	e3a03000 	mov	r3, #0
  104bec:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_DC_LINE_MVA_POC, (adr & (~0x1F)));
  104bf0:	e3c0001f 	bic	r0, r0, #31
  104bf4:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
	
	/* Wait for L1 invalidate to complete */
	dsb();
  104bf8:	f57ff04f 	dsb	sy
  104bfc:	e12fff1e 	bx	lr

00104c00 <Xil_L1DCacheInvalidateRange>:
void Xil_L1DCacheInvalidateRange(unsigned int adr, unsigned len)
{
	const unsigned cacheline = 32;
	unsigned int end;

	if (len != 0) {
  104c00:	e3510000 	cmp	r1, #0
  104c04:	0a000009 	beq	104c30 <Xil_L1DCacheInvalidateRange+0x30>
		/* Back the starting address up to the start of a cache line
		 * perform cache operations until adr+len
		 */
		end = adr + len;
  104c08:	e0813000 	add	r3, r1, r0
		adr = adr & ~(cacheline - 1);

		/* Select cache L0 D-cache in CSSR */
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
  104c0c:	e3a02000 	mov	r2, #0
	if (len != 0) {
		/* Back the starting address up to the start of a cache line
		 * perform cache operations until adr+len
		 */
		end = adr + len;
		adr = adr & ~(cacheline - 1);
  104c10:	e3c0001f 	bic	r0, r0, #31

		/* Select cache L0 D-cache in CSSR */
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
  104c14:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}

		while (adr < end) {
  104c18:	e1530000 	cmp	r3, r0
  104c1c:	9a000003 	bls	104c30 <Xil_L1DCacheInvalidateRange+0x30>
#ifdef __GNUC__
			__asm__ __volatile__("mcr " \
  104c20:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
			//mtcp(XREG_CP15_INVAL_DC_LINE_MVA_POC, adr);
			{ volatile register unsigned int Reg
				__asm(XREG_CP15_INVAL_DC_LINE_MVA_POC);
			  Reg = adr; }
#endif
			adr += cacheline;
  104c24:	e2800020 	add	r0, r0, #32
		adr = adr & ~(cacheline - 1);

		/* Select cache L0 D-cache in CSSR */
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);

		while (adr < end) {
  104c28:	e1530000 	cmp	r3, r0
  104c2c:	8afffffb 	bhi	104c20 <Xil_L1DCacheInvalidateRange+0x20>
			adr += cacheline;
		}
	}

	/* Wait for L1 invalidate to complete */
	dsb();
  104c30:	f57ff04f 	dsb	sy
  104c34:	e12fff1e 	bx	lr

00104c38 <Xil_L1DCacheFlush>:
* @note		In Cortex A9, there is no cp instruction for flushing
*		the whole D-cache. Need to flush each line.
*
****************************************************************************/
void Xil_L1DCacheFlush(void)
{
  104c38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	register unsigned int CsidReg, C7Reg;
	unsigned int CacheSize, LineSize, NumWays;
	unsigned int Way, WayIndex, Set, SetIndex, NumSet;

	/* Select cache level 0 and D cache in CSSR */
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
  104c3c:	e3a03000 	mov	r3, #0
  104c40:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	isb();
  104c44:	f57ff06f 	isb	sy
#ifdef __GNUC__
	CsidReg = mfcp(XREG_CP15_CACHE_SIZE_ID);
  104c48:	ee304f10 	mrc	15, 1, r4, cr0, cr0, {0}
	  CsidReg = Reg; }
#endif

	/* Determine Cache Size */

	CacheSize = (CsidReg >> 13) & 0x1FF;
  104c4c:	e7e806d4 	ubfx	r0, r4, #13, #9
	CacheSize +=1;
	CacheSize *=128;    /* to get number of bytes */

	/* Number of Ways */
	NumWays = (CsidReg & 0x3ff) >> 3;
  104c50:	e7e681d4 	ubfx	r8, r4, #3, #7
#endif

	/* Determine Cache Size */

	CacheSize = (CsidReg >> 13) & 0x1FF;
	CacheSize +=1;
  104c54:	e2800001 	add	r0, r0, #1
	CacheSize *=128;    /* to get number of bytes */

	/* Number of Ways */
	NumWays = (CsidReg & 0x3ff) >> 3;
	NumWays += 1;
  104c58:	e2888001 	add	r8, r8, #1
  104c5c:	e3a05001 	mov	r5, #1

	Way = 0UL;
	Set = 0UL;

	/* Invalidate all the cachelines */
	for (WayIndex =0; WayIndex < NumWays; WayIndex++) {
  104c60:	e3a06000 	mov	r6, #0
	NumWays += 1;

	/* Get the cacheline size, way size, index size from csidr */
	LineSize = (CsidReg & 0x07) + 4;

	NumSet = CacheSize/NumWays;
  104c64:	e1a01008 	mov	r1, r8
  104c68:	e1a00380 	lsl	r0, r0, #7
  104c6c:	eb0003f6 	bl	105c4c <__aeabi_uidiv>
	/* Number of Ways */
	NumWays = (CsidReg & 0x3ff) >> 3;
	NumWays += 1;

	/* Get the cacheline size, way size, index size from csidr */
	LineSize = (CsidReg & 0x07) + 4;
  104c70:	e2043007 	and	r3, r4, #7
  104c74:	e2833004 	add	r3, r3, #4

	NumSet = CacheSize/NumWays;
	NumSet /= (1 << LineSize);

	Way = 0UL;
	Set = 0UL;
  104c78:	e1a07006 	mov	r7, r6
  104c7c:	e1a05315 	lsl	r5, r5, r3

	/* Get the cacheline size, way size, index size from csidr */
	LineSize = (CsidReg & 0x07) + 4;

	NumSet = CacheSize/NumWays;
	NumSet /= (1 << LineSize);
  104c80:	e1a00330 	lsr	r0, r0, r3
*
* @note		In Cortex A9, there is no cp instruction for flushing
*		the whole D-cache. Need to flush each line.
*
****************************************************************************/
void Xil_L1DCacheFlush(void)
  104c84:	e2401001 	sub	r1, r0, #1
  104c88:	e0215195 	mla	r1, r5, r1, r5
	Way = 0UL;
	Set = 0UL;

	/* Invalidate all the cachelines */
	for (WayIndex =0; WayIndex < NumWays; WayIndex++) {
		for (SetIndex =0; SetIndex < NumSet; SetIndex++) {
  104c8c:	e3500000 	cmp	r0, #0
  104c90:	e1a04f06 	lsl	r4, r6, #30
  104c94:	11a02007 	movne	r2, r7
  104c98:	13a03000 	movne	r3, #0
  104c9c:	0a000006 	beq	104cbc <Xil_L1DCacheFlush+0x84>
			C7Reg = Way | Set;
  104ca0:	e182c004 	orr	ip, r2, r4
			/* Flush by Set/Way */
#ifdef __GNUC__
			__asm__ __volatile__("mcr " \
  104ca4:	ee07cf5e 	mcr	15, 0, ip, cr7, cr14, {2}
	Way = 0UL;
	Set = 0UL;

	/* Invalidate all the cachelines */
	for (WayIndex =0; WayIndex < NumWays; WayIndex++) {
		for (SetIndex =0; SetIndex < NumSet; SetIndex++) {
  104ca8:	e2833001 	add	r3, r3, #1
#else
			{ volatile register unsigned int Reg
				__asm(XREG_CP15_CLEAN_INVAL_DC_LINE_SW);
			  Reg = C7Reg; }
#endif
			Set += (1 << LineSize);
  104cac:	e0822005 	add	r2, r2, r5
	Way = 0UL;
	Set = 0UL;

	/* Invalidate all the cachelines */
	for (WayIndex =0; WayIndex < NumWays; WayIndex++) {
		for (SetIndex =0; SetIndex < NumSet; SetIndex++) {
  104cb0:	e1530000 	cmp	r3, r0
  104cb4:	1afffff9 	bne	104ca0 <Xil_L1DCacheFlush+0x68>
  104cb8:	e0877001 	add	r7, r7, r1

	Way = 0UL;
	Set = 0UL;

	/* Invalidate all the cachelines */
	for (WayIndex =0; WayIndex < NumWays; WayIndex++) {
  104cbc:	e2866001 	add	r6, r6, #1
  104cc0:	e1580006 	cmp	r8, r6
  104cc4:	8afffff0 	bhi	104c8c <Xil_L1DCacheFlush+0x54>
		}
		Way += 0x40000000;
	}

	/* Wait for L1 flush to complete */
	dsb();
  104cc8:	f57ff04f 	dsb	sy
  104ccc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00104cd0 <Xil_L1DCacheDisable>:
*
* @note		None.
*
****************************************************************************/
void Xil_L1DCacheDisable(void)
{
  104cd0:	e92d4008 	push	{r3, lr}
	register unsigned int CtrlReg;

	/* clean and invalidate the Data cache */
	Xil_L1DCacheFlush();
  104cd4:	ebffffd7 	bl	104c38 <Xil_L1DCacheFlush>

#ifdef __GNUC__
	/* disable the Data cache */
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
  104cd8:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
#else
	{ volatile register unsigned int Reg __asm(XREG_CP15_SYS_CONTROL);
	  CtrlReg = Reg; }
#endif

	CtrlReg &= ~(XREG_CP15_CONTROL_C_BIT);
  104cdc:	e3c33004 	bic	r3, r3, #4

	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
  104ce0:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
  104ce4:	e8bd8008 	pop	{r3, pc}

00104ce8 <Xil_L1DCacheFlushLine>:
* @note		The bottom 5 bits are set to 0, forced by architecture.
*
****************************************************************************/
void Xil_L1DCacheFlushLine(unsigned int adr)
{
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
  104ce8:	e3a03000 	mov	r3, #0
  104cec:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1F)));
  104cf0:	e3c0001f 	bic	r0, r0, #31
  104cf4:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}

	/* Wait for L1 flush to complete */
	dsb();
  104cf8:	f57ff04f 	dsb	sy
  104cfc:	e12fff1e 	bx	lr

00104d00 <Xil_L1DCacheFlushRange>:
void Xil_L1DCacheFlushRange(unsigned int adr, unsigned len)
{
	const unsigned cacheline = 32;
	unsigned int end;

	if (len != 0) {
  104d00:	e3510000 	cmp	r1, #0
  104d04:	0a000009 	beq	104d30 <Xil_L1DCacheFlushRange+0x30>
		/* Back the starting address up to the start of a cache line
		 * perform cache operations until adr+len
		 */
		end = adr + len;
  104d08:	e0813000 	add	r3, r1, r0
		adr = adr & ~(cacheline - 1);

		/* Select cache L0 D-cache in CSSR */
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
  104d0c:	e3a02000 	mov	r2, #0
	if (len != 0) {
		/* Back the starting address up to the start of a cache line
		 * perform cache operations until adr+len
		 */
		end = adr + len;
		adr = adr & ~(cacheline - 1);
  104d10:	e3c0001f 	bic	r0, r0, #31

		/* Select cache L0 D-cache in CSSR */
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
  104d14:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}

		while (adr < end) {
  104d18:	e1530000 	cmp	r3, r0
  104d1c:	9a000003 	bls	104d30 <Xil_L1DCacheFlushRange+0x30>
#ifdef __GNUC__
			__asm__ __volatile__("mcr " \
  104d20:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
			//mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, adr);
			{ volatile register unsigned int Reg
				__asm(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC);
			  Reg = adr; }
#endif
			adr += cacheline;
  104d24:	e2800020 	add	r0, r0, #32
		adr = adr & ~(cacheline - 1);

		/* Select cache L0 D-cache in CSSR */
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);

		while (adr < end) {
  104d28:	e1530000 	cmp	r3, r0
  104d2c:	8afffffb 	bhi	104d20 <Xil_L1DCacheFlushRange+0x20>
			adr += cacheline;
		}
	}

	/* Wait for L1 flush to complete */
	dsb();
  104d30:	f57ff04f 	dsb	sy
  104d34:	e12fff1e 	bx	lr

00104d38 <Xil_L1DCacheStoreLine>:
* @note		The bottom 5 bits are set to 0, forced by architecture.
*
****************************************************************************/
void Xil_L1DCacheStoreLine(unsigned int adr)
{
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
  104d38:	e3a03000 	mov	r3, #0
  104d3c:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_DC_LINE_MVA_POC, (adr & (~0x1F)));
  104d40:	e3c0001f 	bic	r0, r0, #31
  104d44:	ee070f3a 	mcr	15, 0, r0, cr7, cr10, {1}
	
	/* Wait for L1 store to complete */
	dsb();
  104d48:	f57ff04f 	dsb	sy
  104d4c:	e12fff1e 	bx	lr

00104d50 <Xil_L1ICacheEnable>:
{
	register unsigned int CtrlReg;

	/* enable caches only if they are disabled */
#ifdef __GNUC__
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
  104d50:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
#else
	{ volatile register unsigned int Reg __asm(XREG_CP15_SYS_CONTROL);
	  CtrlReg = Reg; }
#endif
	if (CtrlReg & XREG_CP15_CONTROL_I_BIT) {
  104d54:	e2132a01 	ands	r2, r3, #4096	; 0x1000
  104d58:	112fff1e 	bxne	lr
		return;
	}

	/* invalidate the instruction cache */
	mtcp(XREG_CP15_INVAL_IC_POU, 0);
  104d5c:	ee072f15 	mcr	15, 0, r2, cr7, cr5, {0}

	/* enable the instruction cache */
	CtrlReg |= (XREG_CP15_CONTROL_I_BIT);
  104d60:	e3833a01 	orr	r3, r3, #4096	; 0x1000

	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
  104d64:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
  104d68:	e12fff1e 	bx	lr

00104d6c <Xil_L1ICacheDisable>:
****************************************************************************/
void Xil_L1ICacheDisable(void)
{
	register unsigned int CtrlReg;

	dsb();
  104d6c:	f57ff04f 	dsb	sy

	/* invalidate the instruction cache */
	mtcp(XREG_CP15_INVAL_IC_POU, 0);
  104d70:	e3a03000 	mov	r3, #0
  104d74:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}

	/* disable the instruction cache */
#ifdef __GNUC__
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
  104d78:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
#else
	{ volatile register unsigned int Reg __asm(XREG_CP15_SYS_CONTROL);
	  CtrlReg = Reg; }
#endif
	CtrlReg &= ~(XREG_CP15_CONTROL_I_BIT);
  104d7c:	e3c33a01 	bic	r3, r3, #4096	; 0x1000

	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
  104d80:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
  104d84:	e12fff1e 	bx	lr

00104d88 <Xil_L1ICacheInvalidate>:
* @note		None.
*
****************************************************************************/
void Xil_L1ICacheInvalidate(void)
{
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1);
  104d88:	e3a03001 	mov	r3, #1
  104d8c:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	/* invalidate the instruction cache */
	mtcp(XREG_CP15_INVAL_IC_POU, 0);
  104d90:	e3a03000 	mov	r3, #0
  104d94:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}

	/* Wait for L1 invalidate to complete */
	dsb();
  104d98:	f57ff04f 	dsb	sy
  104d9c:	e12fff1e 	bx	lr

00104da0 <Xil_L1ICacheInvalidateLine>:
* @note		The bottom 5 bits are set to 0, forced by architecture.
*
****************************************************************************/
void Xil_L1ICacheInvalidateLine(unsigned int adr)
{
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1);
  104da0:	e3a03001 	mov	r3, #1
  104da4:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_LINE_MVA_POU, (adr & (~0x1F)));
  104da8:	e3c0001f 	bic	r0, r0, #31
  104dac:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}

	/* Wait for L1 invalidate to complete */
	dsb();
  104db0:	f57ff04f 	dsb	sy
  104db4:	e12fff1e 	bx	lr

00104db8 <Xil_L1ICacheInvalidateRange>:
void Xil_L1ICacheInvalidateRange(unsigned int adr, unsigned len)
{
	const unsigned cacheline = 32;
	unsigned int end;

	if (len != 0) {
  104db8:	e3510000 	cmp	r1, #0
  104dbc:	0a000009 	beq	104de8 <Xil_L1ICacheInvalidateRange+0x30>
		/* Back the starting address up to the start of a cache line
		 * perform cache operations until adr+len
		 */
		end = adr + len;
  104dc0:	e0813000 	add	r3, r1, r0
		adr = adr & ~(cacheline - 1);

		/* Select cache L0 I-cache in CSSR */
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1);
  104dc4:	e3a02001 	mov	r2, #1
	if (len != 0) {
		/* Back the starting address up to the start of a cache line
		 * perform cache operations until adr+len
		 */
		end = adr + len;
		adr = adr & ~(cacheline - 1);
  104dc8:	e3c0001f 	bic	r0, r0, #31

		/* Select cache L0 I-cache in CSSR */
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1);
  104dcc:	ee402f10 	mcr	15, 2, r2, cr0, cr0, {0}

		while (adr < end) {
  104dd0:	e1530000 	cmp	r3, r0
  104dd4:	9a000003 	bls	104de8 <Xil_L1ICacheInvalidateRange+0x30>
#ifdef __GNUC__
			__asm__ __volatile__("mcr " \
  104dd8:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
			//mtcp(XREG_CP15_INVAL_IC_LINE_MVA_POU, adr);
			{ volatile register unsigned int Reg
				__asm(XREG_CP15_INVAL_IC_LINE_MVA_POU);
			  Reg = adr; }
#endif
			adr += cacheline;
  104ddc:	e2800020 	add	r0, r0, #32
		adr = adr & ~(cacheline - 1);

		/* Select cache L0 I-cache in CSSR */
		mtcp(XREG_CP15_CACHE_SIZE_SEL, 1);

		while (adr < end) {
  104de0:	e1530000 	cmp	r3, r0
  104de4:	8afffffb 	bhi	104dd8 <Xil_L1ICacheInvalidateRange+0x20>
			adr += cacheline;
		}
	}

	/* Wait for L1 invalidate to complete */
	dsb();
  104de8:	f57ff04f 	dsb	sy
  104dec:	e12fff1e 	bx	lr

00104df0 <Xil_L2CacheEnable>:
*
* @note		None.
*
****************************************************************************/
void Xil_L2CacheEnable(void)
{
  104df0:	e92d4008 	push	{r3, lr}
	register unsigned int L2CCReg,CtrlReg;

	L2CCReg = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CNTRL_OFFSET);
  104df4:	e3a00c21 	mov	r0, #8448	; 0x2100
  104df8:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104dfc:	eb00016e 	bl	1053bc <Xil_In32>

	/* only enable if L2CC is currently disabled */
	if ((L2CCReg & 0x01) == 0) {
  104e00:	e3100001 	tst	r0, #1
  104e04:	18bd8008 	popne	{r3, pc}
		/* set up the way size and latencies */
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  104e08:	e3020104 	movw	r0, #8452	; 0x2104
  104e0c:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104e10:	eb000169 	bl	1053bc <Xil_In32>
				   XPS_L2CC_AUX_CNTRL_OFFSET);
		L2CCReg &= XPS_L2CC_AUX_REG_ZERO_MASK;
  104e14:	e3c0180e 	bic	r1, r0, #917504	; 0xe0000
		L2CCReg |= XPS_L2CC_AUX_REG_DEFAULT_MASK;
		Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_AUX_CNTRL_OFFSET,
  104e18:	e3020104 	movw	r0, #8452	; 0x2104
	if ((L2CCReg & 0x01) == 0) {
		/* set up the way size and latencies */
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
				   XPS_L2CC_AUX_CNTRL_OFFSET);
		L2CCReg &= XPS_L2CC_AUX_REG_ZERO_MASK;
		L2CCReg |= XPS_L2CC_AUX_REG_DEFAULT_MASK;
  104e1c:	e3811472 	orr	r1, r1, #1912602624	; 0x72000000
		Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_AUX_CNTRL_OFFSET,
  104e20:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104e24:	e3811836 	orr	r1, r1, #3538944	; 0x360000
  104e28:	eb000169 	bl	1053d4 <Xil_Out32>
			  L2CCReg);
		Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_TAG_RAM_CNTRL_OFFSET,
  104e2c:	e3001111 	movw	r1, #273	; 0x111
  104e30:	e3020108 	movw	r0, #8456	; 0x2108
  104e34:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104e38:	eb000165 	bl	1053d4 <Xil_Out32>
			  XPS_L2CC_TAG_RAM_DEFAULT_MASK);
		Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DATA_RAM_CNTRL_OFFSET,
  104e3c:	e3001121 	movw	r1, #289	; 0x121
  104e40:	e302010c 	movw	r0, #8460	; 0x210c
  104e44:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104e48:	eb000161 	bl	1053d4 <Xil_Out32>
			  XPS_L2CC_DATA_RAM_DEFAULT_MASK);

		/* Clear the pending interrupts */
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  104e4c:	e302021c 	movw	r0, #8732	; 0x221c
  104e50:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104e54:	eb000158 	bl	1053bc <Xil_In32>
  104e58:	e1a01000 	mov	r1, r0
				   XPS_L2CC_ISR_OFFSET);
		Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_IAR_OFFSET, L2CCReg);
  104e5c:	e3020220 	movw	r0, #8736	; 0x2220
  104e60:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104e64:	eb00015a 	bl	1053d4 <Xil_Out32>

		/* Enable the L2CC */
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  104e68:	e3a00c21 	mov	r0, #8448	; 0x2100
  104e6c:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104e70:	eb000151 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CNTRL_OFFSET);
		Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CNTRL_OFFSET,
			  (L2CCReg | (0x01)));
  104e74:	e3801001 	orr	r1, r0, #1
		Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_IAR_OFFSET, L2CCReg);

		/* Enable the L2CC */
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
				   XPS_L2CC_CNTRL_OFFSET);
		Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CNTRL_OFFSET,
  104e78:	e3a00c21 	mov	r0, #8448	; 0x2100
  104e7c:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104e80:	eb000153 	bl	1053d4 <Xil_Out32>
static inline void Xil_L2CacheSync(void)
{
	register unsigned int L2CCReg;

	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  104e84:	e3020730 	movw	r0, #10032	; 0x2730
  104e88:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104e8c:	eb00014a 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  104e90:	e2501000 	subs	r1, r0, #0
  104e94:	1afffffa 	bne	104e84 <Xil_L2CacheEnable+0x94>

#ifdef CONFIG_PL310_ERRATA_753970
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DUMMY_CACHE_SYNC_OFFSET, 0x0);
  104e98:	e3a00d9d 	mov	r0, #10048	; 0x2740
  104e9c:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104ea0:	eb00014b 	bl	1053d4 <Xil_Out32>
#else
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_SYNC_OFFSET, 0x0);
#endif	
	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  104ea4:	e3020730 	movw	r0, #10032	; 0x2730
  104ea8:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104eac:	eb000142 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  104eb0:	e3500000 	cmp	r0, #0
  104eb4:	1afffffa 	bne	104ea4 <Xil_L2CacheEnable+0xb4>
		Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CNTRL_OFFSET,
			  (L2CCReg | (0x01)));

        Xil_L2CacheSync();
        /* synchronize the processor */
	    dsb();
  104eb8:	f57ff04f 	dsb	sy
  104ebc:	e8bd8008 	pop	{r3, pc}

00104ec0 <Xil_ICacheEnable>:
{
	register unsigned int CtrlReg;

	/* enable caches only if they are disabled */
#ifdef __GNUC__
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
  104ec0:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
#else
	{ volatile register unsigned int Reg __asm(XREG_CP15_SYS_CONTROL);
	  CtrlReg = Reg; }
#endif
	if (CtrlReg & XREG_CP15_CONTROL_I_BIT) {
  104ec4:	e2132a01 	ands	r2, r3, #4096	; 0x1000
  104ec8:	1a000002 	bne	104ed8 <Xil_ICacheEnable+0x18>
		return;
	}

	/* invalidate the instruction cache */
	mtcp(XREG_CP15_INVAL_IC_POU, 0);
  104ecc:	ee072f15 	mcr	15, 0, r2, cr7, cr5, {0}

	/* enable the instruction cache */
	CtrlReg |= (XREG_CP15_CONTROL_I_BIT);
  104ed0:	e3833a01 	orr	r3, r3, #4096	; 0x1000

	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
  104ed4:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
*
****************************************************************************/
void Xil_ICacheEnable(void)
{
	Xil_L1ICacheEnable();
	Xil_L2CacheEnable();
  104ed8:	eaffffc4 	b	104df0 <Xil_L2CacheEnable>

00104edc <Xil_DCacheEnable>:
*
* @note		None.
*
****************************************************************************/
void Xil_DCacheEnable(void)
{
  104edc:	e92d4008 	push	{r3, lr}
	Xil_L1DCacheEnable();
  104ee0:	ebffff38 	bl	104bc8 <Xil_L1DCacheEnable>
	Xil_L2CacheEnable();
}
  104ee4:	e8bd4008 	pop	{r3, lr}
*
****************************************************************************/
void Xil_DCacheEnable(void)
{
	Xil_L1DCacheEnable();
	Xil_L2CacheEnable();
  104ee8:	eaffffc0 	b	104df0 <Xil_L2CacheEnable>

00104eec <Xil_L2CacheInvalidate>:
*
****************************************************************************/
void Xil_L2CacheInvalidate(void)
{
	/* Invalidate the caches */
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_WAY_OFFSET,
  104eec:	e302077c 	movw	r0, #10108	; 0x277c
  104ef0:	e30f1fff 	movw	r1, #65535	; 0xffff
*
* @note		The bottom 4 bits are set to 0, forced by architecture.
*
****************************************************************************/
void Xil_L2CacheInvalidate(void)
{
  104ef4:	e92d4008 	push	{r3, lr}
	/* Invalidate the caches */
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_WAY_OFFSET,
  104ef8:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104efc:	eb000134 	bl	1053d4 <Xil_Out32>
static inline void Xil_L2CacheSync(void)
{
	register unsigned int L2CCReg;

	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  104f00:	e3020730 	movw	r0, #10032	; 0x2730
  104f04:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104f08:	eb00012b 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  104f0c:	e2501000 	subs	r1, r0, #0
  104f10:	1afffffa 	bne	104f00 <Xil_L2CacheInvalidate+0x14>

#ifdef CONFIG_PL310_ERRATA_753970
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DUMMY_CACHE_SYNC_OFFSET, 0x0);
  104f14:	e3a00d9d 	mov	r0, #10048	; 0x2740
  104f18:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104f1c:	eb00012c 	bl	1053d4 <Xil_Out32>
#else
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_SYNC_OFFSET, 0x0);
#endif	
	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  104f20:	e3020730 	movw	r0, #10032	; 0x2730
  104f24:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104f28:	eb000123 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  104f2c:	e3500000 	cmp	r0, #0
  104f30:	1afffffa 	bne	104f20 <Xil_L2CacheInvalidate+0x34>

	/* Wait for the invalidate to complete */
	Xil_L2CacheSync();

	/* synchronize the processor */
	dsb();
  104f34:	f57ff04f 	dsb	sy
  104f38:	e8bd8008 	pop	{r3, pc}

00104f3c <Xil_ICacheInvalidate>:
*
* @note		None.
*
****************************************************************************/
void Xil_ICacheInvalidate(void)
{
  104f3c:	e92d4008 	push	{r3, lr}
	Xil_L2CacheInvalidate();
  104f40:	ebffffe9 	bl	104eec <Xil_L2CacheInvalidate>
* @note		None.
*
****************************************************************************/
void Xil_L1ICacheInvalidate(void)
{
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1);
  104f44:	e3a03001 	mov	r3, #1
  104f48:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	/* invalidate the instruction cache */
	mtcp(XREG_CP15_INVAL_IC_POU, 0);
  104f4c:	e3a03000 	mov	r3, #0
  104f50:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}

	/* Wait for L1 invalidate to complete */
	dsb();
  104f54:	f57ff04f 	dsb	sy
  104f58:	e8bd8008 	pop	{r3, pc}

00104f5c <Xil_DCacheInvalidate>:
*
* @note		None.
*
****************************************************************************/
void Xil_DCacheInvalidate(void)
{
  104f5c:	e92d4008 	push	{r3, lr}
	Xil_L2CacheInvalidate();
  104f60:	ebffffe1 	bl	104eec <Xil_L2CacheInvalidate>
	Xil_L1DCacheInvalidate();
}
  104f64:	e8bd4008 	pop	{r3, lr}
*
****************************************************************************/
void Xil_DCacheInvalidate(void)
{
	Xil_L2CacheInvalidate();
	Xil_L1DCacheInvalidate();
  104f68:	eafffef0 	b	104b30 <Xil_L1DCacheInvalidate>

00104f6c <Xil_L2CacheInvalidateLine>:
*
* @note		The bottom 4 bits are set to 0, forced by architecture.
*
****************************************************************************/
void Xil_L2CacheInvalidateLine(unsigned int adr)
{
  104f6c:	e1a01000 	mov	r1, r0
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_PA_OFFSET, adr);
  104f70:	e3020770 	movw	r0, #10096	; 0x2770
*
* @note		The bottom 4 bits are set to 0, forced by architecture.
*
****************************************************************************/
void Xil_L2CacheInvalidateLine(unsigned int adr)
{
  104f74:	e92d4008 	push	{r3, lr}
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_PA_OFFSET, adr);
  104f78:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104f7c:	eb000114 	bl	1053d4 <Xil_Out32>
static inline void Xil_L2CacheSync(void)
{
	register unsigned int L2CCReg;

	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  104f80:	e3020730 	movw	r0, #10032	; 0x2730
  104f84:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104f88:	eb00010b 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  104f8c:	e2501000 	subs	r1, r0, #0
  104f90:	1afffffa 	bne	104f80 <Xil_L2CacheInvalidateLine+0x14>

#ifdef CONFIG_PL310_ERRATA_753970
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DUMMY_CACHE_SYNC_OFFSET, 0x0);
  104f94:	e3a00d9d 	mov	r0, #10048	; 0x2740
  104f98:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104f9c:	eb00010c 	bl	1053d4 <Xil_Out32>
#else
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_SYNC_OFFSET, 0x0);
#endif	
	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  104fa0:	e3020730 	movw	r0, #10032	; 0x2730
  104fa4:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  104fa8:	eb000103 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  104fac:	e3500000 	cmp	r0, #0
  104fb0:	1afffffa 	bne	104fa0 <Xil_L2CacheInvalidateLine+0x34>
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_PA_OFFSET, adr);
	Xil_L2CacheSync();

	/* synchronize the processor */
	dsb();
  104fb4:	f57ff04f 	dsb	sy
  104fb8:	e8bd8008 	pop	{r3, pc}

00104fbc <Xil_ICacheInvalidateLine>:
*
* @note		The bottom 4 bits are set to 0, forced by architecture.
*
****************************************************************************/
void Xil_ICacheInvalidateLine(unsigned int adr)
{
  104fbc:	e92d4010 	push	{r4, lr}
  104fc0:	e1a04000 	mov	r4, r0
	Xil_L2CacheInvalidateLine(adr);
  104fc4:	ebffffe8 	bl	104f6c <Xil_L2CacheInvalidateLine>
* @note		The bottom 5 bits are set to 0, forced by architecture.
*
****************************************************************************/
void Xil_L1ICacheInvalidateLine(unsigned int adr)
{
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 1);
  104fc8:	e3a03001 	mov	r3, #1
  104fcc:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_IC_LINE_MVA_POU, (adr & (~0x1F)));
  104fd0:	e3c4401f 	bic	r4, r4, #31
  104fd4:	ee074f35 	mcr	15, 0, r4, cr7, cr5, {1}

	/* Wait for L1 invalidate to complete */
	dsb();
  104fd8:	f57ff04f 	dsb	sy
  104fdc:	e8bd8010 	pop	{r4, pc}

00104fe0 <Xil_DCacheInvalidateLine>:
*
* @note		The bottom 4 bits are set to 0, forced by architecture.
*
****************************************************************************/
void Xil_DCacheInvalidateLine(unsigned int adr)
{
  104fe0:	e92d4010 	push	{r4, lr}
  104fe4:	e1a04000 	mov	r4, r0
	Xil_L2CacheInvalidateLine(adr);
  104fe8:	ebffffdf 	bl	104f6c <Xil_L2CacheInvalidateLine>
* @note		The bottom 5 bits are set to 0, forced by architecture.
*
****************************************************************************/
void Xil_L1DCacheInvalidateLine(unsigned int adr)
{
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
  104fec:	e3a03000 	mov	r3, #0
  104ff0:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_INVAL_DC_LINE_MVA_POC, (adr & (~0x1F)));
  104ff4:	e3c4401f 	bic	r4, r4, #31
  104ff8:	ee074f36 	mcr	15, 0, r4, cr7, cr6, {1}
	
	/* Wait for L1 invalidate to complete */
	dsb();
  104ffc:	f57ff04f 	dsb	sy
  105000:	e8bd8010 	pop	{r4, pc}

00105004 <Xil_L2CacheInvalidateRange>:
	const unsigned cacheline = 32;
	unsigned int end;
	volatile u32 *L2CCOffset = (volatile u32 *) (XPS_L2CC_BASEADDR +
				    XPS_L2CC_CACHE_INVLD_PA_OFFSET);

	if (len != 0) {
  105004:	e3510000 	cmp	r1, #0
*
* @note		None.
*
****************************************************************************/
void Xil_L2CacheInvalidateRange(unsigned int adr, unsigned len)
{
  105008:	e92d4038 	push	{r3, r4, r5, lr}
	const unsigned cacheline = 32;
	unsigned int end;
	volatile u32 *L2CCOffset = (volatile u32 *) (XPS_L2CC_BASEADDR +
				    XPS_L2CC_CACHE_INVLD_PA_OFFSET);

	if (len != 0) {
  10500c:	1a00000e 	bne	10504c <Xil_L2CacheInvalidateRange+0x48>
static inline void Xil_L2CacheSync(void)
{
	register unsigned int L2CCReg;

	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  105010:	e3020730 	movw	r0, #10032	; 0x2730
  105014:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  105018:	eb0000e7 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  10501c:	e2501000 	subs	r1, r0, #0
  105020:	1afffffa 	bne	105010 <Xil_L2CacheInvalidateRange+0xc>

#ifdef CONFIG_PL310_ERRATA_753970
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DUMMY_CACHE_SYNC_OFFSET, 0x0);
  105024:	e3a00d9d 	mov	r0, #10048	; 0x2740
  105028:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  10502c:	eb0000e8 	bl	1053d4 <Xil_Out32>
#else
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_SYNC_OFFSET, 0x0);
#endif	
	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  105030:	e3020730 	movw	r0, #10032	; 0x2730
  105034:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  105038:	eb0000df 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  10503c:	e3500000 	cmp	r0, #0
  105040:	1afffffa 	bne	105030 <Xil_L2CacheInvalidateRange+0x2c>

	/* Wait for L2 invalidate to complete */
	Xil_L2CacheSync();

	/* synchronize the processor */
	dsb();
  105044:	f57ff04f 	dsb	sy
  105048:	e8bd8038 	pop	{r3, r4, r5, pc}

	if (len != 0) {
		/* Back the starting address up to the start of a cache line
		 * perform cache operations until adr+len
		 */
		end = adr + len;
  10504c:	e0815000 	add	r5, r1, r0
		adr = adr & ~(cacheline - 1);
  105050:	e3c0401f 	bic	r4, r0, #31
*
****************************************************************************/
#if defined(CONFIG_PL310_ERRATA_588369) || defined(CONFIG_PL310_ERRATA_727915)
static inline void Xil_L2WriteDebugCtrl(u32 Value)
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DEBUG_CTRL_OFFSET, Value);
  105054:	e3a01003 	mov	r1, #3
  105058:	e3a00dbd 	mov	r0, #12096	; 0x2f40
  10505c:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  105060:	eb0000db 	bl	1053d4 <Xil_Out32>
		adr = adr & ~(cacheline - 1);

		/* Disable Write-back and line fills */
		Xil_L2WriteDebugCtrl(0x3);

		while (adr < end) {
  105064:	e1550004 	cmp	r5, r4
			*L2CCOffset = adr;
  105068:	83a03a02 	movhi	r3, #8192	; 0x2000
  10506c:	834f38f0 	movthi	r3, #63728	; 0xf8f0
		adr = adr & ~(cacheline - 1);

		/* Disable Write-back and line fills */
		Xil_L2WriteDebugCtrl(0x3);

		while (adr < end) {
  105070:	9a000003 	bls	105084 <Xil_L2CacheInvalidateRange+0x80>
			*L2CCOffset = adr;
  105074:	e5834770 	str	r4, [r3, #1904]	; 0x770
			adr += cacheline;
  105078:	e2844020 	add	r4, r4, #32
		adr = adr & ~(cacheline - 1);

		/* Disable Write-back and line fills */
		Xil_L2WriteDebugCtrl(0x3);

		while (adr < end) {
  10507c:	e1550004 	cmp	r5, r4
  105080:	8afffffb 	bhi	105074 <Xil_L2CacheInvalidateRange+0x70>
*
****************************************************************************/
#if defined(CONFIG_PL310_ERRATA_588369) || defined(CONFIG_PL310_ERRATA_727915)
static inline void Xil_L2WriteDebugCtrl(u32 Value)
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DEBUG_CTRL_OFFSET, Value);
  105084:	e3a00dbd 	mov	r0, #12096	; 0x2f40
  105088:	e3a01000 	mov	r1, #0
  10508c:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  105090:	eb0000cf 	bl	1053d4 <Xil_Out32>
  105094:	eaffffdd 	b	105010 <Xil_L2CacheInvalidateRange+0xc>

00105098 <Xil_L2CacheFlush>:
  105098:	e3a01003 	mov	r1, #3
  10509c:	e3a00dbd 	mov	r0, #12096	; 0x2f40
*
* @note		The bottom 4 bits are set to 0, forced by architecture.
*
****************************************************************************/
void Xil_L2CacheFlush(void)
{
  1050a0:	e92d4008 	push	{r3, lr}
*
****************************************************************************/
#if defined(CONFIG_PL310_ERRATA_588369) || defined(CONFIG_PL310_ERRATA_727915)
static inline void Xil_L2WriteDebugCtrl(u32 Value)
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DEBUG_CTRL_OFFSET, Value);
  1050a4:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  1050a8:	eb0000c9 	bl	1053d4 <Xil_Out32>
	/* Flush the caches */

	/* Disable Write-back and line fills */
	Xil_L2WriteDebugCtrl(0x3);

	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_WAY_OFFSET,
  1050ac:	e30207fc 	movw	r0, #10236	; 0x27fc
  1050b0:	e30f1fff 	movw	r1, #65535	; 0xffff
  1050b4:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  1050b8:	eb0000c5 	bl	1053d4 <Xil_Out32>
static inline void Xil_L2CacheSync(void)
{
	register unsigned int L2CCReg;

	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  1050bc:	e3020730 	movw	r0, #10032	; 0x2730
  1050c0:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  1050c4:	eb0000bc 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  1050c8:	e2501000 	subs	r1, r0, #0
  1050cc:	1afffffa 	bne	1050bc <Xil_L2CacheFlush+0x24>

#ifdef CONFIG_PL310_ERRATA_753970
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DUMMY_CACHE_SYNC_OFFSET, 0x0);
  1050d0:	e3a00d9d 	mov	r0, #10048	; 0x2740
  1050d4:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  1050d8:	eb0000bd 	bl	1053d4 <Xil_Out32>
#else
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_SYNC_OFFSET, 0x0);
#endif	
	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  1050dc:	e3020730 	movw	r0, #10032	; 0x2730
  1050e0:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  1050e4:	eb0000b4 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  1050e8:	e2501000 	subs	r1, r0, #0
  1050ec:	1afffffa 	bne	1050dc <Xil_L2CacheFlush+0x44>
*
****************************************************************************/
#if defined(CONFIG_PL310_ERRATA_588369) || defined(CONFIG_PL310_ERRATA_727915)
static inline void Xil_L2WriteDebugCtrl(u32 Value)
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DEBUG_CTRL_OFFSET, Value);
  1050f0:	e3a00dbd 	mov	r0, #12096	; 0x2f40
  1050f4:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  1050f8:	eb0000b5 	bl	1053d4 <Xil_Out32>

	/* Enable Write-back and line fills */
	Xil_L2WriteDebugCtrl(0x0);

	/* synchronize the processor */
	dsb();
  1050fc:	f57ff04f 	dsb	sy
  105100:	e8bd8008 	pop	{r3, pc}

00105104 <Xil_L2CacheDisable>:
*
* @note		None.
*
****************************************************************************/
void Xil_L2CacheDisable(void)
{
  105104:	e92d4008 	push	{r3, lr}
    register unsigned int L2CCReg,CtrlReg;

	L2CCReg = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CNTRL_OFFSET);
  105108:	e3a00c21 	mov	r0, #8448	; 0x2100
  10510c:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  105110:	eb0000a9 	bl	1053bc <Xil_In32>

    if(L2CCReg & 0x1) {
  105114:	e3100001 	tst	r0, #1
  105118:	08bd8008 	popeq	{r3, pc}

        /* Clean and Invalidate L2 Cache */
        Xil_L2CacheFlush();
  10511c:	ebffffdd 	bl	105098 <Xil_L2CacheFlush>

	    /* Disable the L2CC */
    	L2CCReg = Xil_In32(XPS_L2CC_BASEADDR + XPS_L2CC_CNTRL_OFFSET);
  105120:	e3a00c21 	mov	r0, #8448	; 0x2100
  105124:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  105128:	eb0000a3 	bl	1053bc <Xil_In32>
	    Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CNTRL_OFFSET,
  10512c:	e3c01001 	bic	r1, r0, #1
  105130:	e3a00c21 	mov	r0, #8448	; 0x2100
  105134:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  105138:	eb0000a5 	bl	1053d4 <Xil_Out32>
		      (L2CCReg & (~0x01)));
		/* Wait for the cache operations to complete */

		dsb();
  10513c:	f57ff04f 	dsb	sy
  105140:	e8bd8008 	pop	{r3, pc}

00105144 <Xil_ICacheDisable>:
*
* @note		None.
*
****************************************************************************/
void Xil_ICacheDisable(void)
{
  105144:	e92d4008 	push	{r3, lr}
	Xil_L2CacheDisable();
  105148:	ebffffed 	bl	105104 <Xil_L2CacheDisable>
****************************************************************************/
void Xil_L1ICacheDisable(void)
{
	register unsigned int CtrlReg;

	dsb();
  10514c:	f57ff04f 	dsb	sy

	/* invalidate the instruction cache */
	mtcp(XREG_CP15_INVAL_IC_POU, 0);
  105150:	e3a03000 	mov	r3, #0
  105154:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}

	/* disable the instruction cache */
#ifdef __GNUC__
	CtrlReg = mfcp(XREG_CP15_SYS_CONTROL);
  105158:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
#else
	{ volatile register unsigned int Reg __asm(XREG_CP15_SYS_CONTROL);
	  CtrlReg = Reg; }
#endif
	CtrlReg &= ~(XREG_CP15_CONTROL_I_BIT);
  10515c:	e3c33a01 	bic	r3, r3, #4096	; 0x1000

	mtcp(XREG_CP15_SYS_CONTROL, CtrlReg);
  105160:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
  105164:	e8bd8008 	pop	{r3, pc}

00105168 <Xil_DCacheDisable>:
*
* @note		None.
*
****************************************************************************/
void Xil_DCacheDisable(void)
{
  105168:	e92d4008 	push	{r3, lr}
	Xil_L2CacheDisable();
  10516c:	ebffffe4 	bl	105104 <Xil_L2CacheDisable>
	Xil_L1DCacheDisable();
}
  105170:	e8bd4008 	pop	{r3, lr}
*
****************************************************************************/
void Xil_DCacheDisable(void)
{
	Xil_L2CacheDisable();
	Xil_L1DCacheDisable();
  105174:	eafffed5 	b	104cd0 <Xil_L1DCacheDisable>

00105178 <Xil_DCacheFlush>:
*
* @note		None.
*
****************************************************************************/
void Xil_DCacheFlush(void)
{
  105178:	e92d4008 	push	{r3, lr}
	Xil_L1DCacheFlush();
  10517c:	ebfffead 	bl	104c38 <Xil_L1DCacheFlush>
	Xil_L2CacheFlush();
}
  105180:	e8bd4008 	pop	{r3, lr}
*
****************************************************************************/
void Xil_DCacheFlush(void)
{
	Xil_L1DCacheFlush();
	Xil_L2CacheFlush();
  105184:	eaffffc3 	b	105098 <Xil_L2CacheFlush>

00105188 <Xil_L2CacheFlushLine>:
*
* @note		The bottom 4 bits are set to 0, forced by architecture.
*
****************************************************************************/
void Xil_L2CacheFlushLine(unsigned int adr)
{
  105188:	e92d4010 	push	{r4, lr}
  10518c:	e1a04000 	mov	r4, r0
#ifdef CONFIG_PL310_ERRATA_588369 
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_CLEAN_PA_OFFSET, adr);
  105190:	e1a01004 	mov	r1, r4
  105194:	e30207b0 	movw	r0, #10160	; 0x27b0
  105198:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  10519c:	eb00008c 	bl	1053d4 <Xil_Out32>
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INVLD_PA_OFFSET, adr);
  1051a0:	e3020770 	movw	r0, #10096	; 0x2770
  1051a4:	e1a01004 	mov	r1, r4
  1051a8:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  1051ac:	eb000088 	bl	1053d4 <Xil_Out32>
static inline void Xil_L2CacheSync(void)
{
	register unsigned int L2CCReg;

	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  1051b0:	e3020730 	movw	r0, #10032	; 0x2730
  1051b4:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  1051b8:	eb00007f 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  1051bc:	e2501000 	subs	r1, r0, #0
  1051c0:	1afffffa 	bne	1051b0 <Xil_L2CacheFlushLine+0x28>

#ifdef CONFIG_PL310_ERRATA_753970
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DUMMY_CACHE_SYNC_OFFSET, 0x0);
  1051c4:	e3a00d9d 	mov	r0, #10048	; 0x2740
  1051c8:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  1051cc:	eb000080 	bl	1053d4 <Xil_Out32>
#else
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_SYNC_OFFSET, 0x0);
#endif	
	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  1051d0:	e3020730 	movw	r0, #10032	; 0x2730
  1051d4:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  1051d8:	eb000077 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  1051dc:	e3500000 	cmp	r0, #0
  1051e0:	1afffffa 	bne	1051d0 <Xil_L2CacheFlushLine+0x48>
#else
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_PA_OFFSET, adr);
#endif
	Xil_L2CacheSync();
	/* synchronize the processor */
	dsb();
  1051e4:	f57ff04f 	dsb	sy
  1051e8:	e8bd8010 	pop	{r4, pc}

001051ec <Xil_DCacheFlushLine>:
*
* @note		The bottom 4 bits are set to 0, forced by architecture.
*
****************************************************************************/
void Xil_DCacheFlushLine(unsigned int adr)
{
  1051ec:	e92d4038 	push	{r3, r4, r5, lr}
  1051f0:	e1a05000 	mov	r5, r0
* @note		The bottom 5 bits are set to 0, forced by architecture.
*
****************************************************************************/
void Xil_L1DCacheFlushLine(unsigned int adr)
{
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
  1051f4:	e3a03000 	mov	r3, #0
  1051f8:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, (adr & (~0x1F)));
  1051fc:	e3c0301f 	bic	r3, r0, #31
  105200:	ee073f3e 	mcr	15, 0, r3, cr7, cr14, {1}

	/* Wait for L1 flush to complete */
	dsb();
  105204:	f57ff04f 	dsb	sy
*
****************************************************************************/
#if defined(CONFIG_PL310_ERRATA_588369) || defined(CONFIG_PL310_ERRATA_727915)
static inline void Xil_L2WriteDebugCtrl(u32 Value)
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DEBUG_CTRL_OFFSET, Value);
  105208:	e3a04dbd 	mov	r4, #12096	; 0x2f40
  10520c:	e34f48f0 	movt	r4, #63728	; 0xf8f0
  105210:	e3a01003 	mov	r1, #3
  105214:	e1a00004 	mov	r0, r4
  105218:	eb00006d 	bl	1053d4 <Xil_Out32>
	Xil_L1DCacheFlushLine(adr);

	/* Disable Write-back and line fills */
	Xil_L2WriteDebugCtrl(0x3);

	Xil_L2CacheFlushLine(adr);
  10521c:	e1a00005 	mov	r0, r5
  105220:	ebffffd8 	bl	105188 <Xil_L2CacheFlushLine>
*
****************************************************************************/
#if defined(CONFIG_PL310_ERRATA_588369) || defined(CONFIG_PL310_ERRATA_727915)
static inline void Xil_L2WriteDebugCtrl(u32 Value)
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DEBUG_CTRL_OFFSET, Value);
  105224:	e1a00004 	mov	r0, r4
  105228:	e3a01000 	mov	r1, #0

	Xil_L2CacheFlushLine(adr);
	
	/* Enable Write-back and line fills */
	Xil_L2WriteDebugCtrl(0x0);
}
  10522c:	e8bd4038 	pop	{r3, r4, r5, lr}
*
****************************************************************************/
#if defined(CONFIG_PL310_ERRATA_588369) || defined(CONFIG_PL310_ERRATA_727915)
static inline void Xil_L2WriteDebugCtrl(u32 Value)
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DEBUG_CTRL_OFFSET, Value);
  105230:	ea000067 	b	1053d4 <Xil_Out32>

00105234 <Xil_L2CacheFlushRange>:
	const unsigned cacheline = 32;
	unsigned int end;
	volatile u32 *L2CCOffset = (volatile u32 *) (XPS_L2CC_BASEADDR +
				    XPS_L2CC_CACHE_INV_CLN_PA_OFFSET);

	if (len != 0) {
  105234:	e3510000 	cmp	r1, #0
*
* @note		None.
*
****************************************************************************/
void Xil_L2CacheFlushRange(unsigned int adr, unsigned len)
{
  105238:	e92d4070 	push	{r4, r5, r6, lr}
	const unsigned cacheline = 32;
	unsigned int end;
	volatile u32 *L2CCOffset = (volatile u32 *) (XPS_L2CC_BASEADDR +
				    XPS_L2CC_CACHE_INV_CLN_PA_OFFSET);

	if (len != 0) {
  10523c:	1a000001 	bne	105248 <Xil_L2CacheFlushRange+0x14>

		/* Enable Write-back and line fills */
		Xil_L2WriteDebugCtrl(0x0);
	}
	/* synchronize the processor */
	dsb();
  105240:	f57ff04f 	dsb	sy
  105244:	e8bd8070 	pop	{r4, r5, r6, pc}

	if (len != 0) {
		/* Back the starting address up to the start of a cache line
		 * perform cache operations until adr+len
		 */
		end = adr + len;
  105248:	e0815000 	add	r5, r1, r0
		adr = adr & ~(cacheline - 1);
  10524c:	e3c0401f 	bic	r4, r0, #31
*
****************************************************************************/
#if defined(CONFIG_PL310_ERRATA_588369) || defined(CONFIG_PL310_ERRATA_727915)
static inline void Xil_L2WriteDebugCtrl(u32 Value)
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DEBUG_CTRL_OFFSET, Value);
  105250:	e3a01003 	mov	r1, #3
  105254:	e3a00dbd 	mov	r0, #12096	; 0x2f40
  105258:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  10525c:	eb00005c 	bl	1053d4 <Xil_Out32>
		adr = adr & ~(cacheline - 1);

		/* Disable Write-back and line fills */
		Xil_L2WriteDebugCtrl(0x3);

		while (adr < end) {
  105260:	e1550004 	cmp	r5, r4
			*L2CCOffset = adr;
  105264:	83a06a02 	movhi	r6, #8192	; 0x2000
  105268:	834f68f0 	movthi	r6, #63728	; 0xf8f0
		adr = adr & ~(cacheline - 1);

		/* Disable Write-back and line fills */
		Xil_L2WriteDebugCtrl(0x3);

		while (adr < end) {
  10526c:	9a000010 	bls	1052b4 <Xil_L2CacheFlushRange+0x80>
			*L2CCOffset = adr;
  105270:	e58647f0 	str	r4, [r6, #2032]	; 0x7f0
static inline void Xil_L2CacheSync(void)
{
	register unsigned int L2CCReg;

	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  105274:	e3020730 	movw	r0, #10032	; 0x2730
  105278:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  10527c:	eb00004e 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  105280:	e2501000 	subs	r1, r0, #0
  105284:	1afffffa 	bne	105274 <Xil_L2CacheFlushRange+0x40>

#ifdef CONFIG_PL310_ERRATA_753970
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DUMMY_CACHE_SYNC_OFFSET, 0x0);
  105288:	e3a00d9d 	mov	r0, #10048	; 0x2740
  10528c:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  105290:	eb00004f 	bl	1053d4 <Xil_Out32>
#else
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_SYNC_OFFSET, 0x0);
#endif	
	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  105294:	e3020730 	movw	r0, #10032	; 0x2730
  105298:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  10529c:	eb000046 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  1052a0:	e3500000 	cmp	r0, #0
  1052a4:	1afffffa 	bne	105294 <Xil_L2CacheFlushRange+0x60>
		Xil_L2WriteDebugCtrl(0x3);

		while (adr < end) {
			*L2CCOffset = adr;
			Xil_L2CacheSync();
			adr += cacheline;
  1052a8:	e2844020 	add	r4, r4, #32
		adr = adr & ~(cacheline - 1);

		/* Disable Write-back and line fills */
		Xil_L2WriteDebugCtrl(0x3);

		while (adr < end) {
  1052ac:	e1550004 	cmp	r5, r4
  1052b0:	8affffee 	bhi	105270 <Xil_L2CacheFlushRange+0x3c>
*
****************************************************************************/
#if defined(CONFIG_PL310_ERRATA_588369) || defined(CONFIG_PL310_ERRATA_727915)
static inline void Xil_L2WriteDebugCtrl(u32 Value)
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DEBUG_CTRL_OFFSET, Value);
  1052b4:	e3a01000 	mov	r1, #0
  1052b8:	e3a00dbd 	mov	r0, #12096	; 0x2f40
  1052bc:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  1052c0:	eb000043 	bl	1053d4 <Xil_Out32>

		/* Enable Write-back and line fills */
		Xil_L2WriteDebugCtrl(0x0);
	}
	/* synchronize the processor */
	dsb();
  1052c4:	f57ff04f 	dsb	sy
  1052c8:	e8bd8070 	pop	{r4, r5, r6, pc}

001052cc <Xil_L2CacheStoreLine>:
*
* @note		The bottom 4 bits are set to 0, forced by architecture.
*
****************************************************************************/
void Xil_L2CacheStoreLine(unsigned int adr)
{
  1052cc:	e1a01000 	mov	r1, r0
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_CLEAN_PA_OFFSET, adr);
  1052d0:	e30207b0 	movw	r0, #10160	; 0x27b0
*
* @note		The bottom 4 bits are set to 0, forced by architecture.
*
****************************************************************************/
void Xil_L2CacheStoreLine(unsigned int adr)
{
  1052d4:	e92d4008 	push	{r3, lr}
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_CLEAN_PA_OFFSET, adr);
  1052d8:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  1052dc:	eb00003c 	bl	1053d4 <Xil_Out32>
static inline void Xil_L2CacheSync(void)
{
	register unsigned int L2CCReg;

	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  1052e0:	e3020730 	movw	r0, #10032	; 0x2730
  1052e4:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  1052e8:	eb000033 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  1052ec:	e2501000 	subs	r1, r0, #0
  1052f0:	1afffffa 	bne	1052e0 <Xil_L2CacheStoreLine+0x14>

#ifdef CONFIG_PL310_ERRATA_753970
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_DUMMY_CACHE_SYNC_OFFSET, 0x0);
  1052f4:	e3a00d9d 	mov	r0, #10048	; 0x2740
  1052f8:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  1052fc:	eb000034 	bl	1053d4 <Xil_Out32>
#else
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_SYNC_OFFSET, 0x0);
#endif	
	do {
		L2CCReg = Xil_In32(XPS_L2CC_BASEADDR +
  105300:	e3020730 	movw	r0, #10032	; 0x2730
  105304:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  105308:	eb00002b 	bl	1053bc <Xil_In32>
				   XPS_L2CC_CACHE_SYNC_OFFSET);
	} while (L2CCReg != 0);
  10530c:	e3500000 	cmp	r0, #0
  105310:	1afffffa 	bne	105300 <Xil_L2CacheStoreLine+0x34>
{
	Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_CLEAN_PA_OFFSET, adr);
	Xil_L2CacheSync();

	/* synchronize the processor */
	dsb();
  105314:	f57ff04f 	dsb	sy
  105318:	e8bd8008 	pop	{r3, pc}

0010531c <Xil_DCacheStoreLine>:
* @note		The bottom 5 bits are set to 0, forced by architecture.
*
****************************************************************************/
void Xil_L1DCacheStoreLine(unsigned int adr)
{
	mtcp(XREG_CP15_CACHE_SIZE_SEL, 0);
  10531c:	e3a03000 	mov	r3, #0
  105320:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
	mtcp(XREG_CP15_CLEAN_DC_LINE_MVA_POC, (adr & (~0x1F)));
  105324:	e3c0301f 	bic	r3, r0, #31
  105328:	ee073f3a 	mcr	15, 0, r3, cr7, cr10, {1}
	
	/* Wait for L1 store to complete */
	dsb();
  10532c:	f57ff04f 	dsb	sy
*
****************************************************************************/
void Xil_DCacheStoreLine(unsigned int adr)
{
	Xil_L1DCacheStoreLine(adr);
	Xil_L2CacheStoreLine(adr);
  105330:	eaffffe5 	b	1052cc <Xil_L2CacheStoreLine>

00105334 <Xil_ExceptionNullHandler>:
*
* @note		None.
*
*****************************************************************************/
static void Xil_ExceptionNullHandler(void *Data)
{
  105334:	eafffffe 	b	105334 <Xil_ExceptionNullHandler>

00105338 <Xil_ExceptionInit>:
*
* @note		None.
*
*****************************************************************************/
void Xil_ExceptionInit(void)
{
  105338:	e3082094 	movw	r2, #32916	; 0x8094
****************************************************************************/
void Xil_ExceptionRegisterHandler(u32 exception_id,
				    Xil_ExceptionHandler Handler,
				    void *Data)
{
	XExc_VectorTable[exception_id].Handler = Handler;
  10533c:	e305c334 	movw	ip, #21300	; 0x5334
  105340:	e3402012 	movt	r2, #18
  105344:	e340c010 	movt	ip, #16
*
* @note		None.
*
*****************************************************************************/
void Xil_ExceptionInit(void)
{
  105348:	e3a03000 	mov	r3, #0
	 * Initialize the vector table. Register the stub Handler for each
	 * exception.
	 */
	for(index = XIL_EXCEPTION_ID_FIRST; index < XIL_EXCEPTION_ID_LAST + 1;
	    index++) {
		if (XExc_VectorTable[index].Handler == NULL) {
  10534c:	e7921003 	ldr	r1, [r2, r3]
  105350:	e0820003 	add	r0, r2, r3
  105354:	e3510000 	cmp	r1, #0
****************************************************************************/
void Xil_ExceptionRegisterHandler(u32 exception_id,
				    Xil_ExceptionHandler Handler,
				    void *Data)
{
	XExc_VectorTable[exception_id].Handler = Handler;
  105358:	0782c003 	streq	ip, [r2, r3]
  10535c:	e2833008 	add	r3, r3, #8
	XExc_VectorTable[exception_id].Data = Data;
  105360:	05801004 	streq	r1, [r0, #4]

	/*
	 * Initialize the vector table. Register the stub Handler for each
	 * exception.
	 */
	for(index = XIL_EXCEPTION_ID_FIRST; index < XIL_EXCEPTION_ID_LAST + 1;
  105364:	e3530038 	cmp	r3, #56	; 0x38
  105368:	1afffff7 	bne	10534c <Xil_ExceptionInit+0x14>
			Xil_ExceptionRegisterHandler(index,
						     Xil_ExceptionNullHandler,
						     NULL);
		}
	}
}
  10536c:	e12fff1e 	bx	lr

00105370 <Xil_ExceptionRegisterHandler>:
****************************************************************************/
void Xil_ExceptionRegisterHandler(u32 exception_id,
				    Xil_ExceptionHandler Handler,
				    void *Data)
{
	XExc_VectorTable[exception_id].Handler = Handler;
  105370:	e3083094 	movw	r3, #32916	; 0x8094
  105374:	e3403012 	movt	r3, #18
	XExc_VectorTable[exception_id].Data = Data;
  105378:	e083c180 	add	ip, r3, r0, lsl #3
****************************************************************************/
void Xil_ExceptionRegisterHandler(u32 exception_id,
				    Xil_ExceptionHandler Handler,
				    void *Data)
{
	XExc_VectorTable[exception_id].Handler = Handler;
  10537c:	e7831180 	str	r1, [r3, r0, lsl #3]
	XExc_VectorTable[exception_id].Data = Data;
  105380:	e58c2004 	str	r2, [ip, #4]
  105384:	e12fff1e 	bx	lr

00105388 <Xil_ExceptionRemoveHandler>:
****************************************************************************/
void Xil_ExceptionRegisterHandler(u32 exception_id,
				    Xil_ExceptionHandler Handler,
				    void *Data)
{
	XExc_VectorTable[exception_id].Handler = Handler;
  105388:	e3083094 	movw	r3, #32916	; 0x8094
  10538c:	e3403012 	movt	r3, #18
	XExc_VectorTable[exception_id].Data = Data;
  105390:	e0831180 	add	r1, r3, r0, lsl #3
****************************************************************************/
void Xil_ExceptionRegisterHandler(u32 exception_id,
				    Xil_ExceptionHandler Handler,
				    void *Data)
{
	XExc_VectorTable[exception_id].Handler = Handler;
  105394:	e3052334 	movw	r2, #21300	; 0x5334
  105398:	e3402010 	movt	r2, #16
  10539c:	e7832180 	str	r2, [r3, r0, lsl #3]
	XExc_VectorTable[exception_id].Data = Data;
  1053a0:	e3a03000 	mov	r3, #0
  1053a4:	e5813004 	str	r3, [r1, #4]
  1053a8:	e12fff1e 	bx	lr

001053ac <Xil_In8>:
* @note		None.
*
******************************************************************************/
u8 Xil_In8(u32 Addr)
{
	return *(volatile u8 *) Addr;
  1053ac:	e5d00000 	ldrb	r0, [r0]
}
  1053b0:	e12fff1e 	bx	lr

001053b4 <Xil_In16>:
* @note		None.
*
******************************************************************************/
u16 Xil_In16(u32 Addr)
{
	return *(volatile u16 *) Addr;
  1053b4:	e1d000b0 	ldrh	r0, [r0]
}
  1053b8:	e12fff1e 	bx	lr

001053bc <Xil_In32>:
* @note		None.
*
******************************************************************************/
u32 Xil_In32(u32 Addr)
{
	return *(volatile u32 *) Addr;
  1053bc:	e5900000 	ldr	r0, [r0]
}
  1053c0:	e12fff1e 	bx	lr

001053c4 <Xil_Out8>:
* @note		None.
*
******************************************************************************/
void Xil_Out8(u32 OutAddress, u8 Value)
{
	*(volatile u8 *) OutAddress = Value;
  1053c4:	e5c01000 	strb	r1, [r0]
  1053c8:	e12fff1e 	bx	lr

001053cc <Xil_Out16>:
* @note		None.
*
******************************************************************************/
void Xil_Out16(u32 OutAddress, u16 Value)
{
	*(volatile u16 *) OutAddress = Value;
  1053cc:	e1c010b0 	strh	r1, [r0]
  1053d0:	e12fff1e 	bx	lr

001053d4 <Xil_Out32>:
* @note		None.
*
******************************************************************************/
void Xil_Out32(u32 OutAddress, u32 Value)
{
	*(volatile u32 *) OutAddress = Value;
  1053d4:	e5801000 	str	r1, [r0]
  1053d8:	e12fff1e 	bx	lr

001053dc <Xil_In16BE>:
* @note		None.
*
******************************************************************************/
u16 Xil_In16(u32 Addr)
{
	return *(volatile u16 *) Addr;
  1053dc:	e1d030b0 	ldrh	r3, [r0]
* @note		None.
*
******************************************************************************/
u16 Xil_EndianSwap16(u16 Data)
{
	return (u16) (((Data & 0xFF00) >> 8) | ((Data & 0x00FF) << 8));
  1053e0:	e1a02423 	lsr	r2, r3, #8
  1053e4:	e1820403 	orr	r0, r2, r3, lsl #8
	temp = Xil_In16(Addr);

	result = Xil_EndianSwap16(temp);

	return result;
}
  1053e8:	e6ff0070 	uxth	r0, r0
  1053ec:	e12fff1e 	bx	lr

001053f0 <Xil_In32BE>:
* @note		None.
*
******************************************************************************/
u32 Xil_In32(u32 Addr)
{
	return *(volatile u32 *) Addr;
  1053f0:	e5903000 	ldr	r3, [r0]
	LoWord = (u16) (Data & 0x0000FFFF);
	HiWord = (u16) ((Data & 0xFFFF0000) >> 16);

	/* byte swap each of the 16 bit half words */

	LoWord = (((LoWord & 0xFF00) >> 8) | ((LoWord & 0x00FF) << 8));
  1053f4:	e7e70453 	ubfx	r0, r3, #8, #8
	u16 HiWord;

	/* get each of the half words from the 32 bit word */

	LoWord = (u16) (Data & 0x0000FFFF);
	HiWord = (u16) ((Data & 0xFFFF0000) >> 16);
  1053f8:	e1a02823 	lsr	r2, r3, #16
	HiWord = (((HiWord & 0xFF00) >> 8) | ((HiWord & 0x00FF) << 8));

	/* swap the half words before returning the value */

	return (u32) ((LoWord << 16) | HiWord);
}
  1053fc:	e6ff3073 	uxth	r3, r3
	HiWord = (u16) ((Data & 0xFFFF0000) >> 16);

	/* byte swap each of the 16 bit half words */

	LoWord = (((LoWord & 0xFF00) >> 8) | ((LoWord & 0x00FF) << 8));
	HiWord = (((HiWord & 0xFF00) >> 8) | ((HiWord & 0x00FF) << 8));
  105400:	e1a01422 	lsr	r1, r2, #8
	LoWord = (u16) (Data & 0x0000FFFF);
	HiWord = (u16) ((Data & 0xFFFF0000) >> 16);

	/* byte swap each of the 16 bit half words */

	LoWord = (((LoWord & 0xFF00) >> 8) | ((LoWord & 0x00FF) << 8));
  105404:	e1800403 	orr	r0, r0, r3, lsl #8
	HiWord = (((HiWord & 0xFF00) >> 8) | ((HiWord & 0x00FF) << 8));
  105408:	e1812402 	orr	r2, r1, r2, lsl #8

	/* swap the half words before returning the value */

	return (u32) ((LoWord << 16) | HiWord);
  10540c:	e6ff2072 	uxth	r2, r2
	temp = Xil_In32(Addr);

	result = Xil_EndianSwap32(temp);

	return result;
}
  105410:	e1820800 	orr	r0, r2, r0, lsl #16
  105414:	e12fff1e 	bx	lr

00105418 <Xil_Out16BE>:
* @note		None.
*
******************************************************************************/
u16 Xil_EndianSwap16(u16 Data)
{
	return (u16) (((Data & 0xFF00) >> 8) | ((Data & 0x00FF) << 8));
  105418:	e1a03421 	lsr	r3, r1, #8
  10541c:	e1831401 	orr	r1, r3, r1, lsl #8
* @note		None.
*
******************************************************************************/
void Xil_Out16(u32 OutAddress, u16 Value)
{
	*(volatile u16 *) OutAddress = Value;
  105420:	e1c010b0 	strh	r1, [r0]
  105424:	e12fff1e 	bx	lr

00105428 <Xil_Out32BE>:
	u16 HiWord;

	/* get each of the half words from the 32 bit word */

	LoWord = (u16) (Data & 0x0000FFFF);
	HiWord = (u16) ((Data & 0xFFFF0000) >> 16);
  105428:	e1a03821 	lsr	r3, r1, #16

	/* byte swap each of the 16 bit half words */

	LoWord = (((LoWord & 0xFF00) >> 8) | ((LoWord & 0x00FF) << 8));
  10542c:	e7e72451 	ubfx	r2, r1, #8, #8
	HiWord = (((HiWord & 0xFF00) >> 8) | ((HiWord & 0x00FF) << 8));

	/* swap the half words before returning the value */

	return (u32) ((LoWord << 16) | HiWord);
}
  105430:	e6ff1071 	uxth	r1, r1
	HiWord = (u16) ((Data & 0xFFFF0000) >> 16);

	/* byte swap each of the 16 bit half words */

	LoWord = (((LoWord & 0xFF00) >> 8) | ((LoWord & 0x00FF) << 8));
	HiWord = (((HiWord & 0xFF00) >> 8) | ((HiWord & 0x00FF) << 8));
  105434:	e1a0c423 	lsr	ip, r3, #8
  105438:	e18c3403 	orr	r3, ip, r3, lsl #8
	LoWord = (u16) (Data & 0x0000FFFF);
	HiWord = (u16) ((Data & 0xFFFF0000) >> 16);

	/* byte swap each of the 16 bit half words */

	LoWord = (((LoWord & 0xFF00) >> 8) | ((LoWord & 0x00FF) << 8));
  10543c:	e1821401 	orr	r1, r2, r1, lsl #8
	HiWord = (((HiWord & 0xFF00) >> 8) | ((HiWord & 0x00FF) << 8));

	/* swap the half words before returning the value */

	return (u32) ((LoWord << 16) | HiWord);
  105440:	e6ff3073 	uxth	r3, r3
  105444:	e1831801 	orr	r1, r3, r1, lsl #16
* @note		None.
*
******************************************************************************/
void Xil_Out32(u32 OutAddress, u32 Value)
{
	*(volatile u32 *) OutAddress = Value;
  105448:	e5801000 	str	r1, [r0]
  10544c:	e12fff1e 	bx	lr

00105450 <Xil_EndianSwap16>:
* @note		None.
*
******************************************************************************/
u16 Xil_EndianSwap16(u16 Data)
{
	return (u16) (((Data & 0xFF00) >> 8) | ((Data & 0x00FF) << 8));
  105450:	e1a03420 	lsr	r3, r0, #8
  105454:	e1830400 	orr	r0, r3, r0, lsl #8
}
  105458:	e6ff0070 	uxth	r0, r0
  10545c:	e12fff1e 	bx	lr

00105460 <Xil_EndianSwap32>:
	u16 HiWord;

	/* get each of the half words from the 32 bit word */

	LoWord = (u16) (Data & 0x0000FFFF);
	HiWord = (u16) ((Data & 0xFFFF0000) >> 16);
  105460:	e1a03820 	lsr	r3, r0, #16

	/* byte swap each of the 16 bit half words */

	LoWord = (((LoWord & 0xFF00) >> 8) | ((LoWord & 0x00FF) << 8));
  105464:	e7e71450 	ubfx	r1, r0, #8, #8
	HiWord = (((HiWord & 0xFF00) >> 8) | ((HiWord & 0x00FF) << 8));

	/* swap the half words before returning the value */

	return (u32) ((LoWord << 16) | HiWord);
}
  105468:	e6ff0070 	uxth	r0, r0
	HiWord = (u16) ((Data & 0xFFFF0000) >> 16);

	/* byte swap each of the 16 bit half words */

	LoWord = (((LoWord & 0xFF00) >> 8) | ((LoWord & 0x00FF) << 8));
	HiWord = (((HiWord & 0xFF00) >> 8) | ((HiWord & 0x00FF) << 8));
  10546c:	e1a02423 	lsr	r2, r3, #8
  105470:	e1823403 	orr	r3, r2, r3, lsl #8
	LoWord = (u16) (Data & 0x0000FFFF);
	HiWord = (u16) ((Data & 0xFFFF0000) >> 16);

	/* byte swap each of the 16 bit half words */

	LoWord = (((LoWord & 0xFF00) >> 8) | ((LoWord & 0x00FF) << 8));
  105474:	e1810400 	orr	r0, r1, r0, lsl #8
	HiWord = (((HiWord & 0xFF00) >> 8) | ((HiWord & 0x00FF) << 8));

	/* swap the half words before returning the value */

	return (u32) ((LoWord << 16) | HiWord);
  105478:	e6ff3073 	uxth	r3, r3
}
  10547c:	e1830800 	orr	r0, r3, r0, lsl #16
  105480:	e12fff1e 	bx	lr

00105484 <padding>:
/*                                                   */
/* This routine puts pad characters into the output  */
/* buffer.                                           */
/*                                                   */
void padding( const int l_flag, params_t *par)
{
  105484:	e92d4038 	push	{r3, r4, r5, lr}
  105488:	e1a05001 	mov	r5, r1
    int i;

    if (par->do_padding && l_flag && (par->len < par->num1))
  10548c:	e5913010 	ldr	r3, [r1, #16]
  105490:	e3530000 	cmp	r3, #0
  105494:	08bd8038 	popeq	{r3, r4, r5, pc}
  105498:	e3500000 	cmp	r0, #0
  10549c:	08bd8038 	popeq	{r3, r4, r5, pc}
  1054a0:	e5914000 	ldr	r4, [r1]
  1054a4:	e5913004 	ldr	r3, [r1, #4]
  1054a8:	e1540003 	cmp	r4, r3
  1054ac:	a8bd8038 	popge	{r3, r4, r5, pc}
        for (i=par->len; i<par->num1; i++)
            outbyte( par->pad_character);
  1054b0:	e5d5000c 	ldrb	r0, [r5, #12]
void padding( const int l_flag, params_t *par)
{
    int i;

    if (par->do_padding && l_flag && (par->len < par->num1))
        for (i=par->len; i<par->num1; i++)
  1054b4:	e2844001 	add	r4, r4, #1
            outbyte( par->pad_character);
  1054b8:	eb0001c8 	bl	105be0 <outbyte>
void padding( const int l_flag, params_t *par)
{
    int i;

    if (par->do_padding && l_flag && (par->len < par->num1))
        for (i=par->len; i<par->num1; i++)
  1054bc:	e5953004 	ldr	r3, [r5, #4]
  1054c0:	e1540003 	cmp	r4, r3
  1054c4:	bafffff9 	blt	1054b0 <padding+0x2c>
  1054c8:	e8bd8038 	pop	{r3, r4, r5, pc}

001054cc <outs>:
/*                                                   */
/* This routine moves a string to the output buffer  */
/* as directed by the padding and positioning flags. */
/*                                                   */
void outs( charptr lp, params_t *par)
{
  1054cc:	e92d4038 	push	{r3, r4, r5, lr}
  1054d0:	e1a05001 	mov	r5, r1
  1054d4:	e1a04000 	mov	r4, r0
    /* pad on left if needed                         */
    par->len = strlen( lp);
  1054d8:	eb000543 	bl	1069ec <strlen>
    padding( !(par->left_flag), par);
  1054dc:	e5953014 	ldr	r3, [r5, #20]
  1054e0:	e1a01005 	mov	r1, r5
/* as directed by the padding and positioning flags. */
/*                                                   */
void outs( charptr lp, params_t *par)
{
    /* pad on left if needed                         */
    par->len = strlen( lp);
  1054e4:	e5850000 	str	r0, [r5]
    padding( !(par->left_flag), par);
  1054e8:	e2730001 	rsbs	r0, r3, #1
  1054ec:	33a00000 	movcc	r0, #0
  1054f0:	ebffffe3 	bl	105484 <padding>

    /* Move string to the buffer                     */
    while (*lp && (par->num2)--)
  1054f4:	e5d43000 	ldrb	r3, [r4]
  1054f8:	e3530000 	cmp	r3, #0
  1054fc:	0a000010 	beq	105544 <outs+0x78>
  105500:	e5953008 	ldr	r3, [r5, #8]
  105504:	e3530000 	cmp	r3, #0
  105508:	e2433001 	sub	r3, r3, #1
  10550c:	e5853008 	str	r3, [r5, #8]
  105510:	0a00000b 	beq	105544 <outs+0x78>
/*---------------------------------------------------*/
/*                                                   */
/* This routine moves a string to the output buffer  */
/* as directed by the padding and positioning flags. */
/*                                                   */
void outs( charptr lp, params_t *par)
  105514:	e2444001 	sub	r4, r4, #1
  105518:	ea000004 	b	105530 <outs+0x64>
    /* pad on left if needed                         */
    par->len = strlen( lp);
    padding( !(par->left_flag), par);

    /* Move string to the buffer                     */
    while (*lp && (par->num2)--)
  10551c:	e5953008 	ldr	r3, [r5, #8]
  105520:	e3530000 	cmp	r3, #0
  105524:	e2433001 	sub	r3, r3, #1
  105528:	e5853008 	str	r3, [r5, #8]
  10552c:	0a000004 	beq	105544 <outs+0x78>
        outbyte( *lp++);
  105530:	e5f40001 	ldrb	r0, [r4, #1]!
  105534:	eb0001a9 	bl	105be0 <outbyte>
    /* pad on left if needed                         */
    par->len = strlen( lp);
    padding( !(par->left_flag), par);

    /* Move string to the buffer                     */
    while (*lp && (par->num2)--)
  105538:	e5d43001 	ldrb	r3, [r4, #1]
  10553c:	e3530000 	cmp	r3, #0
  105540:	1afffff5 	bne	10551c <outs+0x50>
        outbyte( *lp++);

    /* Pad on right if needed                        */
    /* CR 439175 - elided next stmt. Seemed bogus.   */
    /* par->len = strlen( lp);                       */
    padding( par->left_flag, par);
  105544:	e5950014 	ldr	r0, [r5, #20]
  105548:	e1a01005 	mov	r1, r5
}
  10554c:	e8bd4038 	pop	{r3, r4, r5, lr}
        outbyte( *lp++);

    /* Pad on right if needed                        */
    /* CR 439175 - elided next stmt. Seemed bogus.   */
    /* par->len = strlen( lp);                       */
    padding( par->left_flag, par);
  105550:	eaffffcb 	b	105484 <padding>

00105554 <outnum>:
void outnum( const long n, const long base, params_t *par)
{
    charptr cp;
    int negative;
    char outbuf[32];
    const char digits[] = "0123456789ABCDEF";
  105554:	e300c100 	movw	ip, #256	; 0x100
  105558:	e340c011 	movt	ip, #17
/* This routine moves a number to the output buffer  */
/* as directed by the padding and positioning flags. */
/*                                                   */

void outnum( const long n, const long base, params_t *par)
{
  10555c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  105560:	e1a05000 	mov	r5, r0
  105564:	e1a06001 	mov	r6, r1
    char outbuf[32];
    const char digits[] = "0123456789ABCDEF";
    unsigned long num;

    /* Check if number is negative                   */
    if (base == 10 && n < 0L) {
  105568:	e1a04fa0 	lsr	r4, r0, #31
/* This routine moves a number to the output buffer  */
/* as directed by the padding and positioning flags. */
/*                                                   */

void outnum( const long n, const long base, params_t *par)
{
  10556c:	e1a07002 	mov	r7, r2
  105570:	e24dd038 	sub	sp, sp, #56	; 0x38
    charptr cp;
    int negative;
    char outbuf[32];
    const char digits[] = "0123456789ABCDEF";
  105574:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
    unsigned long num;

    /* Check if number is negative                   */
    if (base == 10 && n < 0L) {
  105578:	e356000a 	cmp	r6, #10
  10557c:	13a04000 	movne	r4, #0
  105580:	02044001 	andeq	r4, r4, #1
void outnum( const long n, const long base, params_t *par)
{
    charptr cp;
    int negative;
    char outbuf[32];
    const char digits[] = "0123456789ABCDEF";
  105584:	e28de004 	add	lr, sp, #4
    unsigned long num;

    /* Check if number is negative                   */
    if (base == 10 && n < 0L) {
  105588:	e3540000 	cmp	r4, #0
        negative = 1;
        num = -(n);
  10558c:	12655000 	rsbne	r5, r5, #0
    const char digits[] = "0123456789ABCDEF";
    unsigned long num;

    /* Check if number is negative                   */
    if (base == 10 && n < 0L) {
        negative = 1;
  105590:	13a08001 	movne	r8, #1
        num = -(n);
    }
    else{
        num = (n);
        negative = 0;
  105594:	01a08004 	moveq	r8, r4
void outnum( const long n, const long base, params_t *par)
{
    charptr cp;
    int negative;
    char outbuf[32];
    const char digits[] = "0123456789ABCDEF";
  105598:	e59cc000 	ldr	ip, [ip]
  10559c:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
/*                                                   */
/* This routine moves a number to the output buffer  */
/* as directed by the padding and positioning flags. */
/*                                                   */

void outnum( const long n, const long base, params_t *par)
  1055a0:	e28d3019 	add	r3, sp, #25
{
    charptr cp;
    int negative;
    char outbuf[32];
    const char digits[] = "0123456789ABCDEF";
  1055a4:	e5cec000 	strb	ip, [lr]
    }

    /* Build number (backwards) in outbuf            */
    cp = outbuf;
    do {
        *cp++ = digits[(int)(num % base)];
  1055a8:	e1a00005 	mov	r0, r5
  1055ac:	e1a01006 	mov	r1, r6
/*                                                   */
/* This routine moves a number to the output buffer  */
/* as directed by the padding and positioning flags. */
/*                                                   */

void outnum( const long n, const long base, params_t *par)
  1055b0:	e1a04003 	mov	r4, r3
    }

    /* Build number (backwards) in outbuf            */
    cp = outbuf;
    do {
        *cp++ = digits[(int)(num % base)];
  1055b4:	eb00021f 	bl	105e38 <__aeabi_uidivmod>
  1055b8:	e28d2038 	add	r2, sp, #56	; 0x38
    } while ((num /= base) > 0);
  1055bc:	e1a00005 	mov	r0, r5
    }

    /* Build number (backwards) in outbuf            */
    cp = outbuf;
    do {
        *cp++ = digits[(int)(num % base)];
  1055c0:	e0823001 	add	r3, r2, r1
    } while ((num /= base) > 0);
  1055c4:	e1a01006 	mov	r1, r6
    }

    /* Build number (backwards) in outbuf            */
    cp = outbuf;
    do {
        *cp++ = digits[(int)(num % base)];
  1055c8:	e5533034 	ldrb	r3, [r3, #-52]	; 0xffffffcc
  1055cc:	e5443001 	strb	r3, [r4, #-1]
    } while ((num /= base) > 0);
  1055d0:	eb00019d 	bl	105c4c <__aeabi_uidiv>
  1055d4:	e2843001 	add	r3, r4, #1
  1055d8:	e2505000 	subs	r5, r0, #0
  1055dc:	1afffff1 	bne	1055a8 <outnum+0x54>
    if (negative)
  1055e0:	e3580000 	cmp	r8, #0
        *cp++ = '-';
    *cp-- = 0;

    /* Move the converted number to the buffer and   */
    /* add in the padding where needed.              */
    par->len = strlen(outbuf);
  1055e4:	e28d5018 	add	r5, sp, #24
    cp = outbuf;
    do {
        *cp++ = digits[(int)(num % base)];
    } while ((num /= base) > 0);
    if (negative)
        *cp++ = '-';
  1055e8:	13a0202d 	movne	r2, #45	; 0x2d
  1055ec:	15c42000 	strbne	r2, [r4]
  1055f0:	11a04003 	movne	r4, r3
    *cp-- = 0;

    /* Move the converted number to the buffer and   */
    /* add in the padding where needed.              */
    par->len = strlen(outbuf);
  1055f4:	e1a00005 	mov	r0, r5
    do {
        *cp++ = digits[(int)(num % base)];
    } while ((num /= base) > 0);
    if (negative)
        *cp++ = '-';
    *cp-- = 0;
  1055f8:	e1a06004 	mov	r6, r4
  1055fc:	e3a03000 	mov	r3, #0
  105600:	e4463001 	strb	r3, [r6], #-1

    /* Move the converted number to the buffer and   */
    /* add in the padding where needed.              */
    par->len = strlen(outbuf);
  105604:	eb0004f8 	bl	1069ec <strlen>
    padding( !(par->left_flag), par);
  105608:	e5973014 	ldr	r3, [r7, #20]
  10560c:	e1a01007 	mov	r1, r7
        *cp++ = '-';
    *cp-- = 0;

    /* Move the converted number to the buffer and   */
    /* add in the padding where needed.              */
    par->len = strlen(outbuf);
  105610:	e5870000 	str	r0, [r7]
    padding( !(par->left_flag), par);
  105614:	e2730001 	rsbs	r0, r3, #1
  105618:	33a00000 	movcc	r0, #0
  10561c:	ebffff98 	bl	105484 <padding>
    while (cp >= outbuf)
  105620:	e1550006 	cmp	r5, r6
  105624:	8a000003 	bhi	105638 <outnum+0xe4>
        outbyte( *cp--);
  105628:	e5740001 	ldrb	r0, [r4, #-1]!
  10562c:	eb00016b 	bl	105be0 <outbyte>

    /* Move the converted number to the buffer and   */
    /* add in the padding where needed.              */
    par->len = strlen(outbuf);
    padding( !(par->left_flag), par);
    while (cp >= outbuf)
  105630:	e1540005 	cmp	r4, r5
  105634:	1afffffb 	bne	105628 <outnum+0xd4>
        outbyte( *cp--);
    padding( par->left_flag, par);
  105638:	e5970014 	ldr	r0, [r7, #20]
  10563c:	e1a01007 	mov	r1, r7
  105640:	ebffff8f 	bl	105484 <padding>
}
  105644:	e28dd038 	add	sp, sp, #56	; 0x38
  105648:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0010564c <getnum>:
/*                                                   */
/* This routine gets a number from the format        */
/* string.                                           */
/*                                                   */
int getnum( charptr* linep)
{
  10564c:	e92d0070 	push	{r4, r5, r6}
    int n;
    charptr cp;

    n = 0;
    cp = *linep;
    while (isdigit(((int)*cp)))
  105650:	e30f3c20 	movw	r3, #64544	; 0xfc20
{
    int n;
    charptr cp;

    n = 0;
    cp = *linep;
  105654:	e5904000 	ldr	r4, [r0]
    while (isdigit(((int)*cp)))
  105658:	e3403011 	movt	r3, #17
/*                                                   */
/* This routine gets a number from the format        */
/* string.                                           */
/*                                                   */
int getnum( charptr* linep)
{
  10565c:	e1a06000 	mov	r6, r0
    int n;
    charptr cp;

    n = 0;
    cp = *linep;
    while (isdigit(((int)*cp)))
  105660:	e5935000 	ldr	r5, [r3]
  105664:	e5d43000 	ldrb	r3, [r4]
  105668:	e0852003 	add	r2, r5, r3
  10566c:	e5d20001 	ldrb	r0, [r2, #1]
  105670:	e2000004 	and	r0, r0, #4
  105674:	e6ef0070 	uxtb	r0, r0
  105678:	e3500000 	cmp	r0, #0
  10567c:	0a00000c 	beq	1056b4 <getnum+0x68>
/*---------------------------------------------------*/
/*                                                   */
/* This routine gets a number from the format        */
/* string.                                           */
/*                                                   */
int getnum( charptr* linep)
  105680:	e2842001 	add	r2, r4, #1
{
    int n;
    charptr cp;

    n = 0;
  105684:	e3a00000 	mov	r0, #0
    cp = *linep;
    while (isdigit(((int)*cp)))
        n = n*10 + ((*cp++) - '0');
  105688:	e243c030 	sub	ip, r3, #48	; 0x30
  10568c:	e1a04002 	mov	r4, r2
    int n;
    charptr cp;

    n = 0;
    cp = *linep;
    while (isdigit(((int)*cp)))
  105690:	e4d23001 	ldrb	r3, [r2], #1
        n = n*10 + ((*cp++) - '0');
  105694:	e0800100 	add	r0, r0, r0, lsl #2
    int n;
    charptr cp;

    n = 0;
    cp = *linep;
    while (isdigit(((int)*cp)))
  105698:	e0851003 	add	r1, r5, r3
        n = n*10 + ((*cp++) - '0');
  10569c:	e08c0080 	add	r0, ip, r0, lsl #1
    int n;
    charptr cp;

    n = 0;
    cp = *linep;
    while (isdigit(((int)*cp)))
  1056a0:	e5d11001 	ldrb	r1, [r1, #1]
  1056a4:	e2011004 	and	r1, r1, #4
  1056a8:	e6ef1071 	uxtb	r1, r1
  1056ac:	e3510000 	cmp	r1, #0
  1056b0:	1afffff4 	bne	105688 <getnum+0x3c>
        n = n*10 + ((*cp++) - '0');
    *linep = cp;
  1056b4:	e5864000 	str	r4, [r6]
    return(n);
}
  1056b8:	e8bd0070 	pop	{r4, r5, r6}
  1056bc:	e12fff1e 	bx	lr

001056c0 <xil_printf>:
/*                                                   */

/* void esp_printf( const func_ptr f_ptr,
   const charptr ctrl1, ...) */
void xil_printf( const char *ctrl1, ...)
{
  1056c0:	e92d000f 	push	{r0, r1, r2, r3}
  1056c4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  1056c8:	e24dd024 	sub	sp, sp, #36	; 0x24

    char ch;
    va_list argp;
    char *ctrl = (char *)ctrl1;

    va_start( argp, ctrl1);
  1056cc:	e28d304c 	add	r3, sp, #76	; 0x4c
/*                                                   */

/* void esp_printf( const func_ptr f_ptr,
   const charptr ctrl1, ...) */
void xil_printf( const char *ctrl1, ...)
{
  1056d0:	e59db048 	ldr	fp, [sp, #72]	; 0x48

    char ch;
    va_list argp;
    char *ctrl = (char *)ctrl1;

    va_start( argp, ctrl1);
  1056d4:	e58d3004 	str	r3, [sp, #4]

    for ( ; *ctrl; ctrl++) {
  1056d8:	e5db0000 	ldrb	r0, [fp]
  1056dc:	e3500000 	cmp	r0, #0
  1056e0:	0a000096 	beq	105940 <xil_printf+0x280>
  1056e4:	e30f6c20 	movw	r6, #64544	; 0xfc20
            outbyte(*ctrl);
            continue;
        }

        /* initialize all the flags for this format.   */
        dot_flag   = long_flag = par.left_flag = par.do_padding = 0;
  1056e8:	e3a05000 	mov	r5, #0
  1056ec:	e3406011 	movt	r6, #17
        par.pad_character = ' ';
  1056f0:	e3a08020 	mov	r8, #32
        par.num2=32767;
  1056f4:	e3077fff 	movw	r7, #32767	; 0x7fff
  1056f8:	ea000005 	b	105714 <xil_printf+0x54>

        /* move format string chars to buffer until a  */
        /* format control is found.                    */
        if (*ctrl != '%') {
            outbyte(*ctrl);
            continue;
  1056fc:	e1a0400b 	mov	r4, fp
    for ( ; *ctrl; ctrl++) {

        /* move format string chars to buffer until a  */
        /* format control is found.                    */
        if (*ctrl != '%') {
            outbyte(*ctrl);
  105700:	eb000136 	bl	105be0 <outbyte>
    va_list argp;
    char *ctrl = (char *)ctrl1;

    va_start( argp, ctrl1);

    for ( ; *ctrl; ctrl++) {
  105704:	e5d40001 	ldrb	r0, [r4, #1]
  105708:	e284b001 	add	fp, r4, #1
  10570c:	e3500000 	cmp	r0, #0
  105710:	0a00008a 	beq	105940 <xil_printf+0x280>

        /* move format string chars to buffer until a  */
        /* format control is found.                    */
        if (*ctrl != '%') {
  105714:	e3500025 	cmp	r0, #37	; 0x25
  105718:	1afffff7 	bne	1056fc <xil_printf+0x3c>
  10571c:	e596c000 	ldr	ip, [r6]
            outbyte(*ctrl);
            continue;
        }

        /* initialize all the flags for this format.   */
        dot_flag   = long_flag = par.left_flag = par.do_padding = 0;
  105720:	e3a0a000 	mov	sl, #0
  105724:	e5db0001 	ldrb	r0, [fp, #1]
  105728:	e1a0900a 	mov	r9, sl
  10572c:	e58d5018 	str	r5, [sp, #24]
  105730:	e08c3000 	add	r3, ip, r0
  105734:	e58d501c 	str	r5, [sp, #28]
        par.pad_character = ' ';
  105738:	e5cd8014 	strb	r8, [sp, #20]
        par.num2=32767;
  10573c:	e58d7010 	str	r7, [sp, #16]

 try_next:
        ch = *(++ctrl);

        if (isdigit((int)ch)) {
  105740:	e5d32001 	ldrb	r2, [r3, #1]
        dot_flag   = long_flag = par.left_flag = par.do_padding = 0;
        par.pad_character = ' ';
        par.num2=32767;

 try_next:
        ch = *(++ctrl);
  105744:	e28b4001 	add	r4, fp, #1

        if (isdigit((int)ch)) {
  105748:	e2021004 	and	r1, r2, #4
  10574c:	e6ef1071 	uxtb	r1, r1
  105750:	e3510000 	cmp	r1, #0
  105754:	0a000012 	beq	1057a4 <xil_printf+0xe4>
            if (dot_flag)
  105758:	e35a0000 	cmp	sl, #0
  10575c:	0a0000b8 	beq	105a44 <xil_printf+0x384>
/* the supported formats.                            */
/*                                                   */

/* void esp_printf( const func_ptr f_ptr,
   const charptr ctrl1, ...) */
void xil_printf( const char *ctrl1, ...)
  105760:	e28bb002 	add	fp, fp, #2
  105764:	e3a02000 	mov	r2, #0
    charptr cp;

    n = 0;
    cp = *linep;
    while (isdigit(((int)*cp)))
        n = n*10 + ((*cp++) - '0');
  105768:	e2401030 	sub	r1, r0, #48	; 0x30
    int n;
    charptr cp;

    n = 0;
    cp = *linep;
    while (isdigit(((int)*cp)))
  10576c:	e5db0000 	ldrb	r0, [fp]
        n = n*10 + ((*cp++) - '0');
  105770:	e0822102 	add	r2, r2, r2, lsl #2
  105774:	e1a0400b 	mov	r4, fp
    int n;
    charptr cp;

    n = 0;
    cp = *linep;
    while (isdigit(((int)*cp)))
  105778:	e08c3000 	add	r3, ip, r0
  10577c:	e28bb001 	add	fp, fp, #1
        n = n*10 + ((*cp++) - '0');
  105780:	e0812082 	add	r2, r1, r2, lsl #1
    int n;
    charptr cp;

    n = 0;
    cp = *linep;
    while (isdigit(((int)*cp)))
  105784:	e5d31001 	ldrb	r1, [r3, #1]
  105788:	e2011004 	and	r1, r1, #4
  10578c:	e6ef1071 	uxtb	r1, r1
  105790:	e3510000 	cmp	r1, #0
  105794:	1afffff3 	bne	105768 <xil_printf+0xa8>
 try_next:
        ch = *(++ctrl);

        if (isdigit((int)ch)) {
            if (dot_flag)
                par.num2 = getnum(&ctrl);
  105798:	e58d2010 	str	r2, [sp, #16]
                    par.pad_character = '0';

                par.num1 = getnum(&ctrl);
                par.do_padding = 1;
            }
            ctrl--;
  10579c:	e244b001 	sub	fp, r4, #1
            goto try_next;
  1057a0:	eaffffe6 	b	105740 <xil_printf+0x80>
        }

        switch (tolower((int)ch)) {
  1057a4:	e2022003 	and	r2, r2, #3
  1057a8:	e1a03000 	mov	r3, r0
  1057ac:	e3520001 	cmp	r2, #1
  1057b0:	02803020 	addeq	r3, r0, #32
  1057b4:	e2433025 	sub	r3, r3, #37	; 0x25
  1057b8:	e3530053 	cmp	r3, #83	; 0x53
  1057bc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1057c0:	eaffffcf 	b	105704 <xil_printf+0x44>
  1057c4:	00105a38 	.word	0x00105a38
  1057c8:	00105704 	.word	0x00105704
  1057cc:	00105704 	.word	0x00105704
  1057d0:	00105704 	.word	0x00105704
  1057d4:	00105704 	.word	0x00105704
  1057d8:	00105704 	.word	0x00105704
  1057dc:	00105704 	.word	0x00105704
  1057e0:	00105704 	.word	0x00105704
  1057e4:	00105a20 	.word	0x00105a20
  1057e8:	00105a0c 	.word	0x00105a0c
  1057ec:	00105704 	.word	0x00105704
  1057f0:	00105704 	.word	0x00105704
  1057f4:	00105704 	.word	0x00105704
  1057f8:	00105704 	.word	0x00105704
  1057fc:	00105704 	.word	0x00105704
  105800:	00105704 	.word	0x00105704
  105804:	00105704 	.word	0x00105704
  105808:	00105704 	.word	0x00105704
  10580c:	00105704 	.word	0x00105704
  105810:	00105704 	.word	0x00105704
  105814:	00105704 	.word	0x00105704
  105818:	00105704 	.word	0x00105704
  10581c:	00105704 	.word	0x00105704
  105820:	00105704 	.word	0x00105704
  105824:	00105704 	.word	0x00105704
  105828:	00105704 	.word	0x00105704
  10582c:	00105704 	.word	0x00105704
  105830:	00105704 	.word	0x00105704
  105834:	00105704 	.word	0x00105704
  105838:	00105704 	.word	0x00105704
  10583c:	00105704 	.word	0x00105704
  105840:	00105704 	.word	0x00105704
  105844:	00105704 	.word	0x00105704
  105848:	00105704 	.word	0x00105704
  10584c:	00105704 	.word	0x00105704
  105850:	00105704 	.word	0x00105704
  105854:	00105704 	.word	0x00105704
  105858:	00105704 	.word	0x00105704
  10585c:	00105704 	.word	0x00105704
  105860:	00105704 	.word	0x00105704
  105864:	00105704 	.word	0x00105704
  105868:	00105704 	.word	0x00105704
  10586c:	00105704 	.word	0x00105704
  105870:	00105704 	.word	0x00105704
  105874:	00105704 	.word	0x00105704
  105878:	00105704 	.word	0x00105704
  10587c:	00105704 	.word	0x00105704
  105880:	00105704 	.word	0x00105704
  105884:	00105704 	.word	0x00105704
  105888:	00105704 	.word	0x00105704
  10588c:	00105704 	.word	0x00105704
  105890:	00105704 	.word	0x00105704
  105894:	00105704 	.word	0x00105704
  105898:	00105704 	.word	0x00105704
  10589c:	00105704 	.word	0x00105704
  1058a0:	001059b4 	.word	0x001059b4
  1058a4:	00105704 	.word	0x00105704
  1058a8:	00105704 	.word	0x00105704
  1058ac:	00105704 	.word	0x00105704
  1058b0:	00105704 	.word	0x00105704
  1058b4:	00105704 	.word	0x00105704
  1058b8:	00105704 	.word	0x00105704
  1058bc:	0010599c 	.word	0x0010599c
  1058c0:	00105980 	.word	0x00105980
  1058c4:	00105704 	.word	0x00105704
  1058c8:	00105704 	.word	0x00105704
  1058cc:	00105704 	.word	0x00105704
  1058d0:	00105704 	.word	0x00105704
  1058d4:	00105704 	.word	0x00105704
  1058d8:	00105704 	.word	0x00105704
  1058dc:	00105704 	.word	0x00105704
  1058e0:	0010596c 	.word	0x0010596c
  1058e4:	00105704 	.word	0x00105704
  1058e8:	00105704 	.word	0x00105704
  1058ec:	00105704 	.word	0x00105704
  1058f0:	00105704 	.word	0x00105704
  1058f4:	00105704 	.word	0x00105704
  1058f8:	00105704 	.word	0x00105704
  1058fc:	00105950 	.word	0x00105950
  105900:	00105704 	.word	0x00105704
  105904:	00105704 	.word	0x00105704
  105908:	00105704 	.word	0x00105704
  10590c:	00105704 	.word	0x00105704
  105910:	00105914 	.word	0x00105914
                else {
                    outnum( va_arg(argp, int), 10L, &par);
                    continue;
                }
            case 'x':
                outnum((long)va_arg(argp, int), 16L, &par);
  105914:	e59d3004 	ldr	r3, [sp, #4]
  105918:	e28d2008 	add	r2, sp, #8
  10591c:	e3a01010 	mov	r1, #16
  105920:	e2830004 	add	r0, r3, #4
  105924:	e58d0004 	str	r0, [sp, #4]
  105928:	e5930000 	ldr	r0, [r3]
  10592c:	ebffff08 	bl	105554 <outnum>
    va_list argp;
    char *ctrl = (char *)ctrl1;

    va_start( argp, ctrl1);

    for ( ; *ctrl; ctrl++) {
  105930:	e5d40001 	ldrb	r0, [r4, #1]
  105934:	e284b001 	add	fp, r4, #1
  105938:	e3500000 	cmp	r0, #0
  10593c:	1affff74 	bne	105714 <xil_printf+0x54>
                continue;
        }
        goto try_next;
    }
    va_end( argp);
}
  105940:	e28dd024 	add	sp, sp, #36	; 0x24
  105944:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  105948:	e28dd010 	add	sp, sp, #16
  10594c:	e12fff1e 	bx	lr
            case 'x':
                outnum((long)va_arg(argp, int), 16L, &par);
                continue;

            case 's':
                outs( va_arg( argp, char *), &par);
  105950:	e59d3004 	ldr	r3, [sp, #4]
  105954:	e28d1008 	add	r1, sp, #8
  105958:	e2832004 	add	r2, r3, #4
  10595c:	e58d2004 	str	r2, [sp, #4]
  105960:	e5930000 	ldr	r0, [r3]
  105964:	ebfffed8 	bl	1054cc <outs>
                continue;
  105968:	eaffff65 	b	105704 <xil_printf+0x44>
  10596c:	e5db0002 	ldrb	r0, [fp, #2]
            case '.':
                dot_flag = 1;
                break;

            case 'l':
                long_flag = 1;
  105970:	e3a09001 	mov	r9, #1
        dot_flag   = long_flag = par.left_flag = par.do_padding = 0;
        par.pad_character = ' ';
        par.num2=32767;

 try_next:
        ch = *(++ctrl);
  105974:	e1a0b004 	mov	fp, r4
  105978:	e08c3000 	add	r3, ip, r0
                dot_flag = 1;
                break;

            case 'l':
                long_flag = 1;
                break;
  10597c:	eaffff6f 	b	105740 <xil_printf+0x80>

            case 'd':
                if (long_flag || ch == 'D') {
                    outnum( va_arg(argp, long), 10L, &par);
  105980:	e59d3004 	ldr	r3, [sp, #4]
  105984:	e3a0100a 	mov	r1, #10
  105988:	e28d2008 	add	r2, sp, #8
  10598c:	e2830004 	add	r0, r3, #4
  105990:	e58d0004 	str	r0, [sp, #4]
  105994:	e5930000 	ldr	r0, [r3]
  105998:	eaffffe3 	b	10592c <xil_printf+0x26c>
            case 's':
                outs( va_arg( argp, char *), &par);
                continue;

            case 'c':
                outbyte( va_arg( argp, int));
  10599c:	e59d3004 	ldr	r3, [sp, #4]
  1059a0:	e2832004 	add	r2, r3, #4
  1059a4:	e58d2004 	str	r2, [sp, #4]
  1059a8:	e5d30000 	ldrb	r0, [r3]
  1059ac:	eb00008b 	bl	105be0 <outbyte>
                continue;
  1059b0:	eaffff53 	b	105704 <xil_printf+0x44>

            case '\\':
                switch (*ctrl) {
  1059b4:	e2403061 	sub	r3, r0, #97	; 0x61
  1059b8:	e3530011 	cmp	r3, #17
  1059bc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1059c0:	ea000041 	b	105acc <xil_printf+0x40c>
  1059c4:	00105ad4 	.word	0x00105ad4
  1059c8:	00105acc 	.word	0x00105acc
  1059cc:	00105acc 	.word	0x00105acc
  1059d0:	00105acc 	.word	0x00105acc
  1059d4:	00105acc 	.word	0x00105acc
  1059d8:	00105acc 	.word	0x00105acc
  1059dc:	00105acc 	.word	0x00105acc
  1059e0:	00105ae0 	.word	0x00105ae0
  1059e4:	00105acc 	.word	0x00105acc
  1059e8:	00105acc 	.word	0x00105acc
  1059ec:	00105acc 	.word	0x00105acc
  1059f0:	00105acc 	.word	0x00105acc
  1059f4:	00105acc 	.word	0x00105acc
  1059f8:	00105aec 	.word	0x00105aec
  1059fc:	00105acc 	.word	0x00105acc
  105a00:	00105acc 	.word	0x00105acc
  105a04:	00105acc 	.word	0x00105acc
  105a08:	00105ab0 	.word	0x00105ab0
  105a0c:	e5db0002 	ldrb	r0, [fp, #2]
            case '-':
                par.left_flag = 1;
                break;

            case '.':
                dot_flag = 1;
  105a10:	e3a0a001 	mov	sl, #1
        dot_flag   = long_flag = par.left_flag = par.do_padding = 0;
        par.pad_character = ' ';
        par.num2=32767;

 try_next:
        ch = *(++ctrl);
  105a14:	e1a0b004 	mov	fp, r4
  105a18:	e08c3000 	add	r3, ip, r0
  105a1c:	eaffff47 	b	105740 <xil_printf+0x80>
  105a20:	e5db0002 	ldrb	r0, [fp, #2]
            case '%':
                outbyte( '%');
                continue;

            case '-':
                par.left_flag = 1;
  105a24:	e3a03001 	mov	r3, #1
        dot_flag   = long_flag = par.left_flag = par.do_padding = 0;
        par.pad_character = ' ';
        par.num2=32767;

 try_next:
        ch = *(++ctrl);
  105a28:	e1a0b004 	mov	fp, r4
            case '%':
                outbyte( '%');
                continue;

            case '-':
                par.left_flag = 1;
  105a2c:	e58d301c 	str	r3, [sp, #28]
  105a30:	e08c3000 	add	r3, ip, r0
                break;
  105a34:	eaffff41 	b	105740 <xil_printf+0x80>
            goto try_next;
        }

        switch (tolower((int)ch)) {
            case '%':
                outbyte( '%');
  105a38:	e3a00025 	mov	r0, #37	; 0x25
  105a3c:	eb000067 	bl	105be0 <outbyte>
                continue;
  105a40:	eaffff2f 	b	105704 <xil_printf+0x44>
    int n;
    charptr cp;

    n = 0;
    cp = *linep;
    while (isdigit(((int)*cp)))
  105a44:	e5db1001 	ldrb	r1, [fp, #1]

        if (isdigit((int)ch)) {
            if (dot_flag)
                par.num2 = getnum(&ctrl);
            else {
                if (ch == '0')
  105a48:	e3500030 	cmp	r0, #48	; 0x30
                    par.pad_character = '0';
  105a4c:	05cd0014 	strbeq	r0, [sp, #20]
    int n;
    charptr cp;

    n = 0;
    cp = *linep;
    while (isdigit(((int)*cp)))
  105a50:	e08c2001 	add	r2, ip, r1
  105a54:	e5d22001 	ldrb	r2, [r2, #1]
  105a58:	e2022004 	and	r2, r2, #4
  105a5c:	e6ef2072 	uxtb	r2, r2
  105a60:	e3520000 	cmp	r2, #0
  105a64:	0a00000d 	beq	105aa0 <xil_printf+0x3e0>
/* the supported formats.                            */
/*                                                   */

/* void esp_printf( const func_ptr f_ptr,
   const charptr ctrl1, ...) */
void xil_printf( const char *ctrl1, ...)
  105a68:	e28bb002 	add	fp, fp, #2
    int n;
    charptr cp;

    n = 0;
    cp = *linep;
    while (isdigit(((int)*cp)))
  105a6c:	e1a00001 	mov	r0, r1
int getnum( charptr* linep)
{
    int n;
    charptr cp;

    n = 0;
  105a70:	e3a02000 	mov	r2, #0
    cp = *linep;
    while (isdigit(((int)*cp)))
        n = n*10 + ((*cp++) - '0');
  105a74:	e2401030 	sub	r1, r0, #48	; 0x30
  105a78:	e1a0400b 	mov	r4, fp
    int n;
    charptr cp;

    n = 0;
    cp = *linep;
    while (isdigit(((int)*cp)))
  105a7c:	e4db0001 	ldrb	r0, [fp], #1
        n = n*10 + ((*cp++) - '0');
  105a80:	e0822102 	add	r2, r2, r2, lsl #2
    int n;
    charptr cp;

    n = 0;
    cp = *linep;
    while (isdigit(((int)*cp)))
  105a84:	e08c3000 	add	r3, ip, r0
        n = n*10 + ((*cp++) - '0');
  105a88:	e0812082 	add	r2, r1, r2, lsl #1
    int n;
    charptr cp;

    n = 0;
    cp = *linep;
    while (isdigit(((int)*cp)))
  105a8c:	e5d31001 	ldrb	r1, [r3, #1]
  105a90:	e2011004 	and	r1, r1, #4
  105a94:	e6ef1071 	uxtb	r1, r1
  105a98:	e3510000 	cmp	r1, #0
  105a9c:	1afffff4 	bne	105a74 <xil_printf+0x3b4>
                par.num2 = getnum(&ctrl);
            else {
                if (ch == '0')
                    par.pad_character = '0';

                par.num1 = getnum(&ctrl);
  105aa0:	e58d200c 	str	r2, [sp, #12]
                par.do_padding = 1;
  105aa4:	e3a02001 	mov	r2, #1
  105aa8:	e58d2018 	str	r2, [sp, #24]
  105aac:	eaffff3a 	b	10579c <xil_printf+0xdc>
                        break;
                    case 'h':
                        outbyte( 0x08);
                        break;
                    case 'r':
                        outbyte( 0x0D);
  105ab0:	e3a0000d 	mov	r0, #13
  105ab4:	eb000049 	bl	105be0 <outbyte>
  105ab8:	e5db0003 	ldrb	r0, [fp, #3]
                        break;
                    default:
                        outbyte( *ctrl);
                        break;
                }
                ctrl++;
  105abc:	e28bb002 	add	fp, fp, #2
  105ac0:	e596c000 	ldr	ip, [r6]
  105ac4:	e08c3000 	add	r3, ip, r0
                break;
  105ac8:	eaffff1c 	b	105740 <xil_printf+0x80>
                    case 'n':
                        outbyte( 0x0D);
                        outbyte( 0x0A);
                        break;
                    default:
                        outbyte( *ctrl);
  105acc:	eb000043 	bl	105be0 <outbyte>
                        break;
  105ad0:	eafffff8 	b	105ab8 <xil_printf+0x3f8>
                continue;

            case '\\':
                switch (*ctrl) {
                    case 'a':
                        outbyte( 0x07);
  105ad4:	e3a00007 	mov	r0, #7
  105ad8:	eb000040 	bl	105be0 <outbyte>
                        break;
  105adc:	eafffff5 	b	105ab8 <xil_printf+0x3f8>
                    case 'h':
                        outbyte( 0x08);
  105ae0:	e3a00008 	mov	r0, #8
  105ae4:	eb00003d 	bl	105be0 <outbyte>
                        break;
  105ae8:	eafffff2 	b	105ab8 <xil_printf+0x3f8>
                    case 'r':
                        outbyte( 0x0D);
                        break;
                    case 'n':
                        outbyte( 0x0D);
  105aec:	e3a0000d 	mov	r0, #13
  105af0:	eb00003a 	bl	105be0 <outbyte>
                        outbyte( 0x0A);
  105af4:	e3a0000a 	mov	r0, #10
  105af8:	eb000038 	bl	105be0 <outbyte>
                        break;
  105afc:	eaffffed 	b	105ab8 <xil_printf+0x3f8>

00105b00 <XTime_SetTime>:
* @note		In multiprocessor environment reference time will reset/lost for
*		all processors, when this function called by any one processor.
*
****************************************************************************/
void XTime_SetTime(XTime Xtime)
{
  105b00:	e92d4070 	push	{r4, r5, r6, lr}
	/* Disable Global Timer */
	Xil_Out32(GLOBAL_TMR_BASEADDR + GTIMER_CONTROL_OFFSET, 0x0);
  105b04:	e3a04f82 	mov	r4, #520	; 0x208
  105b08:	e34f48f0 	movt	r4, #63728	; 0xf8f0
* @note		In multiprocessor environment reference time will reset/lost for
*		all processors, when this function called by any one processor.
*
****************************************************************************/
void XTime_SetTime(XTime Xtime)
{
  105b0c:	e1a06000 	mov	r6, r0
  105b10:	e1a05001 	mov	r5, r1
	/* Disable Global Timer */
	Xil_Out32(GLOBAL_TMR_BASEADDR + GTIMER_CONTROL_OFFSET, 0x0);
  105b14:	e3a01000 	mov	r1, #0
  105b18:	e1a00004 	mov	r0, r4
  105b1c:	ebfffe2c 	bl	1053d4 <Xil_Out32>

	/* Updating Global Timer Counter Register */
	Xil_Out32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_LOWER_OFFSET, (u32)Xtime);
  105b20:	e1a01006 	mov	r1, r6
  105b24:	e3a00c02 	mov	r0, #512	; 0x200
  105b28:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  105b2c:	ebfffe28 	bl	1053d4 <Xil_Out32>
	Xil_Out32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_UPPER_OFFSET,
  105b30:	e1a01005 	mov	r1, r5
  105b34:	e3a00f81 	mov	r0, #516	; 0x204
  105b38:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  105b3c:	ebfffe24 	bl	1053d4 <Xil_Out32>
		(u32)(Xtime>>32));

	/* Enable Global Timer */
	Xil_Out32(GLOBAL_TMR_BASEADDR + GTIMER_CONTROL_OFFSET, 0x1);
  105b40:	e1a00004 	mov	r0, r4
  105b44:	e3a01001 	mov	r1, #1
}
  105b48:	e8bd4070 	pop	{r4, r5, r6, lr}
	Xil_Out32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_LOWER_OFFSET, (u32)Xtime);
	Xil_Out32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_UPPER_OFFSET,
		(u32)(Xtime>>32));

	/* Enable Global Timer */
	Xil_Out32(GLOBAL_TMR_BASEADDR + GTIMER_CONTROL_OFFSET, 0x1);
  105b4c:	eafffe20 	b	1053d4 <Xil_Out32>

00105b50 <XTime_GetTime>:
*
* @note		None.
*
****************************************************************************/
void XTime_GetTime(XTime *Xtime)
{
  105b50:	e92d4070 	push	{r4, r5, r6, lr}
  105b54:	e1a06000 	mov	r6, r0
	u32 high;

	/* Reading Global Timer Counter Register */
	do
	{
		high = Xil_In32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_UPPER_OFFSET);
  105b58:	e3a00f81 	mov	r0, #516	; 0x204
  105b5c:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  105b60:	ebfffe15 	bl	1053bc <Xil_In32>
  105b64:	e1a04000 	mov	r4, r0
		low = Xil_In32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_LOWER_OFFSET);
  105b68:	e3a00c02 	mov	r0, #512	; 0x200
  105b6c:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  105b70:	ebfffe11 	bl	1053bc <Xil_In32>
  105b74:	e1a05000 	mov	r5, r0
	} while(Xil_In32(GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_UPPER_OFFSET) != high);
  105b78:	e3a00f81 	mov	r0, #516	; 0x204
  105b7c:	e34f08f0 	movt	r0, #63728	; 0xf8f0
  105b80:	ebfffe0d 	bl	1053bc <Xil_In32>
  105b84:	e1500004 	cmp	r0, r4
  105b88:	1afffff2 	bne	105b58 <XTime_GetTime+0x8>

	*Xtime = (((XTime) high) << 32) | (XTime) low;
  105b8c:	e3a02000 	mov	r2, #0
  105b90:	e1a03000 	mov	r3, r0
  105b94:	e1822005 	orr	r2, r2, r5
  105b98:	e1c620f0 	strd	r2, [r6]
  105b9c:	e8bd8070 	pop	{r4, r5, r6, pc}

00105ba0 <__cpu_init>:
	.global __cpu_init
	.align 2    
__cpu_init:

/* Clear cp15 regs with unknown reset values */
	mov	r0, #0x0
  105ba0:	e3a00000 	mov	r0, #0
	mcr	p15, 0, r0, c5, c0, 0	/* DFSR */
  105ba4:	ee050f10 	mcr	15, 0, r0, cr5, cr0, {0}
	mcr	p15, 0, r0, c5, c0, 1	/* IFSR */
  105ba8:	ee050f30 	mcr	15, 0, r0, cr5, cr0, {1}
	mcr	p15, 0, r0, c6, c0, 0	/* DFAR */
  105bac:	ee060f10 	mcr	15, 0, r0, cr6, cr0, {0}
	mcr	p15, 0, r0, c6, c0, 2	/* IFAR */
  105bb0:	ee060f50 	mcr	15, 0, r0, cr6, cr0, {2}
	mcr	p15, 0, r0, c9, c13, 2	/* PMXEVCNTR */
  105bb4:	ee090f5d 	mcr	15, 0, r0, cr9, cr13, {2}
	mcr	p15, 0, r0, c13, c0, 2	/* TPIDRURW */
  105bb8:	ee0d0f50 	mcr	15, 0, r0, cr13, cr0, {2}
	mcr	p15, 0, r0, c13, c0, 3	/* TPIDRURO */
  105bbc:	ee0d0f70 	mcr	15, 0, r0, cr13, cr0, {3}
	mcr	p15, 5, r0, c15, c5, 2	/* Write Lockdown TLB VA */
  105bc0:	eeaf0f55 	mcr	15, 5, r0, cr15, cr5, {2}

/* Reset and start Cycle Counter */
	mov	r2, #0x80000000		/* clear overflow */
  105bc4:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
	mcr	p15, 0, r2, c9, c12, 3
  105bc8:	ee092f7c 	mcr	15, 0, r2, cr9, cr12, {3}
	mov	r2, #0xd		/* D, C, E */
  105bcc:	e3a0200d 	mov	r2, #13
	mcr	p15, 0, r2, c9, c12, 0
  105bd0:	ee092f1c 	mcr	15, 0, r2, cr9, cr12, {0}
	mov	r2, #0x80000000		/* enable cycle counter */
  105bd4:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
	mcr	p15, 0, r2, c9, c12, 1
  105bd8:	ee092f3c 	mcr	15, 0, r2, cr9, cr12, {1}

	bx	lr
  105bdc:	e12fff1e 	bx	lr

00105be0 <outbyte>:

#ifdef __cplusplus
}
#endif 

void outbyte(char c) {
  105be0:	e1a01000 	mov	r1, r0
	 XUartPs_SendByte(STDOUT_BASEADDRESS, c);
  105be4:	e3a00a01 	mov	r0, #4096	; 0x1000
  105be8:	e34e0000 	movt	r0, #57344	; 0xe000
  105bec:	eaffffff 	b	105bf0 <XUartPs_SendByte>

00105bf0 <XUartPs_SendByte>:
*
* @note		None.
*
*****************************************************************************/
void XUartPs_SendByte(u32 BaseAddress, u8 Data)
{
  105bf0:	e92d4070 	push	{r4, r5, r6, lr}
  105bf4:	e280402c 	add	r4, r0, #44	; 0x2c
  105bf8:	e1a05000 	mov	r5, r0
  105bfc:	e1a06001 	mov	r6, r1
		/*
		 * Wait until there is space in TX FIFO
		 */
		while (XUartPs_IsTransmitFull(BaseAddress));
  105c00:	e1a00004 	mov	r0, r4
  105c04:	ebfffdec 	bl	1053bc <Xil_In32>
  105c08:	e3100010 	tst	r0, #16
  105c0c:	1afffffb 	bne	105c00 <XUartPs_SendByte+0x10>

		/*
		 * Write the byte into the TX FIFO
		 */
		XUartPs_WriteReg(BaseAddress, XUARTPS_FIFO_OFFSET, Data);
  105c10:	e2850030 	add	r0, r5, #48	; 0x30
  105c14:	e1a01006 	mov	r1, r6
}
  105c18:	e8bd4070 	pop	{r4, r5, r6, lr}
		while (XUartPs_IsTransmitFull(BaseAddress));

		/*
		 * Write the byte into the TX FIFO
		 */
		XUartPs_WriteReg(BaseAddress, XUARTPS_FIFO_OFFSET, Data);
  105c1c:	eafffdec 	b	1053d4 <Xil_Out32>

00105c20 <XUartPs_RecvByte>:
*
* @note		None.
*
*****************************************************************************/
u8 XUartPs_RecvByte(u32 BaseAddress)
{
  105c20:	e92d4038 	push	{r3, r4, r5, lr}
  105c24:	e280402c 	add	r4, r0, #44	; 0x2c
  105c28:	e1a05000 	mov	r5, r0
		/*
		 * Wait until there is data
		 */
		while (!XUartPs_IsReceiveData(BaseAddress));
  105c2c:	e1a00004 	mov	r0, r4
  105c30:	ebfffde1 	bl	1053bc <Xil_In32>
  105c34:	e3100002 	tst	r0, #2
  105c38:	1afffffb 	bne	105c2c <XUartPs_RecvByte+0xc>

		/*
		 * Return the byte received
		 */
		return (XUartPs_ReadReg(BaseAddress, XUARTPS_FIFO_OFFSET));
  105c3c:	e2850030 	add	r0, r5, #48	; 0x30
  105c40:	ebfffddd 	bl	1053bc <Xil_In32>
}
  105c44:	e6ef0070 	uxtb	r0, r0
  105c48:	e8bd8038 	pop	{r3, r4, r5, pc}

00105c4c <__aeabi_uidiv>:
  105c4c:	e2512001 	subs	r2, r1, #1
  105c50:	012fff1e 	bxeq	lr
  105c54:	3a000074 	bcc	105e2c <__aeabi_uidiv+0x1e0>
  105c58:	e1500001 	cmp	r0, r1
  105c5c:	9a00006b 	bls	105e10 <__aeabi_uidiv+0x1c4>
  105c60:	e1110002 	tst	r1, r2
  105c64:	0a00006c 	beq	105e1c <__aeabi_uidiv+0x1d0>
  105c68:	e16f3f10 	clz	r3, r0
  105c6c:	e16f2f11 	clz	r2, r1
  105c70:	e0423003 	sub	r3, r2, r3
  105c74:	e273301f 	rsbs	r3, r3, #31
  105c78:	10833083 	addne	r3, r3, r3, lsl #1
  105c7c:	e3a02000 	mov	r2, #0
  105c80:	108ff103 	addne	pc, pc, r3, lsl #2
  105c84:	e320f000 	nop	{0}
  105c88:	e1500f81 	cmp	r0, r1, lsl #31
  105c8c:	e0a22002 	adc	r2, r2, r2
  105c90:	20400f81 	subcs	r0, r0, r1, lsl #31
  105c94:	e1500f01 	cmp	r0, r1, lsl #30
  105c98:	e0a22002 	adc	r2, r2, r2
  105c9c:	20400f01 	subcs	r0, r0, r1, lsl #30
  105ca0:	e1500e81 	cmp	r0, r1, lsl #29
  105ca4:	e0a22002 	adc	r2, r2, r2
  105ca8:	20400e81 	subcs	r0, r0, r1, lsl #29
  105cac:	e1500e01 	cmp	r0, r1, lsl #28
  105cb0:	e0a22002 	adc	r2, r2, r2
  105cb4:	20400e01 	subcs	r0, r0, r1, lsl #28
  105cb8:	e1500d81 	cmp	r0, r1, lsl #27
  105cbc:	e0a22002 	adc	r2, r2, r2
  105cc0:	20400d81 	subcs	r0, r0, r1, lsl #27
  105cc4:	e1500d01 	cmp	r0, r1, lsl #26
  105cc8:	e0a22002 	adc	r2, r2, r2
  105ccc:	20400d01 	subcs	r0, r0, r1, lsl #26
  105cd0:	e1500c81 	cmp	r0, r1, lsl #25
  105cd4:	e0a22002 	adc	r2, r2, r2
  105cd8:	20400c81 	subcs	r0, r0, r1, lsl #25
  105cdc:	e1500c01 	cmp	r0, r1, lsl #24
  105ce0:	e0a22002 	adc	r2, r2, r2
  105ce4:	20400c01 	subcs	r0, r0, r1, lsl #24
  105ce8:	e1500b81 	cmp	r0, r1, lsl #23
  105cec:	e0a22002 	adc	r2, r2, r2
  105cf0:	20400b81 	subcs	r0, r0, r1, lsl #23
  105cf4:	e1500b01 	cmp	r0, r1, lsl #22
  105cf8:	e0a22002 	adc	r2, r2, r2
  105cfc:	20400b01 	subcs	r0, r0, r1, lsl #22
  105d00:	e1500a81 	cmp	r0, r1, lsl #21
  105d04:	e0a22002 	adc	r2, r2, r2
  105d08:	20400a81 	subcs	r0, r0, r1, lsl #21
  105d0c:	e1500a01 	cmp	r0, r1, lsl #20
  105d10:	e0a22002 	adc	r2, r2, r2
  105d14:	20400a01 	subcs	r0, r0, r1, lsl #20
  105d18:	e1500981 	cmp	r0, r1, lsl #19
  105d1c:	e0a22002 	adc	r2, r2, r2
  105d20:	20400981 	subcs	r0, r0, r1, lsl #19
  105d24:	e1500901 	cmp	r0, r1, lsl #18
  105d28:	e0a22002 	adc	r2, r2, r2
  105d2c:	20400901 	subcs	r0, r0, r1, lsl #18
  105d30:	e1500881 	cmp	r0, r1, lsl #17
  105d34:	e0a22002 	adc	r2, r2, r2
  105d38:	20400881 	subcs	r0, r0, r1, lsl #17
  105d3c:	e1500801 	cmp	r0, r1, lsl #16
  105d40:	e0a22002 	adc	r2, r2, r2
  105d44:	20400801 	subcs	r0, r0, r1, lsl #16
  105d48:	e1500781 	cmp	r0, r1, lsl #15
  105d4c:	e0a22002 	adc	r2, r2, r2
  105d50:	20400781 	subcs	r0, r0, r1, lsl #15
  105d54:	e1500701 	cmp	r0, r1, lsl #14
  105d58:	e0a22002 	adc	r2, r2, r2
  105d5c:	20400701 	subcs	r0, r0, r1, lsl #14
  105d60:	e1500681 	cmp	r0, r1, lsl #13
  105d64:	e0a22002 	adc	r2, r2, r2
  105d68:	20400681 	subcs	r0, r0, r1, lsl #13
  105d6c:	e1500601 	cmp	r0, r1, lsl #12
  105d70:	e0a22002 	adc	r2, r2, r2
  105d74:	20400601 	subcs	r0, r0, r1, lsl #12
  105d78:	e1500581 	cmp	r0, r1, lsl #11
  105d7c:	e0a22002 	adc	r2, r2, r2
  105d80:	20400581 	subcs	r0, r0, r1, lsl #11
  105d84:	e1500501 	cmp	r0, r1, lsl #10
  105d88:	e0a22002 	adc	r2, r2, r2
  105d8c:	20400501 	subcs	r0, r0, r1, lsl #10
  105d90:	e1500481 	cmp	r0, r1, lsl #9
  105d94:	e0a22002 	adc	r2, r2, r2
  105d98:	20400481 	subcs	r0, r0, r1, lsl #9
  105d9c:	e1500401 	cmp	r0, r1, lsl #8
  105da0:	e0a22002 	adc	r2, r2, r2
  105da4:	20400401 	subcs	r0, r0, r1, lsl #8
  105da8:	e1500381 	cmp	r0, r1, lsl #7
  105dac:	e0a22002 	adc	r2, r2, r2
  105db0:	20400381 	subcs	r0, r0, r1, lsl #7
  105db4:	e1500301 	cmp	r0, r1, lsl #6
  105db8:	e0a22002 	adc	r2, r2, r2
  105dbc:	20400301 	subcs	r0, r0, r1, lsl #6
  105dc0:	e1500281 	cmp	r0, r1, lsl #5
  105dc4:	e0a22002 	adc	r2, r2, r2
  105dc8:	20400281 	subcs	r0, r0, r1, lsl #5
  105dcc:	e1500201 	cmp	r0, r1, lsl #4
  105dd0:	e0a22002 	adc	r2, r2, r2
  105dd4:	20400201 	subcs	r0, r0, r1, lsl #4
  105dd8:	e1500181 	cmp	r0, r1, lsl #3
  105ddc:	e0a22002 	adc	r2, r2, r2
  105de0:	20400181 	subcs	r0, r0, r1, lsl #3
  105de4:	e1500101 	cmp	r0, r1, lsl #2
  105de8:	e0a22002 	adc	r2, r2, r2
  105dec:	20400101 	subcs	r0, r0, r1, lsl #2
  105df0:	e1500081 	cmp	r0, r1, lsl #1
  105df4:	e0a22002 	adc	r2, r2, r2
  105df8:	20400081 	subcs	r0, r0, r1, lsl #1
  105dfc:	e1500001 	cmp	r0, r1
  105e00:	e0a22002 	adc	r2, r2, r2
  105e04:	20400001 	subcs	r0, r0, r1
  105e08:	e1a00002 	mov	r0, r2
  105e0c:	e12fff1e 	bx	lr
  105e10:	03a00001 	moveq	r0, #1
  105e14:	13a00000 	movne	r0, #0
  105e18:	e12fff1e 	bx	lr
  105e1c:	e16f2f11 	clz	r2, r1
  105e20:	e262201f 	rsb	r2, r2, #31
  105e24:	e1a00230 	lsr	r0, r0, r2
  105e28:	e12fff1e 	bx	lr
  105e2c:	e3500000 	cmp	r0, #0
  105e30:	13e00000 	mvnne	r0, #0
  105e34:	ea000007 	b	105e58 <__aeabi_idiv0>

00105e38 <__aeabi_uidivmod>:
  105e38:	e3510000 	cmp	r1, #0
  105e3c:	0afffffa 	beq	105e2c <__aeabi_uidiv+0x1e0>
  105e40:	e92d4003 	push	{r0, r1, lr}
  105e44:	ebffff80 	bl	105c4c <__aeabi_uidiv>
  105e48:	e8bd4006 	pop	{r1, r2, lr}
  105e4c:	e0030092 	mul	r3, r2, r0
  105e50:	e0411003 	sub	r1, r1, r3
  105e54:	e12fff1e 	bx	lr

00105e58 <__aeabi_idiv0>:
  105e58:	e12fff1e 	bx	lr

00105e5c <__aeabi_uldivmod>:
  105e5c:	e3530000 	cmp	r3, #0
  105e60:	03520000 	cmpeq	r2, #0
  105e64:	1a000004 	bne	105e7c <__aeabi_uldivmod+0x20>
  105e68:	e3510000 	cmp	r1, #0
  105e6c:	03500000 	cmpeq	r0, #0
  105e70:	13e01000 	mvnne	r1, #0
  105e74:	13e00000 	mvnne	r0, #0
  105e78:	eafffff6 	b	105e58 <__aeabi_idiv0>
  105e7c:	e24dd008 	sub	sp, sp, #8
  105e80:	e92d6000 	push	{sp, lr}
  105e84:	eb000012 	bl	105ed4 <__gnu_uldivmod_helper>
  105e88:	e59de004 	ldr	lr, [sp, #4]
  105e8c:	e28dd008 	add	sp, sp, #8
  105e90:	e8bd000c 	pop	{r2, r3}
  105e94:	e12fff1e 	bx	lr

00105e98 <__gnu_ldivmod_helper>:
  105e98:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, sl, lr}
  105e9c:	e1a08002 	mov	r8, r2
  105ea0:	e1a0a003 	mov	sl, r3
  105ea4:	e1a06000 	mov	r6, r0
  105ea8:	e1a07001 	mov	r7, r1
  105eac:	eb000017 	bl	105f10 <__divdi3>
  105eb0:	e59d3020 	ldr	r3, [sp, #32]
  105eb4:	e0854098 	umull	r4, r5, r8, r0
  105eb8:	e0080198 	mul	r8, r8, r1
  105ebc:	e0228a90 	mla	r2, r0, sl, r8
  105ec0:	e0825005 	add	r5, r2, r5
  105ec4:	e0564004 	subs	r4, r6, r4
  105ec8:	e0c75005 	sbc	r5, r7, r5
  105ecc:	e1c340f0 	strd	r4, [r3]
  105ed0:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, sl, pc}

00105ed4 <__gnu_uldivmod_helper>:
  105ed4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  105ed8:	e1a08002 	mov	r8, r2
  105edc:	e1a06000 	mov	r6, r0
  105ee0:	e1a07001 	mov	r7, r1
  105ee4:	e1a05003 	mov	r5, r3
  105ee8:	eb000137 	bl	1063cc <__udivdi3>
  105eec:	e0030590 	mul	r3, r0, r5
  105ef0:	e0854890 	umull	r4, r5, r0, r8
  105ef4:	e0283198 	mla	r8, r8, r1, r3
  105ef8:	e59d3018 	ldr	r3, [sp, #24]
  105efc:	e0885005 	add	r5, r8, r5
  105f00:	e0564004 	subs	r4, r6, r4
  105f04:	e0c75005 	sbc	r5, r7, r5
  105f08:	e1c340f0 	strd	r4, [r3]
  105f0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00105f10 <__divdi3>:
  105f10:	e3510000 	cmp	r1, #0
  105f14:	e1a0c003 	mov	ip, r3
  105f18:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  105f1c:	a3a07000 	movge	r7, #0
  105f20:	e24dd00c 	sub	sp, sp, #12
  105f24:	ba000093 	blt	106178 <__divdi3+0x268>
  105f28:	e35c0000 	cmp	ip, #0
  105f2c:	ba00008d 	blt	106168 <__divdi3+0x258>
  105f30:	e253c000 	subs	ip, r3, #0
  105f34:	e1a0b000 	mov	fp, r0
  105f38:	e1a0a001 	mov	sl, r1
  105f3c:	e1a09002 	mov	r9, r2
  105f40:	e1a04002 	mov	r4, r2
  105f44:	e1a05000 	mov	r5, r0
  105f48:	e1a06001 	mov	r6, r1
  105f4c:	1a00003e 	bne	10604c <__divdi3+0x13c>
  105f50:	e1520001 	cmp	r2, r1
  105f54:	9a00004b 	bls	106088 <__divdi3+0x178>
  105f58:	e16f3f12 	clz	r3, r2
  105f5c:	e3530000 	cmp	r3, #0
  105f60:	11a04319 	lslne	r4, r9, r3
  105f64:	12632020 	rsbne	r2, r3, #32
  105f68:	11a02230 	lsrne	r2, r0, r2
  105f6c:	11a05310 	lslne	r5, r0, r3
  105f70:	11826311 	orrne	r6, r2, r1, lsl r3
  105f74:	e1a08824 	lsr	r8, r4, #16
  105f78:	e6ffa074 	uxth	sl, r4
  105f7c:	e1a01008 	mov	r1, r8
  105f80:	e1a00006 	mov	r0, r6
  105f84:	ebffff30 	bl	105c4c <__aeabi_uidiv>
  105f88:	e1a01008 	mov	r1, r8
  105f8c:	e1a09000 	mov	r9, r0
  105f90:	e1a00006 	mov	r0, r6
  105f94:	ebffffa7 	bl	105e38 <__aeabi_uidivmod>
  105f98:	e000099a 	mul	r0, sl, r9
  105f9c:	e1a03825 	lsr	r3, r5, #16
  105fa0:	e1831801 	orr	r1, r3, r1, lsl #16
  105fa4:	e1500001 	cmp	r0, r1
  105fa8:	9a000007 	bls	105fcc <__divdi3+0xbc>
  105fac:	e0911004 	adds	r1, r1, r4
  105fb0:	e2492001 	sub	r2, r9, #1
  105fb4:	2a000003 	bcs	105fc8 <__divdi3+0xb8>
  105fb8:	e1500001 	cmp	r0, r1
  105fbc:	82499002 	subhi	r9, r9, #2
  105fc0:	80811004 	addhi	r1, r1, r4
  105fc4:	8a000000 	bhi	105fcc <__divdi3+0xbc>
  105fc8:	e1a09002 	mov	r9, r2
  105fcc:	e060b001 	rsb	fp, r0, r1
  105fd0:	e1a01008 	mov	r1, r8
  105fd4:	e6ff5075 	uxth	r5, r5
  105fd8:	e1a0000b 	mov	r0, fp
  105fdc:	ebffff1a 	bl	105c4c <__aeabi_uidiv>
  105fe0:	e1a01008 	mov	r1, r8
  105fe4:	e1a06000 	mov	r6, r0
  105fe8:	e1a0000b 	mov	r0, fp
  105fec:	ebffff91 	bl	105e38 <__aeabi_uidivmod>
  105ff0:	e00a069a 	mul	sl, sl, r6
  105ff4:	e1851801 	orr	r1, r5, r1, lsl #16
  105ff8:	e15a0001 	cmp	sl, r1
  105ffc:	9a000006 	bls	10601c <__divdi3+0x10c>
  106000:	e0914004 	adds	r4, r1, r4
  106004:	e2463001 	sub	r3, r6, #1
  106008:	2a000002 	bcs	106018 <__divdi3+0x108>
  10600c:	e15a0004 	cmp	sl, r4
  106010:	82466002 	subhi	r6, r6, #2
  106014:	8a000000 	bhi	10601c <__divdi3+0x10c>
  106018:	e1a06003 	mov	r6, r3
  10601c:	e1860809 	orr	r0, r6, r9, lsl #16
  106020:	e3a08000 	mov	r8, #0
  106024:	e3570000 	cmp	r7, #0
  106028:	e1a02000 	mov	r2, r0
  10602c:	e1a03008 	mov	r3, r8
  106030:	0a000001 	beq	10603c <__divdi3+0x12c>
  106034:	e2722000 	rsbs	r2, r2, #0
  106038:	e2e33000 	rsc	r3, r3, #0
  10603c:	e1a00002 	mov	r0, r2
  106040:	e1a01003 	mov	r1, r3
  106044:	e28dd00c 	add	sp, sp, #12
  106048:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  10604c:	e15c0001 	cmp	ip, r1
  106050:	83a08000 	movhi	r8, #0
  106054:	81a00008 	movhi	r0, r8
  106058:	8afffff1 	bhi	106024 <__divdi3+0x114>
  10605c:	e16f4f1c 	clz	r4, ip
  106060:	e3540000 	cmp	r4, #0
  106064:	1a00007e 	bne	106264 <__divdi3+0x354>
  106068:	e15c0001 	cmp	ip, r1
  10606c:	2152000b 	cmpcs	r2, fp
  106070:	83a08000 	movhi	r8, #0
  106074:	93a08001 	movls	r8, #1
  106078:	93a00001 	movls	r0, #1
  10607c:	91a08004 	movls	r8, r4
  106080:	81a00008 	movhi	r0, r8
  106084:	eaffffe6 	b	106024 <__divdi3+0x114>
  106088:	e3520000 	cmp	r2, #0
  10608c:	1a000003 	bne	1060a0 <__divdi3+0x190>
  106090:	e3a00001 	mov	r0, #1
  106094:	e1a01002 	mov	r1, r2
  106098:	ebfffeeb 	bl	105c4c <__aeabi_uidiv>
  10609c:	e1a04000 	mov	r4, r0
  1060a0:	e16f3f14 	clz	r3, r4
  1060a4:	e3530000 	cmp	r3, #0
  1060a8:	1a000036 	bne	106188 <__divdi3+0x278>
  1060ac:	e0646006 	rsb	r6, r4, r6
  1060b0:	e1a0a824 	lsr	sl, r4, #16
  1060b4:	e6ff9074 	uxth	r9, r4
  1060b8:	e3a08001 	mov	r8, #1
  1060bc:	e1a0100a 	mov	r1, sl
  1060c0:	e1a00006 	mov	r0, r6
  1060c4:	ebfffee0 	bl	105c4c <__aeabi_uidiv>
  1060c8:	e1a0100a 	mov	r1, sl
  1060cc:	e1a0b000 	mov	fp, r0
  1060d0:	e1a00006 	mov	r0, r6
  1060d4:	ebffff57 	bl	105e38 <__aeabi_uidivmod>
  1060d8:	e0000b99 	mul	r0, r9, fp
  1060dc:	e1a03825 	lsr	r3, r5, #16
  1060e0:	e1831801 	orr	r1, r3, r1, lsl #16
  1060e4:	e1500001 	cmp	r0, r1
  1060e8:	9a000006 	bls	106108 <__divdi3+0x1f8>
  1060ec:	e0911004 	adds	r1, r1, r4
  1060f0:	e24b3001 	sub	r3, fp, #1
  1060f4:	2a0000ac 	bcs	1063ac <__divdi3+0x49c>
  1060f8:	e1500001 	cmp	r0, r1
  1060fc:	824bb002 	subhi	fp, fp, #2
  106100:	80811004 	addhi	r1, r1, r4
  106104:	9a0000a8 	bls	1063ac <__divdi3+0x49c>
  106108:	e0603001 	rsb	r3, r0, r1
  10610c:	e1a0100a 	mov	r1, sl
  106110:	e58d3000 	str	r3, [sp]
  106114:	e6ff5075 	uxth	r5, r5
  106118:	e1a00003 	mov	r0, r3
  10611c:	ebfffeca 	bl	105c4c <__aeabi_uidiv>
  106120:	e59d3000 	ldr	r3, [sp]
  106124:	e1a0100a 	mov	r1, sl
  106128:	e1a06000 	mov	r6, r0
  10612c:	e1a00003 	mov	r0, r3
  106130:	ebffff40 	bl	105e38 <__aeabi_uidivmod>
  106134:	e0090699 	mul	r9, r9, r6
  106138:	e1851801 	orr	r1, r5, r1, lsl #16
  10613c:	e1590001 	cmp	r9, r1
  106140:	9a000006 	bls	106160 <__divdi3+0x250>
  106144:	e0914004 	adds	r4, r1, r4
  106148:	e2463001 	sub	r3, r6, #1
  10614c:	2a000002 	bcs	10615c <__divdi3+0x24c>
  106150:	e1590004 	cmp	r9, r4
  106154:	82466002 	subhi	r6, r6, #2
  106158:	8a000000 	bhi	106160 <__divdi3+0x250>
  10615c:	e1a06003 	mov	r6, r3
  106160:	e186080b 	orr	r0, r6, fp, lsl #16
  106164:	eaffffae 	b	106024 <__divdi3+0x114>
  106168:	e2722000 	rsbs	r2, r2, #0
  10616c:	e2e33000 	rsc	r3, r3, #0
  106170:	e1e07007 	mvn	r7, r7
  106174:	eaffff6d 	b	105f30 <__divdi3+0x20>
  106178:	e2700000 	rsbs	r0, r0, #0
  10617c:	e2e11000 	rsc	r1, r1, #0
  106180:	e3e07000 	mvn	r7, #0
  106184:	eaffff67 	b	105f28 <__divdi3+0x18>
  106188:	e1a04314 	lsl	r4, r4, r3
  10618c:	e263b020 	rsb	fp, r3, #32
  106190:	e1a08b36 	lsr	r8, r6, fp
  106194:	e1a0bb35 	lsr	fp, r5, fp
  106198:	e1a0a824 	lsr	sl, r4, #16
  10619c:	e18bb316 	orr	fp, fp, r6, lsl r3
  1061a0:	e1a00008 	mov	r0, r8
  1061a4:	e1a05315 	lsl	r5, r5, r3
  1061a8:	e1a0100a 	mov	r1, sl
  1061ac:	e6ff9074 	uxth	r9, r4
  1061b0:	ebfffea5 	bl	105c4c <__aeabi_uidiv>
  1061b4:	e1a0100a 	mov	r1, sl
  1061b8:	e1a03000 	mov	r3, r0
  1061bc:	e1a00008 	mov	r0, r8
  1061c0:	e58d3000 	str	r3, [sp]
  1061c4:	ebffff1b 	bl	105e38 <__aeabi_uidivmod>
  1061c8:	e59d3000 	ldr	r3, [sp]
  1061cc:	e1a0282b 	lsr	r2, fp, #16
  1061d0:	e0000399 	mul	r0, r9, r3
  1061d4:	e1821801 	orr	r1, r2, r1, lsl #16
  1061d8:	e1500001 	cmp	r0, r1
  1061dc:	9a000006 	bls	1061fc <__divdi3+0x2ec>
  1061e0:	e0911004 	adds	r1, r1, r4
  1061e4:	e2432001 	sub	r2, r3, #1
  1061e8:	2a000075 	bcs	1063c4 <__divdi3+0x4b4>
  1061ec:	e1500001 	cmp	r0, r1
  1061f0:	82433002 	subhi	r3, r3, #2
  1061f4:	80811004 	addhi	r1, r1, r4
  1061f8:	9a000071 	bls	1063c4 <__divdi3+0x4b4>
  1061fc:	e0606001 	rsb	r6, r0, r1
  106200:	e1a0100a 	mov	r1, sl
  106204:	e58d3000 	str	r3, [sp]
  106208:	e6ffb07b 	uxth	fp, fp
  10620c:	e1a00006 	mov	r0, r6
  106210:	ebfffe8d 	bl	105c4c <__aeabi_uidiv>
  106214:	e1a0100a 	mov	r1, sl
  106218:	e1a08000 	mov	r8, r0
  10621c:	e1a00006 	mov	r0, r6
  106220:	ebffff04 	bl	105e38 <__aeabi_uidivmod>
  106224:	e0060899 	mul	r6, r9, r8
  106228:	e59d3000 	ldr	r3, [sp]
  10622c:	e18b1801 	orr	r1, fp, r1, lsl #16
  106230:	e1560001 	cmp	r6, r1
  106234:	9a000007 	bls	106258 <__divdi3+0x348>
  106238:	e0911004 	adds	r1, r1, r4
  10623c:	e2482001 	sub	r2, r8, #1
  106240:	2a000003 	bcs	106254 <__divdi3+0x344>
  106244:	e1560001 	cmp	r6, r1
  106248:	82488002 	subhi	r8, r8, #2
  10624c:	80811004 	addhi	r1, r1, r4
  106250:	8a000000 	bhi	106258 <__divdi3+0x348>
  106254:	e1a08002 	mov	r8, r2
  106258:	e0666001 	rsb	r6, r6, r1
  10625c:	e1888803 	orr	r8, r8, r3, lsl #16
  106260:	eaffff95 	b	1060bc <__divdi3+0x1ac>
  106264:	e2642020 	rsb	r2, r4, #32
  106268:	e1a03419 	lsl	r3, r9, r4
  10626c:	e1a09239 	lsr	r9, r9, r2
  106270:	e58d3004 	str	r3, [sp, #4]
  106274:	e189941c 	orr	r9, r9, ip, lsl r4
  106278:	e1a03231 	lsr	r3, r1, r2
  10627c:	e1a0223b 	lsr	r2, fp, r2
  106280:	e58d3000 	str	r3, [sp]
  106284:	e1a0b829 	lsr	fp, r9, #16
  106288:	e182a411 	orr	sl, r2, r1, lsl r4
  10628c:	e1a00003 	mov	r0, r3
  106290:	e6ff8079 	uxth	r8, r9
  106294:	e1a0100b 	mov	r1, fp
  106298:	ebfffe6b 	bl	105c4c <__aeabi_uidiv>
  10629c:	e59d3000 	ldr	r3, [sp]
  1062a0:	e1a0100b 	mov	r1, fp
  1062a4:	e1a06000 	mov	r6, r0
  1062a8:	e1a00003 	mov	r0, r3
  1062ac:	ebfffee1 	bl	105e38 <__aeabi_uidivmod>
  1062b0:	e0000698 	mul	r0, r8, r6
  1062b4:	e1a0382a 	lsr	r3, sl, #16
  1062b8:	e1831801 	orr	r1, r3, r1, lsl #16
  1062bc:	e1500001 	cmp	r0, r1
  1062c0:	9a000006 	bls	1062e0 <__divdi3+0x3d0>
  1062c4:	e0911009 	adds	r1, r1, r9
  1062c8:	e2463001 	sub	r3, r6, #1
  1062cc:	2a00003a 	bcs	1063bc <__divdi3+0x4ac>
  1062d0:	e1500001 	cmp	r0, r1
  1062d4:	82466002 	subhi	r6, r6, #2
  1062d8:	80811009 	addhi	r1, r1, r9
  1062dc:	9a000036 	bls	1063bc <__divdi3+0x4ac>
  1062e0:	e060c001 	rsb	ip, r0, r1
  1062e4:	e1a0100b 	mov	r1, fp
  1062e8:	e58dc000 	str	ip, [sp]
  1062ec:	e6ffa07a 	uxth	sl, sl
  1062f0:	e1a0000c 	mov	r0, ip
  1062f4:	ebfffe54 	bl	105c4c <__aeabi_uidiv>
  1062f8:	e59dc000 	ldr	ip, [sp]
  1062fc:	e1a0100b 	mov	r1, fp
  106300:	e1a03000 	mov	r3, r0
  106304:	e1a0000c 	mov	r0, ip
  106308:	e58d3000 	str	r3, [sp]
  10630c:	ebfffec9 	bl	105e38 <__aeabi_uidivmod>
  106310:	e59d3000 	ldr	r3, [sp]
  106314:	e0080398 	mul	r8, r8, r3
  106318:	e18a1801 	orr	r1, sl, r1, lsl #16
  10631c:	e1580001 	cmp	r8, r1
  106320:	9a000006 	bls	106340 <__divdi3+0x430>
  106324:	e0911009 	adds	r1, r1, r9
  106328:	e2430001 	sub	r0, r3, #1
  10632c:	2a000020 	bcs	1063b4 <__divdi3+0x4a4>
  106330:	e1580001 	cmp	r8, r1
  106334:	82433002 	subhi	r3, r3, #2
  106338:	80811009 	addhi	r1, r1, r9
  10633c:	9a00001c 	bls	1063b4 <__divdi3+0x4a4>
  106340:	e0688001 	rsb	r8, r8, r1
  106344:	e1830806 	orr	r0, r3, r6, lsl #16
  106348:	e59da004 	ldr	sl, [sp, #4]
  10634c:	e1a01820 	lsr	r1, r0, #16
  106350:	e1a0382a 	lsr	r3, sl, #16
  106354:	e1c0c801 	bic	ip, r0, r1, lsl #16
  106358:	e1ca6803 	bic	r6, sl, r3, lsl #16
  10635c:	e002069c 	mul	r2, ip, r6
  106360:	e0060691 	mul	r6, r1, r6
  106364:	e00c0c93 	mul	ip, r3, ip
  106368:	e0030391 	mul	r3, r1, r3
  10636c:	e096c00c 	adds	ip, r6, ip
  106370:	22833801 	addcs	r3, r3, #65536	; 0x10000
  106374:	e092280c 	adds	r2, r2, ip, lsl #16
  106378:	e0a3382c 	adc	r3, r3, ip, lsr #16
  10637c:	e1580003 	cmp	r8, r3
  106380:	3a000006 	bcc	1063a0 <__divdi3+0x490>
  106384:	13a08000 	movne	r8, #0
  106388:	03a08001 	moveq	r8, #1
  10638c:	e1520415 	cmp	r2, r5, lsl r4
  106390:	93a08000 	movls	r8, #0
  106394:	82088001 	andhi	r8, r8, #1
  106398:	e3580000 	cmp	r8, #0
  10639c:	0affff20 	beq	106024 <__divdi3+0x114>
  1063a0:	e2400001 	sub	r0, r0, #1
  1063a4:	e3a08000 	mov	r8, #0
  1063a8:	eaffff1d 	b	106024 <__divdi3+0x114>
  1063ac:	e1a0b003 	mov	fp, r3
  1063b0:	eaffff54 	b	106108 <__divdi3+0x1f8>
  1063b4:	e1a03000 	mov	r3, r0
  1063b8:	eaffffe0 	b	106340 <__divdi3+0x430>
  1063bc:	e1a06003 	mov	r6, r3
  1063c0:	eaffffc6 	b	1062e0 <__divdi3+0x3d0>
  1063c4:	e1a03002 	mov	r3, r2
  1063c8:	eaffff8b 	b	1061fc <__divdi3+0x2ec>

001063cc <__udivdi3>:
  1063cc:	e3530000 	cmp	r3, #0
  1063d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  1063d4:	e1a06000 	mov	r6, r0
  1063d8:	e24dd00c 	sub	sp, sp, #12
  1063dc:	e1a05001 	mov	r5, r1
  1063e0:	e1a04002 	mov	r4, r2
  1063e4:	e1a07000 	mov	r7, r0
  1063e8:	e1a08001 	mov	r8, r1
  1063ec:	1a000036 	bne	1064cc <__udivdi3+0x100>
  1063f0:	e1520001 	cmp	r2, r1
  1063f4:	9a000043 	bls	106508 <__udivdi3+0x13c>
  1063f8:	e16f3f12 	clz	r3, r2
  1063fc:	e3530000 	cmp	r3, #0
  106400:	12632020 	rsbne	r2, r3, #32
  106404:	11a04314 	lslne	r4, r4, r3
  106408:	11a02230 	lsrne	r2, r0, r2
  10640c:	11a07310 	lslne	r7, r0, r3
  106410:	11828311 	orrne	r8, r2, r1, lsl r3
  106414:	e1a05824 	lsr	r5, r4, #16
  106418:	e6ff9074 	uxth	r9, r4
  10641c:	e1a01005 	mov	r1, r5
  106420:	e1a00008 	mov	r0, r8
  106424:	ebfffe08 	bl	105c4c <__aeabi_uidiv>
  106428:	e1a01005 	mov	r1, r5
  10642c:	e1a0a000 	mov	sl, r0
  106430:	e1a00008 	mov	r0, r8
  106434:	ebfffe7f 	bl	105e38 <__aeabi_uidivmod>
  106438:	e0000a99 	mul	r0, r9, sl
  10643c:	e1a03827 	lsr	r3, r7, #16
  106440:	e1831801 	orr	r1, r3, r1, lsl #16
  106444:	e1500001 	cmp	r0, r1
  106448:	9a000007 	bls	10646c <__udivdi3+0xa0>
  10644c:	e0911004 	adds	r1, r1, r4
  106450:	e24a2001 	sub	r2, sl, #1
  106454:	2a000003 	bcs	106468 <__udivdi3+0x9c>
  106458:	e1500001 	cmp	r0, r1
  10645c:	824aa002 	subhi	sl, sl, #2
  106460:	80811004 	addhi	r1, r1, r4
  106464:	8a000000 	bhi	10646c <__udivdi3+0xa0>
  106468:	e1a0a002 	mov	sl, r2
  10646c:	e0608001 	rsb	r8, r0, r1
  106470:	e1a01005 	mov	r1, r5
  106474:	e6ff7077 	uxth	r7, r7
  106478:	e1a00008 	mov	r0, r8
  10647c:	ebfffdf2 	bl	105c4c <__aeabi_uidiv>
  106480:	e1a01005 	mov	r1, r5
  106484:	e1a06000 	mov	r6, r0
  106488:	e1a00008 	mov	r0, r8
  10648c:	ebfffe69 	bl	105e38 <__aeabi_uidivmod>
  106490:	e0090699 	mul	r9, r9, r6
  106494:	e1871801 	orr	r1, r7, r1, lsl #16
  106498:	e1590001 	cmp	r9, r1
  10649c:	9a000005 	bls	1064b8 <__udivdi3+0xec>
  1064a0:	e0914004 	adds	r4, r1, r4
  1064a4:	e2463001 	sub	r3, r6, #1
  1064a8:	2a0000c8 	bcs	1067d0 <__udivdi3+0x404>
  1064ac:	e1590004 	cmp	r9, r4
  1064b0:	82466002 	subhi	r6, r6, #2
  1064b4:	9a0000c5 	bls	1067d0 <__udivdi3+0x404>
  1064b8:	e186080a 	orr	r0, r6, sl, lsl #16
  1064bc:	e3a06000 	mov	r6, #0
  1064c0:	e1a01006 	mov	r1, r6
  1064c4:	e28dd00c 	add	sp, sp, #12
  1064c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  1064cc:	e1530001 	cmp	r3, r1
  1064d0:	83a06000 	movhi	r6, #0
  1064d4:	81a00006 	movhi	r0, r6
  1064d8:	8afffff8 	bhi	1064c0 <__udivdi3+0xf4>
  1064dc:	e16f4f13 	clz	r4, r3
  1064e0:	e3540000 	cmp	r4, #0
  1064e4:	1a00003c 	bne	1065dc <__udivdi3+0x210>
  1064e8:	e1530001 	cmp	r3, r1
  1064ec:	21520006 	cmpcs	r2, r6
  1064f0:	83a06000 	movhi	r6, #0
  1064f4:	93a06001 	movls	r6, #1
  1064f8:	93a00001 	movls	r0, #1
  1064fc:	91a06004 	movls	r6, r4
  106500:	81a00006 	movhi	r0, r6
  106504:	eaffffed 	b	1064c0 <__udivdi3+0xf4>
  106508:	e3520000 	cmp	r2, #0
  10650c:	1a000003 	bne	106520 <__udivdi3+0x154>
  106510:	e3a00001 	mov	r0, #1
  106514:	e1a01002 	mov	r1, r2
  106518:	ebfffdcb 	bl	105c4c <__aeabi_uidiv>
  10651c:	e1a04000 	mov	r4, r0
  106520:	e16f3f14 	clz	r3, r4
  106524:	e3530000 	cmp	r3, #0
  106528:	1a000073 	bne	1066fc <__udivdi3+0x330>
  10652c:	e0645005 	rsb	r5, r4, r5
  106530:	e1a08824 	lsr	r8, r4, #16
  106534:	e6ff9074 	uxth	r9, r4
  106538:	e3a06001 	mov	r6, #1
  10653c:	e1a01008 	mov	r1, r8
  106540:	e1a00005 	mov	r0, r5
  106544:	ebfffdc0 	bl	105c4c <__aeabi_uidiv>
  106548:	e1a01008 	mov	r1, r8
  10654c:	e1a0a000 	mov	sl, r0
  106550:	e1a00005 	mov	r0, r5
  106554:	ebfffe37 	bl	105e38 <__aeabi_uidivmod>
  106558:	e0000a99 	mul	r0, r9, sl
  10655c:	e1a03827 	lsr	r3, r7, #16
  106560:	e1831801 	orr	r1, r3, r1, lsl #16
  106564:	e1500001 	cmp	r0, r1
  106568:	9a000006 	bls	106588 <__udivdi3+0x1bc>
  10656c:	e0911004 	adds	r1, r1, r4
  106570:	e24a3001 	sub	r3, sl, #1
  106574:	2a000097 	bcs	1067d8 <__udivdi3+0x40c>
  106578:	e1500001 	cmp	r0, r1
  10657c:	824aa002 	subhi	sl, sl, #2
  106580:	80811004 	addhi	r1, r1, r4
  106584:	9a000093 	bls	1067d8 <__udivdi3+0x40c>
  106588:	e060b001 	rsb	fp, r0, r1
  10658c:	e1a01008 	mov	r1, r8
  106590:	e6ff7077 	uxth	r7, r7
  106594:	e1a0000b 	mov	r0, fp
  106598:	ebfffdab 	bl	105c4c <__aeabi_uidiv>
  10659c:	e1a01008 	mov	r1, r8
  1065a0:	e1a05000 	mov	r5, r0
  1065a4:	e1a0000b 	mov	r0, fp
  1065a8:	ebfffe22 	bl	105e38 <__aeabi_uidivmod>
  1065ac:	e0090599 	mul	r9, r9, r5
  1065b0:	e1871801 	orr	r1, r7, r1, lsl #16
  1065b4:	e1590001 	cmp	r9, r1
  1065b8:	9a000005 	bls	1065d4 <__udivdi3+0x208>
  1065bc:	e0914004 	adds	r4, r1, r4
  1065c0:	e2453001 	sub	r3, r5, #1
  1065c4:	2a000085 	bcs	1067e0 <__udivdi3+0x414>
  1065c8:	e1590004 	cmp	r9, r4
  1065cc:	82455002 	subhi	r5, r5, #2
  1065d0:	9a000082 	bls	1067e0 <__udivdi3+0x414>
  1065d4:	e185080a 	orr	r0, r5, sl, lsl #16
  1065d8:	eaffffb8 	b	1064c0 <__udivdi3+0xf4>
  1065dc:	e2641020 	rsb	r1, r4, #32
  1065e0:	e1a00412 	lsl	r0, r2, r4
  1065e4:	e1a02132 	lsr	r2, r2, r1
  1065e8:	e1a0b135 	lsr	fp, r5, r1
  1065ec:	e1828413 	orr	r8, r2, r3, lsl r4
  1065f0:	e1a01136 	lsr	r1, r6, r1
  1065f4:	e58d0004 	str	r0, [sp, #4]
  1065f8:	e1815415 	orr	r5, r1, r5, lsl r4
  1065fc:	e1a0a828 	lsr	sl, r8, #16
  106600:	e1a0000b 	mov	r0, fp
  106604:	e6ff9078 	uxth	r9, r8
  106608:	e1a0100a 	mov	r1, sl
  10660c:	ebfffd8e 	bl	105c4c <__aeabi_uidiv>
  106610:	e1a0100a 	mov	r1, sl
  106614:	e1a07000 	mov	r7, r0
  106618:	e1a0000b 	mov	r0, fp
  10661c:	ebfffe05 	bl	105e38 <__aeabi_uidivmod>
  106620:	e0000799 	mul	r0, r9, r7
  106624:	e1a0c825 	lsr	ip, r5, #16
  106628:	e18c1801 	orr	r1, ip, r1, lsl #16
  10662c:	e1500001 	cmp	r0, r1
  106630:	9a000003 	bls	106644 <__udivdi3+0x278>
  106634:	e0911008 	adds	r1, r1, r8
  106638:	e2472001 	sub	r2, r7, #1
  10663c:	3a00006e 	bcc	1067fc <__udivdi3+0x430>
  106640:	e1a07002 	mov	r7, r2
  106644:	e060c001 	rsb	ip, r0, r1
  106648:	e1a0100a 	mov	r1, sl
  10664c:	e58dc000 	str	ip, [sp]
  106650:	e6ff5075 	uxth	r5, r5
  106654:	e1a0000c 	mov	r0, ip
  106658:	ebfffd7b 	bl	105c4c <__aeabi_uidiv>
  10665c:	e59dc000 	ldr	ip, [sp]
  106660:	e1a0100a 	mov	r1, sl
  106664:	e1a0b000 	mov	fp, r0
  106668:	e1a0000c 	mov	r0, ip
  10666c:	ebfffdf1 	bl	105e38 <__aeabi_uidivmod>
  106670:	e0090b99 	mul	r9, r9, fp
  106674:	e1851801 	orr	r1, r5, r1, lsl #16
  106678:	e1590001 	cmp	r9, r1
  10667c:	9a000003 	bls	106690 <__udivdi3+0x2c4>
  106680:	e0911008 	adds	r1, r1, r8
  106684:	e24b2001 	sub	r2, fp, #1
  106688:	3a000056 	bcc	1067e8 <__udivdi3+0x41c>
  10668c:	e1a0b002 	mov	fp, r2
  106690:	e0699001 	rsb	r9, r9, r1
  106694:	e18b0807 	orr	r0, fp, r7, lsl #16
  106698:	e59d5004 	ldr	r5, [sp, #4]
  10669c:	e1a01820 	lsr	r1, r0, #16
  1066a0:	e1a03825 	lsr	r3, r5, #16
  1066a4:	e1c0c801 	bic	ip, r0, r1, lsl #16
  1066a8:	e1c57803 	bic	r7, r5, r3, lsl #16
  1066ac:	e002079c 	mul	r2, ip, r7
  1066b0:	e0070791 	mul	r7, r1, r7
  1066b4:	e00c0c93 	mul	ip, r3, ip
  1066b8:	e0030391 	mul	r3, r1, r3
  1066bc:	e097c00c 	adds	ip, r7, ip
  1066c0:	22833801 	addcs	r3, r3, #65536	; 0x10000
  1066c4:	e092280c 	adds	r2, r2, ip, lsl #16
  1066c8:	e0a3382c 	adc	r3, r3, ip, lsr #16
  1066cc:	e1590003 	cmp	r9, r3
  1066d0:	3a000006 	bcc	1066f0 <__udivdi3+0x324>
  1066d4:	13a03000 	movne	r3, #0
  1066d8:	03a03001 	moveq	r3, #1
  1066dc:	e1520416 	cmp	r2, r6, lsl r4
  1066e0:	93a06000 	movls	r6, #0
  1066e4:	82036001 	andhi	r6, r3, #1
  1066e8:	e3560000 	cmp	r6, #0
  1066ec:	0affff73 	beq	1064c0 <__udivdi3+0xf4>
  1066f0:	e2400001 	sub	r0, r0, #1
  1066f4:	e3a06000 	mov	r6, #0
  1066f8:	eaffff70 	b	1064c0 <__udivdi3+0xf4>
  1066fc:	e1a04314 	lsl	r4, r4, r3
  106700:	e263a020 	rsb	sl, r3, #32
  106704:	e1a02a35 	lsr	r2, r5, sl
  106708:	e1a0aa36 	lsr	sl, r6, sl
  10670c:	e1a08824 	lsr	r8, r4, #16
  106710:	e18aa315 	orr	sl, sl, r5, lsl r3
  106714:	e1a00002 	mov	r0, r2
  106718:	e1a07316 	lsl	r7, r6, r3
  10671c:	e1a01008 	mov	r1, r8
  106720:	e58d2000 	str	r2, [sp]
  106724:	ebfffd48 	bl	105c4c <__aeabi_uidiv>
  106728:	e59d2000 	ldr	r2, [sp]
  10672c:	e1a01008 	mov	r1, r8
  106730:	e6ff9074 	uxth	r9, r4
  106734:	e1a0b000 	mov	fp, r0
  106738:	e1a00002 	mov	r0, r2
  10673c:	ebfffdbd 	bl	105e38 <__aeabi_uidivmod>
  106740:	e0000b99 	mul	r0, r9, fp
  106744:	e1a0382a 	lsr	r3, sl, #16
  106748:	e1831801 	orr	r1, r3, r1, lsl #16
  10674c:	e1500001 	cmp	r0, r1
  106750:	9a000006 	bls	106770 <__udivdi3+0x3a4>
  106754:	e0911004 	adds	r1, r1, r4
  106758:	e24b3001 	sub	r3, fp, #1
  10675c:	2a00002b 	bcs	106810 <__udivdi3+0x444>
  106760:	e1500001 	cmp	r0, r1
  106764:	824bb002 	subhi	fp, fp, #2
  106768:	80811004 	addhi	r1, r1, r4
  10676c:	9a000027 	bls	106810 <__udivdi3+0x444>
  106770:	e0605001 	rsb	r5, r0, r1
  106774:	e1a01008 	mov	r1, r8
  106778:	e6ffa07a 	uxth	sl, sl
  10677c:	e1a00005 	mov	r0, r5
  106780:	ebfffd31 	bl	105c4c <__aeabi_uidiv>
  106784:	e1a01008 	mov	r1, r8
  106788:	e1a06000 	mov	r6, r0
  10678c:	e1a00005 	mov	r0, r5
  106790:	ebfffda8 	bl	105e38 <__aeabi_uidivmod>
  106794:	e0050699 	mul	r5, r9, r6
  106798:	e18a1801 	orr	r1, sl, r1, lsl #16
  10679c:	e1550001 	cmp	r5, r1
  1067a0:	9a000007 	bls	1067c4 <__udivdi3+0x3f8>
  1067a4:	e0911004 	adds	r1, r1, r4
  1067a8:	e2463001 	sub	r3, r6, #1
  1067ac:	2a000003 	bcs	1067c0 <__udivdi3+0x3f4>
  1067b0:	e1550001 	cmp	r5, r1
  1067b4:	82466002 	subhi	r6, r6, #2
  1067b8:	80811004 	addhi	r1, r1, r4
  1067bc:	8a000000 	bhi	1067c4 <__udivdi3+0x3f8>
  1067c0:	e1a06003 	mov	r6, r3
  1067c4:	e0655001 	rsb	r5, r5, r1
  1067c8:	e186680b 	orr	r6, r6, fp, lsl #16
  1067cc:	eaffff5a 	b	10653c <__udivdi3+0x170>
  1067d0:	e1a06003 	mov	r6, r3
  1067d4:	eaffff37 	b	1064b8 <__udivdi3+0xec>
  1067d8:	e1a0a003 	mov	sl, r3
  1067dc:	eaffff69 	b	106588 <__udivdi3+0x1bc>
  1067e0:	e1a05003 	mov	r5, r3
  1067e4:	eaffff7a 	b	1065d4 <__udivdi3+0x208>
  1067e8:	e1590001 	cmp	r9, r1
  1067ec:	824bb002 	subhi	fp, fp, #2
  1067f0:	80811008 	addhi	r1, r1, r8
  1067f4:	8affffa5 	bhi	106690 <__udivdi3+0x2c4>
  1067f8:	eaffffa3 	b	10668c <__udivdi3+0x2c0>
  1067fc:	e1500001 	cmp	r0, r1
  106800:	82477002 	subhi	r7, r7, #2
  106804:	80811008 	addhi	r1, r1, r8
  106808:	8affff8d 	bhi	106644 <__udivdi3+0x278>
  10680c:	eaffff8b 	b	106640 <__udivdi3+0x274>
  106810:	e1a0b003 	mov	fp, r3
  106814:	eaffffd5 	b	106770 <__udivdi3+0x3a4>

00106818 <exit>:
  106818:	e92d4008 	push	{r3, lr}
  10681c:	e3a01000 	mov	r1, #0
  106820:	e1a04000 	mov	r4, r0
  106824:	eb00095b 	bl	108d98 <__call_exitprocs>
  106828:	e30f3d0c 	movw	r3, #64780	; 0xfd0c
  10682c:	e3403010 	movt	r3, #16
  106830:	e5930000 	ldr	r0, [r3]
  106834:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
  106838:	e3530000 	cmp	r3, #0
  10683c:	0a000000 	beq	106844 <exit+0x2c>
  106840:	e12fff33 	blx	r3
  106844:	e1a00004 	mov	r0, r4
  106848:	eb00240e 	bl	10f888 <_exit>

0010684c <__libc_fini_array>:
  10684c:	e92d4038 	push	{r3, r4, r5, lr}
  106850:	e3084014 	movw	r4, #32788	; 0x8014
  106854:	e3085010 	movw	r5, #32784	; 0x8010
  106858:	e3404012 	movt	r4, #18
  10685c:	e3405012 	movt	r5, #18
  106860:	e0654004 	rsb	r4, r5, r4
  106864:	e1b04144 	asrs	r4, r4, #2
  106868:	10855104 	addne	r5, r5, r4, lsl #2
  10686c:	0a000003 	beq	106880 <__libc_fini_array+0x34>
  106870:	e5353004 	ldr	r3, [r5, #-4]!
  106874:	e12fff33 	blx	r3
  106878:	e2544001 	subs	r4, r4, #1
  10687c:	1afffffb 	bne	106870 <__libc_fini_array+0x24>
  106880:	e8bd4038 	pop	{r3, r4, r5, lr}
  106884:	ea0024d9 	b	10fbf0 <_fini>

00106888 <__libc_init_array>:
  106888:	e92d4070 	push	{r4, r5, r6, lr}
  10688c:	e3086008 	movw	r6, #32776	; 0x8008
  106890:	e3085008 	movw	r5, #32776	; 0x8008
  106894:	e3406012 	movt	r6, #18
  106898:	e3405012 	movt	r5, #18
  10689c:	e0656006 	rsb	r6, r5, r6
  1068a0:	e1b06146 	asrs	r6, r6, #2
  1068a4:	12455004 	subne	r5, r5, #4
  1068a8:	13a04000 	movne	r4, #0
  1068ac:	0a000004 	beq	1068c4 <__libc_init_array+0x3c>
  1068b0:	e5b53004 	ldr	r3, [r5, #4]!
  1068b4:	e2844001 	add	r4, r4, #1
  1068b8:	e12fff33 	blx	r3
  1068bc:	e1560004 	cmp	r6, r4
  1068c0:	1afffffa 	bne	1068b0 <__libc_init_array+0x28>
  1068c4:	e3086010 	movw	r6, #32784	; 0x8010
  1068c8:	e3085008 	movw	r5, #32776	; 0x8008
  1068cc:	e3406012 	movt	r6, #18
  1068d0:	e3405012 	movt	r5, #18
  1068d4:	e0656006 	rsb	r6, r5, r6
  1068d8:	eb0024be 	bl	10fbd8 <_init>
  1068dc:	e1b06146 	asrs	r6, r6, #2
  1068e0:	08bd8070 	popeq	{r4, r5, r6, pc}
  1068e4:	e2455004 	sub	r5, r5, #4
  1068e8:	e3a04000 	mov	r4, #0
  1068ec:	e5b53004 	ldr	r3, [r5, #4]!
  1068f0:	e2844001 	add	r4, r4, #1
  1068f4:	e12fff33 	blx	r3
  1068f8:	e1560004 	cmp	r6, r4
  1068fc:	1afffffa 	bne	1068ec <__libc_init_array+0x64>
  106900:	e8bd8070 	pop	{r4, r5, r6, pc}

00106904 <_printf_r>:
  106904:	e92d000e 	push	{r1, r2, r3}
  106908:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  10690c:	e24dd008 	sub	sp, sp, #8
  106910:	e28dc010 	add	ip, sp, #16
  106914:	e5901008 	ldr	r1, [r0, #8]
  106918:	e59d200c 	ldr	r2, [sp, #12]
  10691c:	e1a0300c 	mov	r3, ip
  106920:	e58dc004 	str	ip, [sp, #4]
  106924:	eb00004b 	bl	106a58 <_vfprintf_r>
  106928:	e28dd008 	add	sp, sp, #8
  10692c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  106930:	e28dd00c 	add	sp, sp, #12
  106934:	e12fff1e 	bx	lr

00106938 <printf>:
  106938:	e92d000f 	push	{r0, r1, r2, r3}
  10693c:	e30f1c28 	movw	r1, #64552	; 0xfc28
  106940:	e3401011 	movt	r1, #17
  106944:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  106948:	e24dd00c 	sub	sp, sp, #12
  10694c:	e5910000 	ldr	r0, [r1]
  106950:	e28dc014 	add	ip, sp, #20
  106954:	e59d2010 	ldr	r2, [sp, #16]
  106958:	e1a0300c 	mov	r3, ip
  10695c:	e58dc004 	str	ip, [sp, #4]
  106960:	e5901008 	ldr	r1, [r0, #8]
  106964:	eb00003b 	bl	106a58 <_vfprintf_r>
  106968:	e28dd00c 	add	sp, sp, #12
  10696c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  106970:	e28dd010 	add	sp, sp, #16
  106974:	e12fff1e 	bx	lr

00106978 <srand>:
  106978:	e30f3c28 	movw	r3, #64552	; 0xfc28
  10697c:	e3403011 	movt	r3, #17
  106980:	e3a02000 	mov	r2, #0
  106984:	e5933000 	ldr	r3, [r3]
  106988:	e58300a8 	str	r0, [r3, #168]	; 0xa8
  10698c:	e58320ac 	str	r2, [r3, #172]	; 0xac
  106990:	e12fff1e 	bx	lr

00106994 <rand>:
  106994:	e30f3c28 	movw	r3, #64552	; 0xfc28
  106998:	e3403011 	movt	r3, #17
  10699c:	e92d0030 	push	{r4, r5}
  1069a0:	e30f442d 	movw	r4, #62509	; 0xf42d
  1069a4:	e593c000 	ldr	ip, [r3]
  1069a8:	e3454851 	movt	r4, #22609	; 0x5851
  1069ac:	e3073f2d 	movw	r3, #32557	; 0x7f2d
  1069b0:	e3443c95 	movt	r3, #19605	; 0x4c95
  1069b4:	e59c20a8 	ldr	r2, [ip, #168]	; 0xa8
  1069b8:	e59c50ac 	ldr	r5, [ip, #172]	; 0xac
  1069bc:	e0040294 	mul	r4, r4, r2
  1069c0:	e0244593 	mla	r4, r3, r5, r4
  1069c4:	e3a05000 	mov	r5, #0
  1069c8:	e0832392 	umull	r2, r3, r2, r3
  1069cc:	e0843003 	add	r3, r4, r3
  1069d0:	e3a04001 	mov	r4, #1
  1069d4:	e0922004 	adds	r2, r2, r4
  1069d8:	e0a33005 	adc	r3, r3, r5
  1069dc:	e1cc2af8 	strd	r2, [ip, #168]	; 0xa8
  1069e0:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
  1069e4:	e8bd0030 	pop	{r4, r5}
  1069e8:	e12fff1e 	bx	lr

001069ec <strlen>:
  1069ec:	f5d0f000 	pld	[r0]
  1069f0:	e3c01003 	bic	r1, r0, #3
  1069f4:	e2100003 	ands	r0, r0, #3
  1069f8:	e2600000 	rsb	r0, r0, #0
  1069fc:	e4913004 	ldr	r3, [r1], #4
  106a00:	e280c004 	add	ip, r0, #4
  106a04:	e1a0c18c 	lsl	ip, ip, #3
  106a08:	e3e02000 	mvn	r2, #0
  106a0c:	11833c32 	orrne	r3, r3, r2, lsr ip
  106a10:	e300c101 	movw	ip, #257	; 0x101
  106a14:	e18cc80c 	orr	ip, ip, ip, lsl #16
  106a18:	e043200c 	sub	r2, r3, ip
  106a1c:	e1c22003 	bic	r2, r2, r3
  106a20:	e012238c 	ands	r2, r2, ip, lsl #7
  106a24:	04913004 	ldreq	r3, [r1], #4
  106a28:	02800004 	addeq	r0, r0, #4
  106a2c:	f5d1f008 	pld	[r1, #8]
  106a30:	0043200c 	subeq	r2, r3, ip
  106a34:	01c22003 	biceq	r2, r2, r3
  106a38:	0012238c 	andseq	r2, r2, ip, lsl #7
  106a3c:	04913004 	ldreq	r3, [r1], #4
  106a40:	02800004 	addeq	r0, r0, #4
  106a44:	0afffff3 	beq	106a18 <strlen+0x2c>
  106a48:	e6ff2f32 	rbit	r2, r2
  106a4c:	e16f2f12 	clz	r2, r2
  106a50:	e08001a2 	add	r0, r0, r2, lsr #3
  106a54:	e12fff1e 	bx	lr

00106a58 <_vfprintf_r>:
  106a58:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  106a5c:	ed2d8b04 	vpush	{d8-d9}
  106a60:	e24dde53 	sub	sp, sp, #1328	; 0x530
  106a64:	ed9f8be1 	vldr	d8, [pc, #900]	; 106df0 <_vfprintf_r+0x398>
  106a68:	e24dd00c 	sub	sp, sp, #12
  106a6c:	e1a0a001 	mov	sl, r1
  106a70:	e1a04002 	mov	r4, r2
  106a74:	e58d303c 	str	r3, [sp, #60]	; 0x3c
  106a78:	e58d0024 	str	r0, [sp, #36]	; 0x24
  106a7c:	eb0010a8 	bl	10ad24 <_localeconv_r>
  106a80:	e5900000 	ldr	r0, [r0]
  106a84:	e58d0050 	str	r0, [sp, #80]	; 0x50
  106a88:	ebffffd7 	bl	1069ec <strlen>
  106a8c:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
  106a90:	e3560000 	cmp	r6, #0
  106a94:	e58d0060 	str	r0, [sp, #96]	; 0x60
  106a98:	0a000002 	beq	106aa8 <_vfprintf_r+0x50>
  106a9c:	e5963038 	ldr	r3, [r6, #56]	; 0x38
  106aa0:	e3530000 	cmp	r3, #0
  106aa4:	0a000109 	beq	106ed0 <_vfprintf_r+0x478>
  106aa8:	e1dac0bc 	ldrh	ip, [sl, #12]
  106aac:	e20c3a02 	and	r3, ip, #8192	; 0x2000
  106ab0:	e6bf3073 	sxth	r3, r3
  106ab4:	e3530000 	cmp	r3, #0
  106ab8:	038cca02 	orreq	ip, ip, #8192	; 0x2000
  106abc:	01cac0bc 	strheq	ip, [sl, #12]
  106ac0:	059a3064 	ldreq	r3, [sl, #100]	; 0x64
  106ac4:	03c33a02 	biceq	r3, r3, #8192	; 0x2000
  106ac8:	058a3064 	streq	r3, [sl, #100]	; 0x64
  106acc:	e20c3008 	and	r3, ip, #8
  106ad0:	e6bf3073 	sxth	r3, r3
  106ad4:	e3530000 	cmp	r3, #0
  106ad8:	0a0000ae 	beq	106d98 <_vfprintf_r+0x340>
  106adc:	e59a3010 	ldr	r3, [sl, #16]
  106ae0:	e3530000 	cmp	r3, #0
  106ae4:	0a0000ab 	beq	106d98 <_vfprintf_r+0x340>
  106ae8:	e20c301a 	and	r3, ip, #26
  106aec:	e353000a 	cmp	r3, #10
  106af0:	0a0000c1 	beq	106dfc <_vfprintf_r+0x3a4>
  106af4:	e28d70d0 	add	r7, sp, #208	; 0xd0
  106af8:	e28d80cf 	add	r8, sp, #207	; 0xcf
  106afc:	e3a03000 	mov	r3, #0
  106b00:	e58d7048 	str	r7, [sp, #72]	; 0x48
  106b04:	e306c667 	movw	ip, #26215	; 0x6667
  106b08:	e3006124 	movw	r6, #292	; 0x124
  106b0c:	e346c666 	movt	ip, #26214	; 0x6666
  106b10:	e3406011 	movt	r6, #17
  106b14:	e0687007 	rsb	r7, r8, r7
  106b18:	e28d9f4e 	add	r9, sp, #312	; 0x138
  106b1c:	e58d8058 	str	r8, [sp, #88]	; 0x58
  106b20:	e58d3040 	str	r3, [sp, #64]	; 0x40
  106b24:	e58dc064 	str	ip, [sp, #100]	; 0x64
  106b28:	e58d604c 	str	r6, [sp, #76]	; 0x4c
  106b2c:	e58d7074 	str	r7, [sp, #116]	; 0x74
  106b30:	e58d401c 	str	r4, [sp, #28]
  106b34:	e58d3054 	str	r3, [sp, #84]	; 0x54
  106b38:	e58d3068 	str	r3, [sp, #104]	; 0x68
  106b3c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  106b40:	e58d909c 	str	r9, [sp, #156]	; 0x9c
  106b44:	e58d30a4 	str	r3, [sp, #164]	; 0xa4
  106b48:	e58d30a0 	str	r3, [sp, #160]	; 0xa0
  106b4c:	e58da030 	str	sl, [sp, #48]	; 0x30
  106b50:	e59d801c 	ldr	r8, [sp, #28]
  106b54:	e5d83000 	ldrb	r3, [r8]
  106b58:	e3530025 	cmp	r3, #37	; 0x25
  106b5c:	13530000 	cmpne	r3, #0
  106b60:	0a0000dd 	beq	106edc <_vfprintf_r+0x484>
  106b64:	e2882001 	add	r2, r8, #1
  106b68:	e1a04002 	mov	r4, r2
  106b6c:	e2822001 	add	r2, r2, #1
  106b70:	e5d43000 	ldrb	r3, [r4]
  106b74:	e3530025 	cmp	r3, #37	; 0x25
  106b78:	13530000 	cmpne	r3, #0
  106b7c:	1afffff9 	bne	106b68 <_vfprintf_r+0x110>
  106b80:	e59dc01c 	ldr	ip, [sp, #28]
  106b84:	e054500c 	subs	r5, r4, ip
  106b88:	0a00000d 	beq	106bc4 <_vfprintf_r+0x16c>
  106b8c:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  106b90:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  106b94:	e2811001 	add	r1, r1, #1
  106b98:	e589c000 	str	ip, [r9]
  106b9c:	e3510007 	cmp	r1, #7
  106ba0:	e5895004 	str	r5, [r9, #4]
  106ba4:	e0822005 	add	r2, r2, r5
  106ba8:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  106bac:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  106bb0:	d2899008 	addle	r9, r9, #8
  106bb4:	ca000084 	bgt	106dcc <_vfprintf_r+0x374>
  106bb8:	e59d602c 	ldr	r6, [sp, #44]	; 0x2c
  106bbc:	e0866005 	add	r6, r6, r5
  106bc0:	e58d602c 	str	r6, [sp, #44]	; 0x2c
  106bc4:	e5d43000 	ldrb	r3, [r4]
  106bc8:	e3530000 	cmp	r3, #0
  106bcc:	0a0003a9 	beq	107a78 <_vfprintf_r+0x1020>
  106bd0:	e2847001 	add	r7, r4, #1
  106bd4:	e5d45001 	ldrb	r5, [r4, #1]
  106bd8:	e3a03000 	mov	r3, #0
  106bdc:	e3e08000 	mvn	r8, #0
  106be0:	e58d3028 	str	r3, [sp, #40]	; 0x28
  106be4:	e3a01020 	mov	r1, #32
  106be8:	e5cd307b 	strb	r3, [sp, #123]	; 0x7b
  106bec:	e3a0202b 	mov	r2, #43	; 0x2b
  106bf0:	e58d3018 	str	r3, [sp, #24]
  106bf4:	e1a03007 	mov	r3, r7
  106bf8:	e58d701c 	str	r7, [sp, #28]
  106bfc:	e2833001 	add	r3, r3, #1
  106c00:	e2450020 	sub	r0, r5, #32
  106c04:	e3500058 	cmp	r0, #88	; 0x58
  106c08:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
  106c0c:	ea000220 	b	107494 <_vfprintf_r+0xa3c>
  106c10:	001074c0 	.word	0x001074c0
  106c14:	00107494 	.word	0x00107494
  106c18:	00107494 	.word	0x00107494
  106c1c:	001074d8 	.word	0x001074d8
  106c20:	00107494 	.word	0x00107494
  106c24:	00107494 	.word	0x00107494
  106c28:	00107494 	.word	0x00107494
  106c2c:	00107494 	.word	0x00107494
  106c30:	00107494 	.word	0x00107494
  106c34:	00107494 	.word	0x00107494
  106c38:	001074ec 	.word	0x001074ec
  106c3c:	00106ee4 	.word	0x00106ee4
  106c40:	00107494 	.word	0x00107494
  106c44:	00106d84 	.word	0x00106d84
  106c48:	00106ef0 	.word	0x00106ef0
  106c4c:	00107494 	.word	0x00107494
  106c50:	00106f3c 	.word	0x00106f3c
  106c54:	00107268 	.word	0x00107268
  106c58:	00107268 	.word	0x00107268
  106c5c:	00107268 	.word	0x00107268
  106c60:	00107268 	.word	0x00107268
  106c64:	00107268 	.word	0x00107268
  106c68:	00107268 	.word	0x00107268
  106c6c:	00107268 	.word	0x00107268
  106c70:	00107268 	.word	0x00107268
  106c74:	00107268 	.word	0x00107268
  106c78:	00107494 	.word	0x00107494
  106c7c:	00107494 	.word	0x00107494
  106c80:	00107494 	.word	0x00107494
  106c84:	00107494 	.word	0x00107494
  106c88:	00107494 	.word	0x00107494
  106c8c:	00107494 	.word	0x00107494
  106c90:	00107494 	.word	0x00107494
  106c94:	00107494 	.word	0x00107494
  106c98:	00107494 	.word	0x00107494
  106c9c:	00107494 	.word	0x00107494
  106ca0:	00107298 	.word	0x00107298
  106ca4:	00106f50 	.word	0x00106f50
  106ca8:	00107494 	.word	0x00107494
  106cac:	00106f50 	.word	0x00106f50
  106cb0:	00107494 	.word	0x00107494
  106cb4:	00107494 	.word	0x00107494
  106cb8:	00107494 	.word	0x00107494
  106cbc:	00107494 	.word	0x00107494
  106cc0:	00107134 	.word	0x00107134
  106cc4:	00107494 	.word	0x00107494
  106cc8:	00107494 	.word	0x00107494
  106ccc:	00107148 	.word	0x00107148
  106cd0:	00107494 	.word	0x00107494
  106cd4:	00107494 	.word	0x00107494
  106cd8:	00107494 	.word	0x00107494
  106cdc:	00107494 	.word	0x00107494
  106ce0:	00107494 	.word	0x00107494
  106ce4:	0010723c 	.word	0x0010723c
  106ce8:	00107494 	.word	0x00107494
  106cec:	00107494 	.word	0x00107494
  106cf0:	001072f4 	.word	0x001072f4
  106cf4:	00107494 	.word	0x00107494
  106cf8:	00107494 	.word	0x00107494
  106cfc:	00107494 	.word	0x00107494
  106d00:	00107494 	.word	0x00107494
  106d04:	00107494 	.word	0x00107494
  106d08:	00107494 	.word	0x00107494
  106d0c:	00107494 	.word	0x00107494
  106d10:	00107494 	.word	0x00107494
  106d14:	00107494 	.word	0x00107494
  106d18:	00107494 	.word	0x00107494
  106d1c:	00107348 	.word	0x00107348
  106d20:	0010760c 	.word	0x0010760c
  106d24:	00106f50 	.word	0x00106f50
  106d28:	00106f50 	.word	0x00106f50
  106d2c:	00106f50 	.word	0x00106f50
  106d30:	0010764c 	.word	0x0010764c
  106d34:	0010760c 	.word	0x0010760c
  106d38:	00107494 	.word	0x00107494
  106d3c:	00107494 	.word	0x00107494
  106d40:	00107514 	.word	0x00107514
  106d44:	00107494 	.word	0x00107494
  106d48:	00107544 	.word	0x00107544
  106d4c:	00107578 	.word	0x00107578
  106d50:	001075b8 	.word	0x001075b8
  106d54:	0010738c 	.word	0x0010738c
  106d58:	00107494 	.word	0x00107494
  106d5c:	001073a0 	.word	0x001073a0
  106d60:	00107494 	.word	0x00107494
  106d64:	0010740c 	.word	0x0010740c
  106d68:	00107494 	.word	0x00107494
  106d6c:	00107494 	.word	0x00107494
  106d70:	00107450 	.word	0x00107450
  106d74:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
  106d78:	e58d003c 	str	r0, [sp, #60]	; 0x3c
  106d7c:	e2677000 	rsb	r7, r7, #0
  106d80:	e58d7028 	str	r7, [sp, #40]	; 0x28
  106d84:	e59dc018 	ldr	ip, [sp, #24]
  106d88:	e38cc004 	orr	ip, ip, #4
  106d8c:	e58dc018 	str	ip, [sp, #24]
  106d90:	e5d35000 	ldrb	r5, [r3]
  106d94:	eaffff98 	b	106bfc <_vfprintf_r+0x1a4>
  106d98:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  106d9c:	e1a0100a 	mov	r1, sl
  106da0:	eb0007a4 	bl	108c38 <__swsetup_r>
  106da4:	e3500000 	cmp	r0, #0
  106da8:	01dac0bc 	ldrheq	ip, [sl, #12]
  106dac:	0affff4d 	beq	106ae8 <_vfprintf_r+0x90>
  106db0:	e3e07000 	mvn	r7, #0
  106db4:	e58d702c 	str	r7, [sp, #44]	; 0x2c
  106db8:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  106dbc:	e28ddf4f 	add	sp, sp, #316	; 0x13c
  106dc0:	e28ddb01 	add	sp, sp, #1024	; 0x400
  106dc4:	ecbd8b04 	vpop	{d8-d9}
  106dc8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  106dcc:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  106dd0:	e28d209c 	add	r2, sp, #156	; 0x9c
  106dd4:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  106dd8:	eb00189f 	bl	10d05c <__sprint_r>
  106ddc:	e3500000 	cmp	r0, #0
  106de0:	1a0003c7 	bne	107d04 <_vfprintf_r+0x12ac>
  106de4:	e28d9f4e 	add	r9, sp, #312	; 0x138
  106de8:	eaffff72 	b	106bb8 <_vfprintf_r+0x160>
  106dec:	e320f000 	nop	{0}
	...
  106df8:	0010fd20 	.word	0x0010fd20
  106dfc:	e1da50be 	ldrh	r5, [sl, #14]
  106e00:	e3150902 	tst	r5, #32768	; 0x8000
  106e04:	1affff3a 	bne	106af4 <_vfprintf_r+0x9c>
  106e08:	e28d8e53 	add	r8, sp, #1328	; 0x530
  106e0c:	e30f6ba4 	movw	r6, #64420	; 0xfba4
  106e10:	e2888008 	add	r8, r8, #8
  106e14:	e34f6fff 	movt	r6, #65535	; 0xffff
  106e18:	e59ab01c 	ldr	fp, [sl, #28]
  106e1c:	e3ccc002 	bic	ip, ip, #2
  106e20:	e59a9024 	ldr	r9, [sl, #36]	; 0x24
  106e24:	e30feba6 	movw	lr, #64422	; 0xfba6
  106e28:	e188c0b6 	strh	ip, [r8, r6]
  106e2c:	e34fefff 	movt	lr, #65535	; 0xffff
  106e30:	e59ac064 	ldr	ip, [sl, #100]	; 0x64
  106e34:	e1a02004 	mov	r2, r4
  106e38:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  106e3c:	e28d10d0 	add	r1, sp, #208	; 0xd0
  106e40:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  106e44:	e28d7f4e 	add	r7, sp, #312	; 0x138
  106e48:	e3a04b01 	mov	r4, #1024	; 0x400
  106e4c:	e58dc134 	str	ip, [sp, #308]	; 0x134
  106e50:	e18850be 	strh	r5, [r8, lr]
  106e54:	e3a0c000 	mov	ip, #0
  106e58:	e58db0ec 	str	fp, [sp, #236]	; 0xec
  106e5c:	e58d90f4 	str	r9, [sp, #244]	; 0xf4
  106e60:	e58d70d0 	str	r7, [sp, #208]	; 0xd0
  106e64:	e58d70e0 	str	r7, [sp, #224]	; 0xe0
  106e68:	e58d40d8 	str	r4, [sp, #216]	; 0xd8
  106e6c:	e58d40e4 	str	r4, [sp, #228]	; 0xe4
  106e70:	e58dc0e8 	str	ip, [sp, #232]	; 0xe8
  106e74:	ebfffef7 	bl	106a58 <_vfprintf_r>
  106e78:	e3500000 	cmp	r0, #0
  106e7c:	e58d002c 	str	r0, [sp, #44]	; 0x2c
  106e80:	ba000006 	blt	106ea0 <_vfprintf_r+0x448>
  106e84:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  106e88:	e28d10d0 	add	r1, sp, #208	; 0xd0
  106e8c:	eb000d1f 	bl	10a310 <_fflush_r>
  106e90:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
  106e94:	e3500000 	cmp	r0, #0
  106e98:	13e04000 	mvnne	r4, #0
  106e9c:	e58d402c 	str	r4, [sp, #44]	; 0x2c
  106ea0:	e28d6e53 	add	r6, sp, #1328	; 0x530
  106ea4:	e30f3ba4 	movw	r3, #64420	; 0xfba4
  106ea8:	e2866008 	add	r6, r6, #8
  106eac:	e34f3fff 	movt	r3, #65535	; 0xffff
  106eb0:	e19630b3 	ldrh	r3, [r6, r3]
  106eb4:	e2033040 	and	r3, r3, #64	; 0x40
  106eb8:	e6bf3073 	sxth	r3, r3
  106ebc:	e3530000 	cmp	r3, #0
  106ec0:	11da30bc 	ldrhne	r3, [sl, #12]
  106ec4:	13833040 	orrne	r3, r3, #64	; 0x40
  106ec8:	11ca30bc 	strhne	r3, [sl, #12]
  106ecc:	eaffffb9 	b	106db8 <_vfprintf_r+0x360>
  106ed0:	e1a00006 	mov	r0, r6
  106ed4:	eb000de8 	bl	10a67c <__sinit>
  106ed8:	eafffef2 	b	106aa8 <_vfprintf_r+0x50>
  106edc:	e59d401c 	ldr	r4, [sp, #28]
  106ee0:	eaffff37 	b	106bc4 <_vfprintf_r+0x16c>
  106ee4:	e5cd207b 	strb	r2, [sp, #123]	; 0x7b
  106ee8:	e5d35000 	ldrb	r5, [r3]
  106eec:	eaffff42 	b	106bfc <_vfprintf_r+0x1a4>
  106ef0:	e1a0c003 	mov	ip, r3
  106ef4:	e4dc5001 	ldrb	r5, [ip], #1
  106ef8:	e355002a 	cmp	r5, #42	; 0x2a
  106efc:	0a000729 	beq	108ba8 <_vfprintf_r+0x2150>
  106f00:	e2450030 	sub	r0, r5, #48	; 0x30
  106f04:	e3500009 	cmp	r0, #9
  106f08:	81a0300c 	movhi	r3, ip
  106f0c:	83a08000 	movhi	r8, #0
  106f10:	8affff3a 	bhi	106c00 <_vfprintf_r+0x1a8>
  106f14:	e3a08000 	mov	r8, #0
  106f18:	e4dc5001 	ldrb	r5, [ip], #1
  106f1c:	e0888108 	add	r8, r8, r8, lsl #2
  106f20:	e0808088 	add	r8, r0, r8, lsl #1
  106f24:	e2450030 	sub	r0, r5, #48	; 0x30
  106f28:	e3500009 	cmp	r0, #9
  106f2c:	e1a0300c 	mov	r3, ip
  106f30:	9afffff8 	bls	106f18 <_vfprintf_r+0x4c0>
  106f34:	e1888fc8 	orr	r8, r8, r8, asr #31
  106f38:	eaffff30 	b	106c00 <_vfprintf_r+0x1a8>
  106f3c:	e59d6018 	ldr	r6, [sp, #24]
  106f40:	e3866080 	orr	r6, r6, #128	; 0x80
  106f44:	e58d6018 	str	r6, [sp, #24]
  106f48:	e5d35000 	ldrb	r5, [r3]
  106f4c:	eaffff2a 	b	106bfc <_vfprintf_r+0x1a4>
  106f50:	e59d4018 	ldr	r4, [sp, #24]
  106f54:	e58d301c 	str	r3, [sp, #28]
  106f58:	e3140008 	tst	r4, #8
  106f5c:	159d603c 	ldrne	r6, [sp, #60]	; 0x3c
  106f60:	059d703c 	ldreq	r7, [sp, #60]	; 0x3c
  106f64:	12863007 	addne	r3, r6, #7
  106f68:	02873007 	addeq	r3, r7, #7
  106f6c:	e3c33007 	bic	r3, r3, #7
  106f70:	ed939b00 	vldr	d9, [r3]
  106f74:	ec510b19 	vmov	r0, r1, d9
  106f78:	e2833008 	add	r3, r3, #8
  106f7c:	e58d303c 	str	r3, [sp, #60]	; 0x3c
  106f80:	eb00174a 	bl	10ccb0 <__fpclassifyd>
  106f84:	eeb08b49 	vmov.f64	d8, d9
  106f88:	e3500001 	cmp	r0, #1
  106f8c:	1a0004fa 	bne	10837c <_vfprintf_r+0x1924>
  106f90:	eeb59bc0 	vcmpe.f64	d9, #0.0
  106f94:	e3002118 	movw	r2, #280	; 0x118
  106f98:	e3402011 	movt	r2, #17
  106f9c:	e3a08003 	mov	r8, #3
  106fa0:	e59d4018 	ldr	r4, [sp, #24]
  106fa4:	e300611c 	movw	r6, #284	; 0x11c
  106fa8:	e1a07008 	mov	r7, r8
  106fac:	e3406011 	movt	r6, #17
  106fb0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  106fb4:	43a0302d 	movmi	r3, #45	; 0x2d
  106fb8:	55dd307b 	ldrbpl	r3, [sp, #123]	; 0x7b
  106fbc:	e3a0c000 	mov	ip, #0
  106fc0:	45cd307b 	strbmi	r3, [sp, #123]	; 0x7b
  106fc4:	e3550047 	cmp	r5, #71	; 0x47
  106fc8:	e3c44080 	bic	r4, r4, #128	; 0x80
  106fcc:	e58d8020 	str	r8, [sp, #32]
  106fd0:	d1a06002 	movle	r6, r2
  106fd4:	e58dc038 	str	ip, [sp, #56]	; 0x38
  106fd8:	e58d4018 	str	r4, [sp, #24]
  106fdc:	e58dc05c 	str	ip, [sp, #92]	; 0x5c
  106fe0:	e3530000 	cmp	r3, #0
  106fe4:	0a000002 	beq	106ff4 <_vfprintf_r+0x59c>
  106fe8:	e59d8020 	ldr	r8, [sp, #32]
  106fec:	e2888001 	add	r8, r8, #1
  106ff0:	e58d8020 	str	r8, [sp, #32]
  106ff4:	e59dc018 	ldr	ip, [sp, #24]
  106ff8:	e59d4018 	ldr	r4, [sp, #24]
  106ffc:	e21cc002 	ands	ip, ip, #2
  107000:	e58dc034 	str	ip, [sp, #52]	; 0x34
  107004:	159d3020 	ldrne	r3, [sp, #32]
  107008:	12833002 	addne	r3, r3, #2
  10700c:	158d3020 	strne	r3, [sp, #32]
  107010:	e2144084 	ands	r4, r4, #132	; 0x84
  107014:	e58d4044 	str	r4, [sp, #68]	; 0x44
  107018:	1a000190 	bne	107660 <_vfprintf_r+0xc08>
  10701c:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
  107020:	e59dc020 	ldr	ip, [sp, #32]
  107024:	e06c4008 	rsb	r4, ip, r8
  107028:	e3540000 	cmp	r4, #0
  10702c:	da00018b 	ble	107660 <_vfprintf_r+0xc08>
  107030:	e3540010 	cmp	r4, #16
  107034:	da00060f 	ble	108878 <_vfprintf_r+0x1e20>
  107038:	e30fad10 	movw	sl, #64784	; 0xfd10
  10703c:	e340a010 	movt	sl, #16
  107040:	e28d809c 	add	r8, sp, #156	; 0x9c
  107044:	e58d506c 	str	r5, [sp, #108]	; 0x6c
  107048:	e1a0300a 	mov	r3, sl
  10704c:	e58d6070 	str	r6, [sp, #112]	; 0x70
  107050:	e1a0a007 	mov	sl, r7
  107054:	e1a06004 	mov	r6, r4
  107058:	e1a05008 	mov	r5, r8
  10705c:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  107060:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  107064:	e3a0b010 	mov	fp, #16
  107068:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
  10706c:	e1a07003 	mov	r7, r3
  107070:	e59d8024 	ldr	r8, [sp, #36]	; 0x24
  107074:	ea000002 	b	107084 <_vfprintf_r+0x62c>
  107078:	e2466010 	sub	r6, r6, #16
  10707c:	e3560010 	cmp	r6, #16
  107080:	da000013 	ble	1070d4 <_vfprintf_r+0x67c>
  107084:	e2811001 	add	r1, r1, #1
  107088:	e2899008 	add	r9, r9, #8
  10708c:	e3510007 	cmp	r1, #7
  107090:	e2822010 	add	r2, r2, #16
  107094:	e9090880 	stmdb	r9, {r7, fp}
  107098:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  10709c:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  1070a0:	dafffff4 	ble	107078 <_vfprintf_r+0x620>
  1070a4:	e1a00008 	mov	r0, r8
  1070a8:	e1a01004 	mov	r1, r4
  1070ac:	e1a02005 	mov	r2, r5
  1070b0:	e28d9f4e 	add	r9, sp, #312	; 0x138
  1070b4:	eb0017e8 	bl	10d05c <__sprint_r>
  1070b8:	e3500000 	cmp	r0, #0
  1070bc:	1a000289 	bne	107ae8 <_vfprintf_r+0x1090>
  1070c0:	e2466010 	sub	r6, r6, #16
  1070c4:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  1070c8:	e3560010 	cmp	r6, #16
  1070cc:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  1070d0:	caffffeb 	bgt	107084 <_vfprintf_r+0x62c>
  1070d4:	e1a04006 	mov	r4, r6
  1070d8:	e59d506c 	ldr	r5, [sp, #108]	; 0x6c
  1070dc:	e59d6070 	ldr	r6, [sp, #112]	; 0x70
  1070e0:	e1a03007 	mov	r3, r7
  1070e4:	e1a0700a 	mov	r7, sl
  1070e8:	e1a0a003 	mov	sl, r3
  1070ec:	e2811001 	add	r1, r1, #1
  1070f0:	e589a000 	str	sl, [r9]
  1070f4:	e3510007 	cmp	r1, #7
  1070f8:	e5894004 	str	r4, [r9, #4]
  1070fc:	e0822004 	add	r2, r2, r4
  107100:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  107104:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  107108:	d2899008 	addle	r9, r9, #8
  10710c:	da000154 	ble	107664 <_vfprintf_r+0xc0c>
  107110:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  107114:	e28d209c 	add	r2, sp, #156	; 0x9c
  107118:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  10711c:	eb0017ce 	bl	10d05c <__sprint_r>
  107120:	e3500000 	cmp	r0, #0
  107124:	1a0002f6 	bne	107d04 <_vfprintf_r+0x12ac>
  107128:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  10712c:	e28d9f4e 	add	r9, sp, #312	; 0x138
  107130:	ea00014b 	b	107664 <_vfprintf_r+0xc0c>
  107134:	e59d7018 	ldr	r7, [sp, #24]
  107138:	e3877008 	orr	r7, r7, #8
  10713c:	e58d7018 	str	r7, [sp, #24]
  107140:	e5d35000 	ldrb	r5, [r3]
  107144:	eafffeac 	b	106bfc <_vfprintf_r+0x1a4>
  107148:	e59d4018 	ldr	r4, [sp, #24]
  10714c:	e58d301c 	str	r3, [sp, #28]
  107150:	e3844010 	orr	r4, r4, #16
  107154:	e58d4018 	str	r4, [sp, #24]
  107158:	e59d6018 	ldr	r6, [sp, #24]
  10715c:	e2163020 	ands	r3, r6, #32
  107160:	0a000108 	beq	107588 <_vfprintf_r+0xb30>
  107164:	e59d703c 	ldr	r7, [sp, #60]	; 0x3c
  107168:	e3a03000 	mov	r3, #0
  10716c:	e2872007 	add	r2, r7, #7
  107170:	e3c22007 	bic	r2, r2, #7
  107174:	e282c008 	add	ip, r2, #8
  107178:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
  10717c:	e1c2a0d0 	ldrd	sl, [r2]
  107180:	e19a000b 	orrs	r0, sl, fp
  107184:	03a07000 	moveq	r7, #0
  107188:	13a07001 	movne	r7, #1
  10718c:	e3a02000 	mov	r2, #0
  107190:	e5cd207b 	strb	r2, [sp, #123]	; 0x7b
  107194:	e3580000 	cmp	r8, #0
  107198:	a59d6018 	ldrge	r6, [sp, #24]
  10719c:	a3c66080 	bicge	r6, r6, #128	; 0x80
  1071a0:	a58d6018 	strge	r6, [sp, #24]
  1071a4:	e3580000 	cmp	r8, #0
  1071a8:	13877001 	orrne	r7, r7, #1
  1071ac:	e3570000 	cmp	r7, #0
  1071b0:	0a00023f 	beq	107ab4 <_vfprintf_r+0x105c>
  1071b4:	e3530001 	cmp	r3, #1
  1071b8:	0a00035b 	beq	107f2c <_vfprintf_r+0x14d4>
  1071bc:	e3530002 	cmp	r3, #2
  1071c0:	0a000346 	beq	107ee0 <_vfprintf_r+0x1488>
  1071c4:	e59d0058 	ldr	r0, [sp, #88]	; 0x58
  1071c8:	e1a011aa 	lsr	r1, sl, #3
  1071cc:	e1a0c1ab 	lsr	ip, fp, #3
  1071d0:	e1811e8b 	orr	r1, r1, fp, lsl #29
  1071d4:	e3a06007 	mov	r6, #7
  1071d8:	e00a2006 	and	r2, sl, r6
  1071dc:	e1a0b00c 	mov	fp, ip
  1071e0:	e2822030 	add	r2, r2, #48	; 0x30
  1071e4:	e1a0a001 	mov	sl, r1
  1071e8:	e19a700b 	orrs	r7, sl, fp
  1071ec:	e1a06000 	mov	r6, r0
  1071f0:	e6ef2072 	uxtb	r2, r2
  1071f4:	e2400001 	sub	r0, r0, #1
  1071f8:	e5c62000 	strb	r2, [r6]
  1071fc:	1afffff1 	bne	1071c8 <_vfprintf_r+0x770>
  107200:	e59dc018 	ldr	ip, [sp, #24]
  107204:	e1a03006 	mov	r3, r6
  107208:	e31c0001 	tst	ip, #1
  10720c:	1a000438 	bne	1082f4 <_vfprintf_r+0x189c>
  107210:	e59d4048 	ldr	r4, [sp, #72]	; 0x48
  107214:	e0667004 	rsb	r7, r6, r4
  107218:	e1570008 	cmp	r7, r8
  10721c:	a1a0c007 	movge	ip, r7
  107220:	b1a0c008 	movlt	ip, r8
  107224:	e3a04000 	mov	r4, #0
  107228:	e58dc020 	str	ip, [sp, #32]
  10722c:	e5dd307b 	ldrb	r3, [sp, #123]	; 0x7b
  107230:	e58d8038 	str	r8, [sp, #56]	; 0x38
  107234:	e58d405c 	str	r4, [sp, #92]	; 0x5c
  107238:	eaffff68 	b	106fe0 <_vfprintf_r+0x588>
  10723c:	e59d4018 	ldr	r4, [sp, #24]
  107240:	e58d301c 	str	r3, [sp, #28]
  107244:	e3844010 	orr	r4, r4, #16
  107248:	e58d4018 	str	r4, [sp, #24]
  10724c:	e59d6018 	ldr	r6, [sp, #24]
  107250:	e3160020 	tst	r6, #32
  107254:	0a000070 	beq	10741c <_vfprintf_r+0x9c4>
  107258:	e59d703c 	ldr	r7, [sp, #60]	; 0x3c
  10725c:	e3a03001 	mov	r3, #1
  107260:	e2872007 	add	r2, r7, #7
  107264:	eaffffc1 	b	107170 <_vfprintf_r+0x718>
  107268:	e1a0c003 	mov	ip, r3
  10726c:	e3a00000 	mov	r0, #0
  107270:	e2453030 	sub	r3, r5, #48	; 0x30
  107274:	e4dc5001 	ldrb	r5, [ip], #1
  107278:	e0800100 	add	r0, r0, r0, lsl #2
  10727c:	e2454030 	sub	r4, r5, #48	; 0x30
  107280:	e3540009 	cmp	r4, #9
  107284:	e0830080 	add	r0, r3, r0, lsl #1
  107288:	e1a0300c 	mov	r3, ip
  10728c:	9afffff7 	bls	107270 <_vfprintf_r+0x818>
  107290:	e58d0028 	str	r0, [sp, #40]	; 0x28
  107294:	eafffe59 	b	106c00 <_vfprintf_r+0x1a8>
  107298:	e59d4018 	ldr	r4, [sp, #24]
  10729c:	e58d301c 	str	r3, [sp, #28]
  1072a0:	e3844010 	orr	r4, r4, #16
  1072a4:	e58d4018 	str	r4, [sp, #24]
  1072a8:	e59d6018 	ldr	r6, [sp, #24]
  1072ac:	e3160020 	tst	r6, #32
  1072b0:	0a0000d9 	beq	10761c <_vfprintf_r+0xbc4>
  1072b4:	e59d703c 	ldr	r7, [sp, #60]	; 0x3c
  1072b8:	e2873007 	add	r3, r7, #7
  1072bc:	e3c33007 	bic	r3, r3, #7
  1072c0:	e283c008 	add	ip, r3, #8
  1072c4:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
  1072c8:	e1c320d0 	ldrd	r2, [r3]
  1072cc:	e1a0a002 	mov	sl, r2
  1072d0:	e1a0b003 	mov	fp, r3
  1072d4:	e3520000 	cmp	r2, #0
  1072d8:	e2d36000 	sbcs	r6, r3, #0
  1072dc:	ba00040c 	blt	108314 <_vfprintf_r+0x18bc>
  1072e0:	e19a700b 	orrs	r7, sl, fp
  1072e4:	e3a03001 	mov	r3, #1
  1072e8:	03a07000 	moveq	r7, #0
  1072ec:	13a07001 	movne	r7, #1
  1072f0:	eaffffa7 	b	107194 <_vfprintf_r+0x73c>
  1072f4:	e59dc018 	ldr	ip, [sp, #24]
  1072f8:	e3007100 	movw	r7, #256	; 0x100
  1072fc:	e58d301c 	str	r3, [sp, #28]
  107300:	e3407011 	movt	r7, #17
  107304:	e31c0020 	tst	ip, #32
  107308:	e58d7054 	str	r7, [sp, #84]	; 0x54
  10730c:	0a000056 	beq	10746c <_vfprintf_r+0xa14>
  107310:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
  107314:	e2843007 	add	r3, r4, #7
  107318:	e3c33007 	bic	r3, r3, #7
  10731c:	e2836008 	add	r6, r3, #8
  107320:	e58d603c 	str	r6, [sp, #60]	; 0x3c
  107324:	e1c3a0d0 	ldrd	sl, [r3]
  107328:	e59dc018 	ldr	ip, [sp, #24]
  10732c:	e31c0001 	tst	ip, #1
  107330:	1a000328 	bne	107fd8 <_vfprintf_r+0x1580>
  107334:	e19a000b 	orrs	r0, sl, fp
  107338:	e3a03002 	mov	r3, #2
  10733c:	03a07000 	moveq	r7, #0
  107340:	13a07001 	movne	r7, #1
  107344:	eaffff90 	b	10718c <_vfprintf_r+0x734>
  107348:	e58d301c 	str	r3, [sp, #28]
  10734c:	e3a08001 	mov	r8, #1
  107350:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  107354:	e28d60a8 	add	r6, sp, #168	; 0xa8
  107358:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
  10735c:	e1a07008 	mov	r7, r8
  107360:	e3a02000 	mov	r2, #0
  107364:	e58d8020 	str	r8, [sp, #32]
  107368:	e5933000 	ldr	r3, [r3]
  10736c:	e28cc004 	add	ip, ip, #4
  107370:	e5cd207b 	strb	r2, [sp, #123]	; 0x7b
  107374:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
  107378:	e5cd30a8 	strb	r3, [sp, #168]	; 0xa8
  10737c:	e3a08000 	mov	r8, #0
  107380:	e58d8038 	str	r8, [sp, #56]	; 0x38
  107384:	e58d805c 	str	r8, [sp, #92]	; 0x5c
  107388:	eaffff19 	b	106ff4 <_vfprintf_r+0x59c>
  10738c:	e59d7018 	ldr	r7, [sp, #24]
  107390:	e3877020 	orr	r7, r7, #32
  107394:	e58d7018 	str	r7, [sp, #24]
  107398:	e5d35000 	ldrb	r5, [r3]
  10739c:	eafffe16 	b	106bfc <_vfprintf_r+0x1a4>
  1073a0:	e59d703c 	ldr	r7, [sp, #60]	; 0x3c
  1073a4:	e3a04000 	mov	r4, #0
  1073a8:	e5cd407b 	strb	r4, [sp, #123]	; 0x7b
  1073ac:	e58d301c 	str	r3, [sp, #28]
  1073b0:	e287a004 	add	sl, r7, #4
  1073b4:	e5976000 	ldr	r6, [r7]
  1073b8:	e1560004 	cmp	r6, r4
  1073bc:	0a00054d 	beq	1088f8 <_vfprintf_r+0x1ea0>
  1073c0:	e3580000 	cmp	r8, #0
  1073c4:	e1a00006 	mov	r0, r6
  1073c8:	ba000521 	blt	108854 <_vfprintf_r+0x1dfc>
  1073cc:	e1a01004 	mov	r1, r4
  1073d0:	e1a02008 	mov	r2, r8
  1073d4:	eb001084 	bl	10b5ec <memchr>
  1073d8:	e3500000 	cmp	r0, #0
  1073dc:	0a000594 	beq	108a34 <_vfprintf_r+0x1fdc>
  1073e0:	e0667000 	rsb	r7, r6, r0
  1073e4:	e58d4038 	str	r4, [sp, #56]	; 0x38
  1073e8:	e1570008 	cmp	r7, r8
  1073ec:	da0004d9 	ble	108758 <_vfprintf_r+0x1d00>
  1073f0:	e1c83fc8 	bic	r3, r8, r8, asr #31
  1073f4:	e58da03c 	str	sl, [sp, #60]	; 0x3c
  1073f8:	e58d3020 	str	r3, [sp, #32]
  1073fc:	e1a07008 	mov	r7, r8
  107400:	e5dd307b 	ldrb	r3, [sp, #123]	; 0x7b
  107404:	e58d405c 	str	r4, [sp, #92]	; 0x5c
  107408:	eafffef4 	b	106fe0 <_vfprintf_r+0x588>
  10740c:	e59d6018 	ldr	r6, [sp, #24]
  107410:	e58d301c 	str	r3, [sp, #28]
  107414:	e3160020 	tst	r6, #32
  107418:	1affff8e 	bne	107258 <_vfprintf_r+0x800>
  10741c:	e59d4018 	ldr	r4, [sp, #24]
  107420:	e3140010 	tst	r4, #16
  107424:	0a00044d 	beq	108560 <_vfprintf_r+0x1b08>
  107428:	e59d603c 	ldr	r6, [sp, #60]	; 0x3c
  10742c:	e2866004 	add	r6, r6, #4
  107430:	e5162004 	ldr	r2, [r6, #-4]
  107434:	e58d603c 	str	r6, [sp, #60]	; 0x3c
  107438:	e2927000 	adds	r7, r2, #0
  10743c:	e3a03001 	mov	r3, #1
  107440:	e1a0a002 	mov	sl, r2
  107444:	e3a0b000 	mov	fp, #0
  107448:	13a07001 	movne	r7, #1
  10744c:	eaffff4e 	b	10718c <_vfprintf_r+0x734>
  107450:	e59dc018 	ldr	ip, [sp, #24]
  107454:	e3006128 	movw	r6, #296	; 0x128
  107458:	e58d301c 	str	r3, [sp, #28]
  10745c:	e3406011 	movt	r6, #17
  107460:	e31c0020 	tst	ip, #32
  107464:	e58d6054 	str	r6, [sp, #84]	; 0x54
  107468:	1affffa8 	bne	107310 <_vfprintf_r+0x8b8>
  10746c:	e59d7018 	ldr	r7, [sp, #24]
  107470:	e3170010 	tst	r7, #16
  107474:	0a00044d 	beq	1085b0 <_vfprintf_r+0x1b58>
  107478:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
  10747c:	e3a0b000 	mov	fp, #0
  107480:	e28cc004 	add	ip, ip, #4
  107484:	e51c3004 	ldr	r3, [ip, #-4]
  107488:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
  10748c:	e1a0a003 	mov	sl, r3
  107490:	eaffffa4 	b	107328 <_vfprintf_r+0x8d0>
  107494:	e3550000 	cmp	r5, #0
  107498:	e58d301c 	str	r3, [sp, #28]
  10749c:	0a000175 	beq	107a78 <_vfprintf_r+0x1020>
  1074a0:	e3a06001 	mov	r6, #1
  1074a4:	e3a03000 	mov	r3, #0
  1074a8:	e58d6020 	str	r6, [sp, #32]
  1074ac:	e1a07006 	mov	r7, r6
  1074b0:	e5cd50a8 	strb	r5, [sp, #168]	; 0xa8
  1074b4:	e28d60a8 	add	r6, sp, #168	; 0xa8
  1074b8:	e5cd307b 	strb	r3, [sp, #123]	; 0x7b
  1074bc:	eaffffae 	b	10737c <_vfprintf_r+0x924>
  1074c0:	e5dd007b 	ldrb	r0, [sp, #123]	; 0x7b
  1074c4:	e3500000 	cmp	r0, #0
  1074c8:	1a0003ff 	bne	1084cc <_vfprintf_r+0x1a74>
  1074cc:	e5cd107b 	strb	r1, [sp, #123]	; 0x7b
  1074d0:	e5d35000 	ldrb	r5, [r3]
  1074d4:	eafffdc8 	b	106bfc <_vfprintf_r+0x1a4>
  1074d8:	e59dc018 	ldr	ip, [sp, #24]
  1074dc:	e38cc001 	orr	ip, ip, #1
  1074e0:	e58dc018 	str	ip, [sp, #24]
  1074e4:	e5d35000 	ldrb	r5, [r3]
  1074e8:	eafffdc3 	b	106bfc <_vfprintf_r+0x1a4>
  1074ec:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
  1074f0:	e59d603c 	ldr	r6, [sp, #60]	; 0x3c
  1074f4:	e5944000 	ldr	r4, [r4]
  1074f8:	e2860004 	add	r0, r6, #4
  1074fc:	e3540000 	cmp	r4, #0
  107500:	e58d4028 	str	r4, [sp, #40]	; 0x28
  107504:	bafffe1a 	blt	106d74 <_vfprintf_r+0x31c>
  107508:	e5d35000 	ldrb	r5, [r3]
  10750c:	e58d003c 	str	r0, [sp, #60]	; 0x3c
  107510:	eafffdb9 	b	106bfc <_vfprintf_r+0x1a4>
  107514:	e5d35000 	ldrb	r5, [r3]
  107518:	e1a00003 	mov	r0, r3
  10751c:	e355006c 	cmp	r5, #108	; 0x6c
  107520:	02833001 	addeq	r3, r3, #1
  107524:	059d4018 	ldreq	r4, [sp, #24]
  107528:	159d6018 	ldrne	r6, [sp, #24]
  10752c:	03844020 	orreq	r4, r4, #32
  107530:	05d05001 	ldrbeq	r5, [r0, #1]
  107534:	13866010 	orrne	r6, r6, #16
  107538:	058d4018 	streq	r4, [sp, #24]
  10753c:	158d6018 	strne	r6, [sp, #24]
  107540:	eafffdad 	b	106bfc <_vfprintf_r+0x1a4>
  107544:	e59d4018 	ldr	r4, [sp, #24]
  107548:	e58d301c 	str	r3, [sp, #28]
  10754c:	e3140020 	tst	r4, #32
  107550:	0a0003ee 	beq	108510 <_vfprintf_r+0x1ab8>
  107554:	e59d603c 	ldr	r6, [sp, #60]	; 0x3c
  107558:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
  10755c:	e2866004 	add	r6, r6, #4
  107560:	e5163004 	ldr	r3, [r6, #-4]
  107564:	e1a01fc2 	asr	r1, r2, #31
  107568:	e58d603c 	str	r6, [sp, #60]	; 0x3c
  10756c:	e5832000 	str	r2, [r3]
  107570:	e5831004 	str	r1, [r3, #4]
  107574:	eafffd75 	b	106b50 <_vfprintf_r+0xf8>
  107578:	e59d6018 	ldr	r6, [sp, #24]
  10757c:	e58d301c 	str	r3, [sp, #28]
  107580:	e2163020 	ands	r3, r6, #32
  107584:	1afffef6 	bne	107164 <_vfprintf_r+0x70c>
  107588:	e59d4018 	ldr	r4, [sp, #24]
  10758c:	e2142010 	ands	r2, r4, #16
  107590:	0a0003f9 	beq	10857c <_vfprintf_r+0x1b24>
  107594:	e59d603c 	ldr	r6, [sp, #60]	; 0x3c
  107598:	e3a0b000 	mov	fp, #0
  10759c:	e2866004 	add	r6, r6, #4
  1075a0:	e5162004 	ldr	r2, [r6, #-4]
  1075a4:	e58d603c 	str	r6, [sp, #60]	; 0x3c
  1075a8:	e2927000 	adds	r7, r2, #0
  1075ac:	e1a0a002 	mov	sl, r2
  1075b0:	13a07001 	movne	r7, #1
  1075b4:	eafffef4 	b	10718c <_vfprintf_r+0x734>
  1075b8:	e58d301c 	str	r3, [sp, #28]
  1075bc:	e3a0b000 	mov	fp, #0
  1075c0:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  1075c4:	e3a05078 	mov	r5, #120	; 0x78
  1075c8:	e59d4018 	ldr	r4, [sp, #24]
  1075cc:	e3006128 	movw	r6, #296	; 0x128
  1075d0:	e283c004 	add	ip, r3, #4
  1075d4:	e3406011 	movt	r6, #17
  1075d8:	e5937000 	ldr	r7, [r3]
  1075dc:	e3844002 	orr	r4, r4, #2
  1075e0:	e3a03030 	mov	r3, #48	; 0x30
  1075e4:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
  1075e8:	e5cd307c 	strb	r3, [sp, #124]	; 0x7c
  1075ec:	e3a03002 	mov	r3, #2
  1075f0:	e1a0a007 	mov	sl, r7
  1075f4:	e057700b 	subs	r7, r7, fp
  1075f8:	e58d4018 	str	r4, [sp, #24]
  1075fc:	e5cd507d 	strb	r5, [sp, #125]	; 0x7d
  107600:	13a07001 	movne	r7, #1
  107604:	e58d6054 	str	r6, [sp, #84]	; 0x54
  107608:	eafffedf 	b	10718c <_vfprintf_r+0x734>
  10760c:	e59d6018 	ldr	r6, [sp, #24]
  107610:	e58d301c 	str	r3, [sp, #28]
  107614:	e3160020 	tst	r6, #32
  107618:	1affff25 	bne	1072b4 <_vfprintf_r+0x85c>
  10761c:	e59d4018 	ldr	r4, [sp, #24]
  107620:	e3140010 	tst	r4, #16
  107624:	0a0003aa 	beq	1084d4 <_vfprintf_r+0x1a7c>
  107628:	e59d603c 	ldr	r6, [sp, #60]	; 0x3c
  10762c:	e2866004 	add	r6, r6, #4
  107630:	e5163004 	ldr	r3, [r6, #-4]
  107634:	e58d603c 	str	r6, [sp, #60]	; 0x3c
  107638:	e1a0bfc3 	asr	fp, r3, #31
  10763c:	e1a0a003 	mov	sl, r3
  107640:	e1a02003 	mov	r2, r3
  107644:	e1a0300b 	mov	r3, fp
  107648:	eaffff21 	b	1072d4 <_vfprintf_r+0x87c>
  10764c:	e59dc018 	ldr	ip, [sp, #24]
  107650:	e38cc040 	orr	ip, ip, #64	; 0x40
  107654:	e58dc018 	str	ip, [sp, #24]
  107658:	e5d35000 	ldrb	r5, [r3]
  10765c:	eafffd66 	b	106bfc <_vfprintf_r+0x1a4>
  107660:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  107664:	e5dd307b 	ldrb	r3, [sp, #123]	; 0x7b
  107668:	e3530000 	cmp	r3, #0
  10766c:	0a00000c 	beq	1076a4 <_vfprintf_r+0xc4c>
  107670:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  107674:	e28d307b 	add	r3, sp, #123	; 0x7b
  107678:	e28d4088 	add	r4, sp, #136	; 0x88
  10767c:	e5893000 	str	r3, [r9]
  107680:	e2811001 	add	r1, r1, #1
  107684:	e3a03001 	mov	r3, #1
  107688:	e3510007 	cmp	r1, #7
  10768c:	e5893004 	str	r3, [r9, #4]
  107690:	e0822003 	add	r2, r2, r3
  107694:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  107698:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  10769c:	d2899008 	addle	r9, r9, #8
  1076a0:	ca000199 	bgt	107d0c <_vfprintf_r+0x12b4>
  1076a4:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
  1076a8:	e35c0000 	cmp	ip, #0
  1076ac:	0a00000b 	beq	1076e0 <_vfprintf_r+0xc88>
  1076b0:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  1076b4:	e28d307c 	add	r3, sp, #124	; 0x7c
  1076b8:	e5893000 	str	r3, [r9]
  1076bc:	e3a03002 	mov	r3, #2
  1076c0:	e2811001 	add	r1, r1, #1
  1076c4:	e5893004 	str	r3, [r9, #4]
  1076c8:	e3510007 	cmp	r1, #7
  1076cc:	e0822003 	add	r2, r2, r3
  1076d0:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  1076d4:	d2899008 	addle	r9, r9, #8
  1076d8:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  1076dc:	ca000194 	bgt	107d34 <_vfprintf_r+0x12dc>
  1076e0:	e59d4044 	ldr	r4, [sp, #68]	; 0x44
  1076e4:	e3540080 	cmp	r4, #128	; 0x80
  1076e8:	0a000100 	beq	107af0 <_vfprintf_r+0x1098>
  1076ec:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
  1076f0:	e067a004 	rsb	sl, r7, r4
  1076f4:	e35a0000 	cmp	sl, #0
  1076f8:	da00003c 	ble	1077f0 <_vfprintf_r+0xd98>
  1076fc:	e35a0010 	cmp	sl, #16
  107700:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  107704:	d51f4914 	ldrle	r4, [pc, #-2324]	; 106df8 <_vfprintf_r+0x3a0>
  107708:	da000027 	ble	1077ac <_vfprintf_r+0xd54>
  10770c:	e51f491c 	ldr	r4, [pc, #-2332]	; 106df8 <_vfprintf_r+0x3a0>
  107710:	e28d809c 	add	r8, sp, #156	; 0x9c
  107714:	e58d5038 	str	r5, [sp, #56]	; 0x38
  107718:	e3a0b010 	mov	fp, #16
  10771c:	e58d6034 	str	r6, [sp, #52]	; 0x34
  107720:	e1a05008 	mov	r5, r8
  107724:	e1a0600a 	mov	r6, sl
  107728:	e59d8024 	ldr	r8, [sp, #36]	; 0x24
  10772c:	e1a0a007 	mov	sl, r7
  107730:	e1a07004 	mov	r7, r4
  107734:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
  107738:	ea000002 	b	107748 <_vfprintf_r+0xcf0>
  10773c:	e2466010 	sub	r6, r6, #16
  107740:	e3560010 	cmp	r6, #16
  107744:	da000013 	ble	107798 <_vfprintf_r+0xd40>
  107748:	e2811001 	add	r1, r1, #1
  10774c:	e2899008 	add	r9, r9, #8
  107750:	e3510007 	cmp	r1, #7
  107754:	e2822010 	add	r2, r2, #16
  107758:	e9090880 	stmdb	r9, {r7, fp}
  10775c:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  107760:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  107764:	dafffff4 	ble	10773c <_vfprintf_r+0xce4>
  107768:	e1a00008 	mov	r0, r8
  10776c:	e1a01004 	mov	r1, r4
  107770:	e1a02005 	mov	r2, r5
  107774:	e28d9f4e 	add	r9, sp, #312	; 0x138
  107778:	eb001637 	bl	10d05c <__sprint_r>
  10777c:	e3500000 	cmp	r0, #0
  107780:	1a0000d8 	bne	107ae8 <_vfprintf_r+0x1090>
  107784:	e2466010 	sub	r6, r6, #16
  107788:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  10778c:	e3560010 	cmp	r6, #16
  107790:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  107794:	caffffeb 	bgt	107748 <_vfprintf_r+0xcf0>
  107798:	e1a04007 	mov	r4, r7
  10779c:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
  1077a0:	e1a0700a 	mov	r7, sl
  1077a4:	e1a0a006 	mov	sl, r6
  1077a8:	e59d6034 	ldr	r6, [sp, #52]	; 0x34
  1077ac:	e2811001 	add	r1, r1, #1
  1077b0:	e5894000 	str	r4, [r9]
  1077b4:	e3510007 	cmp	r1, #7
  1077b8:	e589a004 	str	sl, [r9, #4]
  1077bc:	e082200a 	add	r2, r2, sl
  1077c0:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  1077c4:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  1077c8:	d2899008 	addle	r9, r9, #8
  1077cc:	da000007 	ble	1077f0 <_vfprintf_r+0xd98>
  1077d0:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  1077d4:	e28d209c 	add	r2, sp, #156	; 0x9c
  1077d8:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  1077dc:	eb00161e 	bl	10d05c <__sprint_r>
  1077e0:	e3500000 	cmp	r0, #0
  1077e4:	1a000146 	bne	107d04 <_vfprintf_r+0x12ac>
  1077e8:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  1077ec:	e28d9f4e 	add	r9, sp, #312	; 0x138
  1077f0:	e59d4018 	ldr	r4, [sp, #24]
  1077f4:	e3140c01 	tst	r4, #256	; 0x100
  1077f8:	1a000054 	bne	107950 <_vfprintf_r+0xef8>
  1077fc:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  107800:	e0822007 	add	r2, r2, r7
  107804:	e5896000 	str	r6, [r9]
  107808:	e2811001 	add	r1, r1, #1
  10780c:	e5897004 	str	r7, [r9, #4]
  107810:	e3510007 	cmp	r1, #7
  107814:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  107818:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  10781c:	ca00016a 	bgt	107dcc <_vfprintf_r+0x1374>
  107820:	e2899008 	add	r9, r9, #8
  107824:	e59dc018 	ldr	ip, [sp, #24]
  107828:	e31c0004 	tst	ip, #4
  10782c:	0a00003a 	beq	10791c <_vfprintf_r+0xec4>
  107830:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
  107834:	e59d6020 	ldr	r6, [sp, #32]
  107838:	e0665004 	rsb	r5, r6, r4
  10783c:	e3550000 	cmp	r5, #0
  107840:	da000035 	ble	10791c <_vfprintf_r+0xec4>
  107844:	e3550010 	cmp	r5, #16
  107848:	da000424 	ble	1088e0 <_vfprintf_r+0x1e88>
  10784c:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  107850:	e30fad10 	movw	sl, #64784	; 0xfd10
  107854:	e28d409c 	add	r4, sp, #156	; 0x9c
  107858:	e340a010 	movt	sl, #16
  10785c:	e3a06010 	mov	r6, #16
  107860:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
  107864:	e59d8030 	ldr	r8, [sp, #48]	; 0x30
  107868:	e1a03001 	mov	r3, r1
  10786c:	e1a0c002 	mov	ip, r2
  107870:	ea000002 	b	107880 <_vfprintf_r+0xe28>
  107874:	e2455010 	sub	r5, r5, #16
  107878:	e3550010 	cmp	r5, #16
  10787c:	da000014 	ble	1078d4 <_vfprintf_r+0xe7c>
  107880:	e2833001 	add	r3, r3, #1
  107884:	e2899008 	add	r9, r9, #8
  107888:	e3530007 	cmp	r3, #7
  10788c:	e509a008 	str	sl, [r9, #-8]
  107890:	e5096004 	str	r6, [r9, #-4]
  107894:	e28cc010 	add	ip, ip, #16
  107898:	e58d30a0 	str	r3, [sp, #160]	; 0xa0
  10789c:	e58dc0a4 	str	ip, [sp, #164]	; 0xa4
  1078a0:	dafffff3 	ble	107874 <_vfprintf_r+0xe1c>
  1078a4:	e1a00007 	mov	r0, r7
  1078a8:	e1a01008 	mov	r1, r8
  1078ac:	e1a02004 	mov	r2, r4
  1078b0:	e28d9f4e 	add	r9, sp, #312	; 0x138
  1078b4:	eb0015e8 	bl	10d05c <__sprint_r>
  1078b8:	e3500000 	cmp	r0, #0
  1078bc:	1a00023c 	bne	1081b4 <_vfprintf_r+0x175c>
  1078c0:	e2455010 	sub	r5, r5, #16
  1078c4:	e59dc0a4 	ldr	ip, [sp, #164]	; 0xa4
  1078c8:	e3550010 	cmp	r5, #16
  1078cc:	e59d30a0 	ldr	r3, [sp, #160]	; 0xa0
  1078d0:	caffffea 	bgt	107880 <_vfprintf_r+0xe28>
  1078d4:	e1a01003 	mov	r1, r3
  1078d8:	e1a0200c 	mov	r2, ip
  1078dc:	e2811001 	add	r1, r1, #1
  1078e0:	e589a000 	str	sl, [r9]
  1078e4:	e3510007 	cmp	r1, #7
  1078e8:	e5895004 	str	r5, [r9, #4]
  1078ec:	e0852002 	add	r2, r5, r2
  1078f0:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  1078f4:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  1078f8:	da000007 	ble	10791c <_vfprintf_r+0xec4>
  1078fc:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  107900:	e28d209c 	add	r2, sp, #156	; 0x9c
  107904:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  107908:	e28d80a8 	add	r8, sp, #168	; 0xa8
  10790c:	eb0015d2 	bl	10d05c <__sprint_r>
  107910:	e3500000 	cmp	r0, #0
  107914:	1a0000fa 	bne	107d04 <_vfprintf_r+0x12ac>
  107918:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  10791c:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
  107920:	e59d3020 	ldr	r3, [sp, #32]
  107924:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
  107928:	e1530004 	cmp	r3, r4
  10792c:	a08cc003 	addge	ip, ip, r3
  107930:	b08cc004 	addlt	ip, ip, r4
  107934:	e3520000 	cmp	r2, #0
  107938:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
  10793c:	1a0000e9 	bne	107ce8 <_vfprintf_r+0x1290>
  107940:	e3a03000 	mov	r3, #0
  107944:	e28d9f4e 	add	r9, sp, #312	; 0x138
  107948:	e58d30a0 	str	r3, [sp, #160]	; 0xa0
  10794c:	eafffc7f 	b	106b50 <_vfprintf_r+0xf8>
  107950:	e3550065 	cmp	r5, #101	; 0x65
  107954:	da0000a8 	ble	107bfc <_vfprintf_r+0x11a4>
  107958:	eeb58b40 	vcmp.f64	d8, #0.0
  10795c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  107960:	1a000121 	bne	107dec <_vfprintf_r+0x1394>
  107964:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  107968:	e3003144 	movw	r3, #324	; 0x144
  10796c:	e3403011 	movt	r3, #17
  107970:	e5893000 	str	r3, [r9]
  107974:	e2811001 	add	r1, r1, #1
  107978:	e3a03001 	mov	r3, #1
  10797c:	e3510007 	cmp	r1, #7
  107980:	e5893004 	str	r3, [r9, #4]
  107984:	e0822003 	add	r2, r2, r3
  107988:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  10798c:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  107990:	d2899008 	addle	r9, r9, #8
  107994:	ca00031d 	bgt	108610 <_vfprintf_r+0x1bb8>
  107998:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
  10799c:	e59d8040 	ldr	r8, [sp, #64]	; 0x40
  1079a0:	e1530008 	cmp	r3, r8
  1079a4:	ba000002 	blt	1079b4 <_vfprintf_r+0xf5c>
  1079a8:	e59dc018 	ldr	ip, [sp, #24]
  1079ac:	e31c0001 	tst	ip, #1
  1079b0:	0affff9b 	beq	107824 <_vfprintf_r+0xdcc>
  1079b4:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  1079b8:	e59d4060 	ldr	r4, [sp, #96]	; 0x60
  1079bc:	e2811001 	add	r1, r1, #1
  1079c0:	e59d6050 	ldr	r6, [sp, #80]	; 0x50
  1079c4:	e3510007 	cmp	r1, #7
  1079c8:	e0822004 	add	r2, r2, r4
  1079cc:	e5894004 	str	r4, [r9, #4]
  1079d0:	e5896000 	str	r6, [r9]
  1079d4:	d2899008 	addle	r9, r9, #8
  1079d8:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  1079dc:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  1079e0:	ca000391 	bgt	10882c <_vfprintf_r+0x1dd4>
  1079e4:	e59d8040 	ldr	r8, [sp, #64]	; 0x40
  1079e8:	e2486001 	sub	r6, r8, #1
  1079ec:	e3560000 	cmp	r6, #0
  1079f0:	daffff8b 	ble	107824 <_vfprintf_r+0xdcc>
  1079f4:	e3560010 	cmp	r6, #16
  1079f8:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  1079fc:	d51f4c0c 	ldrle	r4, [pc, #-3084]	; 106df8 <_vfprintf_r+0x3a0>
  107a00:	da00024e 	ble	108340 <_vfprintf_r+0x18e8>
  107a04:	e28d509c 	add	r5, sp, #156	; 0x9c
  107a08:	e51f4c18 	ldr	r4, [pc, #-3096]	; 106df8 <_vfprintf_r+0x3a0>
  107a0c:	e3a07010 	mov	r7, #16
  107a10:	e59d8024 	ldr	r8, [sp, #36]	; 0x24
  107a14:	e59da030 	ldr	sl, [sp, #48]	; 0x30
  107a18:	e1a03001 	mov	r3, r1
  107a1c:	e1a0c002 	mov	ip, r2
  107a20:	ea000002 	b	107a30 <_vfprintf_r+0xfd8>
  107a24:	e2466010 	sub	r6, r6, #16
  107a28:	e3560010 	cmp	r6, #16
  107a2c:	da000241 	ble	108338 <_vfprintf_r+0x18e0>
  107a30:	e2833001 	add	r3, r3, #1
  107a34:	e2899008 	add	r9, r9, #8
  107a38:	e3530007 	cmp	r3, #7
  107a3c:	e28cc010 	add	ip, ip, #16
  107a40:	e9090090 	stmdb	r9, {r4, r7}
  107a44:	e58d30a0 	str	r3, [sp, #160]	; 0xa0
  107a48:	e58dc0a4 	str	ip, [sp, #164]	; 0xa4
  107a4c:	dafffff4 	ble	107a24 <_vfprintf_r+0xfcc>
  107a50:	e1a00008 	mov	r0, r8
  107a54:	e1a0100a 	mov	r1, sl
  107a58:	e1a02005 	mov	r2, r5
  107a5c:	e28d9f4e 	add	r9, sp, #312	; 0x138
  107a60:	eb00157d 	bl	10d05c <__sprint_r>
  107a64:	e3500000 	cmp	r0, #0
  107a68:	1a00000b 	bne	107a9c <_vfprintf_r+0x1044>
  107a6c:	e59dc0a4 	ldr	ip, [sp, #164]	; 0xa4
  107a70:	e59d30a0 	ldr	r3, [sp, #160]	; 0xa0
  107a74:	eaffffea 	b	107a24 <_vfprintf_r+0xfcc>
  107a78:	e59d30a4 	ldr	r3, [sp, #164]	; 0xa4
  107a7c:	e59da030 	ldr	sl, [sp, #48]	; 0x30
  107a80:	e3530000 	cmp	r3, #0
  107a84:	0a000004 	beq	107a9c <_vfprintf_r+0x1044>
  107a88:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  107a8c:	e1a0100a 	mov	r1, sl
  107a90:	e28d209c 	add	r2, sp, #156	; 0x9c
  107a94:	e28d70a8 	add	r7, sp, #168	; 0xa8
  107a98:	eb00156f 	bl	10d05c <__sprint_r>
  107a9c:	e1da30bc 	ldrh	r3, [sl, #12]
  107aa0:	e2033040 	and	r3, r3, #64	; 0x40
  107aa4:	e6bf3073 	sxth	r3, r3
  107aa8:	e3530000 	cmp	r3, #0
  107aac:	1afffcbf 	bne	106db0 <_vfprintf_r+0x358>
  107ab0:	eafffcc0 	b	106db8 <_vfprintf_r+0x360>
  107ab4:	e3530000 	cmp	r3, #0
  107ab8:	1a000008 	bne	107ae0 <_vfprintf_r+0x1088>
  107abc:	e59d4018 	ldr	r4, [sp, #24]
  107ac0:	e3140001 	tst	r4, #1
  107ac4:	0a000004 	beq	107adc <_vfprintf_r+0x1084>
  107ac8:	e3a03030 	mov	r3, #48	; 0x30
  107acc:	e59d7074 	ldr	r7, [sp, #116]	; 0x74
  107ad0:	e5cd30cf 	strb	r3, [sp, #207]	; 0xcf
  107ad4:	e59d6058 	ldr	r6, [sp, #88]	; 0x58
  107ad8:	eafffdce 	b	107218 <_vfprintf_r+0x7c0>
  107adc:	e1a07003 	mov	r7, r3
  107ae0:	e59d6048 	ldr	r6, [sp, #72]	; 0x48
  107ae4:	eafffdcb 	b	107218 <_vfprintf_r+0x7c0>
  107ae8:	e1a0a004 	mov	sl, r4
  107aec:	eaffffea 	b	107a9c <_vfprintf_r+0x1044>
  107af0:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
  107af4:	e59dc020 	ldr	ip, [sp, #32]
  107af8:	e06ca008 	rsb	sl, ip, r8
  107afc:	e35a0000 	cmp	sl, #0
  107b00:	dafffef9 	ble	1076ec <_vfprintf_r+0xc94>
  107b04:	e35a0010 	cmp	sl, #16
  107b08:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  107b0c:	d51f4d1c 	ldrle	r4, [pc, #-3356]	; 106df8 <_vfprintf_r+0x3a0>
  107b10:	da000027 	ble	107bb4 <_vfprintf_r+0x115c>
  107b14:	e51f4d24 	ldr	r4, [pc, #-3364]	; 106df8 <_vfprintf_r+0x3a0>
  107b18:	e28d809c 	add	r8, sp, #156	; 0x9c
  107b1c:	e58d5034 	str	r5, [sp, #52]	; 0x34
  107b20:	e3a0b010 	mov	fp, #16
  107b24:	e58d6044 	str	r6, [sp, #68]	; 0x44
  107b28:	e1a05008 	mov	r5, r8
  107b2c:	e1a0600a 	mov	r6, sl
  107b30:	e59d8024 	ldr	r8, [sp, #36]	; 0x24
  107b34:	e1a0a007 	mov	sl, r7
  107b38:	e1a07004 	mov	r7, r4
  107b3c:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
  107b40:	ea000002 	b	107b50 <_vfprintf_r+0x10f8>
  107b44:	e2466010 	sub	r6, r6, #16
  107b48:	e3560010 	cmp	r6, #16
  107b4c:	da000013 	ble	107ba0 <_vfprintf_r+0x1148>
  107b50:	e2811001 	add	r1, r1, #1
  107b54:	e2899008 	add	r9, r9, #8
  107b58:	e3510007 	cmp	r1, #7
  107b5c:	e2822010 	add	r2, r2, #16
  107b60:	e9090880 	stmdb	r9, {r7, fp}
  107b64:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  107b68:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  107b6c:	dafffff4 	ble	107b44 <_vfprintf_r+0x10ec>
  107b70:	e1a00008 	mov	r0, r8
  107b74:	e1a01004 	mov	r1, r4
  107b78:	e1a02005 	mov	r2, r5
  107b7c:	e28d9f4e 	add	r9, sp, #312	; 0x138
  107b80:	eb001535 	bl	10d05c <__sprint_r>
  107b84:	e3500000 	cmp	r0, #0
  107b88:	1affffd6 	bne	107ae8 <_vfprintf_r+0x1090>
  107b8c:	e2466010 	sub	r6, r6, #16
  107b90:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  107b94:	e3560010 	cmp	r6, #16
  107b98:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  107b9c:	caffffeb 	bgt	107b50 <_vfprintf_r+0x10f8>
  107ba0:	e1a04007 	mov	r4, r7
  107ba4:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
  107ba8:	e1a0700a 	mov	r7, sl
  107bac:	e1a0a006 	mov	sl, r6
  107bb0:	e59d6044 	ldr	r6, [sp, #68]	; 0x44
  107bb4:	e2811001 	add	r1, r1, #1
  107bb8:	e5894000 	str	r4, [r9]
  107bbc:	e3510007 	cmp	r1, #7
  107bc0:	e589a004 	str	sl, [r9, #4]
  107bc4:	e082200a 	add	r2, r2, sl
  107bc8:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  107bcc:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  107bd0:	d2899008 	addle	r9, r9, #8
  107bd4:	dafffec4 	ble	1076ec <_vfprintf_r+0xc94>
  107bd8:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  107bdc:	e28d209c 	add	r2, sp, #156	; 0x9c
  107be0:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  107be4:	eb00151c 	bl	10d05c <__sprint_r>
  107be8:	e3500000 	cmp	r0, #0
  107bec:	1a000044 	bne	107d04 <_vfprintf_r+0x12ac>
  107bf0:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  107bf4:	e28d9f4e 	add	r9, sp, #312	; 0x138
  107bf8:	eafffebb 	b	1076ec <_vfprintf_r+0xc94>
  107bfc:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
  107c00:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  107c04:	e35c0001 	cmp	ip, #1
  107c08:	da00016b 	ble	1081bc <_vfprintf_r+0x1764>
  107c0c:	e2811001 	add	r1, r1, #1
  107c10:	e5896000 	str	r6, [r9]
  107c14:	e3510007 	cmp	r1, #7
  107c18:	e2822001 	add	r2, r2, #1
  107c1c:	e3a03001 	mov	r3, #1
  107c20:	e5893004 	str	r3, [r9, #4]
  107c24:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  107c28:	d2899008 	addle	r9, r9, #8
  107c2c:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  107c30:	ca000175 	bgt	10820c <_vfprintf_r+0x17b4>
  107c34:	e2811001 	add	r1, r1, #1
  107c38:	e59dc060 	ldr	ip, [sp, #96]	; 0x60
  107c3c:	e59d8050 	ldr	r8, [sp, #80]	; 0x50
  107c40:	e3510007 	cmp	r1, #7
  107c44:	e082200c 	add	r2, r2, ip
  107c48:	e8891100 	stm	r9, {r8, ip}
  107c4c:	d2899008 	addle	r9, r9, #8
  107c50:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  107c54:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  107c58:	ca000176 	bgt	108238 <_vfprintf_r+0x17e0>
  107c5c:	eeb58b40 	vcmp.f64	d8, #0.0
  107c60:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  107c64:	0a0000b8 	beq	107f4c <_vfprintf_r+0x14f4>
  107c68:	e2811001 	add	r1, r1, #1
  107c6c:	e59d4040 	ldr	r4, [sp, #64]	; 0x40
  107c70:	e3510007 	cmp	r1, #7
  107c74:	e2866001 	add	r6, r6, #1
  107c78:	e2443001 	sub	r3, r4, #1
  107c7c:	e5896000 	str	r6, [r9]
  107c80:	e5893004 	str	r3, [r9, #4]
  107c84:	e0822003 	add	r2, r2, r3
  107c88:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  107c8c:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  107c90:	ca0002a5 	bgt	10872c <_vfprintf_r+0x1cd4>
  107c94:	e2899008 	add	r9, r9, #8
  107c98:	e2811001 	add	r1, r1, #1
  107c9c:	e59d6068 	ldr	r6, [sp, #104]	; 0x68
  107ca0:	e3510007 	cmp	r1, #7
  107ca4:	e28d308c 	add	r3, sp, #140	; 0x8c
  107ca8:	e0822006 	add	r2, r2, r6
  107cac:	e8890048 	stm	r9, {r3, r6}
  107cb0:	e28d7098 	add	r7, sp, #152	; 0x98
  107cb4:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  107cb8:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  107cbc:	dafffed7 	ble	107820 <_vfprintf_r+0xdc8>
  107cc0:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  107cc4:	e28d209c 	add	r2, sp, #156	; 0x9c
  107cc8:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  107ccc:	e28d80a8 	add	r8, sp, #168	; 0xa8
  107cd0:	eb0014e1 	bl	10d05c <__sprint_r>
  107cd4:	e3500000 	cmp	r0, #0
  107cd8:	1a000009 	bne	107d04 <_vfprintf_r+0x12ac>
  107cdc:	e28d9f4e 	add	r9, sp, #312	; 0x138
  107ce0:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  107ce4:	eafffece 	b	107824 <_vfprintf_r+0xdcc>
  107ce8:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  107cec:	e28d209c 	add	r2, sp, #156	; 0x9c
  107cf0:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  107cf4:	e28d60a8 	add	r6, sp, #168	; 0xa8
  107cf8:	eb0014d7 	bl	10d05c <__sprint_r>
  107cfc:	e3500000 	cmp	r0, #0
  107d00:	0affff0e 	beq	107940 <_vfprintf_r+0xee8>
  107d04:	e59da030 	ldr	sl, [sp, #48]	; 0x30
  107d08:	eaffff63 	b	107a9c <_vfprintf_r+0x1044>
  107d0c:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  107d10:	e28d209c 	add	r2, sp, #156	; 0x9c
  107d14:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  107d18:	e28d80a8 	add	r8, sp, #168	; 0xa8
  107d1c:	eb0014ce 	bl	10d05c <__sprint_r>
  107d20:	e3500000 	cmp	r0, #0
  107d24:	1afffff6 	bne	107d04 <_vfprintf_r+0x12ac>
  107d28:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  107d2c:	e28d9f4e 	add	r9, sp, #312	; 0x138
  107d30:	eafffe5b 	b	1076a4 <_vfprintf_r+0xc4c>
  107d34:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  107d38:	e28d209c 	add	r2, sp, #156	; 0x9c
  107d3c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  107d40:	eb0014c5 	bl	10d05c <__sprint_r>
  107d44:	e3500000 	cmp	r0, #0
  107d48:	1affffed 	bne	107d04 <_vfprintf_r+0x12ac>
  107d4c:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  107d50:	e28d9f4e 	add	r9, sp, #312	; 0x138
  107d54:	eafffe61 	b	1076e0 <_vfprintf_r+0xc88>
  107d58:	e1a01003 	mov	r1, r3
  107d5c:	e1a0200c 	mov	r2, ip
  107d60:	e2811001 	add	r1, r1, #1
  107d64:	e5894000 	str	r4, [r9]
  107d68:	e3510007 	cmp	r1, #7
  107d6c:	e5897004 	str	r7, [r9, #4]
  107d70:	e0822007 	add	r2, r2, r7
  107d74:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  107d78:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  107d7c:	d2899008 	addle	r9, r9, #8
  107d80:	da000008 	ble	107da8 <_vfprintf_r+0x1350>
  107d84:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  107d88:	e28d209c 	add	r2, sp, #156	; 0x9c
  107d8c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  107d90:	eb0014b1 	bl	10d05c <__sprint_r>
  107d94:	e3500000 	cmp	r0, #0
  107d98:	1affffd9 	bne	107d04 <_vfprintf_r+0x12ac>
  107d9c:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  107da0:	e28d9f4e 	add	r9, sp, #312	; 0x138
  107da4:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  107da8:	e2811001 	add	r1, r1, #1
  107dac:	e59d4040 	ldr	r4, [sp, #64]	; 0x40
  107db0:	e3510007 	cmp	r1, #7
  107db4:	e5896000 	str	r6, [r9]
  107db8:	e0822004 	add	r2, r2, r4
  107dbc:	e5894004 	str	r4, [r9, #4]
  107dc0:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  107dc4:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  107dc8:	dafffe94 	ble	107820 <_vfprintf_r+0xdc8>
  107dcc:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  107dd0:	e28d209c 	add	r2, sp, #156	; 0x9c
  107dd4:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  107dd8:	e28d60a8 	add	r6, sp, #168	; 0xa8
  107ddc:	eb00149e 	bl	10d05c <__sprint_r>
  107de0:	e3500000 	cmp	r0, #0
  107de4:	0affffbc 	beq	107cdc <_vfprintf_r+0x1284>
  107de8:	eaffffc5 	b	107d04 <_vfprintf_r+0x12ac>
  107dec:	e59d7080 	ldr	r7, [sp, #128]	; 0x80
  107df0:	e3570000 	cmp	r7, #0
  107df4:	da00020f 	ble	108638 <_vfprintf_r+0x1be0>
  107df8:	e59d4040 	ldr	r4, [sp, #64]	; 0x40
  107dfc:	e59d705c 	ldr	r7, [sp, #92]	; 0x5c
  107e00:	e59d8040 	ldr	r8, [sp, #64]	; 0x40
  107e04:	e1540007 	cmp	r4, r7
  107e08:	a1a04007 	movge	r4, r7
  107e0c:	e3540000 	cmp	r4, #0
  107e10:	e086a008 	add	sl, r6, r8
  107e14:	da000009 	ble	107e40 <_vfprintf_r+0x13e8>
  107e18:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  107e1c:	e0822004 	add	r2, r2, r4
  107e20:	e5896000 	str	r6, [r9]
  107e24:	e2811001 	add	r1, r1, #1
  107e28:	e5894004 	str	r4, [r9, #4]
  107e2c:	e3510007 	cmp	r1, #7
  107e30:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  107e34:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  107e38:	d2899008 	addle	r9, r9, #8
  107e3c:	ca000292 	bgt	10888c <_vfprintf_r+0x1e34>
  107e40:	e59d305c 	ldr	r3, [sp, #92]	; 0x5c
  107e44:	e1c44fc4 	bic	r4, r4, r4, asr #31
  107e48:	e0647003 	rsb	r7, r4, r3
  107e4c:	e3570000 	cmp	r7, #0
  107e50:	da000080 	ble	108058 <_vfprintf_r+0x1600>
  107e54:	e3570010 	cmp	r7, #16
  107e58:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  107e5c:	d59f4da4 	ldrle	r4, [pc, #3492]	; 108c08 <_vfprintf_r+0x21b0>
  107e60:	da00006a 	ble	108010 <_vfprintf_r+0x15b8>
  107e64:	e59f4d9c 	ldr	r4, [pc, #3484]	; 108c08 <_vfprintf_r+0x21b0>
  107e68:	e28d509c 	add	r5, sp, #156	; 0x9c
  107e6c:	e58d6038 	str	r6, [sp, #56]	; 0x38
  107e70:	e3a08010 	mov	r8, #16
  107e74:	e59db024 	ldr	fp, [sp, #36]	; 0x24
  107e78:	e1a03001 	mov	r3, r1
  107e7c:	e1a06004 	mov	r6, r4
  107e80:	e1a04005 	mov	r4, r5
  107e84:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
  107e88:	ea000002 	b	107e98 <_vfprintf_r+0x1440>
  107e8c:	e2477010 	sub	r7, r7, #16
  107e90:	e3570010 	cmp	r7, #16
  107e94:	da00005a 	ble	108004 <_vfprintf_r+0x15ac>
  107e98:	e2833001 	add	r3, r3, #1
  107e9c:	e2899008 	add	r9, r9, #8
  107ea0:	e3530007 	cmp	r3, #7
  107ea4:	e2822010 	add	r2, r2, #16
  107ea8:	e9090140 	stmdb	r9, {r6, r8}
  107eac:	e58d30a0 	str	r3, [sp, #160]	; 0xa0
  107eb0:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  107eb4:	dafffff4 	ble	107e8c <_vfprintf_r+0x1434>
  107eb8:	e1a0000b 	mov	r0, fp
  107ebc:	e1a01005 	mov	r1, r5
  107ec0:	e1a02004 	mov	r2, r4
  107ec4:	e28d9f4e 	add	r9, sp, #312	; 0x138
  107ec8:	eb001463 	bl	10d05c <__sprint_r>
  107ecc:	e3500000 	cmp	r0, #0
  107ed0:	1a000286 	bne	1088f0 <_vfprintf_r+0x1e98>
  107ed4:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  107ed8:	e59d30a0 	ldr	r3, [sp, #160]	; 0xa0
  107edc:	eaffffea 	b	107e8c <_vfprintf_r+0x1434>
  107ee0:	e59d1058 	ldr	r1, [sp, #88]	; 0x58
  107ee4:	e59dc054 	ldr	ip, [sp, #84]	; 0x54
  107ee8:	e3a0600f 	mov	r6, #15
  107eec:	e00a2006 	and	r2, sl, r6
  107ef0:	e1a0322a 	lsr	r3, sl, #4
  107ef4:	e08c2002 	add	r2, ip, r2
  107ef8:	e1833e0b 	orr	r3, r3, fp, lsl #28
  107efc:	e1a0022b 	lsr	r0, fp, #4
  107f00:	e5d22000 	ldrb	r2, [r2]
  107f04:	e1a06001 	mov	r6, r1
  107f08:	e1a0a003 	mov	sl, r3
  107f0c:	e1a0b000 	mov	fp, r0
  107f10:	e19a700b 	orrs	r7, sl, fp
  107f14:	e2411001 	sub	r1, r1, #1
  107f18:	e5c62000 	strb	r2, [r6]
  107f1c:	1afffff1 	bne	107ee8 <_vfprintf_r+0x1490>
  107f20:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
  107f24:	e066700c 	rsb	r7, r6, ip
  107f28:	eafffcba 	b	107218 <_vfprintf_r+0x7c0>
  107f2c:	e35b0000 	cmp	fp, #0
  107f30:	035a0009 	cmpeq	sl, #9
  107f34:	8a0000da 	bhi	1082a4 <_vfprintf_r+0x184c>
  107f38:	e28aa030 	add	sl, sl, #48	; 0x30
  107f3c:	e59d7074 	ldr	r7, [sp, #116]	; 0x74
  107f40:	e5cda0cf 	strb	sl, [sp, #207]	; 0xcf
  107f44:	e59d6058 	ldr	r6, [sp, #88]	; 0x58
  107f48:	eafffcb2 	b	107218 <_vfprintf_r+0x7c0>
  107f4c:	e59d8040 	ldr	r8, [sp, #64]	; 0x40
  107f50:	e2487001 	sub	r7, r8, #1
  107f54:	e3570000 	cmp	r7, #0
  107f58:	daffff4e 	ble	107c98 <_vfprintf_r+0x1240>
  107f5c:	e3570010 	cmp	r7, #16
  107f60:	e59f4ca0 	ldr	r4, [pc, #3232]	; 108c08 <_vfprintf_r+0x21b0>
  107f64:	da0000bf 	ble	108268 <_vfprintf_r+0x1810>
  107f68:	e28d609c 	add	r6, sp, #156	; 0x9c
  107f6c:	e3a08010 	mov	r8, #16
  107f70:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
  107f74:	e1a03001 	mov	r3, r1
  107f78:	e59da030 	ldr	sl, [sp, #48]	; 0x30
  107f7c:	e1a0c002 	mov	ip, r2
  107f80:	ea000002 	b	107f90 <_vfprintf_r+0x1538>
  107f84:	e2477010 	sub	r7, r7, #16
  107f88:	e3570010 	cmp	r7, #16
  107f8c:	da0000b3 	ble	108260 <_vfprintf_r+0x1808>
  107f90:	e2833001 	add	r3, r3, #1
  107f94:	e2899008 	add	r9, r9, #8
  107f98:	e3530007 	cmp	r3, #7
  107f9c:	e28cc010 	add	ip, ip, #16
  107fa0:	e9090110 	stmdb	r9, {r4, r8}
  107fa4:	e58d30a0 	str	r3, [sp, #160]	; 0xa0
  107fa8:	e58dc0a4 	str	ip, [sp, #164]	; 0xa4
  107fac:	dafffff4 	ble	107f84 <_vfprintf_r+0x152c>
  107fb0:	e1a00005 	mov	r0, r5
  107fb4:	e1a0100a 	mov	r1, sl
  107fb8:	e1a02006 	mov	r2, r6
  107fbc:	e28d9f4e 	add	r9, sp, #312	; 0x138
  107fc0:	eb001425 	bl	10d05c <__sprint_r>
  107fc4:	e3500000 	cmp	r0, #0
  107fc8:	1afffeb3 	bne	107a9c <_vfprintf_r+0x1044>
  107fcc:	e59dc0a4 	ldr	ip, [sp, #164]	; 0xa4
  107fd0:	e59d30a0 	ldr	r3, [sp, #160]	; 0xa0
  107fd4:	eaffffea 	b	107f84 <_vfprintf_r+0x152c>
  107fd8:	e19a100b 	orrs	r1, sl, fp
  107fdc:	15cd507d 	strbne	r5, [sp, #125]	; 0x7d
  107fe0:	159d4018 	ldrne	r4, [sp, #24]
  107fe4:	13a03030 	movne	r3, #48	; 0x30
  107fe8:	13a07001 	movne	r7, #1
  107fec:	15cd307c 	strbne	r3, [sp, #124]	; 0x7c
  107ff0:	13844002 	orrne	r4, r4, #2
  107ff4:	03a07000 	moveq	r7, #0
  107ff8:	158d4018 	strne	r4, [sp, #24]
  107ffc:	e3a03002 	mov	r3, #2
  108000:	eafffc61 	b	10718c <_vfprintf_r+0x734>
  108004:	e1a04006 	mov	r4, r6
  108008:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
  10800c:	e1a01003 	mov	r1, r3
  108010:	e2811001 	add	r1, r1, #1
  108014:	e5894000 	str	r4, [r9]
  108018:	e3510007 	cmp	r1, #7
  10801c:	e5897004 	str	r7, [r9, #4]
  108020:	e0822007 	add	r2, r2, r7
  108024:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  108028:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  10802c:	d2899008 	addle	r9, r9, #8
  108030:	da000008 	ble	108058 <_vfprintf_r+0x1600>
  108034:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  108038:	e28d209c 	add	r2, sp, #156	; 0x9c
  10803c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  108040:	e28d70a8 	add	r7, sp, #168	; 0xa8
  108044:	eb001404 	bl	10d05c <__sprint_r>
  108048:	e3500000 	cmp	r0, #0
  10804c:	1affff2c 	bne	107d04 <_vfprintf_r+0x12ac>
  108050:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  108054:	e28d9f4e 	add	r9, sp, #312	; 0x138
  108058:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
  10805c:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
  108060:	e59d805c 	ldr	r8, [sp, #92]	; 0x5c
  108064:	e153000c 	cmp	r3, ip
  108068:	e0865008 	add	r5, r6, r8
  10806c:	ba000039 	blt	108158 <_vfprintf_r+0x1700>
  108070:	e59d4018 	ldr	r4, [sp, #24]
  108074:	e3140001 	tst	r4, #1
  108078:	1a000036 	bne	108158 <_vfprintf_r+0x1700>
  10807c:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
  108080:	e065400a 	rsb	r4, r5, sl
  108084:	e063300c 	rsb	r3, r3, ip
  108088:	e1530004 	cmp	r3, r4
  10808c:	b1a04003 	movlt	r4, r3
  108090:	a1a04004 	movge	r4, r4
  108094:	e3540000 	cmp	r4, #0
  108098:	da000009 	ble	1080c4 <_vfprintf_r+0x166c>
  10809c:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  1080a0:	e0822004 	add	r2, r2, r4
  1080a4:	e5895000 	str	r5, [r9]
  1080a8:	e2811001 	add	r1, r1, #1
  1080ac:	e5894004 	str	r4, [r9, #4]
  1080b0:	e3510007 	cmp	r1, #7
  1080b4:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  1080b8:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  1080bc:	d2899008 	addle	r9, r9, #8
  1080c0:	ca0001fa 	bgt	1088b0 <_vfprintf_r+0x1e58>
  1080c4:	e1c44fc4 	bic	r4, r4, r4, asr #31
  1080c8:	e0646003 	rsb	r6, r4, r3
  1080cc:	e3560000 	cmp	r6, #0
  1080d0:	dafffdd3 	ble	107824 <_vfprintf_r+0xdcc>
  1080d4:	e3560010 	cmp	r6, #16
  1080d8:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  1080dc:	d59f4b24 	ldrle	r4, [pc, #2852]	; 108c08 <_vfprintf_r+0x21b0>
  1080e0:	da000141 	ble	1085ec <_vfprintf_r+0x1b94>
  1080e4:	e28d509c 	add	r5, sp, #156	; 0x9c
  1080e8:	e59f4b18 	ldr	r4, [pc, #2840]	; 108c08 <_vfprintf_r+0x21b0>
  1080ec:	e3a07010 	mov	r7, #16
  1080f0:	e59d8024 	ldr	r8, [sp, #36]	; 0x24
  1080f4:	e59da030 	ldr	sl, [sp, #48]	; 0x30
  1080f8:	e1a03001 	mov	r3, r1
  1080fc:	e1a0c002 	mov	ip, r2
  108100:	ea000002 	b	108110 <_vfprintf_r+0x16b8>
  108104:	e2466010 	sub	r6, r6, #16
  108108:	e3560010 	cmp	r6, #16
  10810c:	da000134 	ble	1085e4 <_vfprintf_r+0x1b8c>
  108110:	e2833001 	add	r3, r3, #1
  108114:	e2899008 	add	r9, r9, #8
  108118:	e3530007 	cmp	r3, #7
  10811c:	e28cc010 	add	ip, ip, #16
  108120:	e9090090 	stmdb	r9, {r4, r7}
  108124:	e58d30a0 	str	r3, [sp, #160]	; 0xa0
  108128:	e58dc0a4 	str	ip, [sp, #164]	; 0xa4
  10812c:	dafffff4 	ble	108104 <_vfprintf_r+0x16ac>
  108130:	e1a00008 	mov	r0, r8
  108134:	e1a0100a 	mov	r1, sl
  108138:	e1a02005 	mov	r2, r5
  10813c:	e28d9f4e 	add	r9, sp, #312	; 0x138
  108140:	eb0013c5 	bl	10d05c <__sprint_r>
  108144:	e3500000 	cmp	r0, #0
  108148:	1afffe53 	bne	107a9c <_vfprintf_r+0x1044>
  10814c:	e59dc0a4 	ldr	ip, [sp, #164]	; 0xa4
  108150:	e59d30a0 	ldr	r3, [sp, #160]	; 0xa0
  108154:	eaffffea 	b	108104 <_vfprintf_r+0x16ac>
  108158:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  10815c:	e59d6060 	ldr	r6, [sp, #96]	; 0x60
  108160:	e2811001 	add	r1, r1, #1
  108164:	e59d7050 	ldr	r7, [sp, #80]	; 0x50
  108168:	e3510007 	cmp	r1, #7
  10816c:	e0822006 	add	r2, r2, r6
  108170:	e5896004 	str	r6, [r9, #4]
  108174:	e5897000 	str	r7, [r9]
  108178:	d2899008 	addle	r9, r9, #8
  10817c:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  108180:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  108184:	daffffbc 	ble	10807c <_vfprintf_r+0x1624>
  108188:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  10818c:	e28d209c 	add	r2, sp, #156	; 0x9c
  108190:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  108194:	e28d80a8 	add	r8, sp, #168	; 0xa8
  108198:	eb0013af 	bl	10d05c <__sprint_r>
  10819c:	e3500000 	cmp	r0, #0
  1081a0:	1afffed7 	bne	107d04 <_vfprintf_r+0x12ac>
  1081a4:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
  1081a8:	e28d9f4e 	add	r9, sp, #312	; 0x138
  1081ac:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  1081b0:	eaffffb1 	b	10807c <_vfprintf_r+0x1624>
  1081b4:	e1a0a008 	mov	sl, r8
  1081b8:	eafffe37 	b	107a9c <_vfprintf_r+0x1044>
  1081bc:	e59d4018 	ldr	r4, [sp, #24]
  1081c0:	e3140001 	tst	r4, #1
  1081c4:	1afffe90 	bne	107c0c <_vfprintf_r+0x11b4>
  1081c8:	e2811001 	add	r1, r1, #1
  1081cc:	e5896000 	str	r6, [r9]
  1081d0:	e3510007 	cmp	r1, #7
  1081d4:	e2822001 	add	r2, r2, #1
  1081d8:	e3a03001 	mov	r3, #1
  1081dc:	e5893004 	str	r3, [r9, #4]
  1081e0:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  1081e4:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  1081e8:	dafffea9 	ble	107c94 <_vfprintf_r+0x123c>
  1081ec:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  1081f0:	e28d209c 	add	r2, sp, #156	; 0x9c
  1081f4:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  1081f8:	e28d40a8 	add	r4, sp, #168	; 0xa8
  1081fc:	eb001396 	bl	10d05c <__sprint_r>
  108200:	e3500000 	cmp	r0, #0
  108204:	0a00014f 	beq	108748 <_vfprintf_r+0x1cf0>
  108208:	eafffebd 	b	107d04 <_vfprintf_r+0x12ac>
  10820c:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  108210:	e28d209c 	add	r2, sp, #156	; 0x9c
  108214:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  108218:	e28d70a8 	add	r7, sp, #168	; 0xa8
  10821c:	eb00138e 	bl	10d05c <__sprint_r>
  108220:	e3500000 	cmp	r0, #0
  108224:	1afffeb6 	bne	107d04 <_vfprintf_r+0x12ac>
  108228:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  10822c:	e28d9f4e 	add	r9, sp, #312	; 0x138
  108230:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  108234:	eafffe7e 	b	107c34 <_vfprintf_r+0x11dc>
  108238:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  10823c:	e28d209c 	add	r2, sp, #156	; 0x9c
  108240:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  108244:	eb001384 	bl	10d05c <__sprint_r>
  108248:	e3500000 	cmp	r0, #0
  10824c:	1afffeac 	bne	107d04 <_vfprintf_r+0x12ac>
  108250:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  108254:	e28d9f4e 	add	r9, sp, #312	; 0x138
  108258:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  10825c:	eafffe7e 	b	107c5c <_vfprintf_r+0x1204>
  108260:	e1a01003 	mov	r1, r3
  108264:	e1a0200c 	mov	r2, ip
  108268:	e2811001 	add	r1, r1, #1
  10826c:	e5894000 	str	r4, [r9]
  108270:	e3510007 	cmp	r1, #7
  108274:	e5897004 	str	r7, [r9, #4]
  108278:	e0822007 	add	r2, r2, r7
  10827c:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  108280:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  108284:	dafffe82 	ble	107c94 <_vfprintf_r+0x123c>
  108288:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  10828c:	e28d209c 	add	r2, sp, #156	; 0x9c
  108290:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  108294:	eb001370 	bl	10d05c <__sprint_r>
  108298:	e3500000 	cmp	r0, #0
  10829c:	0a000129 	beq	108748 <_vfprintf_r+0x1cf0>
  1082a0:	eafffe97 	b	107d04 <_vfprintf_r+0x12ac>
  1082a4:	e59d4058 	ldr	r4, [sp, #88]	; 0x58
  1082a8:	e1a0000a 	mov	r0, sl
  1082ac:	e1a0100b 	mov	r1, fp
  1082b0:	e3a0200a 	mov	r2, #10
  1082b4:	e3a03000 	mov	r3, #0
  1082b8:	ebfff6e7 	bl	105e5c <__aeabi_uldivmod>
  1082bc:	e1a06004 	mov	r6, r4
  1082c0:	e1a0000a 	mov	r0, sl
  1082c4:	e1a0100b 	mov	r1, fp
  1082c8:	e3a03000 	mov	r3, #0
  1082cc:	e2444001 	sub	r4, r4, #1
  1082d0:	e282c030 	add	ip, r2, #48	; 0x30
  1082d4:	e3a0200a 	mov	r2, #10
  1082d8:	e5c6c000 	strb	ip, [r6]
  1082dc:	ebfff6de 	bl	105e5c <__aeabi_uldivmod>
  1082e0:	e1a0a000 	mov	sl, r0
  1082e4:	e1a0b001 	mov	fp, r1
  1082e8:	e19a700b 	orrs	r7, sl, fp
  1082ec:	1affffed 	bne	1082a8 <_vfprintf_r+0x1850>
  1082f0:	eaffff0a 	b	107f20 <_vfprintf_r+0x14c8>
  1082f4:	e3520030 	cmp	r2, #48	; 0x30
  1082f8:	0affff08 	beq	107f20 <_vfprintf_r+0x14c8>
  1082fc:	e59d4048 	ldr	r4, [sp, #72]	; 0x48
  108300:	e3a02030 	mov	r2, #48	; 0x30
  108304:	e1a06000 	mov	r6, r0
  108308:	e5432001 	strb	r2, [r3, #-1]
  10830c:	e0607004 	rsb	r7, r0, r4
  108310:	eafffbc0 	b	107218 <_vfprintf_r+0x7c0>
  108314:	e27aa000 	rsbs	sl, sl, #0
  108318:	e2ebb000 	rsc	fp, fp, #0
  10831c:	e3a0302d 	mov	r3, #45	; 0x2d
  108320:	e19ac00b 	orrs	ip, sl, fp
  108324:	e5cd307b 	strb	r3, [sp, #123]	; 0x7b
  108328:	e3a03001 	mov	r3, #1
  10832c:	03a07000 	moveq	r7, #0
  108330:	13a07001 	movne	r7, #1
  108334:	eafffb96 	b	107194 <_vfprintf_r+0x73c>
  108338:	e1a01003 	mov	r1, r3
  10833c:	e1a0200c 	mov	r2, ip
  108340:	e2811001 	add	r1, r1, #1
  108344:	e5894000 	str	r4, [r9]
  108348:	e3510007 	cmp	r1, #7
  10834c:	e5896004 	str	r6, [r9, #4]
  108350:	e0822006 	add	r2, r2, r6
  108354:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  108358:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  10835c:	dafffd2f 	ble	107820 <_vfprintf_r+0xdc8>
  108360:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  108364:	e28d209c 	add	r2, sp, #156	; 0x9c
  108368:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  10836c:	eb00133a 	bl	10d05c <__sprint_r>
  108370:	e3500000 	cmp	r0, #0
  108374:	0afffe58 	beq	107cdc <_vfprintf_r+0x1284>
  108378:	eafffe61 	b	107d04 <_vfprintf_r+0x12ac>
  10837c:	ec510b19 	vmov	r0, r1, d9
  108380:	eb00124a 	bl	10ccb0 <__fpclassifyd>
  108384:	e3500000 	cmp	r0, #0
  108388:	0a000107 	beq	1087ac <_vfprintf_r+0x1d54>
  10838c:	e3780001 	cmn	r8, #1
  108390:	e3c57020 	bic	r7, r5, #32
  108394:	03a08006 	moveq	r8, #6
  108398:	0a000003 	beq	1083ac <_vfprintf_r+0x1954>
  10839c:	e3570047 	cmp	r7, #71	; 0x47
  1083a0:	1a000001 	bne	1083ac <_vfprintf_r+0x1954>
  1083a4:	e3580000 	cmp	r8, #0
  1083a8:	03a08001 	moveq	r8, #1
  1083ac:	ec532b19 	vmov	r2, r3, d9
  1083b0:	e59d4018 	ldr	r4, [sp, #24]
  1083b4:	e384bc01 	orr	fp, r4, #256	; 0x100
  1083b8:	e3530000 	cmp	r3, #0
  1083bc:	beb19b49 	vneglt.f64	d9, d9
  1083c0:	b3a0a02d 	movlt	sl, #45	; 0x2d
  1083c4:	a3a0a000 	movge	sl, #0
  1083c8:	e2573046 	subs	r3, r7, #70	; 0x46
  1083cc:	e2734000 	rsbs	r4, r3, #0
  1083d0:	e0b44003 	adcs	r4, r4, r3
  1083d4:	e3540000 	cmp	r4, #0
  1083d8:	1a00017a 	bne	1089c8 <_vfprintf_r+0x1f70>
  1083dc:	e3570045 	cmp	r7, #69	; 0x45
  1083e0:	1a0001af 	bne	108aa4 <_vfprintf_r+0x204c>
  1083e4:	e28d3088 	add	r3, sp, #136	; 0x88
  1083e8:	e2884001 	add	r4, r8, #1
  1083ec:	e28d1080 	add	r1, sp, #128	; 0x80
  1083f0:	e28d2084 	add	r2, sp, #132	; 0x84
  1083f4:	e58d4004 	str	r4, [sp, #4]
  1083f8:	e3a00002 	mov	r0, #2
  1083fc:	e58d200c 	str	r2, [sp, #12]
  108400:	e58d0000 	str	r0, [sp]
  108404:	e58d3010 	str	r3, [sp, #16]
  108408:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  10840c:	e58d1008 	str	r1, [sp, #8]
  108410:	ec532b19 	vmov	r2, r3, d9
  108414:	eb000333 	bl	1090e8 <_dtoa_r>
  108418:	e0804004 	add	r4, r0, r4
  10841c:	e1a06000 	mov	r6, r0
  108420:	eeb59b40 	vcmp.f64	d9, #0.0
  108424:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  108428:	0a000008 	beq	108450 <_vfprintf_r+0x19f8>
  10842c:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
  108430:	e1540003 	cmp	r4, r3
  108434:	91a04003 	movls	r4, r3
  108438:	9a000004 	bls	108450 <_vfprintf_r+0x19f8>
  10843c:	e3a02030 	mov	r2, #48	; 0x30
  108440:	e4c32001 	strb	r2, [r3], #1
  108444:	e1530004 	cmp	r3, r4
  108448:	e58d3088 	str	r3, [sp, #136]	; 0x88
  10844c:	1afffffb 	bne	108440 <_vfprintf_r+0x19e8>
  108450:	e3570047 	cmp	r7, #71	; 0x47
  108454:	e0664004 	rsb	r4, r6, r4
  108458:	e58d4040 	str	r4, [sp, #64]	; 0x40
  10845c:	0a000131 	beq	108928 <_vfprintf_r+0x1ed0>
  108460:	e3550065 	cmp	r5, #101	; 0x65
  108464:	da0001e3 	ble	108bf8 <_vfprintf_r+0x21a0>
  108468:	e3550066 	cmp	r5, #102	; 0x66
  10846c:	e59d2080 	ldr	r2, [sp, #128]	; 0x80
  108470:	0a00018d 	beq	108aac <_vfprintf_r+0x2054>
  108474:	e59d4040 	ldr	r4, [sp, #64]	; 0x40
  108478:	e1520004 	cmp	r2, r4
  10847c:	ba00017f 	blt	108a80 <_vfprintf_r+0x2028>
  108480:	e59d7018 	ldr	r7, [sp, #24]
  108484:	e3170001 	tst	r7, #1
  108488:	12827001 	addne	r7, r2, #1
  10848c:	01c28fc2 	biceq	r8, r2, r2, asr #31
  108490:	01a07002 	moveq	r7, r2
  108494:	03a05067 	moveq	r5, #103	; 0x67
  108498:	13a05067 	movne	r5, #103	; 0x67
  10849c:	11c7cfc7 	bicne	ip, r7, r7, asr #31
  1084a0:	058d8020 	streq	r8, [sp, #32]
  1084a4:	158dc020 	strne	ip, [sp, #32]
  1084a8:	e58d205c 	str	r2, [sp, #92]	; 0x5c
  1084ac:	e35a0000 	cmp	sl, #0
  1084b0:	0a000140 	beq	1089b8 <_vfprintf_r+0x1f60>
  1084b4:	e3a0302d 	mov	r3, #45	; 0x2d
  1084b8:	e58db018 	str	fp, [sp, #24]
  1084bc:	e5cd307b 	strb	r3, [sp, #123]	; 0x7b
  1084c0:	e3a03000 	mov	r3, #0
  1084c4:	e58d3038 	str	r3, [sp, #56]	; 0x38
  1084c8:	eafffac6 	b	106fe8 <_vfprintf_r+0x590>
  1084cc:	e5d35000 	ldrb	r5, [r3]
  1084d0:	eafff9c9 	b	106bfc <_vfprintf_r+0x1a4>
  1084d4:	e59d7018 	ldr	r7, [sp, #24]
  1084d8:	e3170040 	tst	r7, #64	; 0x40
  1084dc:	059d403c 	ldreq	r4, [sp, #60]	; 0x3c
  1084e0:	159dc03c 	ldrne	ip, [sp, #60]	; 0x3c
  1084e4:	05943000 	ldreq	r3, [r4]
  1084e8:	02844004 	addeq	r4, r4, #4
  1084ec:	11dca0f0 	ldrshne	sl, [ip]
  1084f0:	128cc004 	addne	ip, ip, #4
  1084f4:	058d403c 	streq	r4, [sp, #60]	; 0x3c
  1084f8:	01a0a003 	moveq	sl, r3
  1084fc:	158dc03c 	strne	ip, [sp, #60]	; 0x3c
  108500:	e1a0bfca 	asr	fp, sl, #31
  108504:	e1a0200a 	mov	r2, sl
  108508:	e1a0300b 	mov	r3, fp
  10850c:	eafffb70 	b	1072d4 <_vfprintf_r+0x87c>
  108510:	e59d7018 	ldr	r7, [sp, #24]
  108514:	e3170010 	tst	r7, #16
  108518:	1a000009 	bne	108544 <_vfprintf_r+0x1aec>
  10851c:	e59d4018 	ldr	r4, [sp, #24]
  108520:	e3140040 	tst	r4, #64	; 0x40
  108524:	0a000006 	beq	108544 <_vfprintf_r+0x1aec>
  108528:	e59d603c 	ldr	r6, [sp, #60]	; 0x3c
  10852c:	e59d702c 	ldr	r7, [sp, #44]	; 0x2c
  108530:	e2866004 	add	r6, r6, #4
  108534:	e5163004 	ldr	r3, [r6, #-4]
  108538:	e58d603c 	str	r6, [sp, #60]	; 0x3c
  10853c:	e1c370b0 	strh	r7, [r3]
  108540:	eafff982 	b	106b50 <_vfprintf_r+0xf8>
  108544:	e59d803c 	ldr	r8, [sp, #60]	; 0x3c
  108548:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
  10854c:	e2888004 	add	r8, r8, #4
  108550:	e5183004 	ldr	r3, [r8, #-4]
  108554:	e58d803c 	str	r8, [sp, #60]	; 0x3c
  108558:	e583c000 	str	ip, [r3]
  10855c:	eafff97b 	b	106b50 <_vfprintf_r+0xf8>
  108560:	e59d7018 	ldr	r7, [sp, #24]
  108564:	e3170040 	tst	r7, #64	; 0x40
  108568:	0a00008a 	beq	108798 <_vfprintf_r+0x1d40>
  10856c:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
  108570:	e3a03001 	mov	r3, #1
  108574:	e1dca0b0 	ldrh	sl, [ip]
  108578:	ea000005 	b	108594 <_vfprintf_r+0x1b3c>
  10857c:	e59d7018 	ldr	r7, [sp, #24]
  108580:	e2173040 	ands	r3, r7, #64	; 0x40
  108584:	0a00007a 	beq	108774 <_vfprintf_r+0x1d1c>
  108588:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
  10858c:	e1a03002 	mov	r3, r2
  108590:	e1dca0b0 	ldrh	sl, [ip]
  108594:	e3a0b000 	mov	fp, #0
  108598:	e19a000b 	orrs	r0, sl, fp
  10859c:	e28cc004 	add	ip, ip, #4
  1085a0:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
  1085a4:	03a07000 	moveq	r7, #0
  1085a8:	13a07001 	movne	r7, #1
  1085ac:	eafffaf6 	b	10718c <_vfprintf_r+0x734>
  1085b0:	e59d4018 	ldr	r4, [sp, #24]
  1085b4:	e3a0b000 	mov	fp, #0
  1085b8:	e3140040 	tst	r4, #64	; 0x40
  1085bc:	059d703c 	ldreq	r7, [sp, #60]	; 0x3c
  1085c0:	159d603c 	ldrne	r6, [sp, #60]	; 0x3c
  1085c4:	05973000 	ldreq	r3, [r7]
  1085c8:	02877004 	addeq	r7, r7, #4
  1085cc:	11d6a0b0 	ldrhne	sl, [r6]
  1085d0:	12866004 	addne	r6, r6, #4
  1085d4:	058d703c 	streq	r7, [sp, #60]	; 0x3c
  1085d8:	158d603c 	strne	r6, [sp, #60]	; 0x3c
  1085dc:	01a0a003 	moveq	sl, r3
  1085e0:	eafffb50 	b	107328 <_vfprintf_r+0x8d0>
  1085e4:	e1a01003 	mov	r1, r3
  1085e8:	e1a0200c 	mov	r2, ip
  1085ec:	e2811001 	add	r1, r1, #1
  1085f0:	e5894000 	str	r4, [r9]
  1085f4:	e3510007 	cmp	r1, #7
  1085f8:	e5896004 	str	r6, [r9, #4]
  1085fc:	e0822006 	add	r2, r2, r6
  108600:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  108604:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  108608:	dafffc84 	ble	107820 <_vfprintf_r+0xdc8>
  10860c:	eafffdab 	b	107cc0 <_vfprintf_r+0x1268>
  108610:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  108614:	e28d209c 	add	r2, sp, #156	; 0x9c
  108618:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  10861c:	e28d70a8 	add	r7, sp, #168	; 0xa8
  108620:	eb00128d 	bl	10d05c <__sprint_r>
  108624:	e3500000 	cmp	r0, #0
  108628:	1afffdb5 	bne	107d04 <_vfprintf_r+0x12ac>
  10862c:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  108630:	e28d9f4e 	add	r9, sp, #312	; 0x138
  108634:	eafffcd7 	b	107998 <_vfprintf_r+0xf40>
  108638:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  10863c:	e3003144 	movw	r3, #324	; 0x144
  108640:	e3403011 	movt	r3, #17
  108644:	e5893000 	str	r3, [r9]
  108648:	e2811001 	add	r1, r1, #1
  10864c:	e3a03001 	mov	r3, #1
  108650:	e3510007 	cmp	r1, #7
  108654:	e5893004 	str	r3, [r9, #4]
  108658:	e0822003 	add	r2, r2, r3
  10865c:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  108660:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  108664:	d2899008 	addle	r9, r9, #8
  108668:	ca000064 	bgt	108800 <_vfprintf_r+0x1da8>
  10866c:	e3570000 	cmp	r7, #0
  108670:	0a00005b 	beq	1087e4 <_vfprintf_r+0x1d8c>
  108674:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  108678:	e59d4060 	ldr	r4, [sp, #96]	; 0x60
  10867c:	e2811001 	add	r1, r1, #1
  108680:	e59d8050 	ldr	r8, [sp, #80]	; 0x50
  108684:	e3510007 	cmp	r1, #7
  108688:	e0822004 	add	r2, r2, r4
  10868c:	e5894004 	str	r4, [r9, #4]
  108690:	e5898000 	str	r8, [r9]
  108694:	d2899008 	addle	r9, r9, #8
  108698:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
  10869c:	e58d10a0 	str	r1, [sp, #160]	; 0xa0
  1086a0:	ca0000eb 	bgt	108a54 <_vfprintf_r+0x1ffc>
  1086a4:	e2677000 	rsb	r7, r7, #0
  1086a8:	e3570000 	cmp	r7, #0
  1086ac:	dafffdbd 	ble	107da8 <_vfprintf_r+0x1350>
  1086b0:	e3570010 	cmp	r7, #16
  1086b4:	e59f454c 	ldr	r4, [pc, #1356]	; 108c08 <_vfprintf_r+0x21b0>
  1086b8:	dafffda8 	ble	107d60 <_vfprintf_r+0x1308>
  1086bc:	e28d509c 	add	r5, sp, #156	; 0x9c
  1086c0:	e3a08010 	mov	r8, #16
  1086c4:	e59da024 	ldr	sl, [sp, #36]	; 0x24
  1086c8:	e1a03001 	mov	r3, r1
  1086cc:	e59db030 	ldr	fp, [sp, #48]	; 0x30
  1086d0:	e1a0c002 	mov	ip, r2
  1086d4:	ea000002 	b	1086e4 <_vfprintf_r+0x1c8c>
  1086d8:	e2477010 	sub	r7, r7, #16
  1086dc:	e3570010 	cmp	r7, #16
  1086e0:	dafffd9c 	ble	107d58 <_vfprintf_r+0x1300>
  1086e4:	e2833001 	add	r3, r3, #1
  1086e8:	e2899008 	add	r9, r9, #8
  1086ec:	e3530007 	cmp	r3, #7
  1086f0:	e28cc010 	add	ip, ip, #16
  1086f4:	e9090110 	stmdb	r9, {r4, r8}
  1086f8:	e58d30a0 	str	r3, [sp, #160]	; 0xa0
  1086fc:	e58dc0a4 	str	ip, [sp, #164]	; 0xa4
  108700:	dafffff4 	ble	1086d8 <_vfprintf_r+0x1c80>
  108704:	e1a0000a 	mov	r0, sl
  108708:	e1a0100b 	mov	r1, fp
  10870c:	e1a02005 	mov	r2, r5
  108710:	e28d9f4e 	add	r9, sp, #312	; 0x138
  108714:	eb001250 	bl	10d05c <__sprint_r>
  108718:	e3500000 	cmp	r0, #0
  10871c:	1a00010b 	bne	108b50 <_vfprintf_r+0x20f8>
  108720:	e59dc0a4 	ldr	ip, [sp, #164]	; 0xa4
  108724:	e59d30a0 	ldr	r3, [sp, #160]	; 0xa0
  108728:	eaffffea 	b	1086d8 <_vfprintf_r+0x1c80>
  10872c:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  108730:	e28d209c 	add	r2, sp, #156	; 0x9c
  108734:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  108738:	e28d60a8 	add	r6, sp, #168	; 0xa8
  10873c:	eb001246 	bl	10d05c <__sprint_r>
  108740:	e3500000 	cmp	r0, #0
  108744:	1afffd6e 	bne	107d04 <_vfprintf_r+0x12ac>
  108748:	e28d9f4e 	add	r9, sp, #312	; 0x138
  10874c:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  108750:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  108754:	eafffd4f 	b	107c98 <_vfprintf_r+0x1240>
  108758:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
  10875c:	e1c74fc7 	bic	r4, r7, r7, asr #31
  108760:	e5dd307b 	ldrb	r3, [sp, #123]	; 0x7b
  108764:	e58d4020 	str	r4, [sp, #32]
  108768:	e58da03c 	str	sl, [sp, #60]	; 0x3c
  10876c:	e58d805c 	str	r8, [sp, #92]	; 0x5c
  108770:	eafffa1a 	b	106fe0 <_vfprintf_r+0x588>
  108774:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
  108778:	e3a0b000 	mov	fp, #0
  10877c:	e2844004 	add	r4, r4, #4
  108780:	e5142004 	ldr	r2, [r4, #-4]
  108784:	e58d403c 	str	r4, [sp, #60]	; 0x3c
  108788:	e2927000 	adds	r7, r2, #0
  10878c:	e1a0a002 	mov	sl, r2
  108790:	13a07001 	movne	r7, #1
  108794:	eafffa7c 	b	10718c <_vfprintf_r+0x734>
  108798:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
  10879c:	e2844004 	add	r4, r4, #4
  1087a0:	e5142004 	ldr	r2, [r4, #-4]
  1087a4:	e58d403c 	str	r4, [sp, #60]	; 0x3c
  1087a8:	eafffb22 	b	107438 <_vfprintf_r+0x9e0>
  1087ac:	e59d804c 	ldr	r8, [sp, #76]	; 0x4c
  1087b0:	e3550047 	cmp	r5, #71	; 0x47
  1087b4:	e59dc018 	ldr	ip, [sp, #24]
  1087b8:	e3006120 	movw	r6, #288	; 0x120
  1087bc:	e3a07003 	mov	r7, #3
  1087c0:	e3406011 	movt	r6, #17
  1087c4:	e3ccc080 	bic	ip, ip, #128	; 0x80
  1087c8:	e58d7020 	str	r7, [sp, #32]
  1087cc:	e58d0038 	str	r0, [sp, #56]	; 0x38
  1087d0:	c1a06008 	movgt	r6, r8
  1087d4:	e58dc018 	str	ip, [sp, #24]
  1087d8:	e5dd307b 	ldrb	r3, [sp, #123]	; 0x7b
  1087dc:	e58d005c 	str	r0, [sp, #92]	; 0x5c
  1087e0:	eafff9fe 	b	106fe0 <_vfprintf_r+0x588>
  1087e4:	e59d8040 	ldr	r8, [sp, #64]	; 0x40
  1087e8:	e3580000 	cmp	r8, #0
  1087ec:	1affffa0 	bne	108674 <_vfprintf_r+0x1c1c>
  1087f0:	e59dc018 	ldr	ip, [sp, #24]
  1087f4:	e31c0001 	tst	ip, #1
  1087f8:	0afffc09 	beq	107824 <_vfprintf_r+0xdcc>
  1087fc:	eaffff9c 	b	108674 <_vfprintf_r+0x1c1c>
  108800:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  108804:	e28d209c 	add	r2, sp, #156	; 0x9c
  108808:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  10880c:	e28d40a8 	add	r4, sp, #168	; 0xa8
  108810:	eb001211 	bl	10d05c <__sprint_r>
  108814:	e3500000 	cmp	r0, #0
  108818:	1afffd39 	bne	107d04 <_vfprintf_r+0x12ac>
  10881c:	e59d7080 	ldr	r7, [sp, #128]	; 0x80
  108820:	e28d9f4e 	add	r9, sp, #312	; 0x138
  108824:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  108828:	eaffff8f 	b	10866c <_vfprintf_r+0x1c14>
  10882c:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  108830:	e28d209c 	add	r2, sp, #156	; 0x9c
  108834:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  108838:	e28d70a8 	add	r7, sp, #168	; 0xa8
  10883c:	eb001206 	bl	10d05c <__sprint_r>
  108840:	e3500000 	cmp	r0, #0
  108844:	1afffd2e 	bne	107d04 <_vfprintf_r+0x12ac>
  108848:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  10884c:	e28d9f4e 	add	r9, sp, #312	; 0x138
  108850:	eafffc63 	b	1079e4 <_vfprintf_r+0xf8c>
  108854:	e58d4038 	str	r4, [sp, #56]	; 0x38
  108858:	ebfff863 	bl	1069ec <strlen>
  10885c:	e5dd307b 	ldrb	r3, [sp, #123]	; 0x7b
  108860:	e58da03c 	str	sl, [sp, #60]	; 0x3c
  108864:	e58d405c 	str	r4, [sp, #92]	; 0x5c
  108868:	e1c0cfc0 	bic	ip, r0, r0, asr #31
  10886c:	e1a07000 	mov	r7, r0
  108870:	e58dc020 	str	ip, [sp, #32]
  108874:	eafff9d9 	b	106fe0 <_vfprintf_r+0x588>
  108878:	e30fad10 	movw	sl, #64784	; 0xfd10
  10887c:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  108880:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  108884:	e340a010 	movt	sl, #16
  108888:	eafffa17 	b	1070ec <_vfprintf_r+0x694>
  10888c:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  108890:	e28d209c 	add	r2, sp, #156	; 0x9c
  108894:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  108898:	eb0011ef 	bl	10d05c <__sprint_r>
  10889c:	e3500000 	cmp	r0, #0
  1088a0:	1afffd17 	bne	107d04 <_vfprintf_r+0x12ac>
  1088a4:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  1088a8:	e28d9f4e 	add	r9, sp, #312	; 0x138
  1088ac:	eafffd63 	b	107e40 <_vfprintf_r+0x13e8>
  1088b0:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  1088b4:	e28d209c 	add	r2, sp, #156	; 0x9c
  1088b8:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  1088bc:	eb0011e6 	bl	10d05c <__sprint_r>
  1088c0:	e3500000 	cmp	r0, #0
  1088c4:	1afffd0e 	bne	107d04 <_vfprintf_r+0x12ac>
  1088c8:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
  1088cc:	e28d9f4e 	add	r9, sp, #312	; 0x138
  1088d0:	e59d6040 	ldr	r6, [sp, #64]	; 0x40
  1088d4:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  1088d8:	e0633006 	rsb	r3, r3, r6
  1088dc:	eafffdf8 	b	1080c4 <_vfprintf_r+0x166c>
  1088e0:	e30fad10 	movw	sl, #64784	; 0xfd10
  1088e4:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  1088e8:	e340a010 	movt	sl, #16
  1088ec:	eafffbfa 	b	1078dc <_vfprintf_r+0xe84>
  1088f0:	e1a0a005 	mov	sl, r5
  1088f4:	eafffc68 	b	107a9c <_vfprintf_r+0x1044>
  1088f8:	e3580006 	cmp	r8, #6
  1088fc:	31a07008 	movcc	r7, r8
  108900:	23a07006 	movcs	r7, #6
  108904:	e300613c 	movw	r6, #316	; 0x13c
  108908:	e1c78fc7 	bic	r8, r7, r7, asr #31
  10890c:	e58da03c 	str	sl, [sp, #60]	; 0x3c
  108910:	e58d8020 	str	r8, [sp, #32]
  108914:	e3406011 	movt	r6, #17
  108918:	eafffa97 	b	10737c <_vfprintf_r+0x924>
  10891c:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
  108920:	e0603003 	rsb	r3, r0, r3
  108924:	e58d3040 	str	r3, [sp, #64]	; 0x40
  108928:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
  10892c:	e3730003 	cmn	r3, #3
  108930:	e1a02003 	mov	r2, r3
  108934:	ba000001 	blt	108940 <_vfprintf_r+0x1ee8>
  108938:	e1580003 	cmp	r8, r3
  10893c:	aafffecc 	bge	108474 <_vfprintf_r+0x1a1c>
  108940:	e2455002 	sub	r5, r5, #2
  108944:	e2433001 	sub	r3, r3, #1
  108948:	e58d3080 	str	r3, [sp, #128]	; 0x80
  10894c:	e3530000 	cmp	r3, #0
  108950:	e5cd508c 	strb	r5, [sp, #140]	; 0x8c
  108954:	b2633000 	rsblt	r3, r3, #0
  108958:	b3a0202d 	movlt	r2, #45	; 0x2d
  10895c:	a3a0202b 	movge	r2, #43	; 0x2b
  108960:	e3530009 	cmp	r3, #9
  108964:	e5cd208d 	strb	r2, [sp, #141]	; 0x8d
  108968:	e28d2098 	add	r2, sp, #152	; 0x98
  10896c:	ca000059 	bgt	108ad8 <_vfprintf_r+0x2080>
  108970:	e2833030 	add	r3, r3, #48	; 0x30
  108974:	e5cd308f 	strb	r3, [sp, #143]	; 0x8f
  108978:	e2423008 	sub	r3, r2, #8
  10897c:	e3a01030 	mov	r1, #48	; 0x30
  108980:	e5cd108e 	strb	r1, [sp, #142]	; 0x8e
  108984:	e59d8040 	ldr	r8, [sp, #64]	; 0x40
  108988:	e242200c 	sub	r2, r2, #12
  10898c:	e0622003 	rsb	r2, r2, r3
  108990:	e58d2068 	str	r2, [sp, #104]	; 0x68
  108994:	e3580001 	cmp	r8, #1
  108998:	e0887002 	add	r7, r8, r2
  10899c:	da00008a 	ble	108bcc <_vfprintf_r+0x2174>
  1089a0:	e2877001 	add	r7, r7, #1
  1089a4:	e3a08000 	mov	r8, #0
  1089a8:	e1c7cfc7 	bic	ip, r7, r7, asr #31
  1089ac:	e58d805c 	str	r8, [sp, #92]	; 0x5c
  1089b0:	e58dc020 	str	ip, [sp, #32]
  1089b4:	eafffebc 	b	1084ac <_vfprintf_r+0x1a54>
  1089b8:	e5dd307b 	ldrb	r3, [sp, #123]	; 0x7b
  1089bc:	e58db018 	str	fp, [sp, #24]
  1089c0:	e58da038 	str	sl, [sp, #56]	; 0x38
  1089c4:	eafff985 	b	106fe0 <_vfprintf_r+0x588>
  1089c8:	e3a02003 	mov	r2, #3
  1089cc:	e28d3088 	add	r3, sp, #136	; 0x88
  1089d0:	e58d2000 	str	r2, [sp]
  1089d4:	e28d1080 	add	r1, sp, #128	; 0x80
  1089d8:	e28d2084 	add	r2, sp, #132	; 0x84
  1089dc:	e58d3010 	str	r3, [sp, #16]
  1089e0:	e58d200c 	str	r2, [sp, #12]
  1089e4:	e58d8004 	str	r8, [sp, #4]
  1089e8:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  1089ec:	e58d1008 	str	r1, [sp, #8]
  1089f0:	ec532b19 	vmov	r2, r3, d9
  1089f4:	eb0001bb 	bl	1090e8 <_dtoa_r>
  1089f8:	e3570047 	cmp	r7, #71	; 0x47
  1089fc:	e1a06000 	mov	r6, r0
  108a00:	1a000002 	bne	108a10 <_vfprintf_r+0x1fb8>
  108a04:	e59dc018 	ldr	ip, [sp, #24]
  108a08:	e31c0001 	tst	ip, #1
  108a0c:	0affffc2 	beq	10891c <_vfprintf_r+0x1ec4>
  108a10:	e3540000 	cmp	r4, #0
  108a14:	e0864008 	add	r4, r6, r8
  108a18:	0afffe80 	beq	108420 <_vfprintf_r+0x19c8>
  108a1c:	e5d63000 	ldrb	r3, [r6]
  108a20:	e3530030 	cmp	r3, #48	; 0x30
  108a24:	0a00004b 	beq	108b58 <_vfprintf_r+0x2100>
  108a28:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
  108a2c:	e0844003 	add	r4, r4, r3
  108a30:	eafffe7a 	b	108420 <_vfprintf_r+0x19c8>
  108a34:	e1c8cfc8 	bic	ip, r8, r8, asr #31
  108a38:	e58d0038 	str	r0, [sp, #56]	; 0x38
  108a3c:	e58dc020 	str	ip, [sp, #32]
  108a40:	e1a07008 	mov	r7, r8
  108a44:	e5dd307b 	ldrb	r3, [sp, #123]	; 0x7b
  108a48:	e58da03c 	str	sl, [sp, #60]	; 0x3c
  108a4c:	e58d005c 	str	r0, [sp, #92]	; 0x5c
  108a50:	eafff962 	b	106fe0 <_vfprintf_r+0x588>
  108a54:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  108a58:	e28d209c 	add	r2, sp, #156	; 0x9c
  108a5c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  108a60:	eb00117d 	bl	10d05c <__sprint_r>
  108a64:	e3500000 	cmp	r0, #0
  108a68:	1afffca5 	bne	107d04 <_vfprintf_r+0x12ac>
  108a6c:	e59d7080 	ldr	r7, [sp, #128]	; 0x80
  108a70:	e28d9f4e 	add	r9, sp, #312	; 0x138
  108a74:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
  108a78:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
  108a7c:	eaffff08 	b	1086a4 <_vfprintf_r+0x1c4c>
  108a80:	e3520000 	cmp	r2, #0
  108a84:	e59d4040 	ldr	r4, [sp, #64]	; 0x40
  108a88:	d2627002 	rsble	r7, r2, #2
  108a8c:	e3a05067 	mov	r5, #103	; 0x67
  108a90:	c3a07001 	movgt	r7, #1
  108a94:	e0877004 	add	r7, r7, r4
  108a98:	e1c78fc7 	bic	r8, r7, r7, asr #31
  108a9c:	e58d8020 	str	r8, [sp, #32]
  108aa0:	eafffe80 	b	1084a8 <_vfprintf_r+0x1a50>
  108aa4:	e3a02002 	mov	r2, #2
  108aa8:	eaffffc7 	b	1089cc <_vfprintf_r+0x1f74>
  108aac:	e3520000 	cmp	r2, #0
  108ab0:	da000033 	ble	108b84 <_vfprintf_r+0x212c>
  108ab4:	e3580000 	cmp	r8, #0
  108ab8:	1a00002c 	bne	108b70 <_vfprintf_r+0x2118>
  108abc:	e59d4018 	ldr	r4, [sp, #24]
  108ac0:	e3140001 	tst	r4, #1
  108ac4:	1a000029 	bne	108b70 <_vfprintf_r+0x2118>
  108ac8:	e1c27fc2 	bic	r7, r2, r2, asr #31
  108acc:	e58d7020 	str	r7, [sp, #32]
  108ad0:	e1a07002 	mov	r7, r2
  108ad4:	eafffe73 	b	1084a8 <_vfprintf_r+0x1a50>
  108ad8:	e2824002 	add	r4, r2, #2
  108adc:	e59d7064 	ldr	r7, [sp, #100]	; 0x64
  108ae0:	e1a00fc3 	asr	r0, r3, #31
  108ae4:	e1a01004 	mov	r1, r4
  108ae8:	e2444001 	sub	r4, r4, #1
  108aec:	e0cc7397 	smull	r7, ip, r7, r3
  108af0:	e060014c 	rsb	r0, r0, ip, asr #2
  108af4:	e3500009 	cmp	r0, #9
  108af8:	e080c100 	add	ip, r0, r0, lsl #2
  108afc:	e043c08c 	sub	ip, r3, ip, lsl #1
  108b00:	e1a03000 	mov	r3, r0
  108b04:	e28c0030 	add	r0, ip, #48	; 0x30
  108b08:	e5c10000 	strb	r0, [r1]
  108b0c:	cafffff2 	bgt	108adc <_vfprintf_r+0x2084>
  108b10:	e282c003 	add	ip, r2, #3
  108b14:	e2833030 	add	r3, r3, #48	; 0x30
  108b18:	e15c0004 	cmp	ip, r4
  108b1c:	e5413001 	strb	r3, [r1, #-1]
  108b20:	e1a00003 	mov	r0, r3
  108b24:	9a000035 	bls	108c00 <_vfprintf_r+0x21a8>
  108b28:	e242400b 	sub	r4, r2, #11
  108b2c:	e1a03001 	mov	r3, r1
  108b30:	ea000000 	b	108b38 <_vfprintf_r+0x20e0>
  108b34:	e4d30001 	ldrb	r0, [r3], #1
  108b38:	e153000c 	cmp	r3, ip
  108b3c:	e5e40001 	strb	r0, [r4, #1]!
  108b40:	1afffffb 	bne	108b34 <_vfprintf_r+0x20dc>
  108b44:	e0613082 	rsb	r3, r1, r2, lsl #1
  108b48:	e2433006 	sub	r3, r3, #6
  108b4c:	eaffff8c 	b	108984 <_vfprintf_r+0x1f2c>
  108b50:	e1a0a00b 	mov	sl, fp
  108b54:	eafffbd0 	b	107a9c <_vfprintf_r+0x1044>
  108b58:	eeb59b40 	vcmp.f64	d9, #0.0
  108b5c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  108b60:	12683001 	rsbne	r3, r8, #1
  108b64:	158d3080 	strne	r3, [sp, #128]	; 0x80
  108b68:	1affffaf 	bne	108a2c <_vfprintf_r+0x1fd4>
  108b6c:	eaffffad 	b	108a28 <_vfprintf_r+0x1fd0>
  108b70:	e2887001 	add	r7, r8, #1
  108b74:	e0827007 	add	r7, r2, r7
  108b78:	e1c78fc7 	bic	r8, r7, r7, asr #31
  108b7c:	e58d8020 	str	r8, [sp, #32]
  108b80:	eafffe48 	b	1084a8 <_vfprintf_r+0x1a50>
  108b84:	e3580000 	cmp	r8, #0
  108b88:	1a000016 	bne	108be8 <_vfprintf_r+0x2190>
  108b8c:	e59dc018 	ldr	ip, [sp, #24]
  108b90:	e31c0001 	tst	ip, #1
  108b94:	1a000013 	bne	108be8 <_vfprintf_r+0x2190>
  108b98:	e3a0c001 	mov	ip, #1
  108b9c:	e58dc020 	str	ip, [sp, #32]
  108ba0:	e1a0700c 	mov	r7, ip
  108ba4:	eafffe3f 	b	1084a8 <_vfprintf_r+0x1a50>
  108ba8:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
  108bac:	e5d35001 	ldrb	r5, [r3, #1]
  108bb0:	e1a0300c 	mov	r3, ip
  108bb4:	e2840004 	add	r0, r4, #4
  108bb8:	e58d003c 	str	r0, [sp, #60]	; 0x3c
  108bbc:	e5948000 	ldr	r8, [r4]
  108bc0:	e3580000 	cmp	r8, #0
  108bc4:	b3e08000 	mvnlt	r8, #0
  108bc8:	eafff80b 	b	106bfc <_vfprintf_r+0x1a4>
  108bcc:	e59dc018 	ldr	ip, [sp, #24]
  108bd0:	e21c3001 	ands	r3, ip, #1
  108bd4:	1affff71 	bne	1089a0 <_vfprintf_r+0x1f48>
  108bd8:	e1c74fc7 	bic	r4, r7, r7, asr #31
  108bdc:	e58d305c 	str	r3, [sp, #92]	; 0x5c
  108be0:	e58d4020 	str	r4, [sp, #32]
  108be4:	eafffe30 	b	1084ac <_vfprintf_r+0x1a54>
  108be8:	e2887002 	add	r7, r8, #2
  108bec:	e1c73fc7 	bic	r3, r7, r7, asr #31
  108bf0:	e58d3020 	str	r3, [sp, #32]
  108bf4:	eafffe2b 	b	1084a8 <_vfprintf_r+0x1a50>
  108bf8:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
  108bfc:	eaffff50 	b	108944 <_vfprintf_r+0x1eec>
  108c00:	e242300a 	sub	r3, r2, #10
  108c04:	eaffff5e 	b	108984 <_vfprintf_r+0x1f2c>
  108c08:	0010fd20 	.word	0x0010fd20

00108c0c <vfprintf>:
  108c0c:	e30fcc28 	movw	ip, #64552	; 0xfc28
  108c10:	e340c011 	movt	ip, #17
  108c14:	e92d0030 	push	{r4, r5}
  108c18:	e1a05000 	mov	r5, r0
  108c1c:	e1a04001 	mov	r4, r1
  108c20:	e1a03002 	mov	r3, r2
  108c24:	e59c0000 	ldr	r0, [ip]
  108c28:	e1a01005 	mov	r1, r5
  108c2c:	e1a02004 	mov	r2, r4
  108c30:	e8bd0030 	pop	{r4, r5}
  108c34:	eafff787 	b	106a58 <_vfprintf_r>

00108c38 <__swsetup_r>:
  108c38:	e92d4038 	push	{r3, r4, r5, lr}
  108c3c:	e30f3c28 	movw	r3, #64552	; 0xfc28
  108c40:	e3403011 	movt	r3, #17
  108c44:	e1a05000 	mov	r5, r0
  108c48:	e1a04001 	mov	r4, r1
  108c4c:	e5930000 	ldr	r0, [r3]
  108c50:	e3500000 	cmp	r0, #0
  108c54:	0a000002 	beq	108c64 <__swsetup_r+0x2c>
  108c58:	e5902038 	ldr	r2, [r0, #56]	; 0x38
  108c5c:	e3520000 	cmp	r2, #0
  108c60:	0a000037 	beq	108d44 <__swsetup_r+0x10c>
  108c64:	e1d430bc 	ldrh	r3, [r4, #12]
  108c68:	e2032008 	and	r2, r3, #8
  108c6c:	e1a01003 	mov	r1, r3
  108c70:	e6bf2072 	sxth	r2, r2
  108c74:	e3520000 	cmp	r2, #0
  108c78:	0a00000d 	beq	108cb4 <__swsetup_r+0x7c>
  108c7c:	e5942010 	ldr	r2, [r4, #16]
  108c80:	e3520000 	cmp	r2, #0
  108c84:	0a000017 	beq	108ce8 <__swsetup_r+0xb0>
  108c88:	e2131001 	ands	r1, r3, #1
  108c8c:	1a00001e 	bne	108d0c <__swsetup_r+0xd4>
  108c90:	e2033002 	and	r3, r3, #2
  108c94:	e6bf3073 	sxth	r3, r3
  108c98:	e3530000 	cmp	r3, #0
  108c9c:	05941014 	ldreq	r1, [r4, #20]
  108ca0:	e3520000 	cmp	r2, #0
  108ca4:	e5841008 	str	r1, [r4, #8]
  108ca8:	0a00001e 	beq	108d28 <__swsetup_r+0xf0>
  108cac:	e3a00000 	mov	r0, #0
  108cb0:	e8bd8038 	pop	{r3, r4, r5, pc}
  108cb4:	e2032010 	and	r2, r3, #16
  108cb8:	e6bf2072 	sxth	r2, r2
  108cbc:	e3520000 	cmp	r2, #0
  108cc0:	0a00001d 	beq	108d3c <__swsetup_r+0x104>
  108cc4:	e2011004 	and	r1, r1, #4
  108cc8:	e6bf1071 	sxth	r1, r1
  108ccc:	e3510000 	cmp	r1, #0
  108cd0:	1a00001d 	bne	108d4c <__swsetup_r+0x114>
  108cd4:	e5942010 	ldr	r2, [r4, #16]
  108cd8:	e3520000 	cmp	r2, #0
  108cdc:	e3833008 	orr	r3, r3, #8
  108ce0:	e1c430bc 	strh	r3, [r4, #12]
  108ce4:	1affffe7 	bne	108c88 <__swsetup_r+0x50>
  108ce8:	e2031d0a 	and	r1, r3, #640	; 0x280
  108cec:	e3510c02 	cmp	r1, #512	; 0x200
  108cf0:	0affffe4 	beq	108c88 <__swsetup_r+0x50>
  108cf4:	e1a00005 	mov	r0, r5
  108cf8:	e1a01004 	mov	r1, r4
  108cfc:	eb000815 	bl	10ad58 <__smakebuf_r>
  108d00:	e1d430bc 	ldrh	r3, [r4, #12]
  108d04:	e5942010 	ldr	r2, [r4, #16]
  108d08:	eaffffde 	b	108c88 <__swsetup_r+0x50>
  108d0c:	e5943014 	ldr	r3, [r4, #20]
  108d10:	e3520000 	cmp	r2, #0
  108d14:	e3a01000 	mov	r1, #0
  108d18:	e5841008 	str	r1, [r4, #8]
  108d1c:	e2633000 	rsb	r3, r3, #0
  108d20:	e5843018 	str	r3, [r4, #24]
  108d24:	1affffe0 	bne	108cac <__swsetup_r+0x74>
  108d28:	e1d430bc 	ldrh	r3, [r4, #12]
  108d2c:	e2033080 	and	r3, r3, #128	; 0x80
  108d30:	e6bf3073 	sxth	r3, r3
  108d34:	e3530000 	cmp	r3, #0
  108d38:	0affffdb 	beq	108cac <__swsetup_r+0x74>
  108d3c:	e3e00000 	mvn	r0, #0
  108d40:	e8bd8038 	pop	{r3, r4, r5, pc}
  108d44:	eb00064c 	bl	10a67c <__sinit>
  108d48:	eaffffc5 	b	108c64 <__swsetup_r+0x2c>
  108d4c:	e5941030 	ldr	r1, [r4, #48]	; 0x30
  108d50:	e3510000 	cmp	r1, #0
  108d54:	0a000007 	beq	108d78 <__swsetup_r+0x140>
  108d58:	e2842040 	add	r2, r4, #64	; 0x40
  108d5c:	e1510002 	cmp	r1, r2
  108d60:	0a000002 	beq	108d70 <__swsetup_r+0x138>
  108d64:	e1a00005 	mov	r0, r5
  108d68:	eb0006ea 	bl	10a918 <_free_r>
  108d6c:	e1d430bc 	ldrh	r3, [r4, #12]
  108d70:	e3a02000 	mov	r2, #0
  108d74:	e5842030 	str	r2, [r4, #48]	; 0x30
  108d78:	e3c33024 	bic	r3, r3, #36	; 0x24
  108d7c:	e5942010 	ldr	r2, [r4, #16]
  108d80:	e3a01000 	mov	r1, #0
  108d84:	e5841004 	str	r1, [r4, #4]
  108d88:	e1a03803 	lsl	r3, r3, #16
  108d8c:	e5842000 	str	r2, [r4]
  108d90:	e1a03823 	lsr	r3, r3, #16
  108d94:	eaffffcf 	b	108cd8 <__swsetup_r+0xa0>

00108d98 <__call_exitprocs>:
  108d98:	e30f3d0c 	movw	r3, #64780	; 0xfd0c
  108d9c:	e3403010 	movt	r3, #16
  108da0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  108da4:	e24dd014 	sub	sp, sp, #20
  108da8:	e5933000 	ldr	r3, [r3]
  108dac:	e1a06001 	mov	r6, r1
  108db0:	e3a0a001 	mov	sl, #1
  108db4:	e3002000 	movw	r2, #0
  108db8:	e58d0008 	str	r0, [sp, #8]
  108dbc:	e3402000 	movt	r2, #0
  108dc0:	e58d3004 	str	r3, [sp, #4]
  108dc4:	e2833f52 	add	r3, r3, #328	; 0x148
  108dc8:	e58d2000 	str	r2, [sp]
  108dcc:	e58d300c 	str	r3, [sp, #12]
  108dd0:	e59d2004 	ldr	r2, [sp, #4]
  108dd4:	e59db00c 	ldr	fp, [sp, #12]
  108dd8:	e5927148 	ldr	r7, [r2, #328]	; 0x148
  108ddc:	e3570000 	cmp	r7, #0
  108de0:	0a000032 	beq	108eb0 <__call_exitprocs+0x118>
  108de4:	e5975004 	ldr	r5, [r7, #4]
  108de8:	e2554001 	subs	r4, r5, #1
  108dec:	4a00002c 	bmi	108ea4 <__call_exitprocs+0x10c>
  108df0:	e285501f 	add	r5, r5, #31
  108df4:	e2878088 	add	r8, r7, #136	; 0x88
  108df8:	e0885105 	add	r5, r8, r5, lsl #2
  108dfc:	ea000006 	b	108e1c <__call_exitprocs+0x84>
  108e00:	e5953000 	ldr	r3, [r5]
  108e04:	e1530006 	cmp	r3, r6
  108e08:	0a000005 	beq	108e24 <__call_exitprocs+0x8c>
  108e0c:	e2444001 	sub	r4, r4, #1
  108e10:	e2455004 	sub	r5, r5, #4
  108e14:	e3740001 	cmn	r4, #1
  108e18:	0a000021 	beq	108ea4 <__call_exitprocs+0x10c>
  108e1c:	e3560000 	cmp	r6, #0
  108e20:	1afffff6 	bne	108e00 <__call_exitprocs+0x68>
  108e24:	e5973004 	ldr	r3, [r7, #4]
  108e28:	e0682005 	rsb	r2, r8, r5
  108e2c:	e0872002 	add	r2, r7, r2
  108e30:	e2433001 	sub	r3, r3, #1
  108e34:	e1530004 	cmp	r3, r4
  108e38:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
  108e3c:	05874004 	streq	r4, [r7, #4]
  108e40:	13a01000 	movne	r1, #0
  108e44:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
  108e48:	e3530000 	cmp	r3, #0
  108e4c:	0affffee 	beq	108e0c <__call_exitprocs+0x74>
  108e50:	e5971188 	ldr	r1, [r7, #392]	; 0x188
  108e54:	e1a0241a 	lsl	r2, sl, r4
  108e58:	e5979004 	ldr	r9, [r7, #4]
  108e5c:	e1120001 	tst	r2, r1
  108e60:	0a000014 	beq	108eb8 <__call_exitprocs+0x120>
  108e64:	e597118c 	ldr	r1, [r7, #396]	; 0x18c
  108e68:	e1120001 	tst	r2, r1
  108e6c:	1a000013 	bne	108ec0 <__call_exitprocs+0x128>
  108e70:	e59d0008 	ldr	r0, [sp, #8]
  108e74:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
  108e78:	e12fff33 	blx	r3
  108e7c:	e5973004 	ldr	r3, [r7, #4]
  108e80:	e1530009 	cmp	r3, r9
  108e84:	1affffd1 	bne	108dd0 <__call_exitprocs+0x38>
  108e88:	e59b3000 	ldr	r3, [fp]
  108e8c:	e1530007 	cmp	r3, r7
  108e90:	1affffce 	bne	108dd0 <__call_exitprocs+0x38>
  108e94:	e2444001 	sub	r4, r4, #1
  108e98:	e2455004 	sub	r5, r5, #4
  108e9c:	e3740001 	cmn	r4, #1
  108ea0:	1affffdd 	bne	108e1c <__call_exitprocs+0x84>
  108ea4:	e59d2000 	ldr	r2, [sp]
  108ea8:	e3520000 	cmp	r2, #0
  108eac:	1a000006 	bne	108ecc <__call_exitprocs+0x134>
  108eb0:	e28dd014 	add	sp, sp, #20
  108eb4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  108eb8:	e12fff33 	blx	r3
  108ebc:	eaffffee 	b	108e7c <__call_exitprocs+0xe4>
  108ec0:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
  108ec4:	e12fff33 	blx	r3
  108ec8:	eaffffeb 	b	108e7c <__call_exitprocs+0xe4>
  108ecc:	e5973004 	ldr	r3, [r7, #4]
  108ed0:	e3530000 	cmp	r3, #0
  108ed4:	e5973000 	ldr	r3, [r7]
  108ed8:	1a000006 	bne	108ef8 <__call_exitprocs+0x160>
  108edc:	e3530000 	cmp	r3, #0
  108ee0:	0a000004 	beq	108ef8 <__call_exitprocs+0x160>
  108ee4:	e1a00007 	mov	r0, r7
  108ee8:	e58b3000 	str	r3, [fp]
  108eec:	e320f000 	nop	{0}
  108ef0:	e59b7000 	ldr	r7, [fp]
  108ef4:	eaffffb8 	b	108ddc <__call_exitprocs+0x44>
  108ef8:	e1a0b007 	mov	fp, r7
  108efc:	e1a07003 	mov	r7, r3
  108f00:	eaffffb5 	b	108ddc <__call_exitprocs+0x44>

00108f04 <atexit>:
  108f04:	e1a01000 	mov	r1, r0
  108f08:	e3a00000 	mov	r0, #0
  108f0c:	e1a02000 	mov	r2, r0
  108f10:	e1a03000 	mov	r3, r0
  108f14:	ea00150d 	b	10e350 <__register_exitproc>

00108f18 <quorem>:
  108f18:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  108f1c:	e1a0a000 	mov	sl, r0
  108f20:	e5916010 	ldr	r6, [r1, #16]
  108f24:	e1a05001 	mov	r5, r1
  108f28:	e5903010 	ldr	r3, [r0, #16]
  108f2c:	e1560003 	cmp	r6, r3
  108f30:	ca00006a 	bgt	1090e0 <quorem+0x1c8>
  108f34:	e2862003 	add	r2, r6, #3
  108f38:	e2814014 	add	r4, r1, #20
  108f3c:	e2808014 	add	r8, r0, #20
  108f40:	e2466001 	sub	r6, r6, #1
  108f44:	e1a02102 	lsl	r2, r2, #2
  108f48:	e0813002 	add	r3, r1, r2
  108f4c:	e0802002 	add	r2, r0, r2
  108f50:	e2839004 	add	r9, r3, #4
  108f54:	e5931004 	ldr	r1, [r3, #4]
  108f58:	e5920004 	ldr	r0, [r2, #4]
  108f5c:	e2811001 	add	r1, r1, #1
  108f60:	ebfff339 	bl	105c4c <__aeabi_uidiv>
  108f64:	e2507000 	subs	r7, r0, #0
  108f68:	0a00002d 	beq	109024 <quorem+0x10c>
  108f6c:	e3a0e000 	mov	lr, #0
  108f70:	e1a02008 	mov	r2, r8
  108f74:	e1a03004 	mov	r3, r4
  108f78:	e1a0000e 	mov	r0, lr
  108f7c:	e493c004 	ldr	ip, [r3], #4
  108f80:	e5921000 	ldr	r1, [r2]
  108f84:	e1590003 	cmp	r9, r3
  108f88:	e6ffb07c 	uxth	fp, ip
  108f8c:	e1a0c82c 	lsr	ip, ip, #16
  108f90:	e6f00071 	uxtah	r0, r0, r1
  108f94:	e02beb97 	mla	fp, r7, fp, lr
  108f98:	e00e0c97 	mul	lr, r7, ip
  108f9c:	e08ee82b 	add	lr, lr, fp, lsr #16
  108fa0:	e6ffc07b 	uxth	ip, fp
  108fa4:	e06cc000 	rsb	ip, ip, r0
  108fa8:	e6ff007e 	uxth	r0, lr
  108fac:	e1a0e82e 	lsr	lr, lr, #16
  108fb0:	e0600821 	rsb	r0, r0, r1, lsr #16
  108fb4:	e6ffb07c 	uxth	fp, ip
  108fb8:	e080084c 	add	r0, r0, ip, asr #16
  108fbc:	e18b1800 	orr	r1, fp, r0, lsl #16
  108fc0:	e1a00840 	asr	r0, r0, #16
  108fc4:	e4821004 	str	r1, [r2], #4
  108fc8:	2affffeb 	bcs	108f7c <quorem+0x64>
  108fcc:	e2863004 	add	r3, r6, #4
  108fd0:	e08a3103 	add	r3, sl, r3, lsl #2
  108fd4:	e5932004 	ldr	r2, [r3, #4]
  108fd8:	e3520000 	cmp	r2, #0
  108fdc:	1a000010 	bne	109024 <quorem+0x10c>
  108fe0:	e1580003 	cmp	r8, r3
  108fe4:	e2832004 	add	r2, r3, #4
  108fe8:	2a00000c 	bcs	109020 <quorem+0x108>
  108fec:	e5122004 	ldr	r2, [r2, #-4]
  108ff0:	e3520000 	cmp	r2, #0
  108ff4:	1a000009 	bne	109020 <quorem+0x108>
  108ff8:	e2433004 	sub	r3, r3, #4
  108ffc:	ea000002 	b	10900c <quorem+0xf4>
  109000:	e5922000 	ldr	r2, [r2]
  109004:	e3520000 	cmp	r2, #0
  109008:	1a000004 	bne	109020 <quorem+0x108>
  10900c:	e1580003 	cmp	r8, r3
  109010:	e1a02003 	mov	r2, r3
  109014:	e2466001 	sub	r6, r6, #1
  109018:	e2433004 	sub	r3, r3, #4
  10901c:	3afffff7 	bcc	109000 <quorem+0xe8>
  109020:	e58a6010 	str	r6, [sl, #16]
  109024:	e1a0000a 	mov	r0, sl
  109028:	e1a01005 	mov	r1, r5
  10902c:	eb000dc1 	bl	10c738 <__mcmp>
  109030:	e3500000 	cmp	r0, #0
  109034:	ba000027 	blt	1090d8 <quorem+0x1c0>
  109038:	e2877001 	add	r7, r7, #1
  10903c:	e1a03008 	mov	r3, r8
  109040:	e3a00000 	mov	r0, #0
  109044:	e4945004 	ldr	r5, [r4], #4
  109048:	e593c000 	ldr	ip, [r3]
  10904c:	e1590004 	cmp	r9, r4
  109050:	e6ff1075 	uxth	r1, r5
  109054:	e1a05825 	lsr	r5, r5, #16
  109058:	e6ffb07c 	uxth	fp, ip
  10905c:	e065c82c 	rsb	ip, r5, ip, lsr #16
  109060:	e061100b 	rsb	r1, r1, fp
  109064:	e0811000 	add	r1, r1, r0
  109068:	e08c2841 	add	r2, ip, r1, asr #16
  10906c:	e6ff1071 	uxth	r1, r1
  109070:	e1811802 	orr	r1, r1, r2, lsl #16
  109074:	e1a00842 	asr	r0, r2, #16
  109078:	e4831004 	str	r1, [r3], #4
  10907c:	2afffff0 	bcs	109044 <quorem+0x12c>
  109080:	e2863004 	add	r3, r6, #4
  109084:	e08a3103 	add	r3, sl, r3, lsl #2
  109088:	e5932004 	ldr	r2, [r3, #4]
  10908c:	e3520000 	cmp	r2, #0
  109090:	1a000010 	bne	1090d8 <quorem+0x1c0>
  109094:	e1580003 	cmp	r8, r3
  109098:	e2832004 	add	r2, r3, #4
  10909c:	2a00000c 	bcs	1090d4 <quorem+0x1bc>
  1090a0:	e5122004 	ldr	r2, [r2, #-4]
  1090a4:	e3520000 	cmp	r2, #0
  1090a8:	1a000009 	bne	1090d4 <quorem+0x1bc>
  1090ac:	e2433004 	sub	r3, r3, #4
  1090b0:	ea000002 	b	1090c0 <quorem+0x1a8>
  1090b4:	e5922000 	ldr	r2, [r2]
  1090b8:	e3520000 	cmp	r2, #0
  1090bc:	1a000004 	bne	1090d4 <quorem+0x1bc>
  1090c0:	e1580003 	cmp	r8, r3
  1090c4:	e1a02003 	mov	r2, r3
  1090c8:	e2466001 	sub	r6, r6, #1
  1090cc:	e2433004 	sub	r3, r3, #4
  1090d0:	3afffff7 	bcc	1090b4 <quorem+0x19c>
  1090d4:	e58a6010 	str	r6, [sl, #16]
  1090d8:	e1a00007 	mov	r0, r7
  1090dc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  1090e0:	e3a00000 	mov	r0, #0
  1090e4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

001090e8 <_dtoa_r>:
  1090e8:	e590c040 	ldr	ip, [r0, #64]	; 0x40
  1090ec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  1090f0:	ed2d8b02 	vpush	{d8}
  1090f4:	e35c0000 	cmp	ip, #0
  1090f8:	e24dd04c 	sub	sp, sp, #76	; 0x4c
  1090fc:	e1a04000 	mov	r4, r0
  109100:	e1a0a002 	mov	sl, r2
  109104:	e1a0b003 	mov	fp, r3
  109108:	e59d5084 	ldr	r5, [sp, #132]	; 0x84
  10910c:	0a000008 	beq	109134 <_dtoa_r+0x4c>
  109110:	e5903044 	ldr	r3, [r0, #68]	; 0x44
  109114:	e3a02001 	mov	r2, #1
  109118:	e1a0100c 	mov	r1, ip
  10911c:	e1a02312 	lsl	r2, r2, r3
  109120:	e58c2008 	str	r2, [ip, #8]
  109124:	e58c3004 	str	r3, [ip, #4]
  109128:	eb000bdb 	bl	10c09c <_Bfree>
  10912c:	e3a03000 	mov	r3, #0
  109130:	e5843040 	str	r3, [r4, #64]	; 0x40
  109134:	e25b6000 	subs	r6, fp, #0
  109138:	e3a02000 	mov	r2, #0
  10913c:	b3c66102 	biclt	r6, r6, #-2147483648	; 0x80000000
  109140:	e3472ff0 	movt	r2, #32752	; 0x7ff0
  109144:	b3a03001 	movlt	r3, #1
  109148:	a3a03000 	movge	r3, #0
  10914c:	b5853000 	strlt	r3, [r5]
  109150:	b1a0b006 	movlt	fp, r6
  109154:	a5853000 	strge	r3, [r5]
  109158:	e3a03000 	mov	r3, #0
  10915c:	e3473ff0 	movt	r3, #32752	; 0x7ff0
  109160:	e0063003 	and	r3, r6, r3
  109164:	e1530002 	cmp	r3, r2
  109168:	0a000011 	beq	1091b4 <_dtoa_r+0xcc>
  10916c:	ec4bab18 	vmov	d8, sl, fp
  109170:	eeb58b40 	vcmp.f64	d8, #0.0
  109174:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  109178:	1a00001c 	bne	1091f0 <_dtoa_r+0x108>
  10917c:	e59dc088 	ldr	ip, [sp, #136]	; 0x88
  109180:	e3a03001 	mov	r3, #1
  109184:	e35c0000 	cmp	ip, #0
  109188:	e59dc080 	ldr	ip, [sp, #128]	; 0x80
  10918c:	e58c3000 	str	r3, [ip]
  109190:	0a00008c 	beq	1093c8 <_dtoa_r+0x2e0>
  109194:	e59f33e4 	ldr	r3, [pc, #996]	; 109580 <_dtoa_r+0x498>
  109198:	e243a001 	sub	sl, r3, #1
  10919c:	e59dc088 	ldr	ip, [sp, #136]	; 0x88
  1091a0:	e58c3000 	str	r3, [ip]
  1091a4:	e1a0000a 	mov	r0, sl
  1091a8:	e28dd04c 	add	sp, sp, #76	; 0x4c
  1091ac:	ecbd8b02 	vpop	{d8}
  1091b0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  1091b4:	e59dc080 	ldr	ip, [sp, #128]	; 0x80
  1091b8:	e35a0000 	cmp	sl, #0
  1091bc:	e302370f 	movw	r3, #9999	; 0x270f
  1091c0:	1300a154 	movwne	sl, #340	; 0x154
  1091c4:	1340a011 	movtne	sl, #17
  1091c8:	e58c3000 	str	r3, [ip]
  1091cc:	0a000068 	beq	109374 <_dtoa_r+0x28c>
  1091d0:	e59dc088 	ldr	ip, [sp, #136]	; 0x88
  1091d4:	e35c0000 	cmp	ip, #0
  1091d8:	0afffff1 	beq	1091a4 <_dtoa_r+0xbc>
  1091dc:	e5da3003 	ldrb	r3, [sl, #3]
  1091e0:	e3530000 	cmp	r3, #0
  1091e4:	128a3008 	addne	r3, sl, #8
  1091e8:	028a3003 	addeq	r3, sl, #3
  1091ec:	eaffffea 	b	10919c <_dtoa_r+0xb4>
  1091f0:	e28d3044 	add	r3, sp, #68	; 0x44
  1091f4:	e1a00004 	mov	r0, r4
  1091f8:	e58d3000 	str	r3, [sp]
  1091fc:	e1a0200a 	mov	r2, sl
  109200:	e28d3040 	add	r3, sp, #64	; 0x40
  109204:	e58d3004 	str	r3, [sp, #4]
  109208:	e1a0300b 	mov	r3, fp
  10920c:	e7ea8a56 	ubfx	r8, r6, #20, #11
  109210:	eb000dfa 	bl	10ca00 <__d2b>
  109214:	e3580000 	cmp	r8, #0
  109218:	e1a07000 	mov	r7, r0
  10921c:	1a00005d 	bne	109398 <_dtoa_r+0x2b0>
  109220:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
  109224:	e3e03e41 	mvn	r3, #1040	; 0x410
  109228:	e59d8044 	ldr	r8, [sp, #68]	; 0x44
  10922c:	e0818008 	add	r8, r1, r8
  109230:	e1580003 	cmp	r8, r3
  109234:	ba000172 	blt	109804 <_dtoa_r+0x71c>
  109238:	e2882e41 	add	r2, r8, #1040	; 0x410
  10923c:	e30f3c0e 	movw	r3, #64526	; 0xfc0e
  109240:	e2822002 	add	r2, r2, #2
  109244:	e34f3fff 	movt	r3, #65535	; 0xffff
  109248:	e0683003 	rsb	r3, r8, r3
  10924c:	e1a0223a 	lsr	r2, sl, r2
  109250:	e1822316 	orr	r2, r2, r6, lsl r3
  109254:	ee082a10 	vmov	s16, r2
  109258:	eef80b48 	vcvt.f64.u32	d16, s16
  10925c:	e2488001 	sub	r8, r8, #1
  109260:	e3a0c001 	mov	ip, #1
  109264:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
  109268:	ec532b30 	vmov	r2, r3, d16
  10926c:	e243361f 	sub	r3, r3, #32505856	; 0x1f00000
  109270:	eeb78b08 	vmov.f64	d8, #120	; 0x78
  109274:	eddf0bbb 	vldr	d16, [pc, #748]	; 109568 <_dtoa_r+0x480>
  109278:	ec432b31 	vmov	d17, r2, r3
  10927c:	ee078a90 	vmov	s15, r8
  109280:	ee318bc8 	vsub.f64	d8, d17, d8
  109284:	eddf1bb9 	vldr	d17, [pc, #740]	; 109570 <_dtoa_r+0x488>
  109288:	ee480b21 	vmla.f64	d16, d8, d17
  10928c:	eddf1bb9 	vldr	d17, [pc, #740]	; 109578 <_dtoa_r+0x490>
  109290:	eef82be7 	vcvt.f64.s32	d18, s15
  109294:	ee420ba1 	vmla.f64	d16, d18, d17
  109298:	eefd7be0 	vcvt.s32.f64	s15, d16
  10929c:	eef50bc0 	vcmpe.f64	d16, #0.0
  1092a0:	edcd7a06 	vstr	s15, [sp, #24]
  1092a4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1092a8:	4a00014e 	bmi	1097e8 <_dtoa_r+0x700>
  1092ac:	e59dc018 	ldr	ip, [sp, #24]
  1092b0:	e35c0016 	cmp	ip, #22
  1092b4:	83a0c001 	movhi	ip, #1
  1092b8:	858dc038 	strhi	ip, [sp, #56]	; 0x38
  1092bc:	8a00000a 	bhi	1092ec <_dtoa_r+0x204>
  1092c0:	ec4bab31 	vmov	d17, sl, fp
  1092c4:	e30f3d40 	movw	r3, #64832	; 0xfd40
  1092c8:	e3403010 	movt	r3, #16
  1092cc:	e083318c 	add	r3, r3, ip, lsl #3
  1092d0:	edd30b00 	vldr	d16, [r3]
  1092d4:	eef40be1 	vcmpe.f64	d16, d17
  1092d8:	e3a03000 	mov	r3, #0
  1092dc:	e58d3038 	str	r3, [sp, #56]	; 0x38
  1092e0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1092e4:	c24cc001 	subgt	ip, ip, #1
  1092e8:	c58dc018 	strgt	ip, [sp, #24]
  1092ec:	e0688001 	rsb	r8, r8, r1
  1092f0:	e59dc018 	ldr	ip, [sp, #24]
  1092f4:	e2588001 	subs	r8, r8, #1
  1092f8:	42686000 	rsbmi	r6, r8, #0
  1092fc:	53a06000 	movpl	r6, #0
  109300:	43a08000 	movmi	r8, #0
  109304:	e35c0000 	cmp	ip, #0
  109308:	a58dc034 	strge	ip, [sp, #52]	; 0x34
  10930c:	a088800c 	addge	r8, r8, ip
  109310:	b59dc018 	ldrlt	ip, [sp, #24]
  109314:	a3a03000 	movge	r3, #0
  109318:	a58d3024 	strge	r3, [sp, #36]	; 0x24
  10931c:	b26c3000 	rsblt	r3, ip, #0
  109320:	b06c6006 	rsblt	r6, ip, r6
  109324:	b3a0c000 	movlt	ip, #0
  109328:	b58dc034 	strlt	ip, [sp, #52]	; 0x34
  10932c:	e59dc078 	ldr	ip, [sp, #120]	; 0x78
  109330:	b58d3024 	strlt	r3, [sp, #36]	; 0x24
  109334:	e35c0009 	cmp	ip, #9
  109338:	8a000025 	bhi	1093d4 <_dtoa_r+0x2ec>
  10933c:	e35c0005 	cmp	ip, #5
  109340:	c24cc004 	subgt	ip, ip, #4
  109344:	c58dc078 	strgt	ip, [sp, #120]	; 0x78
  109348:	e59dc078 	ldr	ip, [sp, #120]	; 0x78
  10934c:	c3a05000 	movgt	r5, #0
  109350:	d3a05001 	movle	r5, #1
  109354:	e24c3002 	sub	r3, ip, #2
  109358:	e3530003 	cmp	r3, #3
  10935c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  109360:	ea00001d 	b	1093dc <_dtoa_r+0x2f4>
  109364:	00109ac4 	.word	0x00109ac4
  109368:	00109b08 	.word	0x00109b08
  10936c:	00109890 	.word	0x00109890
  109370:	00109ad0 	.word	0x00109ad0
  109374:	e7f36056 	ubfx	r6, r6, #0, #20
  109378:	e3002148 	movw	r2, #328	; 0x148
  10937c:	e3560000 	cmp	r6, #0
  109380:	e3003154 	movw	r3, #340	; 0x154
  109384:	e3402011 	movt	r2, #17
  109388:	e3403011 	movt	r3, #17
  10938c:	01a0a002 	moveq	sl, r2
  109390:	11a0a003 	movne	sl, r3
  109394:	eaffff8d 	b	1091d0 <_dtoa_r+0xe8>
  109398:	e1a0300b 	mov	r3, fp
  10939c:	e3c304ff 	bic	r0, r3, #-16777216	; 0xff000000
  1093a0:	e3c0060f 	bic	r0, r0, #15728640	; 0xf00000
  1093a4:	e2488fff 	sub	r8, r8, #1020	; 0x3fc
  1093a8:	e38005ff 	orr	r0, r0, #1069547520	; 0x3fc00000
  1093ac:	e3a0c000 	mov	ip, #0
  1093b0:	e1a0200a 	mov	r2, sl
  1093b4:	e2488003 	sub	r8, r8, #3
  1093b8:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
  1093bc:	e3803603 	orr	r3, r0, #3145728	; 0x300000
  1093c0:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
  1093c4:	eaffffa9 	b	109270 <_dtoa_r+0x188>
  1093c8:	e300a144 	movw	sl, #324	; 0x144
  1093cc:	e340a011 	movt	sl, #17
  1093d0:	eaffff73 	b	1091a4 <_dtoa_r+0xbc>
  1093d4:	e3a0c000 	mov	ip, #0
  1093d8:	e58dc078 	str	ip, [sp, #120]	; 0x78
  1093dc:	e3a05000 	mov	r5, #0
  1093e0:	e1a00004 	mov	r0, r4
  1093e4:	e5845044 	str	r5, [r4, #68]	; 0x44
  1093e8:	e1a01005 	mov	r1, r5
  1093ec:	e3e0c000 	mvn	ip, #0
  1093f0:	e58dc030 	str	ip, [sp, #48]	; 0x30
  1093f4:	eb000b06 	bl	10c014 <_Balloc>
  1093f8:	e59d9030 	ldr	r9, [sp, #48]	; 0x30
  1093fc:	e3a0c001 	mov	ip, #1
  109400:	e58d507c 	str	r5, [sp, #124]	; 0x7c
  109404:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
  109408:	e58d0020 	str	r0, [sp, #32]
  10940c:	e5840040 	str	r0, [r4, #64]	; 0x40
  109410:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  109414:	e3530000 	cmp	r3, #0
  109418:	ba000059 	blt	109584 <_dtoa_r+0x49c>
  10941c:	e59dc018 	ldr	ip, [sp, #24]
  109420:	e35c000e 	cmp	ip, #14
  109424:	ca000056 	bgt	109584 <_dtoa_r+0x49c>
  109428:	e59de07c 	ldr	lr, [sp, #124]	; 0x7c
  10942c:	e30f3d40 	movw	r3, #64832	; 0xfd40
  109430:	e3403010 	movt	r3, #16
  109434:	e083318c 	add	r3, r3, ip, lsl #3
  109438:	edd31b00 	vldr	d17, [r3]
  10943c:	e1a02fae 	lsr	r2, lr, #31
  109440:	e3590000 	cmp	r9, #0
  109444:	c3a02000 	movgt	r2, #0
  109448:	d2022001 	andle	r2, r2, #1
  10944c:	e3520000 	cmp	r2, #0
  109450:	1a000274 	bne	109e28 <_dtoa_r+0xd40>
  109454:	ec4bab30 	vmov	d16, sl, fp
  109458:	e59dc020 	ldr	ip, [sp, #32]
  10945c:	e3590001 	cmp	r9, #1
  109460:	eec02ba1 	vdiv.f64	d18, d16, d17
  109464:	eefd7be2 	vcvt.s32.f64	s15, d18
  109468:	ee17ea90 	vmov	lr, s15
  10946c:	eef82be7 	vcvt.f64.s32	d18, s15
  109470:	ee420be1 	vmls.f64	d16, d18, d17
  109474:	e28e3030 	add	r3, lr, #48	; 0x30
  109478:	e4cc3001 	strb	r3, [ip], #1
  10947c:	e58dc028 	str	ip, [sp, #40]	; 0x28
  109480:	e1a0100c 	mov	r1, ip
  109484:	0a000017 	beq	1094e8 <_dtoa_r+0x400>
  109488:	eef23b04 	vmov.f64	d19, #36	; 0x24
  10948c:	ee600ba3 	vmul.f64	d16, d16, d19
  109490:	eef50b40 	vcmp.f64	d16, #0.0
  109494:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  109498:	0a00038f 	beq	10a2dc <_dtoa_r+0x11f4>
  10949c:	e59dc020 	ldr	ip, [sp, #32]
  1094a0:	e28c3002 	add	r3, ip, #2
  1094a4:	e08c9009 	add	r9, ip, r9
  1094a8:	ea000003 	b	1094bc <_dtoa_r+0x3d4>
  1094ac:	ee600ba3 	vmul.f64	d16, d16, d19
  1094b0:	eef50b40 	vcmp.f64	d16, #0.0
  1094b4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1094b8:	0a000301 	beq	10a0c4 <_dtoa_r+0xfdc>
  1094bc:	eec02ba1 	vdiv.f64	d18, d16, d17
  1094c0:	e1530009 	cmp	r3, r9
  1094c4:	e1a01003 	mov	r1, r3
  1094c8:	e2833001 	add	r3, r3, #1
  1094cc:	eefd7be2 	vcvt.s32.f64	s15, d18
  1094d0:	ee170a90 	vmov	r0, s15
  1094d4:	eef82be7 	vcvt.f64.s32	d18, s15
  1094d8:	ee420be1 	vmls.f64	d16, d18, d17
  1094dc:	e2802030 	add	r2, r0, #48	; 0x30
  1094e0:	e5432002 	strb	r2, [r3, #-2]
  1094e4:	1afffff0 	bne	1094ac <_dtoa_r+0x3c4>
  1094e8:	ee700ba0 	vadd.f64	d16, d16, d16
  1094ec:	eef41be0 	vcmpe.f64	d17, d16
  1094f0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1094f4:	4a000005 	bmi	109510 <_dtoa_r+0x428>
  1094f8:	eef41b60 	vcmp.f64	d17, d16
  1094fc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  109500:	1a0002ef 	bne	10a0c4 <_dtoa_r+0xfdc>
  109504:	ee17ea90 	vmov	lr, s15
  109508:	e31e0001 	tst	lr, #1
  10950c:	0a0002ec 	beq	10a0c4 <_dtoa_r+0xfdc>
  109510:	e5512001 	ldrb	r2, [r1, #-1]
  109514:	e59da020 	ldr	sl, [sp, #32]
  109518:	e59d0018 	ldr	r0, [sp, #24]
  10951c:	e59de028 	ldr	lr, [sp, #40]	; 0x28
  109520:	ea000001 	b	10952c <_dtoa_r+0x444>
  109524:	e5512002 	ldrb	r2, [r1, #-2]
  109528:	e1a01003 	mov	r1, r3
  10952c:	e3520039 	cmp	r2, #57	; 0x39
  109530:	e1a0c001 	mov	ip, r1
  109534:	e2413001 	sub	r3, r1, #1
  109538:	1a000328 	bne	10a1e0 <_dtoa_r+0x10f8>
  10953c:	e151000e 	cmp	r1, lr
  109540:	1afffff7 	bne	109524 <_dtoa_r+0x43c>
  109544:	e3a02030 	mov	r2, #48	; 0x30
  109548:	e5c32000 	strb	r2, [r3]
  10954c:	e3a02031 	mov	r2, #49	; 0x31
  109550:	e2800001 	add	r0, r0, #1
  109554:	e58dc020 	str	ip, [sp, #32]
  109558:	e58d0018 	str	r0, [sp, #24]
  10955c:	e5c32000 	strb	r2, [r3]
  109560:	ea000090 	b	1097a8 <_dtoa_r+0x6c0>
  109564:	e320f000 	nop	{0}
  109568:	8b60c8b3 	.word	0x8b60c8b3
  10956c:	3fc68a28 	.word	0x3fc68a28
  109570:	636f4361 	.word	0x636f4361
  109574:	3fd287a7 	.word	0x3fd287a7
  109578:	509f79fb 	.word	0x509f79fb
  10957c:	3fd34413 	.word	0x3fd34413
  109580:	00110145 	.word	0x00110145
  109584:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
  109588:	e35c0000 	cmp	ip, #0
  10958c:	1a0000a2 	bne	10981c <_dtoa_r+0x734>
  109590:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
  109594:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
  109598:	e58d6028 	str	r6, [sp, #40]	; 0x28
  10959c:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
  1095a0:	e3580000 	cmp	r8, #0
  1095a4:	c3510000 	cmpgt	r1, #0
  1095a8:	da000006 	ble	1095c8 <_dtoa_r+0x4e0>
  1095ac:	e1a03001 	mov	r3, r1
  1095b0:	e1530008 	cmp	r3, r8
  1095b4:	a1a03008 	movge	r3, r8
  1095b8:	e0636006 	rsb	r6, r3, r6
  1095bc:	e0638008 	rsb	r8, r3, r8
  1095c0:	e0631001 	rsb	r1, r3, r1
  1095c4:	e58d1028 	str	r1, [sp, #40]	; 0x28
  1095c8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  1095cc:	e3530000 	cmp	r3, #0
  1095d0:	da000019 	ble	10963c <_dtoa_r+0x554>
  1095d4:	e59de02c 	ldr	lr, [sp, #44]	; 0x2c
  1095d8:	e35e0000 	cmp	lr, #0
  1095dc:	0a0002b2 	beq	10a0ac <_dtoa_r+0xfc4>
  1095e0:	e35c0000 	cmp	ip, #0
  1095e4:	da000011 	ble	109630 <_dtoa_r+0x548>
  1095e8:	e1a0200c 	mov	r2, ip
  1095ec:	e1a01005 	mov	r1, r5
  1095f0:	e1a00004 	mov	r0, r4
  1095f4:	e58dc00c 	str	ip, [sp, #12]
  1095f8:	eb000bd1 	bl	10c544 <__pow5mult>
  1095fc:	e1a02007 	mov	r2, r7
  109600:	e1a05000 	mov	r5, r0
  109604:	e1a00004 	mov	r0, r4
  109608:	e1a01005 	mov	r1, r5
  10960c:	eb000b59 	bl	10c378 <__multiply>
  109610:	e1a01007 	mov	r1, r7
  109614:	e1a03000 	mov	r3, r0
  109618:	e1a00004 	mov	r0, r4
  10961c:	e58d3008 	str	r3, [sp, #8]
  109620:	eb000a9d 	bl	10c09c <_Bfree>
  109624:	e59d3008 	ldr	r3, [sp, #8]
  109628:	e59dc00c 	ldr	ip, [sp, #12]
  10962c:	e1a07003 	mov	r7, r3
  109630:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  109634:	e053200c 	subs	r2, r3, ip
  109638:	1a0002b7 	bne	10a11c <_dtoa_r+0x1034>
  10963c:	e1a00004 	mov	r0, r4
  109640:	e3a01001 	mov	r1, #1
  109644:	eb000b43 	bl	10c358 <__i2b>
  109648:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
  10964c:	e35c0000 	cmp	ip, #0
  109650:	e58d0010 	str	r0, [sp, #16]
  109654:	da000004 	ble	10966c <_dtoa_r+0x584>
  109658:	e1a00004 	mov	r0, r4
  10965c:	e59d1010 	ldr	r1, [sp, #16]
  109660:	e1a0200c 	mov	r2, ip
  109664:	eb000bb6 	bl	10c544 <__pow5mult>
  109668:	e58d0010 	str	r0, [sp, #16]
  10966c:	e59dc078 	ldr	ip, [sp, #120]	; 0x78
  109670:	e35c0001 	cmp	ip, #1
  109674:	da0001f6 	ble	109e54 <_dtoa_r+0xd6c>
  109678:	e3a0c000 	mov	ip, #0
  10967c:	e58dc024 	str	ip, [sp, #36]	; 0x24
  109680:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  109684:	e3530000 	cmp	r3, #0
  109688:	03a00001 	moveq	r0, #1
  10968c:	1a0001de 	bne	109e0c <_dtoa_r+0xd24>
  109690:	e0803008 	add	r3, r0, r8
  109694:	e213301f 	ands	r3, r3, #31
  109698:	0a000137 	beq	109b7c <_dtoa_r+0xa94>
  10969c:	e2632020 	rsb	r2, r3, #32
  1096a0:	e3520004 	cmp	r2, #4
  1096a4:	da000315 	ble	10a300 <_dtoa_r+0x1218>
  1096a8:	e263301c 	rsb	r3, r3, #28
  1096ac:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
  1096b0:	e0866003 	add	r6, r6, r3
  1096b4:	e0888003 	add	r8, r8, r3
  1096b8:	e08cc003 	add	ip, ip, r3
  1096bc:	e58dc028 	str	ip, [sp, #40]	; 0x28
  1096c0:	e3560000 	cmp	r6, #0
  1096c4:	da000004 	ble	1096dc <_dtoa_r+0x5f4>
  1096c8:	e1a01007 	mov	r1, r7
  1096cc:	e1a00004 	mov	r0, r4
  1096d0:	e1a02006 	mov	r2, r6
  1096d4:	eb000bd5 	bl	10c630 <__lshift>
  1096d8:	e1a07000 	mov	r7, r0
  1096dc:	e3580000 	cmp	r8, #0
  1096e0:	da000004 	ble	1096f8 <_dtoa_r+0x610>
  1096e4:	e1a00004 	mov	r0, r4
  1096e8:	e59d1010 	ldr	r1, [sp, #16]
  1096ec:	e1a02008 	mov	r2, r8
  1096f0:	eb000bce 	bl	10c630 <__lshift>
  1096f4:	e58d0010 	str	r0, [sp, #16]
  1096f8:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
  1096fc:	e3530000 	cmp	r3, #0
  109700:	1a0001a4 	bne	109d98 <_dtoa_r+0xcb0>
  109704:	e59dc078 	ldr	ip, [sp, #120]	; 0x78
  109708:	e35c0002 	cmp	ip, #2
  10970c:	d3a03000 	movle	r3, #0
  109710:	c3a03001 	movgt	r3, #1
  109714:	e3590000 	cmp	r9, #0
  109718:	c3a03000 	movgt	r3, #0
  10971c:	e3530000 	cmp	r3, #0
  109720:	0a000117 	beq	109b84 <_dtoa_r+0xa9c>
  109724:	e3590000 	cmp	r9, #0
  109728:	1a00010d 	bne	109b64 <_dtoa_r+0xa7c>
  10972c:	e3a02005 	mov	r2, #5
  109730:	e1a03009 	mov	r3, r9
  109734:	e59d1010 	ldr	r1, [sp, #16]
  109738:	e1a00004 	mov	r0, r4
  10973c:	eb000a5d 	bl	10c0b8 <__multadd>
  109740:	e58d0010 	str	r0, [sp, #16]
  109744:	e1a00007 	mov	r0, r7
  109748:	e59d1010 	ldr	r1, [sp, #16]
  10974c:	eb000bf9 	bl	10c738 <__mcmp>
  109750:	e3500000 	cmp	r0, #0
  109754:	da000102 	ble	109b64 <_dtoa_r+0xa7c>
  109758:	e59d3020 	ldr	r3, [sp, #32]
  10975c:	e3a06000 	mov	r6, #0
  109760:	e59dc018 	ldr	ip, [sp, #24]
  109764:	e3a02031 	mov	r2, #49	; 0x31
  109768:	e1a0a003 	mov	sl, r3
  10976c:	e28cc001 	add	ip, ip, #1
  109770:	e4c32001 	strb	r2, [r3], #1
  109774:	e58dc018 	str	ip, [sp, #24]
  109778:	e58d3020 	str	r3, [sp, #32]
  10977c:	e1a00004 	mov	r0, r4
  109780:	e59d1010 	ldr	r1, [sp, #16]
  109784:	eb000a44 	bl	10c09c <_Bfree>
  109788:	e3550000 	cmp	r5, #0
  10978c:	0a000005 	beq	1097a8 <_dtoa_r+0x6c0>
  109790:	e1560005 	cmp	r6, r5
  109794:	13560000 	cmpne	r6, #0
  109798:	1a000132 	bne	109c68 <_dtoa_r+0xb80>
  10979c:	e1a00004 	mov	r0, r4
  1097a0:	e1a01005 	mov	r1, r5
  1097a4:	eb000a3c 	bl	10c09c <_Bfree>
  1097a8:	e1a00004 	mov	r0, r4
  1097ac:	e1a01007 	mov	r1, r7
  1097b0:	eb000a39 	bl	10c09c <_Bfree>
  1097b4:	e59dc088 	ldr	ip, [sp, #136]	; 0x88
  1097b8:	e3a02000 	mov	r2, #0
  1097bc:	e35c0000 	cmp	ip, #0
  1097c0:	e59dc018 	ldr	ip, [sp, #24]
  1097c4:	e28c3001 	add	r3, ip, #1
  1097c8:	e59dc020 	ldr	ip, [sp, #32]
  1097cc:	e5cc2000 	strb	r2, [ip]
  1097d0:	e59dc080 	ldr	ip, [sp, #128]	; 0x80
  1097d4:	e58c3000 	str	r3, [ip]
  1097d8:	159dc020 	ldrne	ip, [sp, #32]
  1097dc:	159d0088 	ldrne	r0, [sp, #136]	; 0x88
  1097e0:	1580c000 	strne	ip, [r0]
  1097e4:	eafffe6e 	b	1091a4 <_dtoa_r+0xbc>
  1097e8:	eef81be7 	vcvt.f64.s32	d17, s15
  1097ec:	eef41b60 	vcmp.f64	d17, d16
  1097f0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1097f4:	1e17ca90 	vmovne	ip, s15
  1097f8:	124cc001 	subne	ip, ip, #1
  1097fc:	158dc018 	strne	ip, [sp, #24]
  109800:	eafffea9 	b	1092ac <_dtoa_r+0x1c4>
  109804:	e30f3bee 	movw	r3, #64494	; 0xfbee
  109808:	e34f3fff 	movt	r3, #65535	; 0xffff
  10980c:	e0683003 	rsb	r3, r8, r3
  109810:	e1a0331a 	lsl	r3, sl, r3
  109814:	ee083a10 	vmov	s16, r3
  109818:	eafffe8e 	b	109258 <_dtoa_r+0x170>
  10981c:	e59dc078 	ldr	ip, [sp, #120]	; 0x78
  109820:	e35c0001 	cmp	ip, #1
  109824:	da00024b 	ble	10a158 <_dtoa_r+0x1070>
  109828:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
  10982c:	e2493001 	sub	r3, r9, #1
  109830:	e15c0003 	cmp	ip, r3
  109834:	a063c00c 	rsbge	ip, r3, ip
  109838:	b59dc024 	ldrlt	ip, [sp, #36]	; 0x24
  10983c:	b59de034 	ldrlt	lr, [sp, #52]	; 0x34
  109840:	b06c2003 	rsblt	r2, ip, r3
  109844:	b58d3024 	strlt	r3, [sp, #36]	; 0x24
  109848:	b08ee002 	addlt	lr, lr, r2
  10984c:	b3a0c000 	movlt	ip, #0
  109850:	b58de034 	strlt	lr, [sp, #52]	; 0x34
  109854:	e3590000 	cmp	r9, #0
  109858:	b0690006 	rsblt	r0, r9, r6
  10985c:	a58d6028 	strge	r6, [sp, #40]	; 0x28
  109860:	b3a03000 	movlt	r3, #0
  109864:	a1a03009 	movge	r3, r9
  109868:	b58d0028 	strlt	r0, [sp, #40]	; 0x28
  10986c:	e1a00004 	mov	r0, r4
  109870:	e3a01001 	mov	r1, #1
  109874:	e58dc00c 	str	ip, [sp, #12]
  109878:	e0866003 	add	r6, r6, r3
  10987c:	e0888003 	add	r8, r8, r3
  109880:	eb000ab4 	bl	10c358 <__i2b>
  109884:	e59dc00c 	ldr	ip, [sp, #12]
  109888:	e1a05000 	mov	r5, r0
  10988c:	eaffff42 	b	10959c <_dtoa_r+0x4b4>
  109890:	e3a0c001 	mov	ip, #1
  109894:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
  109898:	e59de07c 	ldr	lr, [sp, #124]	; 0x7c
  10989c:	e35e0000 	cmp	lr, #0
  1098a0:	da0001f4 	ble	10a078 <_dtoa_r+0xf90>
  1098a4:	e35e000e 	cmp	lr, #14
  1098a8:	83a05000 	movhi	r5, #0
  1098ac:	92055001 	andls	r5, r5, #1
  1098b0:	e1a0c00e 	mov	ip, lr
  1098b4:	e1a0900e 	mov	r9, lr
  1098b8:	e58de030 	str	lr, [sp, #48]	; 0x30
  1098bc:	e35c0017 	cmp	ip, #23
  1098c0:	e3a01000 	mov	r1, #0
  1098c4:	e5841044 	str	r1, [r4, #68]	; 0x44
  1098c8:	9a000008 	bls	1098f0 <_dtoa_r+0x808>
  1098cc:	e3a02001 	mov	r2, #1
  1098d0:	e3a03004 	mov	r3, #4
  1098d4:	e1a03083 	lsl	r3, r3, #1
  1098d8:	e1a01002 	mov	r1, r2
  1098dc:	e2830014 	add	r0, r3, #20
  1098e0:	e2822001 	add	r2, r2, #1
  1098e4:	e150000c 	cmp	r0, ip
  1098e8:	9afffff9 	bls	1098d4 <_dtoa_r+0x7ec>
  1098ec:	e5841044 	str	r1, [r4, #68]	; 0x44
  1098f0:	e1a00004 	mov	r0, r4
  1098f4:	eb0009c6 	bl	10c014 <_Balloc>
  1098f8:	e3550000 	cmp	r5, #0
  1098fc:	e58d0020 	str	r0, [sp, #32]
  109900:	e5840040 	str	r0, [r4, #64]	; 0x40
  109904:	0afffec1 	beq	109410 <_dtoa_r+0x328>
  109908:	e59dc018 	ldr	ip, [sp, #24]
  10990c:	ec4bab35 	vmov	d21, sl, fp
  109910:	e35c0000 	cmp	ip, #0
  109914:	da0000d9 	ble	109c80 <_dtoa_r+0xb98>
  109918:	e1a0324c 	asr	r3, ip, #4
  10991c:	e20c100f 	and	r1, ip, #15
  109920:	e3130010 	tst	r3, #16
  109924:	e30f2d40 	movw	r2, #64832	; 0xfd40
  109928:	e3402010 	movt	r2, #16
  10992c:	1203300f 	andne	r3, r3, #15
  109930:	e0822181 	add	r2, r2, r1, lsl #3
  109934:	0ef01b65 	vmoveq.f64	d17, d21
  109938:	edd20b00 	vldr	d16, [r2]
  10993c:	13a01003 	movne	r1, #3
  109940:	130f2e30 	movwne	r2, #65072	; 0xfe30
  109944:	03a01002 	moveq	r1, #2
  109948:	13402010 	movtne	r2, #16
  10994c:	1dd21b08 	vldrne	d17, [r2, #32]
  109950:	1dcd1b04 	vstrne	d17, [sp, #16]
  109954:	1ec51ba1 	vdivne.f64	d17, d21, d17
  109958:	e3530000 	cmp	r3, #0
  10995c:	0a000008 	beq	109984 <_dtoa_r+0x89c>
  109960:	e30f2e30 	movw	r2, #65072	; 0xfe30
  109964:	e3402010 	movt	r2, #16
  109968:	e3130001 	tst	r3, #1
  10996c:	1dd22b00 	vldrne	d18, [r2]
  109970:	12811001 	addne	r1, r1, #1
  109974:	e2822008 	add	r2, r2, #8
  109978:	1e600ba2 	vmulne.f64	d16, d16, d18
  10997c:	e1b030c3 	asrs	r3, r3, #1
  109980:	1afffff8 	bne	109968 <_dtoa_r+0x880>
  109984:	eec10ba0 	vdiv.f64	d16, d17, d16
  109988:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
  10998c:	e3530000 	cmp	r3, #0
  109990:	0a000003 	beq	1099a4 <_dtoa_r+0x8bc>
  109994:	eef71b00 	vmov.f64	d17, #112	; 0x70
  109998:	eef40be1 	vcmpe.f64	d16, d17
  10999c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1099a0:	4a0001ca 	bmi	10a0d0 <_dtoa_r+0xfe8>
  1099a4:	eef11b0c 	vmov.f64	d17, #28
  1099a8:	e3590000 	cmp	r9, #0
  1099ac:	ee071a90 	vmov	s15, r1
  1099b0:	eef82be7 	vcvt.f64.s32	d18, s15
  1099b4:	eef03b61 	vmov.f64	d19, d17
  1099b8:	ee423ba0 	vmla.f64	d19, d18, d16
  1099bc:	ec5bab33 	vmov	sl, fp, d19
  1099c0:	e24bb50d 	sub	fp, fp, #54525952	; 0x3400000
  1099c4:	0a000059 	beq	109b30 <_dtoa_r+0xa48>
  1099c8:	e59d0018 	ldr	r0, [sp, #24]
  1099cc:	e1a0c009 	mov	ip, r9
  1099d0:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
  1099d4:	e3510000 	cmp	r1, #0
  1099d8:	0a0000c5 	beq	109cf4 <_dtoa_r+0xc0c>
  1099dc:	eef63b00 	vmov.f64	d19, #96	; 0x60
  1099e0:	e30f3d40 	movw	r3, #64832	; 0xfd40
  1099e4:	e3403010 	movt	r3, #16
  1099e8:	ec4bab31 	vmov	d17, sl, fp
  1099ec:	e083318c 	add	r3, r3, ip, lsl #3
  1099f0:	ed532b02 	vldr	d18, [r3, #-8]
  1099f4:	e59d2020 	ldr	r2, [sp, #32]
  1099f8:	e58d2028 	str	r2, [sp, #40]	; 0x28
  1099fc:	e59de028 	ldr	lr, [sp, #40]	; 0x28
  109a00:	eec33ba2 	vdiv.f64	d19, d19, d18
  109a04:	eefd7be0 	vcvt.s32.f64	s15, d16
  109a08:	ee173a90 	vmov	r3, s15
  109a0c:	eef82be7 	vcvt.f64.s32	d18, s15
  109a10:	ee731be1 	vsub.f64	d17, d19, d17
  109a14:	ee700be2 	vsub.f64	d16, d16, d18
  109a18:	e2832030 	add	r2, r3, #48	; 0x30
  109a1c:	e6ef2072 	uxtb	r2, r2
  109a20:	e4ce2001 	strb	r2, [lr], #1
  109a24:	e58de028 	str	lr, [sp, #40]	; 0x28
  109a28:	e1a0100e 	mov	r1, lr
  109a2c:	eef41be0 	vcmpe.f64	d17, d16
  109a30:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  109a34:	ca00022c 	bgt	10a2ec <_dtoa_r+0x1204>
  109a38:	eef74b00 	vmov.f64	d20, #112	; 0x70
  109a3c:	ee742be0 	vsub.f64	d18, d20, d16
  109a40:	eef41be2 	vcmpe.f64	d17, d18
  109a44:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  109a48:	ca0001cd 	bgt	10a184 <_dtoa_r+0x109c>
  109a4c:	e35c0001 	cmp	ip, #1
  109a50:	da000088 	ble	109c78 <_dtoa_r+0xb90>
  109a54:	e59d1020 	ldr	r1, [sp, #32]
  109a58:	e1a0300e 	mov	r3, lr
  109a5c:	eef22b04 	vmov.f64	d18, #36	; 0x24
  109a60:	e081c00c 	add	ip, r1, ip
  109a64:	ea000005 	b	109a80 <_dtoa_r+0x998>
  109a68:	ee743be0 	vsub.f64	d19, d20, d16
  109a6c:	eef43be1 	vcmpe.f64	d19, d17
  109a70:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  109a74:	4a0001c2 	bmi	10a184 <_dtoa_r+0x109c>
  109a78:	e153000c 	cmp	r3, ip
  109a7c:	0a00007d 	beq	109c78 <_dtoa_r+0xb90>
  109a80:	ee600ba2 	vmul.f64	d16, d16, d18
  109a84:	eefd7be0 	vcvt.s32.f64	s15, d16
  109a88:	ee17ea90 	vmov	lr, s15
  109a8c:	ee611ba2 	vmul.f64	d17, d17, d18
  109a90:	eef83be7 	vcvt.f64.s32	d19, s15
  109a94:	e28e2030 	add	r2, lr, #48	; 0x30
  109a98:	e6ef2072 	uxtb	r2, r2
  109a9c:	e4c32001 	strb	r2, [r3], #1
  109aa0:	e1a01003 	mov	r1, r3
  109aa4:	ee700be3 	vsub.f64	d16, d16, d19
  109aa8:	eef40be1 	vcmpe.f64	d16, d17
  109aac:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  109ab0:	5affffec 	bpl	109a68 <_dtoa_r+0x980>
  109ab4:	e59da020 	ldr	sl, [sp, #32]
  109ab8:	e58d0018 	str	r0, [sp, #24]
  109abc:	e58d3020 	str	r3, [sp, #32]
  109ac0:	eaffff38 	b	1097a8 <_dtoa_r+0x6c0>
  109ac4:	e3a0c000 	mov	ip, #0
  109ac8:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
  109acc:	eaffff71 	b	109898 <_dtoa_r+0x7b0>
  109ad0:	e3a0c001 	mov	ip, #1
  109ad4:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
  109ad8:	e59de07c 	ldr	lr, [sp, #124]	; 0x7c
  109adc:	e59dc018 	ldr	ip, [sp, #24]
  109ae0:	e08ec00c 	add	ip, lr, ip
  109ae4:	e58dc030 	str	ip, [sp, #48]	; 0x30
  109ae8:	e28cc001 	add	ip, ip, #1
  109aec:	e35c0000 	cmp	ip, #0
  109af0:	da000168 	ble	10a098 <_dtoa_r+0xfb0>
  109af4:	e35c000e 	cmp	ip, #14
  109af8:	83a05000 	movhi	r5, #0
  109afc:	92055001 	andls	r5, r5, #1
  109b00:	e1a0900c 	mov	r9, ip
  109b04:	eaffff6c 	b	1098bc <_dtoa_r+0x7d4>
  109b08:	e3a0c000 	mov	ip, #0
  109b0c:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
  109b10:	eafffff0 	b	109ad8 <_dtoa_r+0x9f0>
  109b14:	eef11b0c 	vmov.f64	d17, #28
  109b18:	ee071a90 	vmov	s15, r1
  109b1c:	eef82be7 	vcvt.f64.s32	d18, s15
  109b20:	eef03b61 	vmov.f64	d19, d17
  109b24:	ee423ba0 	vmla.f64	d19, d18, d16
  109b28:	ec5bab33 	vmov	sl, fp, d19
  109b2c:	e24bb50d 	sub	fp, fp, #54525952	; 0x3400000
  109b30:	eef12b04 	vmov.f64	d18, #20
  109b34:	ec4bab31 	vmov	d17, sl, fp
  109b38:	ee700be2 	vsub.f64	d16, d16, d18
  109b3c:	eef40be1 	vcmpe.f64	d16, d17
  109b40:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  109b44:	ca000066 	bgt	109ce4 <_dtoa_r+0xbfc>
  109b48:	eef11b61 	vneg.f64	d17, d17
  109b4c:	eef40be1 	vcmpe.f64	d16, d17
  109b50:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  109b54:	5a000047 	bpl	109c78 <_dtoa_r+0xb90>
  109b58:	e3a0c000 	mov	ip, #0
  109b5c:	e58dc010 	str	ip, [sp, #16]
  109b60:	e1a0500c 	mov	r5, ip
  109b64:	e59dc07c 	ldr	ip, [sp, #124]	; 0x7c
  109b68:	e3a06000 	mov	r6, #0
  109b6c:	e59da020 	ldr	sl, [sp, #32]
  109b70:	e1e0c00c 	mvn	ip, ip
  109b74:	e58dc018 	str	ip, [sp, #24]
  109b78:	eafffeff 	b	10977c <_dtoa_r+0x694>
  109b7c:	e3a0301c 	mov	r3, #28
  109b80:	eafffec9 	b	1096ac <_dtoa_r+0x5c4>
  109b84:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
  109b88:	e35c0000 	cmp	ip, #0
  109b8c:	1a0000d0 	bne	109ed4 <_dtoa_r+0xdec>
  109b90:	e3a06000 	mov	r6, #0
  109b94:	e59d8010 	ldr	r8, [sp, #16]
  109b98:	e59da020 	ldr	sl, [sp, #32]
  109b9c:	ea000001 	b	109ba8 <_dtoa_r+0xac0>
  109ba0:	eb000944 	bl	10c0b8 <__multadd>
  109ba4:	e1a07000 	mov	r7, r0
  109ba8:	e1a01008 	mov	r1, r8
  109bac:	e1a00007 	mov	r0, r7
  109bb0:	ebfffcd8 	bl	108f18 <quorem>
  109bb4:	e1a01007 	mov	r1, r7
  109bb8:	e3a0200a 	mov	r2, #10
  109bbc:	e3a03000 	mov	r3, #0
  109bc0:	e280b030 	add	fp, r0, #48	; 0x30
  109bc4:	e7cab006 	strb	fp, [sl, r6]
  109bc8:	e2866001 	add	r6, r6, #1
  109bcc:	e1a00004 	mov	r0, r4
  109bd0:	e1560009 	cmp	r6, r9
  109bd4:	bafffff1 	blt	109ba0 <_dtoa_r+0xab8>
  109bd8:	e59dc020 	ldr	ip, [sp, #32]
  109bdc:	e3a06000 	mov	r6, #0
  109be0:	e3590001 	cmp	r9, #1
  109be4:	a08cc009 	addge	ip, ip, r9
  109be8:	b28cc001 	addlt	ip, ip, #1
  109bec:	e1a0900c 	mov	r9, ip
  109bf0:	e1a01007 	mov	r1, r7
  109bf4:	e3a02001 	mov	r2, #1
  109bf8:	e1a00004 	mov	r0, r4
  109bfc:	eb000a8b 	bl	10c630 <__lshift>
  109c00:	e59d1010 	ldr	r1, [sp, #16]
  109c04:	e1a07000 	mov	r7, r0
  109c08:	eb000aca 	bl	10c738 <__mcmp>
  109c0c:	e3500000 	cmp	r0, #0
  109c10:	da000176 	ble	10a1f0 <_dtoa_r+0x1108>
  109c14:	e5593001 	ldrb	r3, [r9, #-1]
  109c18:	e59dc020 	ldr	ip, [sp, #32]
  109c1c:	e28cc001 	add	ip, ip, #1
  109c20:	e58dc028 	str	ip, [sp, #40]	; 0x28
  109c24:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
  109c28:	ea000001 	b	109c34 <_dtoa_r+0xb4c>
  109c2c:	e5593002 	ldrb	r3, [r9, #-2]
  109c30:	e1a09002 	mov	r9, r2
  109c34:	e3530039 	cmp	r3, #57	; 0x39
  109c38:	e2492001 	sub	r2, r9, #1
  109c3c:	1a000186 	bne	10a25c <_dtoa_r+0x1174>
  109c40:	e1590001 	cmp	r9, r1
  109c44:	1afffff8 	bne	109c2c <_dtoa_r+0xb44>
  109c48:	e59dc018 	ldr	ip, [sp, #24]
  109c4c:	e3a03031 	mov	r3, #49	; 0x31
  109c50:	e59da020 	ldr	sl, [sp, #32]
  109c54:	e28cc001 	add	ip, ip, #1
  109c58:	e58dc018 	str	ip, [sp, #24]
  109c5c:	e5c23000 	strb	r3, [r2]
  109c60:	e58d9020 	str	r9, [sp, #32]
  109c64:	eafffec4 	b	10977c <_dtoa_r+0x694>
  109c68:	e1a00004 	mov	r0, r4
  109c6c:	e1a01006 	mov	r1, r6
  109c70:	eb000909 	bl	10c09c <_Bfree>
  109c74:	eafffec8 	b	10979c <_dtoa_r+0x6b4>
  109c78:	ec5bab35 	vmov	sl, fp, d21
  109c7c:	eafffde3 	b	109410 <_dtoa_r+0x328>
  109c80:	e59dc018 	ldr	ip, [sp, #24]
  109c84:	e26c3000 	rsb	r3, ip, #0
  109c88:	e3530000 	cmp	r3, #0
  109c8c:	0ef00b65 	vmoveq.f64	d16, d21
  109c90:	03a01002 	moveq	r1, #2
  109c94:	0affff3b 	beq	109988 <_dtoa_r+0x8a0>
  109c98:	e203100f 	and	r1, r3, #15
  109c9c:	e1b03243 	asrs	r3, r3, #4
  109ca0:	e30f2d40 	movw	r2, #64832	; 0xfd40
  109ca4:	e3402010 	movt	r2, #16
  109ca8:	e0822181 	add	r2, r2, r1, lsl #3
  109cac:	edd20b00 	vldr	d16, [r2]
  109cb0:	ee650ba0 	vmul.f64	d16, d21, d16
  109cb4:	0a000182 	beq	10a2c4 <_dtoa_r+0x11dc>
  109cb8:	e30f2e30 	movw	r2, #65072	; 0xfe30
  109cbc:	e3402010 	movt	r2, #16
  109cc0:	e3a01002 	mov	r1, #2
  109cc4:	e3130001 	tst	r3, #1
  109cc8:	1dd21b00 	vldrne	d17, [r2]
  109ccc:	12811001 	addne	r1, r1, #1
  109cd0:	e2822008 	add	r2, r2, #8
  109cd4:	1e600ba1 	vmulne.f64	d16, d16, d17
  109cd8:	e1b030c3 	asrs	r3, r3, #1
  109cdc:	1afffff8 	bne	109cc4 <_dtoa_r+0xbdc>
  109ce0:	eaffff28 	b	109988 <_dtoa_r+0x8a0>
  109ce4:	e3a0c000 	mov	ip, #0
  109ce8:	e58dc010 	str	ip, [sp, #16]
  109cec:	e1a0500c 	mov	r5, ip
  109cf0:	eafffe98 	b	109758 <_dtoa_r+0x670>
  109cf4:	eefd7be0 	vcvt.s32.f64	s15, d16
  109cf8:	e59d1020 	ldr	r1, [sp, #32]
  109cfc:	e24c2001 	sub	r2, ip, #1
  109d00:	ec4bab32 	vmov	d18, sl, fp
  109d04:	e35c0001 	cmp	ip, #1
  109d08:	e30f3d40 	movw	r3, #64832	; 0xfd40
  109d0c:	e3403010 	movt	r3, #16
  109d10:	e0833182 	add	r3, r3, r2, lsl #3
  109d14:	edd33b00 	vldr	d19, [r3]
  109d18:	ee17ea90 	vmov	lr, s15
  109d1c:	eef81be7 	vcvt.f64.s32	d17, s15
  109d20:	ee633ba2 	vmul.f64	d19, d19, d18
  109d24:	e28e3030 	add	r3, lr, #48	; 0x30
  109d28:	e4c13001 	strb	r3, [r1], #1
  109d2c:	e58d1028 	str	r1, [sp, #40]	; 0x28
  109d30:	ee700be1 	vsub.f64	d16, d16, d17
  109d34:	0a00000f 	beq	109d78 <_dtoa_r+0xc90>
  109d38:	e59d1020 	ldr	r1, [sp, #32]
  109d3c:	e2413001 	sub	r3, r1, #1
  109d40:	e083c00c 	add	ip, r3, ip
  109d44:	e1a03001 	mov	r3, r1
  109d48:	eef22b04 	vmov.f64	d18, #36	; 0x24
  109d4c:	ee600ba2 	vmul.f64	d16, d16, d18
  109d50:	eefd7be0 	vcvt.s32.f64	s15, d16
  109d54:	ee17ea90 	vmov	lr, s15
  109d58:	eef81be7 	vcvt.f64.s32	d17, s15
  109d5c:	ee700be1 	vsub.f64	d16, d16, d17
  109d60:	e28e1030 	add	r1, lr, #48	; 0x30
  109d64:	e5e31001 	strb	r1, [r3, #1]!
  109d68:	e153000c 	cmp	r3, ip
  109d6c:	1afffff6 	bne	109d4c <_dtoa_r+0xc64>
  109d70:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
  109d74:	e08c1002 	add	r1, ip, r2
  109d78:	eef61b00 	vmov.f64	d17, #96	; 0x60
  109d7c:	ee732ba1 	vadd.f64	d18, d19, d17
  109d80:	eef42be0 	vcmpe.f64	d18, d16
  109d84:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  109d88:	5a0000e8 	bpl	10a130 <_dtoa_r+0x1048>
  109d8c:	e5512001 	ldrb	r2, [r1, #-1]
  109d90:	e59da020 	ldr	sl, [sp, #32]
  109d94:	eafffde0 	b	10951c <_dtoa_r+0x434>
  109d98:	e1a00007 	mov	r0, r7
  109d9c:	e59d1010 	ldr	r1, [sp, #16]
  109da0:	eb000a64 	bl	10c738 <__mcmp>
  109da4:	e3500000 	cmp	r0, #0
  109da8:	aafffe55 	bge	109704 <_dtoa_r+0x61c>
  109dac:	e1a01007 	mov	r1, r7
  109db0:	e1a00004 	mov	r0, r4
  109db4:	e3a0200a 	mov	r2, #10
  109db8:	e3a03000 	mov	r3, #0
  109dbc:	eb0008bd 	bl	10c0b8 <__multadd>
  109dc0:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
  109dc4:	e35c0000 	cmp	ip, #0
  109dc8:	e59dc018 	ldr	ip, [sp, #24]
  109dcc:	e24cc001 	sub	ip, ip, #1
  109dd0:	e58dc018 	str	ip, [sp, #24]
  109dd4:	e1a07000 	mov	r7, r0
  109dd8:	1a00002d 	bne	109e94 <_dtoa_r+0xdac>
  109ddc:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
  109de0:	e59de078 	ldr	lr, [sp, #120]	; 0x78
  109de4:	e35c0000 	cmp	ip, #0
  109de8:	c3a03000 	movgt	r3, #0
  109dec:	d3a03001 	movle	r3, #1
  109df0:	e35e0002 	cmp	lr, #2
  109df4:	d3a03000 	movle	r3, #0
  109df8:	e3530000 	cmp	r3, #0
  109dfc:	01a0900c 	moveq	r9, ip
  109e00:	0affff62 	beq	109b90 <_dtoa_r+0xaa8>
  109e04:	e59d9030 	ldr	r9, [sp, #48]	; 0x30
  109e08:	eafffe45 	b	109724 <_dtoa_r+0x63c>
  109e0c:	e59dc010 	ldr	ip, [sp, #16]
  109e10:	e59c3010 	ldr	r3, [ip, #16]
  109e14:	e08c3103 	add	r3, ip, r3, lsl #2
  109e18:	e5930010 	ldr	r0, [r3, #16]
  109e1c:	eb000914 	bl	10c274 <__hi0bits>
  109e20:	e2600020 	rsb	r0, r0, #32
  109e24:	eafffe19 	b	109690 <_dtoa_r+0x5a8>
  109e28:	e3590000 	cmp	r9, #0
  109e2c:	1affff49 	bne	109b58 <_dtoa_r+0xa70>
  109e30:	eef10b04 	vmov.f64	d16, #20
  109e34:	e58d9010 	str	r9, [sp, #16]
  109e38:	e1a05009 	mov	r5, r9
  109e3c:	ee611ba0 	vmul.f64	d17, d17, d16
  109e40:	ec4bab30 	vmov	d16, sl, fp
  109e44:	eef41be0 	vcmpe.f64	d17, d16
  109e48:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  109e4c:	aaffff44 	bge	109b64 <_dtoa_r+0xa7c>
  109e50:	eafffe40 	b	109758 <_dtoa_r+0x670>
  109e54:	e35a0000 	cmp	sl, #0
  109e58:	1afffe06 	bne	109678 <_dtoa_r+0x590>
  109e5c:	e3cb24ff 	bic	r2, fp, #-16777216	; 0xff000000
  109e60:	e3c2260f 	bic	r2, r2, #15728640	; 0xf00000
  109e64:	e3520000 	cmp	r2, #0
  109e68:	158da024 	strne	sl, [sp, #36]	; 0x24
  109e6c:	1afffe03 	bne	109680 <_dtoa_r+0x598>
  109e70:	e3472ff0 	movt	r2, #32752	; 0x7ff0
  109e74:	e00b2002 	and	r2, fp, r2
  109e78:	e3520000 	cmp	r2, #0
  109e7c:	058d2024 	streq	r2, [sp, #36]	; 0x24
  109e80:	13a0c001 	movne	ip, #1
  109e84:	12866001 	addne	r6, r6, #1
  109e88:	12888001 	addne	r8, r8, #1
  109e8c:	158dc024 	strne	ip, [sp, #36]	; 0x24
  109e90:	eafffdfa 	b	109680 <_dtoa_r+0x598>
  109e94:	e3a03000 	mov	r3, #0
  109e98:	e1a01005 	mov	r1, r5
  109e9c:	e1a00004 	mov	r0, r4
  109ea0:	e3a0200a 	mov	r2, #10
  109ea4:	eb000883 	bl	10c0b8 <__multadd>
  109ea8:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
  109eac:	e59de078 	ldr	lr, [sp, #120]	; 0x78
  109eb0:	e35c0000 	cmp	ip, #0
  109eb4:	c3a03000 	movgt	r3, #0
  109eb8:	d3a03001 	movle	r3, #1
  109ebc:	e35e0002 	cmp	lr, #2
  109ec0:	d3a03000 	movle	r3, #0
  109ec4:	e3530000 	cmp	r3, #0
  109ec8:	e1a05000 	mov	r5, r0
  109ecc:	01a0900c 	moveq	r9, ip
  109ed0:	1affffcb 	bne	109e04 <_dtoa_r+0xd1c>
  109ed4:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
  109ed8:	e35c0000 	cmp	ip, #0
  109edc:	da000004 	ble	109ef4 <_dtoa_r+0xe0c>
  109ee0:	e1a01005 	mov	r1, r5
  109ee4:	e1a00004 	mov	r0, r4
  109ee8:	e1a0200c 	mov	r2, ip
  109eec:	eb0009cf 	bl	10c630 <__lshift>
  109ef0:	e1a05000 	mov	r5, r0
  109ef4:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
  109ef8:	e35c0000 	cmp	ip, #0
  109efc:	01a08005 	moveq	r8, r5
  109f00:	1a0000c5 	bne	10a21c <_dtoa_r+0x1134>
  109f04:	e59dc020 	ldr	ip, [sp, #32]
  109f08:	e1a06005 	mov	r6, r5
  109f0c:	e28cc001 	add	ip, ip, #1
  109f10:	e58dc028 	str	ip, [sp, #40]	; 0x28
  109f14:	e59dc020 	ldr	ip, [sp, #32]
  109f18:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
  109f1c:	e08c9009 	add	r9, ip, r9
  109f20:	e20ac001 	and	ip, sl, #1
  109f24:	e58d902c 	str	r9, [sp, #44]	; 0x2c
  109f28:	e58dc01c 	str	ip, [sp, #28]
  109f2c:	ea00002e 	b	109fec <_dtoa_r+0xf04>
  109f30:	e1a00004 	mov	r0, r4
  109f34:	e1a01002 	mov	r1, r2
  109f38:	e58d3008 	str	r3, [sp, #8]
  109f3c:	eb000856 	bl	10c09c <_Bfree>
  109f40:	e59d3008 	ldr	r3, [sp, #8]
  109f44:	e59dc078 	ldr	ip, [sp, #120]	; 0x78
  109f48:	e193c00c 	orrs	ip, r3, ip
  109f4c:	1a000002 	bne	109f5c <_dtoa_r+0xe74>
  109f50:	e59dc01c 	ldr	ip, [sp, #28]
  109f54:	e35c0000 	cmp	ip, #0
  109f58:	0a0000d4 	beq	10a2b0 <_dtoa_r+0x11c8>
  109f5c:	e35a0000 	cmp	sl, #0
  109f60:	ba000089 	blt	10a18c <_dtoa_r+0x10a4>
  109f64:	e59dc078 	ldr	ip, [sp, #120]	; 0x78
  109f68:	e19ac00c 	orrs	ip, sl, ip
  109f6c:	1a000002 	bne	109f7c <_dtoa_r+0xe94>
  109f70:	e59dc01c 	ldr	ip, [sp, #28]
  109f74:	e35c0000 	cmp	ip, #0
  109f78:	0a000083 	beq	10a18c <_dtoa_r+0x10a4>
  109f7c:	e3530000 	cmp	r3, #0
  109f80:	ca0000ba 	bgt	10a270 <_dtoa_r+0x1188>
  109f84:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
  109f88:	e1a09005 	mov	r9, r5
  109f8c:	e545b001 	strb	fp, [r5, #-1]
  109f90:	e155000c 	cmp	r5, ip
  109f94:	0a0000be 	beq	10a294 <_dtoa_r+0x11ac>
  109f98:	e1a01007 	mov	r1, r7
  109f9c:	e1a00004 	mov	r0, r4
  109fa0:	e3a0200a 	mov	r2, #10
  109fa4:	e3a03000 	mov	r3, #0
  109fa8:	eb000842 	bl	10c0b8 <__multadd>
  109fac:	e1560008 	cmp	r6, r8
  109fb0:	e1a07000 	mov	r7, r0
  109fb4:	0a000027 	beq	10a058 <_dtoa_r+0xf70>
  109fb8:	e1a01006 	mov	r1, r6
  109fbc:	e3a0200a 	mov	r2, #10
  109fc0:	e3a03000 	mov	r3, #0
  109fc4:	e1a00004 	mov	r0, r4
  109fc8:	eb00083a 	bl	10c0b8 <__multadd>
  109fcc:	e1a01008 	mov	r1, r8
  109fd0:	e3a0200a 	mov	r2, #10
  109fd4:	e3a03000 	mov	r3, #0
  109fd8:	e1a06000 	mov	r6, r0
  109fdc:	e1a00004 	mov	r0, r4
  109fe0:	eb000834 	bl	10c0b8 <__multadd>
  109fe4:	e1a08000 	mov	r8, r0
  109fe8:	e2855001 	add	r5, r5, #1
  109fec:	e59d1010 	ldr	r1, [sp, #16]
  109ff0:	e1a00007 	mov	r0, r7
  109ff4:	ebfffbc7 	bl	108f18 <quorem>
  109ff8:	e1a01006 	mov	r1, r6
  109ffc:	e1a09000 	mov	r9, r0
  10a000:	e1a00007 	mov	r0, r7
  10a004:	eb0009cb 	bl	10c738 <__mcmp>
  10a008:	e1a02008 	mov	r2, r8
  10a00c:	e59d1010 	ldr	r1, [sp, #16]
  10a010:	e289b030 	add	fp, r9, #48	; 0x30
  10a014:	e1a0a000 	mov	sl, r0
  10a018:	e1a00004 	mov	r0, r4
  10a01c:	eb0009de 	bl	10c79c <__mdiff>
  10a020:	e245c001 	sub	ip, r5, #1
  10a024:	e58dc024 	str	ip, [sp, #36]	; 0x24
  10a028:	e590300c 	ldr	r3, [r0, #12]
  10a02c:	e1a02000 	mov	r2, r0
  10a030:	e3530000 	cmp	r3, #0
  10a034:	13a03001 	movne	r3, #1
  10a038:	1affffbc 	bne	109f30 <_dtoa_r+0xe48>
  10a03c:	e1a01002 	mov	r1, r2
  10a040:	e1a00007 	mov	r0, r7
  10a044:	e58d200c 	str	r2, [sp, #12]
  10a048:	eb0009ba 	bl	10c738 <__mcmp>
  10a04c:	e59d200c 	ldr	r2, [sp, #12]
  10a050:	e1a03000 	mov	r3, r0
  10a054:	eaffffb5 	b	109f30 <_dtoa_r+0xe48>
  10a058:	e1a01006 	mov	r1, r6
  10a05c:	e1a00004 	mov	r0, r4
  10a060:	e3a0200a 	mov	r2, #10
  10a064:	e3a03000 	mov	r3, #0
  10a068:	eb000812 	bl	10c0b8 <__multadd>
  10a06c:	e1a06000 	mov	r6, r0
  10a070:	e1a08000 	mov	r8, r0
  10a074:	eaffffdb 	b	109fe8 <_dtoa_r+0xf00>
  10a078:	e3a03001 	mov	r3, #1
  10a07c:	e58d3030 	str	r3, [sp, #48]	; 0x30
  10a080:	e1a09003 	mov	r9, r3
  10a084:	e58d307c 	str	r3, [sp, #124]	; 0x7c
  10a088:	e3a01000 	mov	r1, #0
  10a08c:	e0035005 	and	r5, r3, r5
  10a090:	e5841044 	str	r1, [r4, #68]	; 0x44
  10a094:	eafffe15 	b	1098f0 <_dtoa_r+0x808>
  10a098:	e35c000e 	cmp	ip, #14
  10a09c:	e1a0900c 	mov	r9, ip
  10a0a0:	83a03000 	movhi	r3, #0
  10a0a4:	93a03001 	movls	r3, #1
  10a0a8:	eafffff6 	b	10a088 <_dtoa_r+0xfa0>
  10a0ac:	e1a01007 	mov	r1, r7
  10a0b0:	e1a00004 	mov	r0, r4
  10a0b4:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
  10a0b8:	eb000921 	bl	10c544 <__pow5mult>
  10a0bc:	e1a07000 	mov	r7, r0
  10a0c0:	eafffd5d 	b	10963c <_dtoa_r+0x554>
  10a0c4:	e59da020 	ldr	sl, [sp, #32]
  10a0c8:	e58d1020 	str	r1, [sp, #32]
  10a0cc:	eafffdb5 	b	1097a8 <_dtoa_r+0x6c0>
  10a0d0:	e3590000 	cmp	r9, #0
  10a0d4:	0afffe8e 	beq	109b14 <_dtoa_r+0xa2c>
  10a0d8:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
  10a0dc:	e35c0000 	cmp	ip, #0
  10a0e0:	dafffee4 	ble	109c78 <_dtoa_r+0xb90>
  10a0e4:	eef21b04 	vmov.f64	d17, #36	; 0x24
  10a0e8:	e2811001 	add	r1, r1, #1
  10a0ec:	e59dc018 	ldr	ip, [sp, #24]
  10a0f0:	ee071a90 	vmov	s15, r1
  10a0f4:	e24c0001 	sub	r0, ip, #1
  10a0f8:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
  10a0fc:	ee600ba1 	vmul.f64	d16, d16, d17
  10a100:	eef11b0c 	vmov.f64	d17, #28
  10a104:	eef82be7 	vcvt.f64.s32	d18, s15
  10a108:	eef03b61 	vmov.f64	d19, d17
  10a10c:	ee403ba2 	vmla.f64	d19, d16, d18
  10a110:	ec5bab33 	vmov	sl, fp, d19
  10a114:	e24bb50d 	sub	fp, fp, #54525952	; 0x3400000
  10a118:	eafffe2c 	b	1099d0 <_dtoa_r+0x8e8>
  10a11c:	e1a01007 	mov	r1, r7
  10a120:	e1a00004 	mov	r0, r4
  10a124:	eb000906 	bl	10c544 <__pow5mult>
  10a128:	e1a07000 	mov	r7, r0
  10a12c:	eafffd42 	b	10963c <_dtoa_r+0x554>
  10a130:	ee711be3 	vsub.f64	d17, d17, d19
  10a134:	eef41be0 	vcmpe.f64	d17, d16
  10a138:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  10a13c:	dafffecd 	ble	109c78 <_dtoa_r+0xb90>
  10a140:	e1a03001 	mov	r3, r1
  10a144:	e2411001 	sub	r1, r1, #1
  10a148:	e5532001 	ldrb	r2, [r3, #-1]
  10a14c:	e3520030 	cmp	r2, #48	; 0x30
  10a150:	0afffffa 	beq	10a140 <_dtoa_r+0x1058>
  10a154:	eafffe56 	b	109ab4 <_dtoa_r+0x9cc>
  10a158:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  10a15c:	e3520000 	cmp	r2, #0
  10a160:	158d6028 	strne	r6, [sp, #40]	; 0x28
  10a164:	12833e43 	addne	r3, r3, #1072	; 0x430
  10a168:	058d6028 	streq	r6, [sp, #40]	; 0x28
  10a16c:	059d3040 	ldreq	r3, [sp, #64]	; 0x40
  10a170:	12833003 	addne	r3, r3, #3
  10a174:	159dc024 	ldrne	ip, [sp, #36]	; 0x24
  10a178:	059dc024 	ldreq	ip, [sp, #36]	; 0x24
  10a17c:	02633036 	rsbeq	r3, r3, #54	; 0x36
  10a180:	eafffdb9 	b	10986c <_dtoa_r+0x784>
  10a184:	e59da020 	ldr	sl, [sp, #32]
  10a188:	eafffce3 	b	10951c <_dtoa_r+0x434>
  10a18c:	e3530000 	cmp	r3, #0
  10a190:	e1a0500b 	mov	r5, fp
  10a194:	da00000b 	ble	10a1c8 <_dtoa_r+0x10e0>
  10a198:	e1a01007 	mov	r1, r7
  10a19c:	e3a02001 	mov	r2, #1
  10a1a0:	e1a00004 	mov	r0, r4
  10a1a4:	eb000921 	bl	10c630 <__lshift>
  10a1a8:	e59d1010 	ldr	r1, [sp, #16]
  10a1ac:	e1a07000 	mov	r7, r0
  10a1b0:	eb000960 	bl	10c738 <__mcmp>
  10a1b4:	e3500000 	cmp	r0, #0
  10a1b8:	da000043 	ble	10a2cc <_dtoa_r+0x11e4>
  10a1bc:	e3550039 	cmp	r5, #57	; 0x39
  10a1c0:	e289b031 	add	fp, r9, #49	; 0x31
  10a1c4:	0a000034 	beq	10a29c <_dtoa_r+0x11b4>
  10a1c8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  10a1cc:	e1a05008 	mov	r5, r8
  10a1d0:	e59da020 	ldr	sl, [sp, #32]
  10a1d4:	e4c3b001 	strb	fp, [r3], #1
  10a1d8:	e58d3020 	str	r3, [sp, #32]
  10a1dc:	eafffd66 	b	10977c <_dtoa_r+0x694>
  10a1e0:	e58d1020 	str	r1, [sp, #32]
  10a1e4:	e2822001 	add	r2, r2, #1
  10a1e8:	e58d0018 	str	r0, [sp, #24]
  10a1ec:	eafffcda 	b	10955c <_dtoa_r+0x474>
  10a1f0:	1a000001 	bne	10a1fc <_dtoa_r+0x1114>
  10a1f4:	e31b0001 	tst	fp, #1
  10a1f8:	1afffe85 	bne	109c14 <_dtoa_r+0xb2c>
  10a1fc:	e1a03009 	mov	r3, r9
  10a200:	e2499001 	sub	r9, r9, #1
  10a204:	e5532001 	ldrb	r2, [r3, #-1]
  10a208:	e3520030 	cmp	r2, #48	; 0x30
  10a20c:	0afffffa 	beq	10a1fc <_dtoa_r+0x1114>
  10a210:	e59da020 	ldr	sl, [sp, #32]
  10a214:	e58d3020 	str	r3, [sp, #32]
  10a218:	eafffd57 	b	10977c <_dtoa_r+0x694>
  10a21c:	e5951004 	ldr	r1, [r5, #4]
  10a220:	e1a00004 	mov	r0, r4
  10a224:	eb00077a 	bl	10c014 <_Balloc>
  10a228:	e5952010 	ldr	r2, [r5, #16]
  10a22c:	e285100c 	add	r1, r5, #12
  10a230:	e2822002 	add	r2, r2, #2
  10a234:	e1a02102 	lsl	r2, r2, #2
  10a238:	e1a06000 	mov	r6, r0
  10a23c:	e280000c 	add	r0, r0, #12
  10a240:	eb000530 	bl	10b708 <memcpy>
  10a244:	e1a00004 	mov	r0, r4
  10a248:	e1a01006 	mov	r1, r6
  10a24c:	e3a02001 	mov	r2, #1
  10a250:	eb0008f6 	bl	10c630 <__lshift>
  10a254:	e1a08000 	mov	r8, r0
  10a258:	eaffff29 	b	109f04 <_dtoa_r+0xe1c>
  10a25c:	e59da020 	ldr	sl, [sp, #32]
  10a260:	e2833001 	add	r3, r3, #1
  10a264:	e5c23000 	strb	r3, [r2]
  10a268:	e58d9020 	str	r9, [sp, #32]
  10a26c:	eafffd42 	b	10977c <_dtoa_r+0x694>
  10a270:	e35b0039 	cmp	fp, #57	; 0x39
  10a274:	0a000008 	beq	10a29c <_dtoa_r+0x11b4>
  10a278:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  10a27c:	e28bc001 	add	ip, fp, #1
  10a280:	e59da020 	ldr	sl, [sp, #32]
  10a284:	e1a05008 	mov	r5, r8
  10a288:	e4c3c001 	strb	ip, [r3], #1
  10a28c:	e58d3020 	str	r3, [sp, #32]
  10a290:	eafffd39 	b	10977c <_dtoa_r+0x694>
  10a294:	e1a05008 	mov	r5, r8
  10a298:	eafffe54 	b	109bf0 <_dtoa_r+0xb08>
  10a29c:	e59d9024 	ldr	r9, [sp, #36]	; 0x24
  10a2a0:	e3a03039 	mov	r3, #57	; 0x39
  10a2a4:	e1a05008 	mov	r5, r8
  10a2a8:	e4c93001 	strb	r3, [r9], #1
  10a2ac:	eafffe5c 	b	109c24 <_dtoa_r+0xb3c>
  10a2b0:	e35b0039 	cmp	fp, #57	; 0x39
  10a2b4:	0afffff8 	beq	10a29c <_dtoa_r+0x11b4>
  10a2b8:	e35a0000 	cmp	sl, #0
  10a2bc:	c289b031 	addgt	fp, r9, #49	; 0x31
  10a2c0:	eaffffc0 	b	10a1c8 <_dtoa_r+0x10e0>
  10a2c4:	e3a01002 	mov	r1, #2
  10a2c8:	eafffdae 	b	109988 <_dtoa_r+0x8a0>
  10a2cc:	1affffbd 	bne	10a1c8 <_dtoa_r+0x10e0>
  10a2d0:	e31b0001 	tst	fp, #1
  10a2d4:	0affffbb 	beq	10a1c8 <_dtoa_r+0x10e0>
  10a2d8:	eaffffb7 	b	10a1bc <_dtoa_r+0x10d4>
  10a2dc:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
  10a2e0:	e59da020 	ldr	sl, [sp, #32]
  10a2e4:	e58dc020 	str	ip, [sp, #32]
  10a2e8:	eafffd2e 	b	1097a8 <_dtoa_r+0x6c0>
  10a2ec:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
  10a2f0:	e59da020 	ldr	sl, [sp, #32]
  10a2f4:	e58d0018 	str	r0, [sp, #24]
  10a2f8:	e58dc020 	str	ip, [sp, #32]
  10a2fc:	eafffd29 	b	1097a8 <_dtoa_r+0x6c0>
  10a300:	1263303c 	rsbne	r3, r3, #60	; 0x3c
  10a304:	0afffced 	beq	1096c0 <_dtoa_r+0x5d8>
  10a308:	eafffce7 	b	1096ac <_dtoa_r+0x5c4>
  10a30c:	e320f000 	nop	{0}

0010a310 <_fflush_r>:
  10a310:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
  10a314:	e2507000 	subs	r7, r0, #0
  10a318:	e1a04001 	mov	r4, r1
  10a31c:	0a000002 	beq	10a32c <_fflush_r+0x1c>
  10a320:	e5973038 	ldr	r3, [r7, #56]	; 0x38
  10a324:	e3530000 	cmp	r3, #0
  10a328:	0a000060 	beq	10a4b0 <_fflush_r+0x1a0>
  10a32c:	e1d430bc 	ldrh	r3, [r4, #12]
  10a330:	e3530000 	cmp	r3, #0
  10a334:	0a000024 	beq	10a3cc <_fflush_r+0xbc>
  10a338:	e2032008 	and	r2, r3, #8
  10a33c:	e6bf2072 	sxth	r2, r2
  10a340:	e3520000 	cmp	r2, #0
  10a344:	0a000022 	beq	10a3d4 <_fflush_r+0xc4>
  10a348:	e5946010 	ldr	r6, [r4, #16]
  10a34c:	e3560000 	cmp	r6, #0
  10a350:	0a00001d 	beq	10a3cc <_fflush_r+0xbc>
  10a354:	e3130003 	tst	r3, #3
  10a358:	e5945000 	ldr	r5, [r4]
  10a35c:	e5846000 	str	r6, [r4]
  10a360:	05943014 	ldreq	r3, [r4, #20]
  10a364:	e0665005 	rsb	r5, r6, r5
  10a368:	13a03000 	movne	r3, #0
  10a36c:	e3550000 	cmp	r5, #0
  10a370:	e5843008 	str	r3, [r4, #8]
  10a374:	ca000002 	bgt	10a384 <_fflush_r+0x74>
  10a378:	ea000013 	b	10a3cc <_fflush_r+0xbc>
  10a37c:	e3550000 	cmp	r5, #0
  10a380:	da000011 	ble	10a3cc <_fflush_r+0xbc>
  10a384:	e1a02006 	mov	r2, r6
  10a388:	e1a03005 	mov	r3, r5
  10a38c:	e594c024 	ldr	ip, [r4, #36]	; 0x24
  10a390:	e1a00007 	mov	r0, r7
  10a394:	e594101c 	ldr	r1, [r4, #28]
  10a398:	e12fff3c 	blx	ip
  10a39c:	e3500000 	cmp	r0, #0
  10a3a0:	e0605005 	rsb	r5, r0, r5
  10a3a4:	e0866000 	add	r6, r6, r0
  10a3a8:	cafffff3 	bgt	10a37c <_fflush_r+0x6c>
  10a3ac:	e1d430bc 	ldrh	r3, [r4, #12]
  10a3b0:	e3e00000 	mvn	r0, #0
  10a3b4:	e3833040 	orr	r3, r3, #64	; 0x40
  10a3b8:	e1c430bc 	strh	r3, [r4, #12]
  10a3bc:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
  10a3c0:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
  10a3c4:	e3520000 	cmp	r2, #0
  10a3c8:	ca000006 	bgt	10a3e8 <_fflush_r+0xd8>
  10a3cc:	e3a00000 	mov	r0, #0
  10a3d0:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
  10a3d4:	e5942004 	ldr	r2, [r4, #4]
  10a3d8:	e3831b02 	orr	r1, r3, #2048	; 0x800
  10a3dc:	e1c410bc 	strh	r1, [r4, #12]
  10a3e0:	e3520000 	cmp	r2, #0
  10a3e4:	dafffff5 	ble	10a3c0 <_fflush_r+0xb0>
  10a3e8:	e594c028 	ldr	ip, [r4, #40]	; 0x28
  10a3ec:	e35c0000 	cmp	ip, #0
  10a3f0:	0afffff5 	beq	10a3cc <_fflush_r+0xbc>
  10a3f4:	e2033a01 	and	r3, r3, #4096	; 0x1000
  10a3f8:	e3a02000 	mov	r2, #0
  10a3fc:	e5975000 	ldr	r5, [r7]
  10a400:	e6bf6073 	sxth	r6, r3
  10a404:	e5872000 	str	r2, [r7]
  10a408:	e1560002 	cmp	r6, r2
  10a40c:	0a000029 	beq	10a4b8 <_fflush_r+0x1a8>
  10a410:	e5942050 	ldr	r2, [r4, #80]	; 0x50
  10a414:	e2011004 	and	r1, r1, #4
  10a418:	e6bf1071 	sxth	r1, r1
  10a41c:	e3510000 	cmp	r1, #0
  10a420:	0a000005 	beq	10a43c <_fflush_r+0x12c>
  10a424:	e5941030 	ldr	r1, [r4, #48]	; 0x30
  10a428:	e5943004 	ldr	r3, [r4, #4]
  10a42c:	e3510000 	cmp	r1, #0
  10a430:	e0632002 	rsb	r2, r3, r2
  10a434:	1594303c 	ldrne	r3, [r4, #60]	; 0x3c
  10a438:	10632002 	rsbne	r2, r3, r2
  10a43c:	e1a00007 	mov	r0, r7
  10a440:	e594101c 	ldr	r1, [r4, #28]
  10a444:	e3a03000 	mov	r3, #0
  10a448:	e12fff3c 	blx	ip
  10a44c:	e3700001 	cmn	r0, #1
  10a450:	0a000023 	beq	10a4e4 <_fflush_r+0x1d4>
  10a454:	e1d430bc 	ldrh	r3, [r4, #12]
  10a458:	e3a0c000 	mov	ip, #0
  10a45c:	e5942010 	ldr	r2, [r4, #16]
  10a460:	e2031a01 	and	r1, r3, #4096	; 0x1000
  10a464:	e584c004 	str	ip, [r4, #4]
  10a468:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  10a46c:	e1c430bc 	strh	r3, [r4, #12]
  10a470:	e6bf1071 	sxth	r1, r1
  10a474:	e5842000 	str	r2, [r4]
  10a478:	e151000c 	cmp	r1, ip
  10a47c:	1a00002c 	bne	10a534 <_fflush_r+0x224>
  10a480:	e5941030 	ldr	r1, [r4, #48]	; 0x30
  10a484:	e5875000 	str	r5, [r7]
  10a488:	e3510000 	cmp	r1, #0
  10a48c:	0affffce 	beq	10a3cc <_fflush_r+0xbc>
  10a490:	e2843040 	add	r3, r4, #64	; 0x40
  10a494:	e1510003 	cmp	r1, r3
  10a498:	0a000001 	beq	10a4a4 <_fflush_r+0x194>
  10a49c:	e1a00007 	mov	r0, r7
  10a4a0:	eb00011c 	bl	10a918 <_free_r>
  10a4a4:	e3a00000 	mov	r0, #0
  10a4a8:	e5840030 	str	r0, [r4, #48]	; 0x30
  10a4ac:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
  10a4b0:	eb000071 	bl	10a67c <__sinit>
  10a4b4:	eaffff9c 	b	10a32c <_fflush_r+0x1c>
  10a4b8:	e1a02006 	mov	r2, r6
  10a4bc:	e1a00007 	mov	r0, r7
  10a4c0:	e594101c 	ldr	r1, [r4, #28]
  10a4c4:	e3a03001 	mov	r3, #1
  10a4c8:	e12fff3c 	blx	ip
  10a4cc:	e3700001 	cmn	r0, #1
  10a4d0:	e1a02000 	mov	r2, r0
  10a4d4:	0a000018 	beq	10a53c <_fflush_r+0x22c>
  10a4d8:	e1d410bc 	ldrh	r1, [r4, #12]
  10a4dc:	e594c028 	ldr	ip, [r4, #40]	; 0x28
  10a4e0:	eaffffcb 	b	10a414 <_fflush_r+0x104>
  10a4e4:	e5976000 	ldr	r6, [r7]
  10a4e8:	e356001d 	cmp	r6, #29
  10a4ec:	8affffae 	bhi	10a3ac <_fflush_r+0x9c>
  10a4f0:	e3a03f81 	mov	r3, #516	; 0x204
  10a4f4:	e3483000 	movt	r3, #32768	; 0x8000
  10a4f8:	e1b03613 	lsls	r3, r3, r6
  10a4fc:	5affffaa 	bpl	10a3ac <_fflush_r+0x9c>
  10a500:	e1d430bc 	ldrh	r3, [r4, #12]
  10a504:	e3a0c000 	mov	ip, #0
  10a508:	e5942010 	ldr	r2, [r4, #16]
  10a50c:	e2031a01 	and	r1, r3, #4096	; 0x1000
  10a510:	e584c004 	str	ip, [r4, #4]
  10a514:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  10a518:	e1c430bc 	strh	r3, [r4, #12]
  10a51c:	e6bf1071 	sxth	r1, r1
  10a520:	e5842000 	str	r2, [r4]
  10a524:	e151000c 	cmp	r1, ip
  10a528:	0affffd4 	beq	10a480 <_fflush_r+0x170>
  10a52c:	e3560000 	cmp	r6, #0
  10a530:	1affffd2 	bne	10a480 <_fflush_r+0x170>
  10a534:	e5840050 	str	r0, [r4, #80]	; 0x50
  10a538:	eaffffd0 	b	10a480 <_fflush_r+0x170>
  10a53c:	e5973000 	ldr	r3, [r7]
  10a540:	e3530000 	cmp	r3, #0
  10a544:	0affffe3 	beq	10a4d8 <_fflush_r+0x1c8>
  10a548:	e353001d 	cmp	r3, #29
  10a54c:	13530016 	cmpne	r3, #22
  10a550:	1affff95 	bne	10a3ac <_fflush_r+0x9c>
  10a554:	e5875000 	str	r5, [r7]
  10a558:	e1a00006 	mov	r0, r6
  10a55c:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

0010a560 <fflush>:
  10a560:	e2501000 	subs	r1, r0, #0
  10a564:	0a000003 	beq	10a578 <fflush+0x18>
  10a568:	e30f3c28 	movw	r3, #64552	; 0xfc28
  10a56c:	e3403011 	movt	r3, #17
  10a570:	e5930000 	ldr	r0, [r3]
  10a574:	eaffff65 	b	10a310 <_fflush_r>
  10a578:	e30f3d0c 	movw	r3, #64780	; 0xfd0c
  10a57c:	e3403010 	movt	r3, #16
  10a580:	e30a1310 	movw	r1, #41744	; 0xa310
  10a584:	e3401010 	movt	r1, #16
  10a588:	e5930000 	ldr	r0, [r3]
  10a58c:	ea00019b 	b	10ac00 <_fwalk_reent>

0010a590 <__fp_lock>:
  10a590:	e3a00000 	mov	r0, #0
  10a594:	e12fff1e 	bx	lr

0010a598 <__fp_unlock>:
  10a598:	e3a00000 	mov	r0, #0
  10a59c:	e12fff1e 	bx	lr

0010a5a0 <_cleanup_r>:
  10a5a0:	e30e1608 	movw	r1, #58888	; 0xe608
  10a5a4:	e3401010 	movt	r1, #16
  10a5a8:	ea000174 	b	10ab80 <_fwalk>

0010a5ac <std.isra.0>:
  10a5ac:	e92d4010 	push	{r4, lr}
  10a5b0:	e3a03000 	mov	r3, #0
  10a5b4:	e1a04000 	mov	r4, r0
  10a5b8:	e1c010bc 	strh	r1, [r0, #12]
  10a5bc:	e1c420be 	strh	r2, [r4, #14]
  10a5c0:	e1a01003 	mov	r1, r3
  10a5c4:	e5843000 	str	r3, [r4]
  10a5c8:	e3a02008 	mov	r2, #8
  10a5cc:	e5843004 	str	r3, [r4, #4]
  10a5d0:	e280005c 	add	r0, r0, #92	; 0x5c
  10a5d4:	e5843008 	str	r3, [r4, #8]
  10a5d8:	e5843064 	str	r3, [r4, #100]	; 0x64
  10a5dc:	e5843010 	str	r3, [r4, #16]
  10a5e0:	e5843014 	str	r3, [r4, #20]
  10a5e4:	e5843018 	str	r3, [r4, #24]
  10a5e8:	eb0005fc 	bl	10bde0 <memset>
  10a5ec:	e30c0d54 	movw	r0, #52564	; 0xcd54
  10a5f0:	e30c1d8c 	movw	r1, #52620	; 0xcd8c
  10a5f4:	e3400010 	movt	r0, #16
  10a5f8:	e3401010 	movt	r1, #16
  10a5fc:	e30c2de8 	movw	r2, #52712	; 0xcde8
  10a600:	e30c3e14 	movw	r3, #52756	; 0xce14
  10a604:	e3402010 	movt	r2, #16
  10a608:	e3403010 	movt	r3, #16
  10a60c:	e584401c 	str	r4, [r4, #28]
  10a610:	e5840020 	str	r0, [r4, #32]
  10a614:	e5841024 	str	r1, [r4, #36]	; 0x24
  10a618:	e5842028 	str	r2, [r4, #40]	; 0x28
  10a61c:	e584302c 	str	r3, [r4, #44]	; 0x2c
  10a620:	e8bd8010 	pop	{r4, pc}

0010a624 <__sfmoreglue>:
  10a624:	e92d4070 	push	{r4, r5, r6, lr}
  10a628:	e3a05068 	mov	r5, #104	; 0x68
  10a62c:	e0050195 	mul	r5, r5, r1
  10a630:	e1a06001 	mov	r6, r1
  10a634:	e285100c 	add	r1, r5, #12
  10a638:	eb000224 	bl	10aed0 <_malloc_r>
  10a63c:	e2504000 	subs	r4, r0, #0
  10a640:	0a000007 	beq	10a664 <__sfmoreglue+0x40>
  10a644:	e284300c 	add	r3, r4, #12
  10a648:	e3a02000 	mov	r2, #0
  10a64c:	e1a01002 	mov	r1, r2
  10a650:	e8840044 	stm	r4, {r2, r6}
  10a654:	e1a00003 	mov	r0, r3
  10a658:	e5843008 	str	r3, [r4, #8]
  10a65c:	e1a02005 	mov	r2, r5
  10a660:	eb0005de 	bl	10bde0 <memset>
  10a664:	e1a00004 	mov	r0, r4
  10a668:	e8bd8070 	pop	{r4, r5, r6, pc}

0010a66c <_cleanup>:
  10a66c:	e30f3d0c 	movw	r3, #64780	; 0xfd0c
  10a670:	e3403010 	movt	r3, #16
  10a674:	e5930000 	ldr	r0, [r3]
  10a678:	eaffffc8 	b	10a5a0 <_cleanup_r>

0010a67c <__sinit>:
  10a67c:	e92d4038 	push	{r3, r4, r5, lr}
  10a680:	e1a04000 	mov	r4, r0
  10a684:	e5903038 	ldr	r3, [r0, #56]	; 0x38
  10a688:	e3530000 	cmp	r3, #0
  10a68c:	18bd8038 	popne	{r3, r4, r5, pc}
  10a690:	e3a05001 	mov	r5, #1
  10a694:	e1a02003 	mov	r2, r3
  10a698:	e58432e0 	str	r3, [r4, #736]	; 0x2e0
  10a69c:	e3a01004 	mov	r1, #4
  10a6a0:	e2843fbb 	add	r3, r4, #748	; 0x2ec
  10a6a4:	e5900004 	ldr	r0, [r0, #4]
  10a6a8:	e58432e8 	str	r3, [r4, #744]	; 0x2e8
  10a6ac:	e30ac5a0 	movw	ip, #42400	; 0xa5a0
  10a6b0:	e5845038 	str	r5, [r4, #56]	; 0x38
  10a6b4:	e340c010 	movt	ip, #16
  10a6b8:	e584c03c 	str	ip, [r4, #60]	; 0x3c
  10a6bc:	e3a0c003 	mov	ip, #3
  10a6c0:	e584c2e4 	str	ip, [r4, #740]	; 0x2e4
  10a6c4:	ebffffb8 	bl	10a5ac <std.isra.0>
  10a6c8:	e5940008 	ldr	r0, [r4, #8]
  10a6cc:	e1a02005 	mov	r2, r5
  10a6d0:	e3a01009 	mov	r1, #9
  10a6d4:	ebffffb4 	bl	10a5ac <std.isra.0>
  10a6d8:	e594000c 	ldr	r0, [r4, #12]
  10a6dc:	e3a01012 	mov	r1, #18
  10a6e0:	e3a02002 	mov	r2, #2
  10a6e4:	e8bd4038 	pop	{r3, r4, r5, lr}
  10a6e8:	eaffffaf 	b	10a5ac <std.isra.0>

0010a6ec <__sfp>:
  10a6ec:	e30f3d0c 	movw	r3, #64780	; 0xfd0c
  10a6f0:	e3403010 	movt	r3, #16
  10a6f4:	e92d4070 	push	{r4, r5, r6, lr}
  10a6f8:	e1a06000 	mov	r6, r0
  10a6fc:	e5935000 	ldr	r5, [r3]
  10a700:	e5953038 	ldr	r3, [r5, #56]	; 0x38
  10a704:	e3530000 	cmp	r3, #0
  10a708:	0a000026 	beq	10a7a8 <__sfp+0xbc>
  10a70c:	e2855e2e 	add	r5, r5, #736	; 0x2e0
  10a710:	e9950018 	ldmib	r5, {r3, r4}
  10a714:	e2533001 	subs	r3, r3, #1
  10a718:	5a000004 	bpl	10a730 <__sfp+0x44>
  10a71c:	ea00001c 	b	10a794 <__sfp+0xa8>
  10a720:	e2433001 	sub	r3, r3, #1
  10a724:	e2844068 	add	r4, r4, #104	; 0x68
  10a728:	e3730001 	cmn	r3, #1
  10a72c:	0a000018 	beq	10a794 <__sfp+0xa8>
  10a730:	e1d420fc 	ldrsh	r2, [r4, #12]
  10a734:	e3520000 	cmp	r2, #0
  10a738:	1afffff8 	bne	10a720 <__sfp+0x34>
  10a73c:	e3a05000 	mov	r5, #0
  10a740:	e3e03000 	mvn	r3, #0
  10a744:	e284005c 	add	r0, r4, #92	; 0x5c
  10a748:	e1c430be 	strh	r3, [r4, #14]
  10a74c:	e5845064 	str	r5, [r4, #100]	; 0x64
  10a750:	e3a03001 	mov	r3, #1
  10a754:	e1a01005 	mov	r1, r5
  10a758:	e1c430bc 	strh	r3, [r4, #12]
  10a75c:	e5845000 	str	r5, [r4]
  10a760:	e3a02008 	mov	r2, #8
  10a764:	e5845008 	str	r5, [r4, #8]
  10a768:	e5845004 	str	r5, [r4, #4]
  10a76c:	e5845010 	str	r5, [r4, #16]
  10a770:	e5845014 	str	r5, [r4, #20]
  10a774:	e5845018 	str	r5, [r4, #24]
  10a778:	eb000598 	bl	10bde0 <memset>
  10a77c:	e5845030 	str	r5, [r4, #48]	; 0x30
  10a780:	e5845034 	str	r5, [r4, #52]	; 0x34
  10a784:	e5845044 	str	r5, [r4, #68]	; 0x44
  10a788:	e5845048 	str	r5, [r4, #72]	; 0x48
  10a78c:	e1a00004 	mov	r0, r4
  10a790:	e8bd8070 	pop	{r4, r5, r6, pc}
  10a794:	e5950000 	ldr	r0, [r5]
  10a798:	e3500000 	cmp	r0, #0
  10a79c:	0a000004 	beq	10a7b4 <__sfp+0xc8>
  10a7a0:	e1a05000 	mov	r5, r0
  10a7a4:	eaffffd9 	b	10a710 <__sfp+0x24>
  10a7a8:	e1a00005 	mov	r0, r5
  10a7ac:	ebffffb2 	bl	10a67c <__sinit>
  10a7b0:	eaffffd5 	b	10a70c <__sfp+0x20>
  10a7b4:	e1a00006 	mov	r0, r6
  10a7b8:	e3a01004 	mov	r1, #4
  10a7bc:	ebffff98 	bl	10a624 <__sfmoreglue>
  10a7c0:	e3500000 	cmp	r0, #0
  10a7c4:	e5850000 	str	r0, [r5]
  10a7c8:	1afffff4 	bne	10a7a0 <__sfp+0xb4>
  10a7cc:	e3a0300c 	mov	r3, #12
  10a7d0:	e1a04000 	mov	r4, r0
  10a7d4:	e5863000 	str	r3, [r6]
  10a7d8:	eaffffeb 	b	10a78c <__sfp+0xa0>

0010a7dc <__sfp_lock_acquire>:
  10a7dc:	e12fff1e 	bx	lr

0010a7e0 <__sfp_lock_release>:
  10a7e0:	e12fff1e 	bx	lr

0010a7e4 <__sinit_lock_acquire>:
  10a7e4:	e12fff1e 	bx	lr

0010a7e8 <__sinit_lock_release>:
  10a7e8:	e12fff1e 	bx	lr

0010a7ec <__fp_lock_all>:
  10a7ec:	e30f3c28 	movw	r3, #64552	; 0xfc28
  10a7f0:	e3403011 	movt	r3, #17
  10a7f4:	e30a1590 	movw	r1, #42384	; 0xa590
  10a7f8:	e3401010 	movt	r1, #16
  10a7fc:	e5930000 	ldr	r0, [r3]
  10a800:	ea0000de 	b	10ab80 <_fwalk>

0010a804 <__fp_unlock_all>:
  10a804:	e30f3c28 	movw	r3, #64552	; 0xfc28
  10a808:	e3403011 	movt	r3, #17
  10a80c:	e30a1598 	movw	r1, #42392	; 0xa598
  10a810:	e3401010 	movt	r1, #16
  10a814:	e5930000 	ldr	r0, [r3]
  10a818:	ea0000d8 	b	10ab80 <_fwalk>

0010a81c <_malloc_trim_r>:
  10a81c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
  10a820:	e30040d4 	movw	r4, #212	; 0xd4
  10a824:	e3404012 	movt	r4, #18
  10a828:	e1a07001 	mov	r7, r1
  10a82c:	e1a05000 	mov	r5, r0
  10a830:	eb0005f5 	bl	10c00c <__malloc_lock>
  10a834:	e5943008 	ldr	r3, [r4, #8]
  10a838:	e5936004 	ldr	r6, [r3, #4]
  10a83c:	e3c66003 	bic	r6, r6, #3
  10a840:	e2863efe 	add	r3, r6, #4064	; 0xfe0
  10a844:	e283300f 	add	r3, r3, #15
  10a848:	e0677003 	rsb	r7, r7, r3
  10a84c:	e1a07627 	lsr	r7, r7, #12
  10a850:	e2477001 	sub	r7, r7, #1
  10a854:	e1a07607 	lsl	r7, r7, #12
  10a858:	e3570a01 	cmp	r7, #4096	; 0x1000
  10a85c:	ba000006 	blt	10a87c <_malloc_trim_r+0x60>
  10a860:	e1a00005 	mov	r0, r5
  10a864:	e3a01000 	mov	r1, #0
  10a868:	eb00092b 	bl	10cd1c <_sbrk_r>
  10a86c:	e5943008 	ldr	r3, [r4, #8]
  10a870:	e0833006 	add	r3, r3, r6
  10a874:	e1500003 	cmp	r0, r3
  10a878:	0a000003 	beq	10a88c <_malloc_trim_r+0x70>
  10a87c:	e1a00005 	mov	r0, r5
  10a880:	eb0005e2 	bl	10c010 <__malloc_unlock>
  10a884:	e3a00000 	mov	r0, #0
  10a888:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
  10a88c:	e1a00005 	mov	r0, r5
  10a890:	e2671000 	rsb	r1, r7, #0
  10a894:	eb000920 	bl	10cd1c <_sbrk_r>
  10a898:	e3700001 	cmn	r0, #1
  10a89c:	0a00000c 	beq	10a8d4 <_malloc_trim_r+0xb8>
  10a8a0:	e5941008 	ldr	r1, [r4, #8]
  10a8a4:	e3083058 	movw	r3, #32856	; 0x8058
  10a8a8:	e3403012 	movt	r3, #18
  10a8ac:	e0676006 	rsb	r6, r7, r6
  10a8b0:	e1a00005 	mov	r0, r5
  10a8b4:	e3866001 	orr	r6, r6, #1
  10a8b8:	e5932000 	ldr	r2, [r3]
  10a8bc:	e5816004 	str	r6, [r1, #4]
  10a8c0:	e0677002 	rsb	r7, r7, r2
  10a8c4:	e5837000 	str	r7, [r3]
  10a8c8:	eb0005d0 	bl	10c010 <__malloc_unlock>
  10a8cc:	e3a00001 	mov	r0, #1
  10a8d0:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
  10a8d4:	e1a00005 	mov	r0, r5
  10a8d8:	e3a01000 	mov	r1, #0
  10a8dc:	eb00090e 	bl	10cd1c <_sbrk_r>
  10a8e0:	e5943008 	ldr	r3, [r4, #8]
  10a8e4:	e0632000 	rsb	r2, r3, r0
  10a8e8:	e352000f 	cmp	r2, #15
  10a8ec:	daffffe2 	ble	10a87c <_malloc_trim_r+0x60>
  10a8f0:	e300c4dc 	movw	ip, #1244	; 0x4dc
  10a8f4:	e340c012 	movt	ip, #18
  10a8f8:	e3081058 	movw	r1, #32856	; 0x8058
  10a8fc:	e3401012 	movt	r1, #18
  10a900:	e59cc000 	ldr	ip, [ip]
  10a904:	e3822001 	orr	r2, r2, #1
  10a908:	e5832004 	str	r2, [r3, #4]
  10a90c:	e06c0000 	rsb	r0, ip, r0
  10a910:	e5810000 	str	r0, [r1]
  10a914:	eaffffd8 	b	10a87c <_malloc_trim_r+0x60>

0010a918 <_free_r>:
  10a918:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
  10a91c:	e2516000 	subs	r6, r1, #0
  10a920:	e1a07000 	mov	r7, r0
  10a924:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
  10a928:	eb0005b7 	bl	10c00c <__malloc_lock>
  10a92c:	e5165004 	ldr	r5, [r6, #-4]
  10a930:	e30040d4 	movw	r4, #212	; 0xd4
  10a934:	e3404012 	movt	r4, #18
  10a938:	e246c008 	sub	ip, r6, #8
  10a93c:	e3c53001 	bic	r3, r5, #1
  10a940:	e08c2003 	add	r2, ip, r3
  10a944:	e5940008 	ldr	r0, [r4, #8]
  10a948:	e5921004 	ldr	r1, [r2, #4]
  10a94c:	e1500002 	cmp	r0, r2
  10a950:	e3c11003 	bic	r1, r1, #3
  10a954:	0a00004a 	beq	10aa84 <_free_r+0x16c>
  10a958:	e2155001 	ands	r5, r5, #1
  10a95c:	e5821004 	str	r1, [r2, #4]
  10a960:	13a05000 	movne	r5, #0
  10a964:	1a000009 	bne	10a990 <_free_r+0x78>
  10a968:	e5160008 	ldr	r0, [r6, #-8]
  10a96c:	e2846008 	add	r6, r4, #8
  10a970:	e060c00c 	rsb	ip, r0, ip
  10a974:	e0833000 	add	r3, r3, r0
  10a978:	e59c0008 	ldr	r0, [ip, #8]
  10a97c:	e1500006 	cmp	r0, r6
  10a980:	159c600c 	ldrne	r6, [ip, #12]
  10a984:	03a05001 	moveq	r5, #1
  10a988:	1580600c 	strne	r6, [r0, #12]
  10a98c:	15860008 	strne	r0, [r6, #8]
  10a990:	e0820001 	add	r0, r2, r1
  10a994:	e5900004 	ldr	r0, [r0, #4]
  10a998:	e3100001 	tst	r0, #1
  10a99c:	1a000009 	bne	10a9c8 <_free_r+0xb0>
  10a9a0:	e3550000 	cmp	r5, #0
  10a9a4:	e0833001 	add	r3, r3, r1
  10a9a8:	e5921008 	ldr	r1, [r2, #8]
  10a9ac:	1a000002 	bne	10a9bc <_free_r+0xa4>
  10a9b0:	e59f01c4 	ldr	r0, [pc, #452]	; 10ab7c <_free_r+0x264>
  10a9b4:	e1510000 	cmp	r1, r0
  10a9b8:	0a000049 	beq	10aae4 <_free_r+0x1cc>
  10a9bc:	e592200c 	ldr	r2, [r2, #12]
  10a9c0:	e581200c 	str	r2, [r1, #12]
  10a9c4:	e5821008 	str	r1, [r2, #8]
  10a9c8:	e3550000 	cmp	r5, #0
  10a9cc:	e3832001 	orr	r2, r3, #1
  10a9d0:	e78c3003 	str	r3, [ip, r3]
  10a9d4:	e58c2004 	str	r2, [ip, #4]
  10a9d8:	1a000019 	bne	10aa44 <_free_r+0x12c>
  10a9dc:	e3530c02 	cmp	r3, #512	; 0x200
  10a9e0:	3a00001a 	bcc	10aa50 <_free_r+0x138>
  10a9e4:	e1a024a3 	lsr	r2, r3, #9
  10a9e8:	e3520004 	cmp	r2, #4
  10a9ec:	8a000044 	bhi	10ab04 <_free_r+0x1ec>
  10a9f0:	e1a00323 	lsr	r0, r3, #6
  10a9f4:	e2800038 	add	r0, r0, #56	; 0x38
  10a9f8:	e1a01080 	lsl	r1, r0, #1
  10a9fc:	e0844101 	add	r4, r4, r1, lsl #2
  10aa00:	e30010d4 	movw	r1, #212	; 0xd4
  10aa04:	e3401012 	movt	r1, #18
  10aa08:	e5942008 	ldr	r2, [r4, #8]
  10aa0c:	e1520004 	cmp	r2, r4
  10aa10:	0a000045 	beq	10ab2c <_free_r+0x214>
  10aa14:	e5921004 	ldr	r1, [r2, #4]
  10aa18:	e3c11003 	bic	r1, r1, #3
  10aa1c:	e1530001 	cmp	r3, r1
  10aa20:	2a000002 	bcs	10aa30 <_free_r+0x118>
  10aa24:	e5922008 	ldr	r2, [r2, #8]
  10aa28:	e1540002 	cmp	r4, r2
  10aa2c:	1afffff8 	bne	10aa14 <_free_r+0xfc>
  10aa30:	e592300c 	ldr	r3, [r2, #12]
  10aa34:	e58c300c 	str	r3, [ip, #12]
  10aa38:	e58c2008 	str	r2, [ip, #8]
  10aa3c:	e582c00c 	str	ip, [r2, #12]
  10aa40:	e583c008 	str	ip, [r3, #8]
  10aa44:	e1a00007 	mov	r0, r7
  10aa48:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
  10aa4c:	ea00056f 	b	10c010 <__malloc_unlock>
  10aa50:	e1a031a3 	lsr	r3, r3, #3
  10aa54:	e5941004 	ldr	r1, [r4, #4]
  10aa58:	e3a00001 	mov	r0, #1
  10aa5c:	e0842183 	add	r2, r4, r3, lsl #3
  10aa60:	e1a03143 	asr	r3, r3, #2
  10aa64:	e1813310 	orr	r3, r1, r0, lsl r3
  10aa68:	e58c200c 	str	r2, [ip, #12]
  10aa6c:	e5921008 	ldr	r1, [r2, #8]
  10aa70:	e5843004 	str	r3, [r4, #4]
  10aa74:	e58c1008 	str	r1, [ip, #8]
  10aa78:	e581c00c 	str	ip, [r1, #12]
  10aa7c:	e582c008 	str	ip, [r2, #8]
  10aa80:	eaffffef 	b	10aa44 <_free_r+0x12c>
  10aa84:	e3150001 	tst	r5, #1
  10aa88:	e0813003 	add	r3, r1, r3
  10aa8c:	1a000006 	bne	10aaac <_free_r+0x194>
  10aa90:	e5162008 	ldr	r2, [r6, #-8]
  10aa94:	e062c00c 	rsb	ip, r2, ip
  10aa98:	e0833002 	add	r3, r3, r2
  10aa9c:	e59c1008 	ldr	r1, [ip, #8]
  10aaa0:	e59c200c 	ldr	r2, [ip, #12]
  10aaa4:	e581200c 	str	r2, [r1, #12]
  10aaa8:	e5821008 	str	r1, [r2, #8]
  10aaac:	e30024e0 	movw	r2, #1248	; 0x4e0
  10aab0:	e3402012 	movt	r2, #18
  10aab4:	e3831001 	orr	r1, r3, #1
  10aab8:	e584c008 	str	ip, [r4, #8]
  10aabc:	e5922000 	ldr	r2, [r2]
  10aac0:	e58c1004 	str	r1, [ip, #4]
  10aac4:	e1530002 	cmp	r3, r2
  10aac8:	3affffdd 	bcc	10aa44 <_free_r+0x12c>
  10aacc:	e3083054 	movw	r3, #32852	; 0x8054
  10aad0:	e3403012 	movt	r3, #18
  10aad4:	e1a00007 	mov	r0, r7
  10aad8:	e5931000 	ldr	r1, [r3]
  10aadc:	ebffff4e 	bl	10a81c <_malloc_trim_r>
  10aae0:	eaffffd7 	b	10aa44 <_free_r+0x12c>
  10aae4:	e584c014 	str	ip, [r4, #20]
  10aae8:	e3832001 	orr	r2, r3, #1
  10aaec:	e584c010 	str	ip, [r4, #16]
  10aaf0:	e58c100c 	str	r1, [ip, #12]
  10aaf4:	e58c1008 	str	r1, [ip, #8]
  10aaf8:	e58c2004 	str	r2, [ip, #4]
  10aafc:	e78c3003 	str	r3, [ip, r3]
  10ab00:	eaffffcf 	b	10aa44 <_free_r+0x12c>
  10ab04:	e3520014 	cmp	r2, #20
  10ab08:	9282005b 	addls	r0, r2, #91	; 0x5b
  10ab0c:	91a01080 	lslls	r1, r0, #1
  10ab10:	9affffb9 	bls	10a9fc <_free_r+0xe4>
  10ab14:	e3520054 	cmp	r2, #84	; 0x54
  10ab18:	8a00000a 	bhi	10ab48 <_free_r+0x230>
  10ab1c:	e1a00623 	lsr	r0, r3, #12
  10ab20:	e280006e 	add	r0, r0, #110	; 0x6e
  10ab24:	e1a01080 	lsl	r1, r0, #1
  10ab28:	eaffffb3 	b	10a9fc <_free_r+0xe4>
  10ab2c:	e5914004 	ldr	r4, [r1, #4]
  10ab30:	e1a00140 	asr	r0, r0, #2
  10ab34:	e3a05001 	mov	r5, #1
  10ab38:	e1a03002 	mov	r3, r2
  10ab3c:	e1840015 	orr	r0, r4, r5, lsl r0
  10ab40:	e5810004 	str	r0, [r1, #4]
  10ab44:	eaffffba 	b	10aa34 <_free_r+0x11c>
  10ab48:	e3520f55 	cmp	r2, #340	; 0x154
  10ab4c:	91a007a3 	lsrls	r0, r3, #15
  10ab50:	92800077 	addls	r0, r0, #119	; 0x77
  10ab54:	91a01080 	lslls	r1, r0, #1
  10ab58:	9affffa7 	bls	10a9fc <_free_r+0xe4>
  10ab5c:	e3001554 	movw	r1, #1364	; 0x554
  10ab60:	e1520001 	cmp	r2, r1
  10ab64:	91a00923 	lsrls	r0, r3, #18
  10ab68:	9280007c 	addls	r0, r0, #124	; 0x7c
  10ab6c:	83a010fc 	movhi	r1, #252	; 0xfc
  10ab70:	83a0007e 	movhi	r0, #126	; 0x7e
  10ab74:	91a01080 	lslls	r1, r0, #1
  10ab78:	eaffff9f 	b	10a9fc <_free_r+0xe4>
  10ab7c:	001200dc 	.word	0x001200dc

0010ab80 <_fwalk>:
  10ab80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  10ab84:	e1a06000 	mov	r6, r0
  10ab88:	e1a08001 	mov	r8, r1
  10ab8c:	ebffff12 	bl	10a7dc <__sfp_lock_acquire>
  10ab90:	e2966e2e 	adds	r6, r6, #736	; 0x2e0
  10ab94:	0a000017 	beq	10abf8 <_fwalk+0x78>
  10ab98:	e3a07000 	mov	r7, #0
  10ab9c:	e5965004 	ldr	r5, [r6, #4]
  10aba0:	e5964008 	ldr	r4, [r6, #8]
  10aba4:	e2555001 	subs	r5, r5, #1
  10aba8:	4a00000c 	bmi	10abe0 <_fwalk+0x60>
  10abac:	e1d430fc 	ldrsh	r3, [r4, #12]
  10abb0:	e2455001 	sub	r5, r5, #1
  10abb4:	e3530000 	cmp	r3, #0
  10abb8:	0a000005 	beq	10abd4 <_fwalk+0x54>
  10abbc:	e1d430fe 	ldrsh	r3, [r4, #14]
  10abc0:	e1a00004 	mov	r0, r4
  10abc4:	e3730001 	cmn	r3, #1
  10abc8:	0a000001 	beq	10abd4 <_fwalk+0x54>
  10abcc:	e12fff38 	blx	r8
  10abd0:	e1877000 	orr	r7, r7, r0
  10abd4:	e3750001 	cmn	r5, #1
  10abd8:	e2844068 	add	r4, r4, #104	; 0x68
  10abdc:	1afffff2 	bne	10abac <_fwalk+0x2c>
  10abe0:	e5966000 	ldr	r6, [r6]
  10abe4:	e3560000 	cmp	r6, #0
  10abe8:	1affffeb 	bne	10ab9c <_fwalk+0x1c>
  10abec:	ebfffefb 	bl	10a7e0 <__sfp_lock_release>
  10abf0:	e1a00007 	mov	r0, r7
  10abf4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  10abf8:	e1a07006 	mov	r7, r6
  10abfc:	eafffffa 	b	10abec <_fwalk+0x6c>

0010ac00 <_fwalk_reent>:
  10ac00:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, sl, lr}
  10ac04:	e1a07000 	mov	r7, r0
  10ac08:	e1a08001 	mov	r8, r1
  10ac0c:	ebfffef2 	bl	10a7dc <__sfp_lock_acquire>
  10ac10:	e2976e2e 	adds	r6, r7, #736	; 0x2e0
  10ac14:	0a000018 	beq	10ac7c <_fwalk_reent+0x7c>
  10ac18:	e3a0a000 	mov	sl, #0
  10ac1c:	e5965004 	ldr	r5, [r6, #4]
  10ac20:	e5964008 	ldr	r4, [r6, #8]
  10ac24:	e2555001 	subs	r5, r5, #1
  10ac28:	4a00000d 	bmi	10ac64 <_fwalk_reent+0x64>
  10ac2c:	e1d430fc 	ldrsh	r3, [r4, #12]
  10ac30:	e2455001 	sub	r5, r5, #1
  10ac34:	e3530000 	cmp	r3, #0
  10ac38:	0a000006 	beq	10ac58 <_fwalk_reent+0x58>
  10ac3c:	e1d430fe 	ldrsh	r3, [r4, #14]
  10ac40:	e1a01004 	mov	r1, r4
  10ac44:	e1a00007 	mov	r0, r7
  10ac48:	e3730001 	cmn	r3, #1
  10ac4c:	0a000001 	beq	10ac58 <_fwalk_reent+0x58>
  10ac50:	e12fff38 	blx	r8
  10ac54:	e18aa000 	orr	sl, sl, r0
  10ac58:	e3750001 	cmn	r5, #1
  10ac5c:	e2844068 	add	r4, r4, #104	; 0x68
  10ac60:	1afffff1 	bne	10ac2c <_fwalk_reent+0x2c>
  10ac64:	e5966000 	ldr	r6, [r6]
  10ac68:	e3560000 	cmp	r6, #0
  10ac6c:	1affffea 	bne	10ac1c <_fwalk_reent+0x1c>
  10ac70:	ebfffeda 	bl	10a7e0 <__sfp_lock_release>
  10ac74:	e1a0000a 	mov	r0, sl
  10ac78:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, sl, pc}
  10ac7c:	e1a0a006 	mov	sl, r6
  10ac80:	eafffffa 	b	10ac70 <_fwalk_reent+0x70>

0010ac84 <_setlocale_r>:
  10ac84:	e92d4010 	push	{r4, lr}
  10ac88:	e2524000 	subs	r4, r2, #0
  10ac8c:	0a000005 	beq	10aca8 <_setlocale_r+0x24>
  10ac90:	e1a00004 	mov	r0, r4
  10ac94:	e3001158 	movw	r1, #344	; 0x158
  10ac98:	e3401011 	movt	r1, #17
  10ac9c:	eb00085e 	bl	10ce1c <strcmp>
  10aca0:	e3500000 	cmp	r0, #0
  10aca4:	1a000002 	bne	10acb4 <_setlocale_r+0x30>
  10aca8:	e3000114 	movw	r0, #276	; 0x114
  10acac:	e3400011 	movt	r0, #17
  10acb0:	e8bd8010 	pop	{r4, pc}
  10acb4:	e1a00004 	mov	r0, r4
  10acb8:	e3001114 	movw	r1, #276	; 0x114
  10acbc:	e3401011 	movt	r1, #17
  10acc0:	eb000855 	bl	10ce1c <strcmp>
  10acc4:	e3500000 	cmp	r0, #0
  10acc8:	0afffff6 	beq	10aca8 <_setlocale_r+0x24>
  10accc:	e1a00004 	mov	r0, r4
  10acd0:	e30f1f00 	movw	r1, #65280	; 0xff00
  10acd4:	e3401010 	movt	r1, #16
  10acd8:	eb00084f 	bl	10ce1c <strcmp>
  10acdc:	e3003114 	movw	r3, #276	; 0x114
  10ace0:	e3403011 	movt	r3, #17
  10ace4:	e3500000 	cmp	r0, #0
  10ace8:	01a00003 	moveq	r0, r3
  10acec:	13a00000 	movne	r0, #0
  10acf0:	e8bd8010 	pop	{r4, pc}

0010acf4 <__locale_charset>:
  10acf4:	e3000058 	movw	r0, #88	; 0x58
  10acf8:	e3400012 	movt	r0, #18
  10acfc:	e12fff1e 	bx	lr

0010ad00 <__locale_mb_cur_max>:
  10ad00:	e3003058 	movw	r3, #88	; 0x58
  10ad04:	e3403012 	movt	r3, #18
  10ad08:	e5930020 	ldr	r0, [r3, #32]
  10ad0c:	e12fff1e 	bx	lr

0010ad10 <__locale_msgcharset>:
  10ad10:	e59f0000 	ldr	r0, [pc]	; 10ad18 <__locale_msgcharset+0x8>
  10ad14:	e12fff1e 	bx	lr
  10ad18:	0012007c 	.word	0x0012007c

0010ad1c <__locale_cjk_lang>:
  10ad1c:	e3a00000 	mov	r0, #0
  10ad20:	e12fff1e 	bx	lr

0010ad24 <_localeconv_r>:
  10ad24:	e59f0000 	ldr	r0, [pc]	; 10ad2c <_localeconv_r+0x8>
  10ad28:	e12fff1e 	bx	lr
  10ad2c:	0012009c 	.word	0x0012009c

0010ad30 <setlocale>:
  10ad30:	e30f3c28 	movw	r3, #64552	; 0xfc28
  10ad34:	e3403011 	movt	r3, #17
  10ad38:	e1a0c000 	mov	ip, r0
  10ad3c:	e1a02001 	mov	r2, r1
  10ad40:	e5930000 	ldr	r0, [r3]
  10ad44:	e1a0100c 	mov	r1, ip
  10ad48:	eaffffcd 	b	10ac84 <_setlocale_r>

0010ad4c <localeconv>:
  10ad4c:	e59f0000 	ldr	r0, [pc]	; 10ad54 <localeconv+0x8>
  10ad50:	e12fff1e 	bx	lr
  10ad54:	0012009c 	.word	0x0012009c

0010ad58 <__smakebuf_r>:
  10ad58:	e1d130bc 	ldrh	r3, [r1, #12]
  10ad5c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  10ad60:	e2032002 	and	r2, r3, #2
  10ad64:	e24dd044 	sub	sp, sp, #68	; 0x44
  10ad68:	e1a04001 	mov	r4, r1
  10ad6c:	e6bf2072 	sxth	r2, r2
  10ad70:	e1a05000 	mov	r5, r0
  10ad74:	e3520000 	cmp	r2, #0
  10ad78:	1a00002d 	bne	10ae34 <__smakebuf_r+0xdc>
  10ad7c:	e1d110fe 	ldrsh	r1, [r1, #14]
  10ad80:	e3510000 	cmp	r1, #0
  10ad84:	ba000010 	blt	10adcc <__smakebuf_r+0x74>
  10ad88:	e28d2004 	add	r2, sp, #4
  10ad8c:	eb000e87 	bl	10e7b0 <_fstat_r>
  10ad90:	e3500000 	cmp	r0, #0
  10ad94:	ba00000b 	blt	10adc8 <__smakebuf_r+0x70>
  10ad98:	e59d3008 	ldr	r3, [sp, #8]
  10ad9c:	e2033a0f 	and	r3, r3, #61440	; 0xf000
  10ada0:	e2532a02 	subs	r2, r3, #8192	; 0x2000
  10ada4:	e2727000 	rsbs	r7, r2, #0
  10ada8:	e0b77002 	adcs	r7, r7, r2
  10adac:	e3530902 	cmp	r3, #32768	; 0x8000
  10adb0:	0a000025 	beq	10ae4c <__smakebuf_r+0xf4>
  10adb4:	e1d430bc 	ldrh	r3, [r4, #12]
  10adb8:	e3a06b01 	mov	r6, #1024	; 0x400
  10adbc:	e3833b02 	orr	r3, r3, #2048	; 0x800
  10adc0:	e1c430bc 	strh	r3, [r4, #12]
  10adc4:	ea000008 	b	10adec <__smakebuf_r+0x94>
  10adc8:	e1d430bc 	ldrh	r3, [r4, #12]
  10adcc:	e2036080 	and	r6, r3, #128	; 0x80
  10add0:	e3a07000 	mov	r7, #0
  10add4:	e3833b02 	orr	r3, r3, #2048	; 0x800
  10add8:	e1c430bc 	strh	r3, [r4, #12]
  10addc:	e6bf6076 	sxth	r6, r6
  10ade0:	e1560007 	cmp	r6, r7
  10ade4:	03a06b01 	moveq	r6, #1024	; 0x400
  10ade8:	13a06040 	movne	r6, #64	; 0x40
  10adec:	e1a00005 	mov	r0, r5
  10adf0:	e1a01006 	mov	r1, r6
  10adf4:	eb000035 	bl	10aed0 <_malloc_r>
  10adf8:	e3500000 	cmp	r0, #0
  10adfc:	0a000026 	beq	10ae9c <__smakebuf_r+0x144>
  10ae00:	e1d420bc 	ldrh	r2, [r4, #12]
  10ae04:	e3570000 	cmp	r7, #0
  10ae08:	e30a35a0 	movw	r3, #42400	; 0xa5a0
  10ae0c:	e3403010 	movt	r3, #16
  10ae10:	e3822080 	orr	r2, r2, #128	; 0x80
  10ae14:	e585303c 	str	r3, [r5, #60]	; 0x3c
  10ae18:	e1c420bc 	strh	r2, [r4, #12]
  10ae1c:	e5840000 	str	r0, [r4]
  10ae20:	e5840010 	str	r0, [r4, #16]
  10ae24:	e5846014 	str	r6, [r4, #20]
  10ae28:	1a000013 	bne	10ae7c <__smakebuf_r+0x124>
  10ae2c:	e28dd044 	add	sp, sp, #68	; 0x44
  10ae30:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  10ae34:	e2813043 	add	r3, r1, #67	; 0x43
  10ae38:	e5813000 	str	r3, [r1]
  10ae3c:	e5813010 	str	r3, [r1, #16]
  10ae40:	e3a03001 	mov	r3, #1
  10ae44:	e5813014 	str	r3, [r1, #20]
  10ae48:	eafffff7 	b	10ae2c <__smakebuf_r+0xd4>
  10ae4c:	e5942028 	ldr	r2, [r4, #40]	; 0x28
  10ae50:	e30c3de8 	movw	r3, #52712	; 0xcde8
  10ae54:	e3403010 	movt	r3, #16
  10ae58:	e1520003 	cmp	r2, r3
  10ae5c:	1affffd4 	bne	10adb4 <__smakebuf_r+0x5c>
  10ae60:	e1d420bc 	ldrh	r2, [r4, #12]
  10ae64:	e3a03b01 	mov	r3, #1024	; 0x400
  10ae68:	e1a06003 	mov	r6, r3
  10ae6c:	e584304c 	str	r3, [r4, #76]	; 0x4c
  10ae70:	e1823003 	orr	r3, r2, r3
  10ae74:	e1c430bc 	strh	r3, [r4, #12]
  10ae78:	eaffffdb 	b	10adec <__smakebuf_r+0x94>
  10ae7c:	e1a00005 	mov	r0, r5
  10ae80:	e1d410fe 	ldrsh	r1, [r4, #14]
  10ae84:	eb000f8e 	bl	10ecc4 <_isatty_r>
  10ae88:	e3500000 	cmp	r0, #0
  10ae8c:	11d430bc 	ldrhne	r3, [r4, #12]
  10ae90:	13833001 	orrne	r3, r3, #1
  10ae94:	11c430bc 	strhne	r3, [r4, #12]
  10ae98:	eaffffe3 	b	10ae2c <__smakebuf_r+0xd4>
  10ae9c:	e1d430bc 	ldrh	r3, [r4, #12]
  10aea0:	e2032c02 	and	r2, r3, #512	; 0x200
  10aea4:	e6bf2072 	sxth	r2, r2
  10aea8:	e3520000 	cmp	r2, #0
  10aeac:	1affffde 	bne	10ae2c <__smakebuf_r+0xd4>
  10aeb0:	e2842043 	add	r2, r4, #67	; 0x43
  10aeb4:	e3833002 	orr	r3, r3, #2
  10aeb8:	e5842000 	str	r2, [r4]
  10aebc:	e1c430bc 	strh	r3, [r4, #12]
  10aec0:	e3a03001 	mov	r3, #1
  10aec4:	e5842010 	str	r2, [r4, #16]
  10aec8:	e5843014 	str	r3, [r4, #20]
  10aecc:	eaffffd6 	b	10ae2c <__smakebuf_r+0xd4>

0010aed0 <_malloc_r>:
  10aed0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  10aed4:	e281400b 	add	r4, r1, #11
  10aed8:	e3540016 	cmp	r4, #22
  10aedc:	e24dd00c 	sub	sp, sp, #12
  10aee0:	83c44007 	bichi	r4, r4, #7
  10aee4:	e1a06000 	mov	r6, r0
  10aee8:	93a03000 	movls	r3, #0
  10aeec:	93a04010 	movls	r4, #16
  10aef0:	81a03fa4 	lsrhi	r3, r4, #31
  10aef4:	e1540001 	cmp	r4, r1
  10aef8:	21a01003 	movcs	r1, r3
  10aefc:	33831001 	orrcc	r1, r3, #1
  10af00:	e3510000 	cmp	r1, #0
  10af04:	13a0300c 	movne	r3, #12
  10af08:	13a07000 	movne	r7, #0
  10af0c:	15803000 	strne	r3, [r0]
  10af10:	1a000016 	bne	10af70 <_malloc_r+0xa0>
  10af14:	eb00043c 	bl	10c00c <__malloc_lock>
  10af18:	e3540f7e 	cmp	r4, #504	; 0x1f8
  10af1c:	2a000016 	bcs	10af7c <_malloc_r+0xac>
  10af20:	e1a071a4 	lsr	r7, r4, #3
  10af24:	e30050d4 	movw	r5, #212	; 0xd4
  10af28:	e3405012 	movt	r5, #18
  10af2c:	e0852187 	add	r2, r5, r7, lsl #3
  10af30:	e592300c 	ldr	r3, [r2, #12]
  10af34:	e1530002 	cmp	r3, r2
  10af38:	0a000151 	beq	10b484 <_malloc_r+0x5b4>
  10af3c:	e593c004 	ldr	ip, [r3, #4]
  10af40:	e2837008 	add	r7, r3, #8
  10af44:	e593200c 	ldr	r2, [r3, #12]
  10af48:	e1a00006 	mov	r0, r6
  10af4c:	e3ccc003 	bic	ip, ip, #3
  10af50:	e5931008 	ldr	r1, [r3, #8]
  10af54:	e083300c 	add	r3, r3, ip
  10af58:	e593c004 	ldr	ip, [r3, #4]
  10af5c:	e581200c 	str	r2, [r1, #12]
  10af60:	e38cc001 	orr	ip, ip, #1
  10af64:	e5821008 	str	r1, [r2, #8]
  10af68:	e583c004 	str	ip, [r3, #4]
  10af6c:	eb000427 	bl	10c010 <__malloc_unlock>
  10af70:	e1a00007 	mov	r0, r7
  10af74:	e28dd00c 	add	sp, sp, #12
  10af78:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  10af7c:	e1b074a4 	lsrs	r7, r4, #9
  10af80:	01a071a4 	lsreq	r7, r4, #3
  10af84:	01a0c087 	lsleq	ip, r7, #1
  10af88:	1a000062 	bne	10b118 <_malloc_r+0x248>
  10af8c:	e30050d4 	movw	r5, #212	; 0xd4
  10af90:	e3405012 	movt	r5, #18
  10af94:	e085c10c 	add	ip, r5, ip, lsl #2
  10af98:	e59c300c 	ldr	r3, [ip, #12]
  10af9c:	e15c0003 	cmp	ip, r3
  10afa0:	1a000005 	bne	10afbc <_malloc_r+0xec>
  10afa4:	ea00000a 	b	10afd4 <_malloc_r+0x104>
  10afa8:	e3520000 	cmp	r2, #0
  10afac:	aa0000dc 	bge	10b324 <_malloc_r+0x454>
  10afb0:	e593300c 	ldr	r3, [r3, #12]
  10afb4:	e15c0003 	cmp	ip, r3
  10afb8:	0a000005 	beq	10afd4 <_malloc_r+0x104>
  10afbc:	e5931004 	ldr	r1, [r3, #4]
  10afc0:	e3c11003 	bic	r1, r1, #3
  10afc4:	e0642001 	rsb	r2, r4, r1
  10afc8:	e352000f 	cmp	r2, #15
  10afcc:	dafffff5 	ble	10afa8 <_malloc_r+0xd8>
  10afd0:	e2477001 	sub	r7, r7, #1
  10afd4:	e2877001 	add	r7, r7, #1
  10afd8:	e30020d4 	movw	r2, #212	; 0xd4
  10afdc:	e5953010 	ldr	r3, [r5, #16]
  10afe0:	e3402012 	movt	r2, #18
  10afe4:	e282e008 	add	lr, r2, #8
  10afe8:	e153000e 	cmp	r3, lr
  10afec:	05921004 	ldreq	r1, [r2, #4]
  10aff0:	0a000016 	beq	10b050 <_malloc_r+0x180>
  10aff4:	e5931004 	ldr	r1, [r3, #4]
  10aff8:	e3c11003 	bic	r1, r1, #3
  10affc:	e064c001 	rsb	ip, r4, r1
  10b000:	e35c000f 	cmp	ip, #15
  10b004:	ca0000fc 	bgt	10b3fc <_malloc_r+0x52c>
  10b008:	e35c0000 	cmp	ip, #0
  10b00c:	e582e014 	str	lr, [r2, #20]
  10b010:	e582e010 	str	lr, [r2, #16]
  10b014:	aa000045 	bge	10b130 <_malloc_r+0x260>
  10b018:	e3510c02 	cmp	r1, #512	; 0x200
  10b01c:	2a0000d6 	bcs	10b37c <_malloc_r+0x4ac>
  10b020:	e1a011a1 	lsr	r1, r1, #3
  10b024:	e592c004 	ldr	ip, [r2, #4]
  10b028:	e3a08001 	mov	r8, #1
  10b02c:	e0820181 	add	r0, r2, r1, lsl #3
  10b030:	e1a01141 	asr	r1, r1, #2
  10b034:	e18c1118 	orr	r1, ip, r8, lsl r1
  10b038:	e583000c 	str	r0, [r3, #12]
  10b03c:	e590c008 	ldr	ip, [r0, #8]
  10b040:	e5821004 	str	r1, [r2, #4]
  10b044:	e583c008 	str	ip, [r3, #8]
  10b048:	e58c300c 	str	r3, [ip, #12]
  10b04c:	e5803008 	str	r3, [r0, #8]
  10b050:	e1a00147 	asr	r0, r7, #2
  10b054:	e3a03001 	mov	r3, #1
  10b058:	e1a00013 	lsl	r0, r3, r0
  10b05c:	e1500001 	cmp	r0, r1
  10b060:	8a00003a 	bhi	10b150 <_malloc_r+0x280>
  10b064:	e1110000 	tst	r1, r0
  10b068:	1a000008 	bne	10b090 <_malloc_r+0x1c0>
  10b06c:	e1a00310 	lsl	r0, r0, r3
  10b070:	e3c77003 	bic	r7, r7, #3
  10b074:	e1110000 	tst	r1, r0
  10b078:	e2877004 	add	r7, r7, #4
  10b07c:	1a000003 	bne	10b090 <_malloc_r+0x1c0>
  10b080:	e1a00080 	lsl	r0, r0, #1
  10b084:	e2877004 	add	r7, r7, #4
  10b088:	e1110000 	tst	r1, r0
  10b08c:	0afffffb 	beq	10b080 <_malloc_r+0x1b0>
  10b090:	e085a187 	add	sl, r5, r7, lsl #3
  10b094:	e1a08007 	mov	r8, r7
  10b098:	e1a0c00a 	mov	ip, sl
  10b09c:	e59c200c 	ldr	r2, [ip, #12]
  10b0a0:	e15c0002 	cmp	ip, r2
  10b0a4:	1a000005 	bne	10b0c0 <_malloc_r+0x1f0>
  10b0a8:	ea0000e0 	b	10b430 <_malloc_r+0x560>
  10b0ac:	e3510000 	cmp	r1, #0
  10b0b0:	aa0000f9 	bge	10b49c <_malloc_r+0x5cc>
  10b0b4:	e592200c 	ldr	r2, [r2, #12]
  10b0b8:	e15c0002 	cmp	ip, r2
  10b0bc:	0a0000db 	beq	10b430 <_malloc_r+0x560>
  10b0c0:	e5923004 	ldr	r3, [r2, #4]
  10b0c4:	e3c33003 	bic	r3, r3, #3
  10b0c8:	e0641003 	rsb	r1, r4, r3
  10b0cc:	e351000f 	cmp	r1, #15
  10b0d0:	dafffff5 	ble	10b0ac <_malloc_r+0x1dc>
  10b0d4:	e1a07002 	mov	r7, r2
  10b0d8:	e592c00c 	ldr	ip, [r2, #12]
  10b0dc:	e5b78008 	ldr	r8, [r7, #8]!
  10b0e0:	e0823004 	add	r3, r2, r4
  10b0e4:	e381a001 	orr	sl, r1, #1
  10b0e8:	e3844001 	orr	r4, r4, #1
  10b0ec:	e1a00006 	mov	r0, r6
  10b0f0:	e5824004 	str	r4, [r2, #4]
  10b0f4:	e588c00c 	str	ip, [r8, #12]
  10b0f8:	e58c8008 	str	r8, [ip, #8]
  10b0fc:	e5853014 	str	r3, [r5, #20]
  10b100:	e5853010 	str	r3, [r5, #16]
  10b104:	e583e00c 	str	lr, [r3, #12]
  10b108:	e9834400 	stmib	r3, {sl, lr}
  10b10c:	e7831001 	str	r1, [r3, r1]
  10b110:	eb0003be 	bl	10c010 <__malloc_unlock>
  10b114:	eaffff95 	b	10af70 <_malloc_r+0xa0>
  10b118:	e3570004 	cmp	r7, #4
  10b11c:	8a00008c 	bhi	10b354 <_malloc_r+0x484>
  10b120:	e1a07324 	lsr	r7, r4, #6
  10b124:	e2877038 	add	r7, r7, #56	; 0x38
  10b128:	e1a0c087 	lsl	ip, r7, #1
  10b12c:	eaffff96 	b	10af8c <_malloc_r+0xbc>
  10b130:	e0831001 	add	r1, r3, r1
  10b134:	e2837008 	add	r7, r3, #8
  10b138:	e1a00006 	mov	r0, r6
  10b13c:	e5913004 	ldr	r3, [r1, #4]
  10b140:	e3833001 	orr	r3, r3, #1
  10b144:	e5813004 	str	r3, [r1, #4]
  10b148:	eb0003b0 	bl	10c010 <__malloc_unlock>
  10b14c:	eaffff87 	b	10af70 <_malloc_r+0xa0>
  10b150:	e5957008 	ldr	r7, [r5, #8]
  10b154:	e5979004 	ldr	r9, [r7, #4]
  10b158:	e3c99003 	bic	r9, r9, #3
  10b15c:	e1540009 	cmp	r4, r9
  10b160:	8a000002 	bhi	10b170 <_malloc_r+0x2a0>
  10b164:	e0643009 	rsb	r3, r4, r9
  10b168:	e353000f 	cmp	r3, #15
  10b16c:	ca000062 	bgt	10b2fc <_malloc_r+0x42c>
  10b170:	e5953408 	ldr	r3, [r5, #1032]	; 0x408
  10b174:	e308a054 	movw	sl, #32852	; 0x8054
  10b178:	e340a012 	movt	sl, #18
  10b17c:	e1a00006 	mov	r0, r6
  10b180:	e3730001 	cmn	r3, #1
  10b184:	e0872009 	add	r2, r7, r9
  10b188:	e59a3000 	ldr	r3, [sl]
  10b18c:	e58d2004 	str	r2, [sp, #4]
  10b190:	e0843003 	add	r3, r4, r3
  10b194:	12833a01 	addne	r3, r3, #4096	; 0x1000
  10b198:	0283b010 	addeq	fp, r3, #16
  10b19c:	1283300f 	addne	r3, r3, #15
  10b1a0:	13c33eff 	bicne	r3, r3, #4080	; 0xff0
  10b1a4:	13c3b00f 	bicne	fp, r3, #15
  10b1a8:	e1a0100b 	mov	r1, fp
  10b1ac:	eb0006da 	bl	10cd1c <_sbrk_r>
  10b1b0:	e59d2004 	ldr	r2, [sp, #4]
  10b1b4:	e3700001 	cmn	r0, #1
  10b1b8:	e1a08000 	mov	r8, r0
  10b1bc:	0a0000e2 	beq	10b54c <_malloc_r+0x67c>
  10b1c0:	e1520000 	cmp	r2, r0
  10b1c4:	8a0000be 	bhi	10b4c4 <_malloc_r+0x5f4>
  10b1c8:	e59a3004 	ldr	r3, [sl, #4]
  10b1cc:	e1520008 	cmp	r2, r8
  10b1d0:	e08b3003 	add	r3, fp, r3
  10b1d4:	e58a3004 	str	r3, [sl, #4]
  10b1d8:	0a0000df 	beq	10b55c <_malloc_r+0x68c>
  10b1dc:	e5950408 	ldr	r0, [r5, #1032]	; 0x408
  10b1e0:	e30010d4 	movw	r1, #212	; 0xd4
  10b1e4:	e3401012 	movt	r1, #18
  10b1e8:	e3700001 	cmn	r0, #1
  10b1ec:	e1a00006 	mov	r0, r6
  10b1f0:	10622008 	rsbne	r2, r2, r8
  10b1f4:	05818408 	streq	r8, [r1, #1032]	; 0x408
  10b1f8:	10833002 	addne	r3, r3, r2
  10b1fc:	158a3004 	strne	r3, [sl, #4]
  10b200:	e2183007 	ands	r3, r8, #7
  10b204:	12632008 	rsbne	r2, r3, #8
  10b208:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
  10b20c:	10888002 	addne	r8, r8, r2
  10b210:	12832008 	addne	r2, r3, #8
  10b214:	e088300b 	add	r3, r8, fp
  10b218:	03a02a01 	moveq	r2, #4096	; 0x1000
  10b21c:	e1a03a03 	lsl	r3, r3, #20
  10b220:	e1a03a23 	lsr	r3, r3, #20
  10b224:	e063b002 	rsb	fp, r3, r2
  10b228:	e1a0100b 	mov	r1, fp
  10b22c:	eb0006ba 	bl	10cd1c <_sbrk_r>
  10b230:	e59a3004 	ldr	r3, [sl, #4]
  10b234:	e3082054 	movw	r2, #32852	; 0x8054
  10b238:	e5858008 	str	r8, [r5, #8]
  10b23c:	e3402012 	movt	r2, #18
  10b240:	e3700001 	cmn	r0, #1
  10b244:	10681000 	rsbne	r1, r8, r0
  10b248:	108b1001 	addne	r1, fp, r1
  10b24c:	03a01001 	moveq	r1, #1
  10b250:	13811001 	orrne	r1, r1, #1
  10b254:	03a0b000 	moveq	fp, #0
  10b258:	e1570005 	cmp	r7, r5
  10b25c:	e08b3003 	add	r3, fp, r3
  10b260:	e5881004 	str	r1, [r8, #4]
  10b264:	e58a3004 	str	r3, [sl, #4]
  10b268:	0a00000d 	beq	10b2a4 <_malloc_r+0x3d4>
  10b26c:	e359000f 	cmp	r9, #15
  10b270:	9a0000a8 	bls	10b518 <_malloc_r+0x648>
  10b274:	e249100c 	sub	r1, r9, #12
  10b278:	e597e004 	ldr	lr, [r7, #4]
  10b27c:	e3c11007 	bic	r1, r1, #7
  10b280:	e3a0c005 	mov	ip, #5
  10b284:	e0870001 	add	r0, r7, r1
  10b288:	e351000f 	cmp	r1, #15
  10b28c:	e20ee001 	and	lr, lr, #1
  10b290:	e181100e 	orr	r1, r1, lr
  10b294:	e5871004 	str	r1, [r7, #4]
  10b298:	e580c004 	str	ip, [r0, #4]
  10b29c:	e580c008 	str	ip, [r0, #8]
  10b2a0:	8a0000b6 	bhi	10b580 <_malloc_r+0x6b0>
  10b2a4:	e59a102c 	ldr	r1, [sl, #44]	; 0x2c
  10b2a8:	e3082054 	movw	r2, #32852	; 0x8054
  10b2ac:	e3402012 	movt	r2, #18
  10b2b0:	e5957008 	ldr	r7, [r5, #8]
  10b2b4:	e1530001 	cmp	r3, r1
  10b2b8:	e59a1030 	ldr	r1, [sl, #48]	; 0x30
  10b2bc:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
  10b2c0:	e3082054 	movw	r2, #32852	; 0x8054
  10b2c4:	e3402012 	movt	r2, #18
  10b2c8:	e1530001 	cmp	r3, r1
  10b2cc:	85823030 	strhi	r3, [r2, #48]	; 0x30
  10b2d0:	e5973004 	ldr	r3, [r7, #4]
  10b2d4:	e3c33003 	bic	r3, r3, #3
  10b2d8:	e1540003 	cmp	r4, r3
  10b2dc:	e0643003 	rsb	r3, r4, r3
  10b2e0:	8a000001 	bhi	10b2ec <_malloc_r+0x41c>
  10b2e4:	e353000f 	cmp	r3, #15
  10b2e8:	ca000003 	bgt	10b2fc <_malloc_r+0x42c>
  10b2ec:	e1a00006 	mov	r0, r6
  10b2f0:	e3a07000 	mov	r7, #0
  10b2f4:	eb000345 	bl	10c010 <__malloc_unlock>
  10b2f8:	eaffff1c 	b	10af70 <_malloc_r+0xa0>
  10b2fc:	e0872004 	add	r2, r7, r4
  10b300:	e3833001 	orr	r3, r3, #1
  10b304:	e3844001 	orr	r4, r4, #1
  10b308:	e1a00006 	mov	r0, r6
  10b30c:	e5874004 	str	r4, [r7, #4]
  10b310:	e2877008 	add	r7, r7, #8
  10b314:	e5823004 	str	r3, [r2, #4]
  10b318:	e5852008 	str	r2, [r5, #8]
  10b31c:	eb00033b 	bl	10c010 <__malloc_unlock>
  10b320:	eaffff12 	b	10af70 <_malloc_r+0xa0>
  10b324:	e0831001 	add	r1, r3, r1
  10b328:	e593200c 	ldr	r2, [r3, #12]
  10b32c:	e593c008 	ldr	ip, [r3, #8]
  10b330:	e2837008 	add	r7, r3, #8
  10b334:	e591e004 	ldr	lr, [r1, #4]
  10b338:	e1a00006 	mov	r0, r6
  10b33c:	e38e3001 	orr	r3, lr, #1
  10b340:	e58c200c 	str	r2, [ip, #12]
  10b344:	e582c008 	str	ip, [r2, #8]
  10b348:	e5813004 	str	r3, [r1, #4]
  10b34c:	eb00032f 	bl	10c010 <__malloc_unlock>
  10b350:	eaffff06 	b	10af70 <_malloc_r+0xa0>
  10b354:	e3570014 	cmp	r7, #20
  10b358:	9287705b 	addls	r7, r7, #91	; 0x5b
  10b35c:	91a0c087 	lslls	ip, r7, #1
  10b360:	9affff09 	bls	10af8c <_malloc_r+0xbc>
  10b364:	e3570054 	cmp	r7, #84	; 0x54
  10b368:	8a00005d 	bhi	10b4e4 <_malloc_r+0x614>
  10b36c:	e1a07624 	lsr	r7, r4, #12
  10b370:	e287706e 	add	r7, r7, #110	; 0x6e
  10b374:	e1a0c087 	lsl	ip, r7, #1
  10b378:	eaffff03 	b	10af8c <_malloc_r+0xbc>
  10b37c:	e1a024a1 	lsr	r2, r1, #9
  10b380:	e3520004 	cmp	r2, #4
  10b384:	9a00004a 	bls	10b4b4 <_malloc_r+0x5e4>
  10b388:	e3520014 	cmp	r2, #20
  10b38c:	9282805b 	addls	r8, r2, #91	; 0x5b
  10b390:	91a0c088 	lslls	ip, r8, #1
  10b394:	9a000004 	bls	10b3ac <_malloc_r+0x4dc>
  10b398:	e3520054 	cmp	r2, #84	; 0x54
  10b39c:	8a00007e 	bhi	10b59c <_malloc_r+0x6cc>
  10b3a0:	e1a08621 	lsr	r8, r1, #12
  10b3a4:	e288806e 	add	r8, r8, #110	; 0x6e
  10b3a8:	e1a0c088 	lsl	ip, r8, #1
  10b3ac:	e085c10c 	add	ip, r5, ip, lsl #2
  10b3b0:	e30000d4 	movw	r0, #212	; 0xd4
  10b3b4:	e3400012 	movt	r0, #18
  10b3b8:	e59c2008 	ldr	r2, [ip, #8]
  10b3bc:	e152000c 	cmp	r2, ip
  10b3c0:	0a00004d 	beq	10b4fc <_malloc_r+0x62c>
  10b3c4:	e5920004 	ldr	r0, [r2, #4]
  10b3c8:	e3c00003 	bic	r0, r0, #3
  10b3cc:	e1510000 	cmp	r1, r0
  10b3d0:	2a000002 	bcs	10b3e0 <_malloc_r+0x510>
  10b3d4:	e5922008 	ldr	r2, [r2, #8]
  10b3d8:	e15c0002 	cmp	ip, r2
  10b3dc:	1afffff8 	bne	10b3c4 <_malloc_r+0x4f4>
  10b3e0:	e592c00c 	ldr	ip, [r2, #12]
  10b3e4:	e5951004 	ldr	r1, [r5, #4]
  10b3e8:	e583c00c 	str	ip, [r3, #12]
  10b3ec:	e5832008 	str	r2, [r3, #8]
  10b3f0:	e582300c 	str	r3, [r2, #12]
  10b3f4:	e58c3008 	str	r3, [ip, #8]
  10b3f8:	eaffff14 	b	10b050 <_malloc_r+0x180>
  10b3fc:	e0831004 	add	r1, r3, r4
  10b400:	e38c5001 	orr	r5, ip, #1
  10b404:	e5821014 	str	r1, [r2, #20]
  10b408:	e3844001 	orr	r4, r4, #1
  10b40c:	e5821010 	str	r1, [r2, #16]
  10b410:	e1a00006 	mov	r0, r6
  10b414:	e5834004 	str	r4, [r3, #4]
  10b418:	e2837008 	add	r7, r3, #8
  10b41c:	e581e00c 	str	lr, [r1, #12]
  10b420:	e9814020 	stmib	r1, {r5, lr}
  10b424:	e781c00c 	str	ip, [r1, ip]
  10b428:	eb0002f8 	bl	10c010 <__malloc_unlock>
  10b42c:	eafffecf 	b	10af70 <_malloc_r+0xa0>
  10b430:	e2888001 	add	r8, r8, #1
  10b434:	e28cc008 	add	ip, ip, #8
  10b438:	e3180003 	tst	r8, #3
  10b43c:	1affff16 	bne	10b09c <_malloc_r+0x1cc>
  10b440:	e3170003 	tst	r7, #3
  10b444:	e24a3008 	sub	r3, sl, #8
  10b448:	e2477001 	sub	r7, r7, #1
  10b44c:	0a00005f 	beq	10b5d0 <_malloc_r+0x700>
  10b450:	e59aa000 	ldr	sl, [sl]
  10b454:	e15a0003 	cmp	sl, r3
  10b458:	0afffff8 	beq	10b440 <_malloc_r+0x570>
  10b45c:	e5953004 	ldr	r3, [r5, #4]
  10b460:	e1a00080 	lsl	r0, r0, #1
  10b464:	e1500003 	cmp	r0, r3
  10b468:	8affff38 	bhi	10b150 <_malloc_r+0x280>
  10b46c:	e3500000 	cmp	r0, #0
  10b470:	0affff36 	beq	10b150 <_malloc_r+0x280>
  10b474:	e1130000 	tst	r3, r0
  10b478:	0a000058 	beq	10b5e0 <_malloc_r+0x710>
  10b47c:	e1a07008 	mov	r7, r8
  10b480:	eaffff02 	b	10b090 <_malloc_r+0x1c0>
  10b484:	e2832008 	add	r2, r3, #8
  10b488:	e5933014 	ldr	r3, [r3, #20]
  10b48c:	e1520003 	cmp	r2, r3
  10b490:	02877002 	addeq	r7, r7, #2
  10b494:	0afffecf 	beq	10afd8 <_malloc_r+0x108>
  10b498:	eafffea7 	b	10af3c <_malloc_r+0x6c>
  10b49c:	e1a07002 	mov	r7, r2
  10b4a0:	e0823003 	add	r3, r2, r3
  10b4a4:	e1a00006 	mov	r0, r6
  10b4a8:	e592200c 	ldr	r2, [r2, #12]
  10b4ac:	e5b71008 	ldr	r1, [r7, #8]!
  10b4b0:	eafffea8 	b	10af58 <_malloc_r+0x88>
  10b4b4:	e1a08321 	lsr	r8, r1, #6
  10b4b8:	e2888038 	add	r8, r8, #56	; 0x38
  10b4bc:	e1a0c088 	lsl	ip, r8, #1
  10b4c0:	eaffffb9 	b	10b3ac <_malloc_r+0x4dc>
  10b4c4:	e1570005 	cmp	r7, r5
  10b4c8:	e30030d4 	movw	r3, #212	; 0xd4
  10b4cc:	e3403012 	movt	r3, #18
  10b4d0:	0affff3c 	beq	10b1c8 <_malloc_r+0x2f8>
  10b4d4:	e5937008 	ldr	r7, [r3, #8]
  10b4d8:	e5973004 	ldr	r3, [r7, #4]
  10b4dc:	e3c33003 	bic	r3, r3, #3
  10b4e0:	eaffff7c 	b	10b2d8 <_malloc_r+0x408>
  10b4e4:	e3570f55 	cmp	r7, #340	; 0x154
  10b4e8:	8a00000f 	bhi	10b52c <_malloc_r+0x65c>
  10b4ec:	e1a077a4 	lsr	r7, r4, #15
  10b4f0:	e2877077 	add	r7, r7, #119	; 0x77
  10b4f4:	e1a0c087 	lsl	ip, r7, #1
  10b4f8:	eafffea3 	b	10af8c <_malloc_r+0xbc>
  10b4fc:	e590a004 	ldr	sl, [r0, #4]
  10b500:	e1a08148 	asr	r8, r8, #2
  10b504:	e3a01001 	mov	r1, #1
  10b508:	e1a0c002 	mov	ip, r2
  10b50c:	e18a1811 	orr	r1, sl, r1, lsl r8
  10b510:	e5801004 	str	r1, [r0, #4]
  10b514:	eaffffb3 	b	10b3e8 <_malloc_r+0x518>
  10b518:	e3a03001 	mov	r3, #1
  10b51c:	e1a07008 	mov	r7, r8
  10b520:	e5883004 	str	r3, [r8, #4]
  10b524:	e3a03000 	mov	r3, #0
  10b528:	eaffff6a 	b	10b2d8 <_malloc_r+0x408>
  10b52c:	e3003554 	movw	r3, #1364	; 0x554
  10b530:	e1570003 	cmp	r7, r3
  10b534:	91a07924 	lsrls	r7, r4, #18
  10b538:	9287707c 	addls	r7, r7, #124	; 0x7c
  10b53c:	83a0c0fc 	movhi	ip, #252	; 0xfc
  10b540:	83a0707e 	movhi	r7, #126	; 0x7e
  10b544:	91a0c087 	lslls	ip, r7, #1
  10b548:	eafffe8f 	b	10af8c <_malloc_r+0xbc>
  10b54c:	e5957008 	ldr	r7, [r5, #8]
  10b550:	e5973004 	ldr	r3, [r7, #4]
  10b554:	e3c33003 	bic	r3, r3, #3
  10b558:	eaffff5e 	b	10b2d8 <_malloc_r+0x408>
  10b55c:	e1a01a02 	lsl	r1, r2, #20
  10b560:	e1a01a21 	lsr	r1, r1, #20
  10b564:	e3510000 	cmp	r1, #0
  10b568:	1affff1b 	bne	10b1dc <_malloc_r+0x30c>
  10b56c:	e5952008 	ldr	r2, [r5, #8]
  10b570:	e08b1009 	add	r1, fp, r9
  10b574:	e3811001 	orr	r1, r1, #1
  10b578:	e5821004 	str	r1, [r2, #4]
  10b57c:	eaffff48 	b	10b2a4 <_malloc_r+0x3d4>
  10b580:	e1a00006 	mov	r0, r6
  10b584:	e2871008 	add	r1, r7, #8
  10b588:	e58d2004 	str	r2, [sp, #4]
  10b58c:	ebfffce1 	bl	10a918 <_free_r>
  10b590:	e59d2004 	ldr	r2, [sp, #4]
  10b594:	e5923004 	ldr	r3, [r2, #4]
  10b598:	eaffff41 	b	10b2a4 <_malloc_r+0x3d4>
  10b59c:	e3520f55 	cmp	r2, #340	; 0x154
  10b5a0:	91a087a1 	lsrls	r8, r1, #15
  10b5a4:	92888077 	addls	r8, r8, #119	; 0x77
  10b5a8:	91a0c088 	lslls	ip, r8, #1
  10b5ac:	9affff7e 	bls	10b3ac <_malloc_r+0x4dc>
  10b5b0:	e3000554 	movw	r0, #1364	; 0x554
  10b5b4:	e1520000 	cmp	r2, r0
  10b5b8:	91a08921 	lsrls	r8, r1, #18
  10b5bc:	9288807c 	addls	r8, r8, #124	; 0x7c
  10b5c0:	83a0c0fc 	movhi	ip, #252	; 0xfc
  10b5c4:	83a0807e 	movhi	r8, #126	; 0x7e
  10b5c8:	91a0c088 	lslls	ip, r8, #1
  10b5cc:	eaffff76 	b	10b3ac <_malloc_r+0x4dc>
  10b5d0:	e5953004 	ldr	r3, [r5, #4]
  10b5d4:	e1c33000 	bic	r3, r3, r0
  10b5d8:	e5853004 	str	r3, [r5, #4]
  10b5dc:	eaffff9f 	b	10b460 <_malloc_r+0x590>
  10b5e0:	e1a00080 	lsl	r0, r0, #1
  10b5e4:	e2888004 	add	r8, r8, #4
  10b5e8:	eaffffa1 	b	10b474 <_malloc_r+0x5a4>

0010b5ec <memchr>:
  10b5ec:	e3100003 	tst	r0, #3
  10b5f0:	e6ef1071 	uxtb	r1, r1
  10b5f4:	e92d0070 	push	{r4, r5, r6}
  10b5f8:	0a00003e 	beq	10b6f8 <memchr+0x10c>
  10b5fc:	e3520000 	cmp	r2, #0
  10b600:	e242c001 	sub	ip, r2, #1
  10b604:	0a00003d 	beq	10b700 <memchr+0x114>
  10b608:	e5d03000 	ldrb	r3, [r0]
  10b60c:	e1530001 	cmp	r3, r1
  10b610:	0a00001f 	beq	10b694 <memchr+0xa8>
  10b614:	e2803001 	add	r3, r0, #1
  10b618:	ea000005 	b	10b634 <memchr+0x48>
  10b61c:	e35c0000 	cmp	ip, #0
  10b620:	0a00001d 	beq	10b69c <memchr+0xb0>
  10b624:	e5d02000 	ldrb	r2, [r0]
  10b628:	e24cc001 	sub	ip, ip, #1
  10b62c:	e1520001 	cmp	r2, r1
  10b630:	0a000017 	beq	10b694 <memchr+0xa8>
  10b634:	e3130003 	tst	r3, #3
  10b638:	e1a00003 	mov	r0, r3
  10b63c:	e2833001 	add	r3, r3, #1
  10b640:	1afffff5 	bne	10b61c <memchr+0x30>
  10b644:	e35c0003 	cmp	ip, #3
  10b648:	8a000015 	bhi	10b6a4 <memchr+0xb8>
  10b64c:	e35c0000 	cmp	ip, #0
  10b650:	e24c4001 	sub	r4, ip, #1
  10b654:	0a000010 	beq	10b69c <memchr+0xb0>
  10b658:	e5d03000 	ldrb	r3, [r0]
  10b65c:	e1530001 	cmp	r3, r1
  10b660:	0a00000b 	beq	10b694 <memchr+0xa8>
  10b664:	e2802001 	add	r2, r0, #1
  10b668:	e3a03000 	mov	r3, #0
  10b66c:	ea000002 	b	10b67c <memchr+0x90>
  10b670:	e5d0c000 	ldrb	ip, [r0]
  10b674:	e15c0001 	cmp	ip, r1
  10b678:	0a000005 	beq	10b694 <memchr+0xa8>
  10b67c:	e1540003 	cmp	r4, r3
  10b680:	e1a00002 	mov	r0, r2
  10b684:	e2833001 	add	r3, r3, #1
  10b688:	e2822001 	add	r2, r2, #1
  10b68c:	1afffff7 	bne	10b670 <memchr+0x84>
  10b690:	e3a00000 	mov	r0, #0
  10b694:	e8bd0070 	pop	{r4, r5, r6}
  10b698:	e12fff1e 	bx	lr
  10b69c:	e1a0000c 	mov	r0, ip
  10b6a0:	eafffffb 	b	10b694 <memchr+0xa8>
  10b6a4:	e1816401 	orr	r6, r1, r1, lsl #8
  10b6a8:	e1866806 	orr	r6, r6, r6, lsl #16
  10b6ac:	e5903000 	ldr	r3, [r0]
  10b6b0:	e30f4eff 	movw	r4, #65279	; 0xfeff
  10b6b4:	e34f4efe 	movt	r4, #65278	; 0xfefe
  10b6b8:	e3082080 	movw	r2, #32896	; 0x8080
  10b6bc:	e0263003 	eor	r3, r6, r3
  10b6c0:	e3482080 	movt	r2, #32896	; 0x8080
  10b6c4:	e0834004 	add	r4, r3, r4
  10b6c8:	e1a05000 	mov	r5, r0
  10b6cc:	e1c44003 	bic	r4, r4, r3
  10b6d0:	e2800004 	add	r0, r0, #4
  10b6d4:	e0042002 	and	r2, r4, r2
  10b6d8:	e3520000 	cmp	r2, #0
  10b6dc:	1a000003 	bne	10b6f0 <memchr+0x104>
  10b6e0:	e24cc004 	sub	ip, ip, #4
  10b6e4:	e35c0003 	cmp	ip, #3
  10b6e8:	8affffef 	bhi	10b6ac <memchr+0xc0>
  10b6ec:	eaffffd6 	b	10b64c <memchr+0x60>
  10b6f0:	e1a00005 	mov	r0, r5
  10b6f4:	eaffffd4 	b	10b64c <memchr+0x60>
  10b6f8:	e1a0c002 	mov	ip, r2
  10b6fc:	eaffffd0 	b	10b644 <memchr+0x58>
  10b700:	e1a00002 	mov	r0, r2
  10b704:	eaffffe2 	b	10b694 <memchr+0xa8>

0010b708 <memcpy>:
  10b708:	e3520003 	cmp	r2, #3
  10b70c:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp}
  10b710:	e24dd058 	sub	sp, sp, #88	; 0x58
  10b714:	8a00000a 	bhi	10b744 <memcpy+0x3c>
  10b718:	e3520000 	cmp	r2, #0
  10b71c:	0a000005 	beq	10b738 <memcpy+0x30>
  10b720:	e3a03000 	mov	r3, #0
  10b724:	e7d1c003 	ldrb	ip, [r1, r3]
  10b728:	e7c0c003 	strb	ip, [r0, r3]
  10b72c:	e2833001 	add	r3, r3, #1
  10b730:	e1530002 	cmp	r3, r2
  10b734:	1afffffa 	bne	10b724 <memcpy+0x1c>
  10b738:	e28dd058 	add	sp, sp, #88	; 0x58
  10b73c:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
  10b740:	e12fff1e 	bx	lr
  10b744:	e3100003 	tst	r0, #3
  10b748:	e0802002 	add	r2, r0, r2
  10b74c:	e58d2020 	str	r2, [sp, #32]
  10b750:	0a00000b 	beq	10b784 <memcpy+0x7c>
  10b754:	e2803001 	add	r3, r0, #1
  10b758:	e2812001 	add	r2, r1, #1
  10b75c:	e2031003 	and	r1, r3, #3
  10b760:	e552c001 	ldrb	ip, [r2, #-1]
  10b764:	e3510000 	cmp	r1, #0
  10b768:	e1a0b003 	mov	fp, r3
  10b76c:	e1a01002 	mov	r1, r2
  10b770:	e2833001 	add	r3, r3, #1
  10b774:	e543c002 	strb	ip, [r3, #-2]
  10b778:	e2822001 	add	r2, r2, #1
  10b77c:	1afffff6 	bne	10b75c <memcpy+0x54>
  10b780:	ea000000 	b	10b788 <memcpy+0x80>
  10b784:	e1a0b000 	mov	fp, r0
  10b788:	e2113003 	ands	r3, r1, #3
  10b78c:	1a00001f 	bne	10b810 <memcpy+0x108>
  10b790:	e59d2020 	ldr	r2, [sp, #32]
  10b794:	e06b9002 	rsb	r9, fp, r2
  10b798:	e359000f 	cmp	r9, #15
  10b79c:	ca000032 	bgt	10b86c <memcpy+0x164>
  10b7a0:	e3590003 	cmp	r9, #3
  10b7a4:	c28b3004 	addgt	r3, fp, #4
  10b7a8:	c2812004 	addgt	r2, r1, #4
  10b7ac:	da000009 	ble	10b7d8 <memcpy+0xd0>
  10b7b0:	e59d4020 	ldr	r4, [sp, #32]
  10b7b4:	e1a0b003 	mov	fp, r3
  10b7b8:	e512c004 	ldr	ip, [r2, #-4]
  10b7bc:	e0631004 	rsb	r1, r3, r4
  10b7c0:	e2833004 	add	r3, r3, #4
  10b7c4:	e3510003 	cmp	r1, #3
  10b7c8:	e1a01002 	mov	r1, r2
  10b7cc:	e503c008 	str	ip, [r3, #-8]
  10b7d0:	e2822004 	add	r2, r2, #4
  10b7d4:	cafffff5 	bgt	10b7b0 <memcpy+0xa8>
  10b7d8:	e59d8020 	ldr	r8, [sp, #32]
  10b7dc:	e158000b 	cmp	r8, fp
  10b7e0:	9affffd4 	bls	10b738 <memcpy+0x30>
  10b7e4:	e59da020 	ldr	sl, [sp, #32]
  10b7e8:	e28b3001 	add	r3, fp, #1
  10b7ec:	e2811001 	add	r1, r1, #1
  10b7f0:	e28a2001 	add	r2, sl, #1
  10b7f4:	e551c001 	ldrb	ip, [r1, #-1]
  10b7f8:	e2833001 	add	r3, r3, #1
  10b7fc:	e1530002 	cmp	r3, r2
  10b800:	e2811001 	add	r1, r1, #1
  10b804:	e543c002 	strb	ip, [r3, #-2]
  10b808:	1afffff9 	bne	10b7f4 <memcpy+0xec>
  10b80c:	eaffffc9 	b	10b738 <memcpy+0x30>
  10b810:	e59da020 	ldr	sl, [sp, #32]
  10b814:	e0632001 	rsb	r2, r3, r1
  10b818:	e06bc00a 	rsb	ip, fp, sl
  10b81c:	e35c0003 	cmp	ip, #3
  10b820:	e592c000 	ldr	ip, [r2]
  10b824:	daffffeb 	ble	10b7d8 <memcpy+0xd0>
  10b828:	e2635004 	rsb	r5, r3, #4
  10b82c:	e1a06183 	lsl	r6, r3, #3
  10b830:	e28b3004 	add	r3, fp, #4
  10b834:	e1a05185 	lsl	r5, r5, #3
  10b838:	e59d8020 	ldr	r8, [sp, #32]
  10b83c:	e1a0b003 	mov	fp, r3
  10b840:	e5b24004 	ldr	r4, [r2, #4]!
  10b844:	e1a0c63c 	lsr	ip, ip, r6
  10b848:	e0637008 	rsb	r7, r3, r8
  10b84c:	e2833004 	add	r3, r3, #4
  10b850:	e3570003 	cmp	r7, #3
  10b854:	e2811004 	add	r1, r1, #4
  10b858:	e18cc514 	orr	ip, ip, r4, lsl r5
  10b85c:	e503c008 	str	ip, [r3, #-8]
  10b860:	e1a0c004 	mov	ip, r4
  10b864:	cafffff3 	bgt	10b838 <memcpy+0x130>
  10b868:	eaffffda 	b	10b7d8 <memcpy+0xd0>
  10b86c:	e31b000f 	tst	fp, #15
  10b870:	0a000082 	beq	10ba80 <memcpy+0x378>
  10b874:	e28b2004 	add	r2, fp, #4
  10b878:	e2813004 	add	r3, r1, #4
  10b87c:	e513c004 	ldr	ip, [r3, #-4]
  10b880:	e312000f 	tst	r2, #15
  10b884:	e1a0b002 	mov	fp, r2
  10b888:	e1a01003 	mov	r1, r3
  10b88c:	e2822004 	add	r2, r2, #4
  10b890:	e2833004 	add	r3, r3, #4
  10b894:	e50bc004 	str	ip, [fp, #-4]
  10b898:	1afffff7 	bne	10b87c <memcpy+0x174>
  10b89c:	e59d3020 	ldr	r3, [sp, #32]
  10b8a0:	e311000f 	tst	r1, #15
  10b8a4:	e06b9003 	rsb	r9, fp, r3
  10b8a8:	1a000082 	bne	10bab8 <memcpy+0x3b0>
  10b8ac:	e3590d0a 	cmp	r9, #640	; 0x280
  10b8b0:	f5d1f040 	pld	[r1, #64]	; 0x40
  10b8b4:	f5d1f080 	pld	[r1, #128]	; 0x80
  10b8b8:	f5d1f0c0 	pld	[r1, #192]	; 0xc0
  10b8bc:	2a000080 	bcs	10bac4 <memcpy+0x3bc>
  10b8c0:	e3a03010 	mov	r3, #16
  10b8c4:	e3a02040 	mov	r2, #64	; 0x40
  10b8c8:	e3a0cc01 	mov	ip, #256	; 0x100
  10b8cc:	e3a07000 	mov	r7, #0
  10b8d0:	e159000c 	cmp	r9, ip
  10b8d4:	3a00010e 	bcc	10bd14 <memcpy+0x60c>
  10b8d8:	e1a02007 	mov	r2, r7
  10b8dc:	e1a0700c 	mov	r7, ip
  10b8e0:	e58d0040 	str	r0, [sp, #64]	; 0x40
  10b8e4:	e2826010 	add	r6, r2, #16
  10b8e8:	e2825020 	add	r5, r2, #32
  10b8ec:	e2824030 	add	r4, r2, #48	; 0x30
  10b8f0:	e282a060 	add	sl, r2, #96	; 0x60
  10b8f4:	e58da018 	str	sl, [sp, #24]
  10b8f8:	e282c040 	add	ip, r2, #64	; 0x40
  10b8fc:	e2823050 	add	r3, r2, #80	; 0x50
  10b900:	e2820070 	add	r0, r2, #112	; 0x70
  10b904:	e282a080 	add	sl, r2, #128	; 0x80
  10b908:	e58d001c 	str	r0, [sp, #28]
  10b90c:	e58da024 	str	sl, [sp, #36]	; 0x24
  10b910:	e2820090 	add	r0, r2, #144	; 0x90
  10b914:	e282a0a0 	add	sl, r2, #160	; 0xa0
  10b918:	e58d0028 	str	r0, [sp, #40]	; 0x28
  10b91c:	e58da02c 	str	sl, [sp, #44]	; 0x2c
  10b920:	e28200b0 	add	r0, r2, #176	; 0xb0
  10b924:	e282a0c0 	add	sl, r2, #192	; 0xc0
  10b928:	e58d0030 	str	r0, [sp, #48]	; 0x30
  10b92c:	e58da034 	str	sl, [sp, #52]	; 0x34
  10b930:	e28200d0 	add	r0, r2, #208	; 0xd0
  10b934:	e282a0e0 	add	sl, r2, #224	; 0xe0
  10b938:	e58d0038 	str	r0, [sp, #56]	; 0x38
  10b93c:	e58da03c 	str	sl, [sp, #60]	; 0x3c
  10b940:	e28200f0 	add	r0, r2, #240	; 0xf0
  10b944:	e081a002 	add	sl, r1, r2
  10b948:	e08b2002 	add	r2, fp, r2
  10b94c:	ecda0b04 	vldmia	sl, {d16-d17}
  10b950:	e081a006 	add	sl, r1, r6
  10b954:	ecc20b04 	vstmia	r2, {d16-d17}
  10b958:	e08b6006 	add	r6, fp, r6
  10b95c:	ecda0b04 	vldmia	sl, {d16-d17}
  10b960:	e0812005 	add	r2, r1, r5
  10b964:	ecc60b04 	vstmia	r6, {d16-d17}
  10b968:	e08b5005 	add	r5, fp, r5
  10b96c:	ecd20b04 	vldmia	r2, {d16-d17}
  10b970:	e0812004 	add	r2, r1, r4
  10b974:	ecc50b04 	vstmia	r5, {d16-d17}
  10b978:	e08b4004 	add	r4, fp, r4
  10b97c:	ecd20b04 	vldmia	r2, {d16-d17}
  10b980:	ecc40b04 	vstmia	r4, {d16-d17}
  10b984:	e59d4018 	ldr	r4, [sp, #24]
  10b988:	e081200c 	add	r2, r1, ip
  10b98c:	e08bc00c 	add	ip, fp, ip
  10b990:	ecd20b04 	vldmia	r2, {d16-d17}
  10b994:	e0812003 	add	r2, r1, r3
  10b998:	eccc0b04 	vstmia	ip, {d16-d17}
  10b99c:	e08b3003 	add	r3, fp, r3
  10b9a0:	ecd20b04 	vldmia	r2, {d16-d17}
  10b9a4:	e0812004 	add	r2, r1, r4
  10b9a8:	ecc30b04 	vstmia	r3, {d16-d17}
  10b9ac:	e08b3004 	add	r3, fp, r4
  10b9b0:	e59d401c 	ldr	r4, [sp, #28]
  10b9b4:	ecd20b04 	vldmia	r2, {d16-d17}
  10b9b8:	ecc30b04 	vstmia	r3, {d16-d17}
  10b9bc:	e0812004 	add	r2, r1, r4
  10b9c0:	e08b3004 	add	r3, fp, r4
  10b9c4:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
  10b9c8:	ecd20b04 	vldmia	r2, {d16-d17}
  10b9cc:	ecc30b04 	vstmia	r3, {d16-d17}
  10b9d0:	e2878c01 	add	r8, r7, #256	; 0x100
  10b9d4:	e0812004 	add	r2, r1, r4
  10b9d8:	e08b3004 	add	r3, fp, r4
  10b9dc:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
  10b9e0:	ecd20b04 	vldmia	r2, {d16-d17}
  10b9e4:	ecc30b04 	vstmia	r3, {d16-d17}
  10b9e8:	e1590008 	cmp	r9, r8
  10b9ec:	e0812004 	add	r2, r1, r4
  10b9f0:	e08b3004 	add	r3, fp, r4
  10b9f4:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
  10b9f8:	ecd20b04 	vldmia	r2, {d16-d17}
  10b9fc:	ecc30b04 	vstmia	r3, {d16-d17}
  10ba00:	e0812004 	add	r2, r1, r4
  10ba04:	e08b3004 	add	r3, fp, r4
  10ba08:	ecd20b04 	vldmia	r2, {d16-d17}
  10ba0c:	ecc30b04 	vstmia	r3, {d16-d17}
  10ba10:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
  10ba14:	e0812004 	add	r2, r1, r4
  10ba18:	e08b3004 	add	r3, fp, r4
  10ba1c:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
  10ba20:	ecd20b04 	vldmia	r2, {d16-d17}
  10ba24:	ecc30b04 	vstmia	r3, {d16-d17}
  10ba28:	e0812004 	add	r2, r1, r4
  10ba2c:	e08b3004 	add	r3, fp, r4
  10ba30:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
  10ba34:	ecd20b04 	vldmia	r2, {d16-d17}
  10ba38:	ecc30b04 	vstmia	r3, {d16-d17}
  10ba3c:	e0812004 	add	r2, r1, r4
  10ba40:	e08b3004 	add	r3, fp, r4
  10ba44:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
  10ba48:	ecd20b04 	vldmia	r2, {d16-d17}
  10ba4c:	ecc30b04 	vstmia	r3, {d16-d17}
  10ba50:	e0812004 	add	r2, r1, r4
  10ba54:	e08b3004 	add	r3, fp, r4
  10ba58:	ecd20b04 	vldmia	r2, {d16-d17}
  10ba5c:	e0812000 	add	r2, r1, r0
  10ba60:	ecc30b04 	vstmia	r3, {d16-d17}
  10ba64:	e08b3000 	add	r3, fp, r0
  10ba68:	ecd20b04 	vldmia	r2, {d16-d17}
  10ba6c:	e1a02007 	mov	r2, r7
  10ba70:	ecc30b04 	vstmia	r3, {d16-d17}
  10ba74:	3a0000a3 	bcc	10bd08 <memcpy+0x600>
  10ba78:	e1a07008 	mov	r7, r8
  10ba7c:	eaffff98 	b	10b8e4 <memcpy+0x1dc>
  10ba80:	e311000f 	tst	r1, #15
  10ba84:	0affff88 	beq	10b8ac <memcpy+0x1a4>
  10ba88:	e5913000 	ldr	r3, [r1]
  10ba8c:	e28bb010 	add	fp, fp, #16
  10ba90:	e2811010 	add	r1, r1, #16
  10ba94:	e50b3010 	str	r3, [fp, #-16]
  10ba98:	e511300c 	ldr	r3, [r1, #-12]
  10ba9c:	e50b300c 	str	r3, [fp, #-12]
  10baa0:	e5113008 	ldr	r3, [r1, #-8]
  10baa4:	e50b3008 	str	r3, [fp, #-8]
  10baa8:	e5113004 	ldr	r3, [r1, #-4]
  10baac:	e50b3004 	str	r3, [fp, #-4]
  10bab0:	e59d3020 	ldr	r3, [sp, #32]
  10bab4:	e06b9003 	rsb	r9, fp, r3
  10bab8:	e359000f 	cmp	r9, #15
  10babc:	cafffff1 	bgt	10ba88 <memcpy+0x380>
  10bac0:	eaffff36 	b	10b7a0 <memcpy+0x98>
  10bac4:	e2494d0a 	sub	r4, r9, #640	; 0x280
  10bac8:	f5d1f100 	pld	[r1, #256]	; 0x100
  10bacc:	e35400ff 	cmp	r4, #255	; 0xff
  10bad0:	e58d403c 	str	r4, [sp, #60]	; 0x3c
  10bad4:	f5d1f140 	pld	[r1, #320]	; 0x140
  10bad8:	f5d1f180 	pld	[r1, #384]	; 0x180
  10badc:	f5d1f1c0 	pld	[r1, #448]	; 0x1c0
  10bae0:	f5d1f200 	pld	[r1, #512]	; 0x200
  10bae4:	f5d1f240 	pld	[r1, #576]	; 0x240
  10bae8:	f5d1f280 	pld	[r1, #640]	; 0x280
  10baec:	f5d1f2c0 	pld	[r1, #704]	; 0x2c0
  10baf0:	9a0000a4 	bls	10bd88 <memcpy+0x680>
  10baf4:	e3a06000 	mov	r6, #0
  10baf8:	e2818c03 	add	r8, r1, #768	; 0x300
  10bafc:	e281ad0d 	add	sl, r1, #832	; 0x340
  10bb00:	e281cd0e 	add	ip, r1, #896	; 0x380
  10bb04:	e2812d0f 	add	r2, r1, #960	; 0x3c0
  10bb08:	e3a03c01 	mov	r3, #256	; 0x100
  10bb0c:	e58d8040 	str	r8, [sp, #64]	; 0x40
  10bb10:	e58da044 	str	sl, [sp, #68]	; 0x44
  10bb14:	e58dc048 	str	ip, [sp, #72]	; 0x48
  10bb18:	e58d204c 	str	r2, [sp, #76]	; 0x4c
  10bb1c:	e58d3018 	str	r3, [sp, #24]
  10bb20:	e58d9050 	str	r9, [sp, #80]	; 0x50
  10bb24:	e58d0054 	str	r0, [sp, #84]	; 0x54
  10bb28:	e2867010 	add	r7, r6, #16
  10bb2c:	e2865020 	add	r5, r6, #32
  10bb30:	e2864030 	add	r4, r6, #48	; 0x30
  10bb34:	e286c040 	add	ip, r6, #64	; 0x40
  10bb38:	e2862050 	add	r2, r6, #80	; 0x50
  10bb3c:	e2863060 	add	r3, r6, #96	; 0x60
  10bb40:	e2868070 	add	r8, r6, #112	; 0x70
  10bb44:	e286a080 	add	sl, r6, #128	; 0x80
  10bb48:	e58d801c 	str	r8, [sp, #28]
  10bb4c:	e2860090 	add	r0, r6, #144	; 0x90
  10bb50:	e58da024 	str	sl, [sp, #36]	; 0x24
  10bb54:	e28680a0 	add	r8, r6, #160	; 0xa0
  10bb58:	e58d0028 	str	r0, [sp, #40]	; 0x28
  10bb5c:	e286a0b0 	add	sl, r6, #176	; 0xb0
  10bb60:	e28600c0 	add	r0, r6, #192	; 0xc0
  10bb64:	e28690e0 	add	r9, r6, #224	; 0xe0
  10bb68:	e58d802c 	str	r8, [sp, #44]	; 0x2c
  10bb6c:	e28680d0 	add	r8, r6, #208	; 0xd0
  10bb70:	e58da030 	str	sl, [sp, #48]	; 0x30
  10bb74:	e081a006 	add	sl, r1, r6
  10bb78:	e58d0034 	str	r0, [sp, #52]	; 0x34
  10bb7c:	e28600f0 	add	r0, r6, #240	; 0xf0
  10bb80:	e08b6006 	add	r6, fp, r6
  10bb84:	e58d6014 	str	r6, [sp, #20]
  10bb88:	e59d6018 	ldr	r6, [sp, #24]
  10bb8c:	ecda0b04 	vldmia	sl, {d16-d17}
  10bb90:	e59da03c 	ldr	sl, [sp, #60]	; 0x3c
  10bb94:	e58d8038 	str	r8, [sp, #56]	; 0x38
  10bb98:	e2868c01 	add	r8, r6, #256	; 0x100
  10bb9c:	e158000a 	cmp	r8, sl
  10bba0:	e58d8018 	str	r8, [sp, #24]
  10bba4:	e59d8014 	ldr	r8, [sp, #20]
  10bba8:	ecc80b04 	vstmia	r8, {d16-d17}
  10bbac:	e0818007 	add	r8, r1, r7
  10bbb0:	e08b7007 	add	r7, fp, r7
  10bbb4:	ecd80b04 	vldmia	r8, {d16-d17}
  10bbb8:	e0818005 	add	r8, r1, r5
  10bbbc:	ecc70b04 	vstmia	r7, {d16-d17}
  10bbc0:	e08b5005 	add	r5, fp, r5
  10bbc4:	ecd80b04 	vldmia	r8, {d16-d17}
  10bbc8:	e0817004 	add	r7, r1, r4
  10bbcc:	ecc50b04 	vstmia	r5, {d16-d17}
  10bbd0:	e08b4004 	add	r4, fp, r4
  10bbd4:	ecd70b04 	vldmia	r7, {d16-d17}
  10bbd8:	e081500c 	add	r5, r1, ip
  10bbdc:	ecc40b04 	vstmia	r4, {d16-d17}
  10bbe0:	e08bc00c 	add	ip, fp, ip
  10bbe4:	ecd50b04 	vldmia	r5, {d16-d17}
  10bbe8:	e0814002 	add	r4, r1, r2
  10bbec:	eccc0b04 	vstmia	ip, {d16-d17}
  10bbf0:	ecd40b04 	vldmia	r4, {d16-d17}
  10bbf4:	e59d401c 	ldr	r4, [sp, #28]
  10bbf8:	e08b2002 	add	r2, fp, r2
  10bbfc:	e081c003 	add	ip, r1, r3
  10bc00:	ecc20b04 	vstmia	r2, {d16-d17}
  10bc04:	e08b3003 	add	r3, fp, r3
  10bc08:	ecdc0b04 	vldmia	ip, {d16-d17}
  10bc0c:	e0812004 	add	r2, r1, r4
  10bc10:	ecc30b04 	vstmia	r3, {d16-d17}
  10bc14:	e08b3004 	add	r3, fp, r4
  10bc18:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
  10bc1c:	ecd20b04 	vldmia	r2, {d16-d17}
  10bc20:	ecc30b04 	vstmia	r3, {d16-d17}
  10bc24:	e0812004 	add	r2, r1, r4
  10bc28:	e08b3004 	add	r3, fp, r4
  10bc2c:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
  10bc30:	ecd20b04 	vldmia	r2, {d16-d17}
  10bc34:	ecc30b04 	vstmia	r3, {d16-d17}
  10bc38:	e0812004 	add	r2, r1, r4
  10bc3c:	e08b3004 	add	r3, fp, r4
  10bc40:	ecd20b04 	vldmia	r2, {d16-d17}
  10bc44:	ecc30b04 	vstmia	r3, {d16-d17}
  10bc48:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
  10bc4c:	e59d804c 	ldr	r8, [sp, #76]	; 0x4c
  10bc50:	e0812004 	add	r2, r1, r4
  10bc54:	e08b3004 	add	r3, fp, r4
  10bc58:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
  10bc5c:	ecd20b04 	vldmia	r2, {d16-d17}
  10bc60:	ecc30b04 	vstmia	r3, {d16-d17}
  10bc64:	f5d8f000 	pld	[r8]
  10bc68:	e0812004 	add	r2, r1, r4
  10bc6c:	e08b3004 	add	r3, fp, r4
  10bc70:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
  10bc74:	ecd20b04 	vldmia	r2, {d16-d17}
  10bc78:	ecc30b04 	vstmia	r3, {d16-d17}
  10bc7c:	e0812004 	add	r2, r1, r4
  10bc80:	e08b3004 	add	r3, fp, r4
  10bc84:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
  10bc88:	ecd20b04 	vldmia	r2, {d16-d17}
  10bc8c:	ecc30b04 	vstmia	r3, {d16-d17}
  10bc90:	e0812004 	add	r2, r1, r4
  10bc94:	e08b3004 	add	r3, fp, r4
  10bc98:	ecd20b04 	vldmia	r2, {d16-d17}
  10bc9c:	e59d4048 	ldr	r4, [sp, #72]	; 0x48
  10bca0:	ecc30b04 	vstmia	r3, {d16-d17}
  10bca4:	e0812009 	add	r2, r1, r9
  10bca8:	e08b3009 	add	r3, fp, r9
  10bcac:	ecd20b04 	vldmia	r2, {d16-d17}
  10bcb0:	e0812000 	add	r2, r1, r0
  10bcb4:	ecc30b04 	vstmia	r3, {d16-d17}
  10bcb8:	e08b3000 	add	r3, fp, r0
  10bcbc:	ecd20b04 	vldmia	r2, {d16-d17}
  10bcc0:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  10bcc4:	ecc30b04 	vstmia	r3, {d16-d17}
  10bcc8:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
  10bccc:	f5d4f000 	pld	[r4]
  10bcd0:	f5d0f000 	pld	[r0]
  10bcd4:	f5d2f000 	pld	[r2]
  10bcd8:	9affff92 	bls	10bb28 <memcpy+0x420>
  10bcdc:	e59d9050 	ldr	r9, [sp, #80]	; 0x50
  10bce0:	e59d0054 	ldr	r0, [sp, #84]	; 0x54
  10bce4:	e2493d0e 	sub	r3, r9, #896	; 0x380
  10bce8:	e1a03423 	lsr	r3, r3, #8
  10bcec:	e2832001 	add	r2, r3, #1
  10bcf0:	e2833002 	add	r3, r3, #2
  10bcf4:	e1a07402 	lsl	r7, r2, #8
  10bcf8:	e1a0c403 	lsl	ip, r3, #8
  10bcfc:	e2872040 	add	r2, r7, #64	; 0x40
  10bd00:	e2873010 	add	r3, r7, #16
  10bd04:	eafffef1 	b	10b8d0 <memcpy+0x1c8>
  10bd08:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  10bd0c:	e2872040 	add	r2, r7, #64	; 0x40
  10bd10:	e2873010 	add	r3, r7, #16
  10bd14:	e1590002 	cmp	r9, r2
  10bd18:	3a00001e 	bcc	10bd98 <memcpy+0x690>
  10bd1c:	e1a03007 	mov	r3, r7
  10bd20:	e1a07002 	mov	r7, r2
  10bd24:	e2875040 	add	r5, r7, #64	; 0x40
  10bd28:	e2834010 	add	r4, r3, #16
  10bd2c:	e1590005 	cmp	r9, r5
  10bd30:	e283c020 	add	ip, r3, #32
  10bd34:	e2832030 	add	r2, r3, #48	; 0x30
  10bd38:	e0816003 	add	r6, r1, r3
  10bd3c:	e08b3003 	add	r3, fp, r3
  10bd40:	ecd60b04 	vldmia	r6, {d16-d17}
  10bd44:	e0816004 	add	r6, r1, r4
  10bd48:	ecc30b04 	vstmia	r3, {d16-d17}
  10bd4c:	e08b4004 	add	r4, fp, r4
  10bd50:	ecd60b04 	vldmia	r6, {d16-d17}
  10bd54:	e081300c 	add	r3, r1, ip
  10bd58:	ecc40b04 	vstmia	r4, {d16-d17}
  10bd5c:	e08bc00c 	add	ip, fp, ip
  10bd60:	ecd30b04 	vldmia	r3, {d16-d17}
  10bd64:	e0813002 	add	r3, r1, r2
  10bd68:	eccc0b04 	vstmia	ip, {d16-d17}
  10bd6c:	e08b2002 	add	r2, fp, r2
  10bd70:	ecd30b04 	vldmia	r3, {d16-d17}
  10bd74:	e1a03007 	mov	r3, r7
  10bd78:	ecc20b04 	vstmia	r2, {d16-d17}
  10bd7c:	3a000004 	bcc	10bd94 <memcpy+0x68c>
  10bd80:	e1a07005 	mov	r7, r5
  10bd84:	eaffffe6 	b	10bd24 <memcpy+0x61c>
  10bd88:	e3a0cc01 	mov	ip, #256	; 0x100
  10bd8c:	e3a07000 	mov	r7, #0
  10bd90:	eafffed0 	b	10b8d8 <memcpy+0x1d0>
  10bd94:	e2873010 	add	r3, r7, #16
  10bd98:	e1590003 	cmp	r9, r3
  10bd9c:	3a00000a 	bcc	10bdcc <memcpy+0x6c4>
  10bda0:	e1a02007 	mov	r2, r7
  10bda4:	e1a07003 	mov	r7, r3
  10bda8:	e2873010 	add	r3, r7, #16
  10bdac:	e0814002 	add	r4, r1, r2
  10bdb0:	e1590003 	cmp	r9, r3
  10bdb4:	e08bc002 	add	ip, fp, r2
  10bdb8:	ecd40b04 	vldmia	r4, {d16-d17}
  10bdbc:	e1a02007 	mov	r2, r7
  10bdc0:	eccc0b04 	vstmia	ip, {d16-d17}
  10bdc4:	21a07003 	movcs	r7, r3
  10bdc8:	2afffff6 	bcs	10bda8 <memcpy+0x6a0>
  10bdcc:	e59d2020 	ldr	r2, [sp, #32]
  10bdd0:	e08bb007 	add	fp, fp, r7
  10bdd4:	e0811007 	add	r1, r1, r7
  10bdd8:	e06b9002 	rsb	r9, fp, r2
  10bddc:	eafffe6f 	b	10b7a0 <memcpy+0x98>

0010bde0 <memset>:
  10bde0:	e3520003 	cmp	r2, #3
  10bde4:	e6efc071 	uxtb	ip, r1
  10bde8:	e92d01f0 	push	{r4, r5, r6, r7, r8}
  10bdec:	8a000008 	bhi	10be14 <memset+0x34>
  10bdf0:	e3520000 	cmp	r2, #0
  10bdf4:	0a000004 	beq	10be0c <memset+0x2c>
  10bdf8:	e0822000 	add	r2, r2, r0
  10bdfc:	e1a03000 	mov	r3, r0
  10be00:	e4c3c001 	strb	ip, [r3], #1
  10be04:	e1530002 	cmp	r3, r2
  10be08:	1afffffc 	bne	10be00 <memset+0x20>
  10be0c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
  10be10:	e12fff1e 	bx	lr
  10be14:	e3100003 	tst	r0, #3
  10be18:	e0802002 	add	r2, r0, r2
  10be1c:	0a000007 	beq	10be40 <memset+0x60>
  10be20:	e2804001 	add	r4, r0, #1
  10be24:	e2045003 	and	r5, r4, #3
  10be28:	e1a03004 	mov	r3, r4
  10be2c:	e3550000 	cmp	r5, #0
  10be30:	e544c001 	strb	ip, [r4, #-1]
  10be34:	e2844001 	add	r4, r4, #1
  10be38:	1afffff9 	bne	10be24 <memset+0x44>
  10be3c:	ea000000 	b	10be44 <memset+0x64>
  10be40:	e1a03000 	mov	r3, r0
  10be44:	e0635002 	rsb	r5, r3, r2
  10be48:	e08c740c 	add	r7, ip, ip, lsl #8
  10be4c:	e355000f 	cmp	r5, #15
  10be50:	e0877807 	add	r7, r7, r7, lsl #16
  10be54:	ca000011 	bgt	10bea0 <memset+0xc0>
  10be58:	e3550003 	cmp	r5, #3
  10be5c:	da000006 	ble	10be7c <memset+0x9c>
  10be60:	e2831004 	add	r1, r3, #4
  10be64:	e0614002 	rsb	r4, r1, r2
  10be68:	e1a03001 	mov	r3, r1
  10be6c:	e3540003 	cmp	r4, #3
  10be70:	e5017004 	str	r7, [r1, #-4]
  10be74:	e2811004 	add	r1, r1, #4
  10be78:	cafffff9 	bgt	10be64 <memset+0x84>
  10be7c:	e1530002 	cmp	r3, r2
  10be80:	2affffe1 	bcs	10be0c <memset+0x2c>
  10be84:	e2833001 	add	r3, r3, #1
  10be88:	e2822001 	add	r2, r2, #1
  10be8c:	e543c001 	strb	ip, [r3, #-1]
  10be90:	e2833001 	add	r3, r3, #1
  10be94:	e1530002 	cmp	r3, r2
  10be98:	1afffffb 	bne	10be8c <memset+0xac>
  10be9c:	eaffffda 	b	10be0c <memset+0x2c>
  10bea0:	e313000f 	tst	r3, #15
  10bea4:	0a000006 	beq	10bec4 <memset+0xe4>
  10bea8:	e2834004 	add	r4, r3, #4
  10beac:	e314000f 	tst	r4, #15
  10beb0:	e1a03004 	mov	r3, r4
  10beb4:	e5047004 	str	r7, [r4, #-4]
  10beb8:	e2844004 	add	r4, r4, #4
  10bebc:	1afffffa 	bne	10beac <memset+0xcc>
  10bec0:	e0635002 	rsb	r5, r3, r2
  10bec4:	e35500ff 	cmp	r5, #255	; 0xff
  10bec8:	eee01b90 	vdup.8	q8, r1
  10becc:	9a000027 	bls	10bf70 <memset+0x190>
  10bed0:	e3a01c01 	mov	r1, #256	; 0x100
  10bed4:	e3a06000 	mov	r6, #0
  10bed8:	e2818c01 	add	r8, r1, #256	; 0x100
  10bedc:	e0834006 	add	r4, r3, r6
  10bee0:	e1550008 	cmp	r5, r8
  10bee4:	e1a06001 	mov	r6, r1
  10bee8:	ecc40b04 	vstmia	r4, {d16-d17}
  10beec:	edc40b04 	vstr	d16, [r4, #16]
  10bef0:	edc41b06 	vstr	d17, [r4, #24]
  10bef4:	edc40b08 	vstr	d16, [r4, #32]
  10bef8:	edc41b0a 	vstr	d17, [r4, #40]	; 0x28
  10befc:	edc40b0c 	vstr	d16, [r4, #48]	; 0x30
  10bf00:	edc41b0e 	vstr	d17, [r4, #56]	; 0x38
  10bf04:	edc40b10 	vstr	d16, [r4, #64]	; 0x40
  10bf08:	edc41b12 	vstr	d17, [r4, #72]	; 0x48
  10bf0c:	edc40b14 	vstr	d16, [r4, #80]	; 0x50
  10bf10:	edc41b16 	vstr	d17, [r4, #88]	; 0x58
  10bf14:	edc40b18 	vstr	d16, [r4, #96]	; 0x60
  10bf18:	edc41b1a 	vstr	d17, [r4, #104]	; 0x68
  10bf1c:	edc40b1c 	vstr	d16, [r4, #112]	; 0x70
  10bf20:	edc41b1e 	vstr	d17, [r4, #120]	; 0x78
  10bf24:	edc40b20 	vstr	d16, [r4, #128]	; 0x80
  10bf28:	edc41b22 	vstr	d17, [r4, #136]	; 0x88
  10bf2c:	edc40b24 	vstr	d16, [r4, #144]	; 0x90
  10bf30:	edc41b26 	vstr	d17, [r4, #152]	; 0x98
  10bf34:	edc40b28 	vstr	d16, [r4, #160]	; 0xa0
  10bf38:	edc41b2a 	vstr	d17, [r4, #168]	; 0xa8
  10bf3c:	edc40b2c 	vstr	d16, [r4, #176]	; 0xb0
  10bf40:	edc41b2e 	vstr	d17, [r4, #184]	; 0xb8
  10bf44:	edc40b30 	vstr	d16, [r4, #192]	; 0xc0
  10bf48:	edc41b32 	vstr	d17, [r4, #200]	; 0xc8
  10bf4c:	edc40b34 	vstr	d16, [r4, #208]	; 0xd0
  10bf50:	edc41b36 	vstr	d17, [r4, #216]	; 0xd8
  10bf54:	edc40b38 	vstr	d16, [r4, #224]	; 0xe0
  10bf58:	edc41b3a 	vstr	d17, [r4, #232]	; 0xe8
  10bf5c:	edc40b3c 	vstr	d16, [r4, #240]	; 0xf0
  10bf60:	edc41b3e 	vstr	d17, [r4, #248]	; 0xf8
  10bf64:	3a000016 	bcc	10bfc4 <memset+0x1e4>
  10bf68:	e1a01008 	mov	r1, r8
  10bf6c:	eaffffd9 	b	10bed8 <memset+0xf8>
  10bf70:	e3a04010 	mov	r4, #16
  10bf74:	e3a06040 	mov	r6, #64	; 0x40
  10bf78:	e3a01000 	mov	r1, #0
  10bf7c:	e1550006 	cmp	r5, r6
  10bf80:	3a000013 	bcc	10bfd4 <memset+0x1f4>
  10bf84:	e1a08001 	mov	r8, r1
  10bf88:	e1a01006 	mov	r1, r6
  10bf8c:	e2816040 	add	r6, r1, #64	; 0x40
  10bf90:	e0834008 	add	r4, r3, r8
  10bf94:	e1550006 	cmp	r5, r6
  10bf98:	e1a08001 	mov	r8, r1
  10bf9c:	ecc40b04 	vstmia	r4, {d16-d17}
  10bfa0:	edc40b04 	vstr	d16, [r4, #16]
  10bfa4:	edc41b06 	vstr	d17, [r4, #24]
  10bfa8:	edc40b08 	vstr	d16, [r4, #32]
  10bfac:	edc41b0a 	vstr	d17, [r4, #40]	; 0x28
  10bfb0:	edc40b0c 	vstr	d16, [r4, #48]	; 0x30
  10bfb4:	edc41b0e 	vstr	d17, [r4, #56]	; 0x38
  10bfb8:	3a000004 	bcc	10bfd0 <memset+0x1f0>
  10bfbc:	e1a01006 	mov	r1, r6
  10bfc0:	eafffff1 	b	10bf8c <memset+0x1ac>
  10bfc4:	e2816040 	add	r6, r1, #64	; 0x40
  10bfc8:	e2814010 	add	r4, r1, #16
  10bfcc:	eaffffea 	b	10bf7c <memset+0x19c>
  10bfd0:	e2814010 	add	r4, r1, #16
  10bfd4:	e1550004 	cmp	r5, r4
  10bfd8:	3a000008 	bcc	10c000 <memset+0x220>
  10bfdc:	e1a06001 	mov	r6, r1
  10bfe0:	e1a01004 	mov	r1, r4
  10bfe4:	e2814010 	add	r4, r1, #16
  10bfe8:	e0838006 	add	r8, r3, r6
  10bfec:	e1550004 	cmp	r5, r4
  10bff0:	e1a06001 	mov	r6, r1
  10bff4:	ecc80b04 	vstmia	r8, {d16-d17}
  10bff8:	21a01004 	movcs	r1, r4
  10bffc:	2afffff8 	bcs	10bfe4 <memset+0x204>
  10c000:	e0833001 	add	r3, r3, r1
  10c004:	e0635002 	rsb	r5, r3, r2
  10c008:	eaffff92 	b	10be58 <memset+0x78>

0010c00c <__malloc_lock>:
  10c00c:	e12fff1e 	bx	lr

0010c010 <__malloc_unlock>:
  10c010:	e12fff1e 	bx	lr

0010c014 <_Balloc>:
  10c014:	e92d4038 	push	{r3, r4, r5, lr}
  10c018:	e1a05000 	mov	r5, r0
  10c01c:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
  10c020:	e1a04001 	mov	r4, r1
  10c024:	e3530000 	cmp	r3, #0
  10c028:	0a000008 	beq	10c050 <_Balloc+0x3c>
  10c02c:	e7930104 	ldr	r0, [r3, r4, lsl #2]
  10c030:	e3500000 	cmp	r0, #0
  10c034:	0a00000e 	beq	10c074 <_Balloc+0x60>
  10c038:	e5902000 	ldr	r2, [r0]
  10c03c:	e7832104 	str	r2, [r3, r4, lsl #2]
  10c040:	e3a03000 	mov	r3, #0
  10c044:	e5803010 	str	r3, [r0, #16]
  10c048:	e580300c 	str	r3, [r0, #12]
  10c04c:	e8bd8038 	pop	{r3, r4, r5, pc}
  10c050:	e3a01004 	mov	r1, #4
  10c054:	e3a02021 	mov	r2, #33	; 0x21
  10c058:	eb0008f8 	bl	10e440 <_calloc_r>
  10c05c:	e3500000 	cmp	r0, #0
  10c060:	e1a03000 	mov	r3, r0
  10c064:	e585004c 	str	r0, [r5, #76]	; 0x4c
  10c068:	1affffef 	bne	10c02c <_Balloc+0x18>
  10c06c:	e3a00000 	mov	r0, #0
  10c070:	e8bd8038 	pop	{r3, r4, r5, pc}
  10c074:	e3a01001 	mov	r1, #1
  10c078:	e1a00005 	mov	r0, r5
  10c07c:	e1a05411 	lsl	r5, r1, r4
  10c080:	e2852005 	add	r2, r5, #5
  10c084:	e1a02102 	lsl	r2, r2, #2
  10c088:	eb0008ec 	bl	10e440 <_calloc_r>
  10c08c:	e3500000 	cmp	r0, #0
  10c090:	0afffff5 	beq	10c06c <_Balloc+0x58>
  10c094:	e9800030 	stmib	r0, {r4, r5}
  10c098:	eaffffe8 	b	10c040 <_Balloc+0x2c>

0010c09c <_Bfree>:
  10c09c:	e3510000 	cmp	r1, #0
  10c0a0:	1590304c 	ldrne	r3, [r0, #76]	; 0x4c
  10c0a4:	15912004 	ldrne	r2, [r1, #4]
  10c0a8:	17930102 	ldrne	r0, [r3, r2, lsl #2]
  10c0ac:	15810000 	strne	r0, [r1]
  10c0b0:	17831102 	strne	r1, [r3, r2, lsl #2]
  10c0b4:	e12fff1e 	bx	lr

0010c0b8 <__multadd>:
  10c0b8:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
  10c0bc:	e281c014 	add	ip, r1, #20
  10c0c0:	e5917010 	ldr	r7, [r1, #16]
  10c0c4:	e24dd00c 	sub	sp, sp, #12
  10c0c8:	e1a08001 	mov	r8, r1
  10c0cc:	e1a0a000 	mov	sl, r0
  10c0d0:	e3a04000 	mov	r4, #0
  10c0d4:	e59c6000 	ldr	r6, [ip]
  10c0d8:	e2844001 	add	r4, r4, #1
  10c0dc:	e1570004 	cmp	r7, r4
  10c0e0:	e6ff5076 	uxth	r5, r6
  10c0e4:	e1a06826 	lsr	r6, r6, #16
  10c0e8:	e0253592 	mla	r5, r2, r5, r3
  10c0ec:	e0030692 	mul	r3, r2, r6
  10c0f0:	e0833825 	add	r3, r3, r5, lsr #16
  10c0f4:	e6ff5075 	uxth	r5, r5
  10c0f8:	e0855803 	add	r5, r5, r3, lsl #16
  10c0fc:	e1a03823 	lsr	r3, r3, #16
  10c100:	e48c5004 	str	r5, [ip], #4
  10c104:	cafffff2 	bgt	10c0d4 <__multadd+0x1c>
  10c108:	e3530000 	cmp	r3, #0
  10c10c:	0a000006 	beq	10c12c <__multadd+0x74>
  10c110:	e5982008 	ldr	r2, [r8, #8]
  10c114:	e1570002 	cmp	r7, r2
  10c118:	aa000006 	bge	10c138 <__multadd+0x80>
  10c11c:	e0882107 	add	r2, r8, r7, lsl #2
  10c120:	e2877001 	add	r7, r7, #1
  10c124:	e5887010 	str	r7, [r8, #16]
  10c128:	e5823014 	str	r3, [r2, #20]
  10c12c:	e1a00008 	mov	r0, r8
  10c130:	e28dd00c 	add	sp, sp, #12
  10c134:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, sl, pc}
  10c138:	e5981004 	ldr	r1, [r8, #4]
  10c13c:	e1a0000a 	mov	r0, sl
  10c140:	e58d3004 	str	r3, [sp, #4]
  10c144:	e2811001 	add	r1, r1, #1
  10c148:	ebffffb1 	bl	10c014 <_Balloc>
  10c14c:	e5982010 	ldr	r2, [r8, #16]
  10c150:	e288100c 	add	r1, r8, #12
  10c154:	e2822002 	add	r2, r2, #2
  10c158:	e1a02102 	lsl	r2, r2, #2
  10c15c:	e1a04000 	mov	r4, r0
  10c160:	e280000c 	add	r0, r0, #12
  10c164:	ebfffd67 	bl	10b708 <memcpy>
  10c168:	e5981004 	ldr	r1, [r8, #4]
  10c16c:	e59a204c 	ldr	r2, [sl, #76]	; 0x4c
  10c170:	e59d3004 	ldr	r3, [sp, #4]
  10c174:	e7920101 	ldr	r0, [r2, r1, lsl #2]
  10c178:	e5880000 	str	r0, [r8]
  10c17c:	e7828101 	str	r8, [r2, r1, lsl #2]
  10c180:	e1a08004 	mov	r8, r4
  10c184:	eaffffe4 	b	10c11c <__multadd+0x64>

0010c188 <__s2b>:
  10c188:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, sl, lr}
  10c18c:	e308ce39 	movw	ip, #36409	; 0x8e39
  10c190:	e1a07003 	mov	r7, r3
  10c194:	e343c8e3 	movt	ip, #14563	; 0x38e3
  10c198:	e2833008 	add	r3, r3, #8
  10c19c:	e1a05000 	mov	r5, r0
  10c1a0:	e1a04001 	mov	r4, r1
  10c1a4:	e1a08002 	mov	r8, r2
  10c1a8:	e0c0139c 	smull	r1, r0, ip, r3
  10c1ac:	e1a03fc3 	asr	r3, r3, #31
  10c1b0:	e06300c0 	rsb	r0, r3, r0, asr #1
  10c1b4:	e3500001 	cmp	r0, #1
  10c1b8:	da00002b 	ble	10c26c <__s2b+0xe4>
  10c1bc:	e3a0c001 	mov	ip, #1
  10c1c0:	e3a01000 	mov	r1, #0
  10c1c4:	e1a0c08c 	lsl	ip, ip, #1
  10c1c8:	e2811001 	add	r1, r1, #1
  10c1cc:	e150000c 	cmp	r0, ip
  10c1d0:	cafffffb 	bgt	10c1c4 <__s2b+0x3c>
  10c1d4:	e1a00005 	mov	r0, r5
  10c1d8:	ebffff8d 	bl	10c014 <_Balloc>
  10c1dc:	e59d3020 	ldr	r3, [sp, #32]
  10c1e0:	e3580009 	cmp	r8, #9
  10c1e4:	d284400a 	addle	r4, r4, #10
  10c1e8:	d3a08009 	movle	r8, #9
  10c1ec:	e5803014 	str	r3, [r0, #20]
  10c1f0:	e1a01000 	mov	r1, r0
  10c1f4:	e3a03001 	mov	r3, #1
  10c1f8:	e5803010 	str	r3, [r0, #16]
  10c1fc:	da00000c 	ble	10c234 <__s2b+0xac>
  10c200:	e284a009 	add	sl, r4, #9
  10c204:	e0844008 	add	r4, r4, r8
  10c208:	e1a0600a 	mov	r6, sl
  10c20c:	e4d63001 	ldrb	r3, [r6], #1
  10c210:	e1a00005 	mov	r0, r5
  10c214:	e3a0200a 	mov	r2, #10
  10c218:	e2433030 	sub	r3, r3, #48	; 0x30
  10c21c:	ebffffa5 	bl	10c0b8 <__multadd>
  10c220:	e1560004 	cmp	r6, r4
  10c224:	e1a01000 	mov	r1, r0
  10c228:	1afffff7 	bne	10c20c <__s2b+0x84>
  10c22c:	e08a4008 	add	r4, sl, r8
  10c230:	e2444008 	sub	r4, r4, #8
  10c234:	e1570008 	cmp	r7, r8
  10c238:	da000009 	ble	10c264 <__s2b+0xdc>
  10c23c:	e0687007 	rsb	r7, r8, r7
  10c240:	e0847007 	add	r7, r4, r7
  10c244:	e4d43001 	ldrb	r3, [r4], #1
  10c248:	e1a00005 	mov	r0, r5
  10c24c:	e3a0200a 	mov	r2, #10
  10c250:	e2433030 	sub	r3, r3, #48	; 0x30
  10c254:	ebffff97 	bl	10c0b8 <__multadd>
  10c258:	e1540007 	cmp	r4, r7
  10c25c:	e1a01000 	mov	r1, r0
  10c260:	1afffff7 	bne	10c244 <__s2b+0xbc>
  10c264:	e1a00001 	mov	r0, r1
  10c268:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, sl, pc}
  10c26c:	e3a01000 	mov	r1, #0
  10c270:	eaffffd7 	b	10c1d4 <__s2b+0x4c>

0010c274 <__hi0bits>:
  10c274:	e1b02820 	lsrs	r2, r0, #16
  10c278:	e1a03000 	mov	r3, r0
  10c27c:	01a03800 	lsleq	r3, r0, #16
  10c280:	13a00000 	movne	r0, #0
  10c284:	03a00010 	moveq	r0, #16
  10c288:	e31304ff 	tst	r3, #-16777216	; 0xff000000
  10c28c:	01a03403 	lsleq	r3, r3, #8
  10c290:	02800008 	addeq	r0, r0, #8
  10c294:	e313020f 	tst	r3, #-268435456	; 0xf0000000
  10c298:	01a03203 	lsleq	r3, r3, #4
  10c29c:	02800004 	addeq	r0, r0, #4
  10c2a0:	e3130103 	tst	r3, #-1073741824	; 0xc0000000
  10c2a4:	01a03103 	lsleq	r3, r3, #2
  10c2a8:	02800002 	addeq	r0, r0, #2
  10c2ac:	e3530000 	cmp	r3, #0
  10c2b0:	b12fff1e 	bxlt	lr
  10c2b4:	e3130101 	tst	r3, #1073741824	; 0x40000000
  10c2b8:	12800001 	addne	r0, r0, #1
  10c2bc:	03a00020 	moveq	r0, #32
  10c2c0:	e12fff1e 	bx	lr

0010c2c4 <__lo0bits>:
  10c2c4:	e5903000 	ldr	r3, [r0]
  10c2c8:	e1a02000 	mov	r2, r0
  10c2cc:	e2130007 	ands	r0, r3, #7
  10c2d0:	0a000008 	beq	10c2f8 <__lo0bits+0x34>
  10c2d4:	e3130001 	tst	r3, #1
  10c2d8:	1a00001c 	bne	10c350 <__lo0bits+0x8c>
  10c2dc:	e3130002 	tst	r3, #2
  10c2e0:	11a030a3 	lsrne	r3, r3, #1
  10c2e4:	01a03123 	lsreq	r3, r3, #2
  10c2e8:	13a00001 	movne	r0, #1
  10c2ec:	03a00002 	moveq	r0, #2
  10c2f0:	e5823000 	str	r3, [r2]
  10c2f4:	e12fff1e 	bx	lr
  10c2f8:	e6ff1073 	uxth	r1, r3
  10c2fc:	e3510000 	cmp	r1, #0
  10c300:	01a03823 	lsreq	r3, r3, #16
  10c304:	03a00010 	moveq	r0, #16
  10c308:	e31300ff 	tst	r3, #255	; 0xff
  10c30c:	01a03423 	lsreq	r3, r3, #8
  10c310:	02800008 	addeq	r0, r0, #8
  10c314:	e313000f 	tst	r3, #15
  10c318:	01a03223 	lsreq	r3, r3, #4
  10c31c:	02800004 	addeq	r0, r0, #4
  10c320:	e3130003 	tst	r3, #3
  10c324:	01a03123 	lsreq	r3, r3, #2
  10c328:	02800002 	addeq	r0, r0, #2
  10c32c:	e3130001 	tst	r3, #1
  10c330:	1a000004 	bne	10c348 <__lo0bits+0x84>
  10c334:	e1b030a3 	lsrs	r3, r3, #1
  10c338:	1a000001 	bne	10c344 <__lo0bits+0x80>
  10c33c:	e3a00020 	mov	r0, #32
  10c340:	e12fff1e 	bx	lr
  10c344:	e2800001 	add	r0, r0, #1
  10c348:	e5823000 	str	r3, [r2]
  10c34c:	e12fff1e 	bx	lr
  10c350:	e3a00000 	mov	r0, #0
  10c354:	e12fff1e 	bx	lr

0010c358 <__i2b>:
  10c358:	e92d4010 	push	{r4, lr}
  10c35c:	e1a04001 	mov	r4, r1
  10c360:	e3a01001 	mov	r1, #1
  10c364:	ebffff2a 	bl	10c014 <_Balloc>
  10c368:	e3a02001 	mov	r2, #1
  10c36c:	e5804014 	str	r4, [r0, #20]
  10c370:	e5802010 	str	r2, [r0, #16]
  10c374:	e8bd8010 	pop	{r4, pc}

0010c378 <__multiply>:
  10c378:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  10c37c:	e1a04001 	mov	r4, r1
  10c380:	e5915010 	ldr	r5, [r1, #16]
  10c384:	e24dd014 	sub	sp, sp, #20
  10c388:	e5928010 	ldr	r8, [r2, #16]
  10c38c:	e1a06002 	mov	r6, r2
  10c390:	e1550008 	cmp	r5, r8
  10c394:	aa000004 	bge	10c3ac <__multiply+0x34>
  10c398:	e1a02005 	mov	r2, r5
  10c39c:	e1a04006 	mov	r4, r6
  10c3a0:	e1a05008 	mov	r5, r8
  10c3a4:	e1a06001 	mov	r6, r1
  10c3a8:	e1a08002 	mov	r8, r2
  10c3ac:	e5943008 	ldr	r3, [r4, #8]
  10c3b0:	e0857008 	add	r7, r5, r8
  10c3b4:	e5941004 	ldr	r1, [r4, #4]
  10c3b8:	e1570003 	cmp	r7, r3
  10c3bc:	c2811001 	addgt	r1, r1, #1
  10c3c0:	ebffff13 	bl	10c014 <_Balloc>
  10c3c4:	e080a107 	add	sl, r0, r7, lsl #2
  10c3c8:	e2803014 	add	r3, r0, #20
  10c3cc:	e28aa014 	add	sl, sl, #20
  10c3d0:	e58d0004 	str	r0, [sp, #4]
  10c3d4:	e153000a 	cmp	r3, sl
  10c3d8:	33a00000 	movcc	r0, #0
  10c3dc:	2a000002 	bcs	10c3ec <__multiply+0x74>
  10c3e0:	e4830004 	str	r0, [r3], #4
  10c3e4:	e15a0003 	cmp	sl, r3
  10c3e8:	8afffffc 	bhi	10c3e0 <__multiply+0x68>
  10c3ec:	e0868108 	add	r8, r6, r8, lsl #2
  10c3f0:	e2866014 	add	r6, r6, #20
  10c3f4:	e2883014 	add	r3, r8, #20
  10c3f8:	e0845105 	add	r5, r4, r5, lsl #2
  10c3fc:	e1560003 	cmp	r6, r3
  10c400:	e2844014 	add	r4, r4, #20
  10c404:	e2855014 	add	r5, r5, #20
  10c408:	2a00003c 	bcs	10c500 <__multiply+0x188>
  10c40c:	e59d2004 	ldr	r2, [sp, #4]
  10c410:	e58da008 	str	sl, [sp, #8]
  10c414:	e1a0a003 	mov	sl, r3
  10c418:	e2828018 	add	r8, r2, #24
  10c41c:	e58d700c 	str	r7, [sp, #12]
  10c420:	e1a07004 	mov	r7, r4
  10c424:	e496c004 	ldr	ip, [r6], #4
  10c428:	e6ff007c 	uxth	r0, ip
  10c42c:	e3500000 	cmp	r0, #0
  10c430:	0a000014 	beq	10c488 <__multiply+0x110>
  10c434:	e2483004 	sub	r3, r8, #4
  10c438:	e1a02007 	mov	r2, r7
  10c43c:	e3a0c000 	mov	ip, #0
  10c440:	e4929004 	ldr	r9, [r2], #4
  10c444:	e5934000 	ldr	r4, [r3]
  10c448:	e1550002 	cmp	r5, r2
  10c44c:	e6ffb079 	uxth	fp, r9
  10c450:	e1a09829 	lsr	r9, r9, #16
  10c454:	e6ff1074 	uxth	r1, r4
  10c458:	e1a04824 	lsr	r4, r4, #16
  10c45c:	e02b1b90 	mla	fp, r0, fp, r1
  10c460:	e0214990 	mla	r1, r0, r9, r4
  10c464:	e08bc00c 	add	ip, fp, ip
  10c468:	e081182c 	add	r1, r1, ip, lsr #16
  10c46c:	e6ffc07c 	uxth	ip, ip
  10c470:	e18c4801 	orr	r4, ip, r1, lsl #16
  10c474:	e1a0c821 	lsr	ip, r1, #16
  10c478:	e4834004 	str	r4, [r3], #4
  10c47c:	8affffef 	bhi	10c440 <__multiply+0xc8>
  10c480:	e583c000 	str	ip, [r3]
  10c484:	e516c004 	ldr	ip, [r6, #-4]
  10c488:	e1b0c82c 	lsrs	ip, ip, #16
  10c48c:	0a000016 	beq	10c4ec <__multiply+0x174>
  10c490:	e5181004 	ldr	r1, [r8, #-4]
  10c494:	e1a02007 	mov	r2, r7
  10c498:	e1a03008 	mov	r3, r8
  10c49c:	e3a04000 	mov	r4, #0
  10c4a0:	e1a00001 	mov	r0, r1
  10c4a4:	e1d290b0 	ldrh	r9, [r2]
  10c4a8:	e1a00820 	lsr	r0, r0, #16
  10c4ac:	e6ff1071 	uxth	r1, r1
  10c4b0:	e1a0b003 	mov	fp, r3
  10c4b4:	e020099c 	mla	r0, ip, r9, r0
  10c4b8:	e0804004 	add	r4, r0, r4
  10c4bc:	e1811804 	orr	r1, r1, r4, lsl #16
  10c4c0:	e5031004 	str	r1, [r3, #-4]
  10c4c4:	e4930004 	ldr	r0, [r3], #4
  10c4c8:	e4921004 	ldr	r1, [r2], #4
  10c4cc:	e6ff9070 	uxth	r9, r0
  10c4d0:	e1550002 	cmp	r5, r2
  10c4d4:	e1a01821 	lsr	r1, r1, #16
  10c4d8:	e021919c 	mla	r1, ip, r1, r9
  10c4dc:	e0811824 	add	r1, r1, r4, lsr #16
  10c4e0:	e1a04821 	lsr	r4, r1, #16
  10c4e4:	8affffee 	bhi	10c4a4 <__multiply+0x12c>
  10c4e8:	e58b1000 	str	r1, [fp]
  10c4ec:	e15a0006 	cmp	sl, r6
  10c4f0:	e2888004 	add	r8, r8, #4
  10c4f4:	8affffca 	bhi	10c424 <__multiply+0xac>
  10c4f8:	e59da008 	ldr	sl, [sp, #8]
  10c4fc:	e59d700c 	ldr	r7, [sp, #12]
  10c500:	e3570000 	cmp	r7, #0
  10c504:	da000009 	ble	10c530 <__multiply+0x1b8>
  10c508:	e51a3004 	ldr	r3, [sl, #-4]
  10c50c:	e24aa004 	sub	sl, sl, #4
  10c510:	e3530000 	cmp	r3, #0
  10c514:	0a000003 	beq	10c528 <__multiply+0x1b0>
  10c518:	ea000004 	b	10c530 <__multiply+0x1b8>
  10c51c:	e53a3004 	ldr	r3, [sl, #-4]!
  10c520:	e3530000 	cmp	r3, #0
  10c524:	1a000001 	bne	10c530 <__multiply+0x1b8>
  10c528:	e2577001 	subs	r7, r7, #1
  10c52c:	1afffffa 	bne	10c51c <__multiply+0x1a4>
  10c530:	e59d3004 	ldr	r3, [sp, #4]
  10c534:	e5837010 	str	r7, [r3, #16]
  10c538:	e1a00003 	mov	r0, r3
  10c53c:	e28dd014 	add	sp, sp, #20
  10c540:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0010c544 <__pow5mult>:
  10c544:	e2123003 	ands	r3, r2, #3
  10c548:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  10c54c:	e1a04002 	mov	r4, r2
  10c550:	e1a08000 	mov	r8, r0
  10c554:	e1a07001 	mov	r7, r1
  10c558:	1a000024 	bne	10c5f0 <__pow5mult+0xac>
  10c55c:	e1b04144 	asrs	r4, r4, #2
  10c560:	0a000018 	beq	10c5c8 <__pow5mult+0x84>
  10c564:	e5986048 	ldr	r6, [r8, #72]	; 0x48
  10c568:	e3560000 	cmp	r6, #0
  10c56c:	1a000006 	bne	10c58c <__pow5mult+0x48>
  10c570:	ea000026 	b	10c610 <__pow5mult+0xcc>
  10c574:	e1b040c4 	asrs	r4, r4, #1
  10c578:	0a000012 	beq	10c5c8 <__pow5mult+0x84>
  10c57c:	e5965000 	ldr	r5, [r6]
  10c580:	e3550000 	cmp	r5, #0
  10c584:	11a06005 	movne	r6, r5
  10c588:	0a000010 	beq	10c5d0 <__pow5mult+0x8c>
  10c58c:	e3140001 	tst	r4, #1
  10c590:	0afffff7 	beq	10c574 <__pow5mult+0x30>
  10c594:	e1a01007 	mov	r1, r7
  10c598:	e1a02006 	mov	r2, r6
  10c59c:	e1a00008 	mov	r0, r8
  10c5a0:	ebffff74 	bl	10c378 <__multiply>
  10c5a4:	e3570000 	cmp	r7, #0
  10c5a8:	15972004 	ldrne	r2, [r7, #4]
  10c5ac:	1598304c 	ldrne	r3, [r8, #76]	; 0x4c
  10c5b0:	17931102 	ldrne	r1, [r3, r2, lsl #2]
  10c5b4:	15871000 	strne	r1, [r7]
  10c5b8:	17837102 	strne	r7, [r3, r2, lsl #2]
  10c5bc:	e1b040c4 	asrs	r4, r4, #1
  10c5c0:	e1a07000 	mov	r7, r0
  10c5c4:	1affffec 	bne	10c57c <__pow5mult+0x38>
  10c5c8:	e1a00007 	mov	r0, r7
  10c5cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  10c5d0:	e1a01006 	mov	r1, r6
  10c5d4:	e1a02006 	mov	r2, r6
  10c5d8:	e1a00008 	mov	r0, r8
  10c5dc:	ebffff65 	bl	10c378 <__multiply>
  10c5e0:	e5860000 	str	r0, [r6]
  10c5e4:	e1a06000 	mov	r6, r0
  10c5e8:	e5805000 	str	r5, [r0]
  10c5ec:	eaffffe6 	b	10c58c <__pow5mult+0x48>
  10c5f0:	e243c001 	sub	ip, r3, #1
  10c5f4:	e30f2d30 	movw	r2, #64816	; 0xfd30
  10c5f8:	e3402010 	movt	r2, #16
  10c5fc:	e3a03000 	mov	r3, #0
  10c600:	e792210c 	ldr	r2, [r2, ip, lsl #2]
  10c604:	ebfffeab 	bl	10c0b8 <__multadd>
  10c608:	e1a07000 	mov	r7, r0
  10c60c:	eaffffd2 	b	10c55c <__pow5mult+0x18>
  10c610:	e1a00008 	mov	r0, r8
  10c614:	e3001271 	movw	r1, #625	; 0x271
  10c618:	ebffff4e 	bl	10c358 <__i2b>
  10c61c:	e3a03000 	mov	r3, #0
  10c620:	e5880048 	str	r0, [r8, #72]	; 0x48
  10c624:	e1a06000 	mov	r6, r0
  10c628:	e5803000 	str	r3, [r0]
  10c62c:	eaffffd6 	b	10c58c <__pow5mult+0x48>

0010c630 <__lshift>:
  10c630:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  10c634:	e1a042c2 	asr	r4, r2, #5
  10c638:	e591a010 	ldr	sl, [r1, #16]
  10c63c:	e1a07001 	mov	r7, r1
  10c640:	e5913008 	ldr	r3, [r1, #8]
  10c644:	e1a09002 	mov	r9, r2
  10c648:	e084a00a 	add	sl, r4, sl
  10c64c:	e1a08000 	mov	r8, r0
  10c650:	e28a5001 	add	r5, sl, #1
  10c654:	e5911004 	ldr	r1, [r1, #4]
  10c658:	e1550003 	cmp	r5, r3
  10c65c:	da000003 	ble	10c670 <__lshift+0x40>
  10c660:	e1a03083 	lsl	r3, r3, #1
  10c664:	e2811001 	add	r1, r1, #1
  10c668:	e1550003 	cmp	r5, r3
  10c66c:	cafffffb 	bgt	10c660 <__lshift+0x30>
  10c670:	e1a00008 	mov	r0, r8
  10c674:	ebfffe66 	bl	10c014 <_Balloc>
  10c678:	e3540000 	cmp	r4, #0
  10c67c:	e1a02000 	mov	r2, r0
  10c680:	e280c014 	add	ip, r0, #20
  10c684:	da000007 	ble	10c6a8 <__lshift+0x78>
  10c688:	e3a03000 	mov	r3, #0
  10c68c:	e1a06003 	mov	r6, r3
  10c690:	e2833001 	add	r3, r3, #1
  10c694:	e48c6004 	str	r6, [ip], #4
  10c698:	e1530004 	cmp	r3, r4
  10c69c:	1afffffb 	bne	10c690 <__lshift+0x60>
  10c6a0:	e0823103 	add	r3, r2, r3, lsl #2
  10c6a4:	e283c014 	add	ip, r3, #20
  10c6a8:	e5970010 	ldr	r0, [r7, #16]
  10c6ac:	e219901f 	ands	r9, r9, #31
  10c6b0:	e2874014 	add	r4, r7, #20
  10c6b4:	e0870100 	add	r0, r7, r0, lsl #2
  10c6b8:	e2800014 	add	r0, r0, #20
  10c6bc:	0a000014 	beq	10c714 <__lshift+0xe4>
  10c6c0:	e2693020 	rsb	r3, r9, #32
  10c6c4:	e3a01000 	mov	r1, #0
  10c6c8:	e5946000 	ldr	r6, [r4]
  10c6cc:	e1811916 	orr	r1, r1, r6, lsl r9
  10c6d0:	e48c1004 	str	r1, [ip], #4
  10c6d4:	e4941004 	ldr	r1, [r4], #4
  10c6d8:	e1500004 	cmp	r0, r4
  10c6dc:	e1a01331 	lsr	r1, r1, r3
  10c6e0:	8afffff8 	bhi	10c6c8 <__lshift+0x98>
  10c6e4:	e3510000 	cmp	r1, #0
  10c6e8:	e58c1000 	str	r1, [ip]
  10c6ec:	128a5002 	addne	r5, sl, #2
  10c6f0:	e598304c 	ldr	r3, [r8, #76]	; 0x4c
  10c6f4:	e2455001 	sub	r5, r5, #1
  10c6f8:	e5971004 	ldr	r1, [r7, #4]
  10c6fc:	e1a00002 	mov	r0, r2
  10c700:	e5825010 	str	r5, [r2, #16]
  10c704:	e7932101 	ldr	r2, [r3, r1, lsl #2]
  10c708:	e5872000 	str	r2, [r7]
  10c70c:	e7837101 	str	r7, [r3, r1, lsl #2]
  10c710:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  10c714:	e4943004 	ldr	r3, [r4], #4
  10c718:	e1500004 	cmp	r0, r4
  10c71c:	e48c3004 	str	r3, [ip], #4
  10c720:	9afffff2 	bls	10c6f0 <__lshift+0xc0>
  10c724:	e4943004 	ldr	r3, [r4], #4
  10c728:	e1500004 	cmp	r0, r4
  10c72c:	e48c3004 	str	r3, [ip], #4
  10c730:	8afffff7 	bhi	10c714 <__lshift+0xe4>
  10c734:	eaffffed 	b	10c6f0 <__lshift+0xc0>

0010c738 <__mcmp>:
  10c738:	e1a03000 	mov	r3, r0
  10c73c:	e5912010 	ldr	r2, [r1, #16]
  10c740:	e5900010 	ldr	r0, [r0, #16]
  10c744:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
  10c748:	e0500002 	subs	r0, r0, r2
  10c74c:	1a00000c 	bne	10c784 <__mcmp+0x4c>
  10c750:	e2822004 	add	r2, r2, #4
  10c754:	e2834014 	add	r4, r3, #20
  10c758:	e1a02102 	lsl	r2, r2, #2
  10c75c:	e0833002 	add	r3, r3, r2
  10c760:	e0811002 	add	r1, r1, r2
  10c764:	e2833004 	add	r3, r3, #4
  10c768:	e2811004 	add	r1, r1, #4
  10c76c:	e5332004 	ldr	r2, [r3, #-4]!
  10c770:	e531c004 	ldr	ip, [r1, #-4]!
  10c774:	e152000c 	cmp	r2, ip
  10c778:	1a000003 	bne	10c78c <__mcmp+0x54>
  10c77c:	e1540003 	cmp	r4, r3
  10c780:	3afffff9 	bcc	10c76c <__mcmp+0x34>
  10c784:	e8bd0010 	ldmfd	sp!, {r4}
  10c788:	e12fff1e 	bx	lr
  10c78c:	e15c0002 	cmp	ip, r2
  10c790:	93a00001 	movls	r0, #1
  10c794:	83e00000 	mvnhi	r0, #0
  10c798:	eafffff9 	b	10c784 <__mcmp+0x4c>

0010c79c <__mdiff>:
  10c79c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  10c7a0:	e1a07001 	mov	r7, r1
  10c7a4:	e1a04000 	mov	r4, r0
  10c7a8:	e1a01002 	mov	r1, r2
  10c7ac:	e1a00007 	mov	r0, r7
  10c7b0:	e1a08002 	mov	r8, r2
  10c7b4:	ebffffdf 	bl	10c738 <__mcmp>
  10c7b8:	e2505000 	subs	r5, r0, #0
  10c7bc:	0a00003e 	beq	10c8bc <__mdiff+0x120>
  10c7c0:	b1a03007 	movlt	r3, r7
  10c7c4:	b1a07008 	movlt	r7, r8
  10c7c8:	e1a00004 	mov	r0, r4
  10c7cc:	e5971004 	ldr	r1, [r7, #4]
  10c7d0:	b1a08003 	movlt	r8, r3
  10c7d4:	a3a09000 	movge	r9, #0
  10c7d8:	b3a09001 	movlt	r9, #1
  10c7dc:	ebfffe0c 	bl	10c014 <_Balloc>
  10c7e0:	e5976010 	ldr	r6, [r7, #16]
  10c7e4:	e2875014 	add	r5, r7, #20
  10c7e8:	e5983010 	ldr	r3, [r8, #16]
  10c7ec:	e2884014 	add	r4, r8, #20
  10c7f0:	e3a0c000 	mov	ip, #0
  10c7f4:	e0877106 	add	r7, r7, r6, lsl #2
  10c7f8:	e0888103 	add	r8, r8, r3, lsl #2
  10c7fc:	e2877014 	add	r7, r7, #20
  10c800:	e2888014 	add	r8, r8, #20
  10c804:	e280a014 	add	sl, r0, #20
  10c808:	e580900c 	str	r9, [r0, #12]
  10c80c:	e4952004 	ldr	r2, [r5], #4
  10c810:	e1a0300a 	mov	r3, sl
  10c814:	e494a004 	ldr	sl, [r4], #4
  10c818:	e6fc1072 	uxtah	r1, ip, r2
  10c81c:	e1580004 	cmp	r8, r4
  10c820:	e6ff907a 	uxth	r9, sl
  10c824:	e1a0a82a 	lsr	sl, sl, #16
  10c828:	e0691001 	rsb	r1, r9, r1
  10c82c:	e06ac822 	rsb	ip, sl, r2, lsr #16
  10c830:	e1a02005 	mov	r2, r5
  10c834:	e08cc841 	add	ip, ip, r1, asr #16
  10c838:	e6ff1071 	uxth	r1, r1
  10c83c:	e181180c 	orr	r1, r1, ip, lsl #16
  10c840:	e1a0c84c 	asr	ip, ip, #16
  10c844:	e4831004 	str	r1, [r3], #4
  10c848:	e1a0a003 	mov	sl, r3
  10c84c:	8affffee 	bhi	10c80c <__mdiff+0x70>
  10c850:	e1570005 	cmp	r7, r5
  10c854:	e1a08003 	mov	r8, r3
  10c858:	9a00000e 	bls	10c898 <__mdiff+0xfc>
  10c85c:	e4924004 	ldr	r4, [r2], #4
  10c860:	e1570002 	cmp	r7, r2
  10c864:	e6fcc074 	uxtah	ip, ip, r4
  10c868:	e1a04824 	lsr	r4, r4, #16
  10c86c:	e084484c 	add	r4, r4, ip, asr #16
  10c870:	e6ffc07c 	uxth	ip, ip
  10c874:	e18c1804 	orr	r1, ip, r4, lsl #16
  10c878:	e1a0c844 	asr	ip, r4, #16
  10c87c:	e4831004 	str	r1, [r3], #4
  10c880:	8afffff5 	bhi	10c85c <__mdiff+0xc0>
  10c884:	e1e03005 	mvn	r3, r5
  10c888:	e0833007 	add	r3, r3, r7
  10c88c:	e3c33003 	bic	r3, r3, #3
  10c890:	e2833004 	add	r3, r3, #4
  10c894:	e0883003 	add	r3, r8, r3
  10c898:	e3510000 	cmp	r1, #0
  10c89c:	e2433004 	sub	r3, r3, #4
  10c8a0:	1a000003 	bne	10c8b4 <__mdiff+0x118>
  10c8a4:	e5332004 	ldr	r2, [r3, #-4]!
  10c8a8:	e2466001 	sub	r6, r6, #1
  10c8ac:	e3520000 	cmp	r2, #0
  10c8b0:	0afffffb 	beq	10c8a4 <__mdiff+0x108>
  10c8b4:	e5806010 	str	r6, [r0, #16]
  10c8b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  10c8bc:	e1a00004 	mov	r0, r4
  10c8c0:	e1a01005 	mov	r1, r5
  10c8c4:	ebfffdd2 	bl	10c014 <_Balloc>
  10c8c8:	e3a03001 	mov	r3, #1
  10c8cc:	e5805014 	str	r5, [r0, #20]
  10c8d0:	e5803010 	str	r3, [r0, #16]
  10c8d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0010c8d8 <__ulp>:
  10c8d8:	e3a03000 	mov	r3, #0
  10c8dc:	e3473ff0 	movt	r3, #32752	; 0x7ff0
  10c8e0:	e0013003 	and	r3, r1, r3
  10c8e4:	e243350d 	sub	r3, r3, #54525952	; 0x3400000
  10c8e8:	e3530000 	cmp	r3, #0
  10c8ec:	da000002 	ble	10c8fc <__ulp+0x24>
  10c8f0:	e1a01003 	mov	r1, r3
  10c8f4:	e3a00000 	mov	r0, #0
  10c8f8:	e12fff1e 	bx	lr
  10c8fc:	e2633000 	rsb	r3, r3, #0
  10c900:	e1a03a43 	asr	r3, r3, #20
  10c904:	e3530013 	cmp	r3, #19
  10c908:	da000007 	ble	10c92c <__ulp+0x54>
  10c90c:	e3530032 	cmp	r3, #50	; 0x32
  10c910:	e3a01000 	mov	r1, #0
  10c914:	d2633033 	rsble	r3, r3, #51	; 0x33
  10c918:	d3a02001 	movle	r2, #1
  10c91c:	c3a03001 	movgt	r3, #1
  10c920:	d1a03312 	lslle	r3, r2, r3
  10c924:	e1a00003 	mov	r0, r3
  10c928:	e12fff1e 	bx	lr
  10c92c:	e3a02702 	mov	r2, #524288	; 0x80000
  10c930:	e3a00000 	mov	r0, #0
  10c934:	e1a01352 	asr	r1, r2, r3
  10c938:	e12fff1e 	bx	lr

0010c93c <__b2d>:
  10c93c:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, sl, lr}
  10c940:	e2808014 	add	r8, r0, #20
  10c944:	e5906010 	ldr	r6, [r0, #16]
  10c948:	e1a0a001 	mov	sl, r1
  10c94c:	e2866004 	add	r6, r6, #4
  10c950:	e0806106 	add	r6, r0, r6, lsl #2
  10c954:	e1a04006 	mov	r4, r6
  10c958:	e1a07006 	mov	r7, r6
  10c95c:	e4945004 	ldr	r5, [r4], #4
  10c960:	e1a00005 	mov	r0, r5
  10c964:	ebfffe42 	bl	10c274 <__hi0bits>
  10c968:	e350000a 	cmp	r0, #10
  10c96c:	e2603020 	rsb	r3, r0, #32
  10c970:	e58a3000 	str	r3, [sl]
  10c974:	ca00000c 	bgt	10c9ac <__b2d+0x70>
  10c978:	e260100b 	rsb	r1, r0, #11
  10c97c:	e1580006 	cmp	r8, r6
  10c980:	e1a0c135 	lsr	ip, r5, r1
  10c984:	e2800015 	add	r0, r0, #21
  10c988:	e38cc5ff 	orr	ip, ip, #1069547520	; 0x3fc00000
  10c98c:	23a01000 	movcs	r1, #0
  10c990:	e38c3603 	orr	r3, ip, #3145728	; 0x300000
  10c994:	3514c008 	ldrcc	ip, [r4, #-8]
  10c998:	31a0113c 	lsrcc	r1, ip, r1
  10c99c:	e1812015 	orr	r2, r1, r5, lsl r0
  10c9a0:	e1a00002 	mov	r0, r2
  10c9a4:	e1a01003 	mov	r1, r3
  10c9a8:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, sl, pc}
  10c9ac:	e1580006 	cmp	r8, r6
  10c9b0:	32467004 	subcc	r7, r6, #4
  10c9b4:	35141008 	ldrcc	r1, [r4, #-8]
  10c9b8:	23a01000 	movcs	r1, #0
  10c9bc:	e250c00b 	subs	ip, r0, #11
  10c9c0:	0a00000a 	beq	10c9f0 <__b2d+0xb4>
  10c9c4:	e1570008 	cmp	r7, r8
  10c9c8:	e1a05c15 	lsl	r5, r5, ip
  10c9cc:	e38555ff 	orr	r5, r5, #1069547520	; 0x3fc00000
  10c9d0:	e260002b 	rsb	r0, r0, #43	; 0x2b
  10c9d4:	85174004 	ldrhi	r4, [r7, #-4]
  10c9d8:	e3855603 	orr	r5, r5, #3145728	; 0x300000
  10c9dc:	e1853031 	orr	r3, r5, r1, lsr r0
  10c9e0:	93a00000 	movls	r0, #0
  10c9e4:	81a00034 	lsrhi	r0, r4, r0
  10c9e8:	e1802c11 	orr	r2, r0, r1, lsl ip
  10c9ec:	eaffffeb 	b	10c9a0 <__b2d+0x64>
  10c9f0:	e38555ff 	orr	r5, r5, #1069547520	; 0x3fc00000
  10c9f4:	e1a02001 	mov	r2, r1
  10c9f8:	e3853603 	orr	r3, r5, #3145728	; 0x300000
  10c9fc:	eaffffe7 	b	10c9a0 <__b2d+0x64>

0010ca00 <__d2b>:
  10ca00:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
  10ca04:	e24dd00c 	sub	sp, sp, #12
  10ca08:	e3a01001 	mov	r1, #1
  10ca0c:	e1a05003 	mov	r5, r3
  10ca10:	e1a04002 	mov	r4, r2
  10ca14:	e59da028 	ldr	sl, [sp, #40]	; 0x28
  10ca18:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
  10ca1c:	ebfffd7c 	bl	10c014 <_Balloc>
  10ca20:	e7ea7a55 	ubfx	r7, r5, #20, #11
  10ca24:	e3c534ff 	bic	r3, r5, #-16777216	; 0xff000000
  10ca28:	e3570000 	cmp	r7, #0
  10ca2c:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
  10ca30:	13833601 	orrne	r3, r3, #1048576	; 0x100000
  10ca34:	e3540000 	cmp	r4, #0
  10ca38:	e58d3004 	str	r3, [sp, #4]
  10ca3c:	e1a06000 	mov	r6, r0
  10ca40:	0a00001e 	beq	10cac0 <__d2b+0xc0>
  10ca44:	e28d0008 	add	r0, sp, #8
  10ca48:	e5204008 	str	r4, [r0, #-8]!
  10ca4c:	e1a0000d 	mov	r0, sp
  10ca50:	ebfffe1b 	bl	10c2c4 <__lo0bits>
  10ca54:	e3500000 	cmp	r0, #0
  10ca58:	1260c020 	rsbne	ip, r0, #32
  10ca5c:	159d2004 	ldrne	r2, [sp, #4]
  10ca60:	089d000c 	ldmeq	sp, {r2, r3}
  10ca64:	159d1000 	ldrne	r1, [sp]
  10ca68:	11a03032 	lsrne	r3, r2, r0
  10ca6c:	158d3004 	strne	r3, [sp, #4]
  10ca70:	11812c12 	orrne	r2, r1, r2, lsl ip
  10ca74:	e3530000 	cmp	r3, #0
  10ca78:	e5862014 	str	r2, [r6, #20]
  10ca7c:	03a04001 	moveq	r4, #1
  10ca80:	13a04002 	movne	r4, #2
  10ca84:	e3570000 	cmp	r7, #0
  10ca88:	e5863018 	str	r3, [r6, #24]
  10ca8c:	e5864010 	str	r4, [r6, #16]
  10ca90:	1a000013 	bne	10cae4 <__d2b+0xe4>
  10ca94:	e0863104 	add	r3, r6, r4, lsl #2
  10ca98:	e2400e43 	sub	r0, r0, #1072	; 0x430
  10ca9c:	e2400002 	sub	r0, r0, #2
  10caa0:	e58a0000 	str	r0, [sl]
  10caa4:	e5930010 	ldr	r0, [r3, #16]
  10caa8:	ebfffdf1 	bl	10c274 <__hi0bits>
  10caac:	e0600284 	rsb	r0, r0, r4, lsl #5
  10cab0:	e5880000 	str	r0, [r8]
  10cab4:	e1a00006 	mov	r0, r6
  10cab8:	e28dd00c 	add	sp, sp, #12
  10cabc:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, sl, pc}
  10cac0:	e28d0004 	add	r0, sp, #4
  10cac4:	e3a04001 	mov	r4, #1
  10cac8:	ebfffdfd 	bl	10c2c4 <__lo0bits>
  10cacc:	e59d3004 	ldr	r3, [sp, #4]
  10cad0:	e3570000 	cmp	r7, #0
  10cad4:	e5864010 	str	r4, [r6, #16]
  10cad8:	e5863014 	str	r3, [r6, #20]
  10cadc:	e2800020 	add	r0, r0, #32
  10cae0:	0affffeb 	beq	10ca94 <__d2b+0x94>
  10cae4:	e2477e43 	sub	r7, r7, #1072	; 0x430
  10cae8:	e2603035 	rsb	r3, r0, #53	; 0x35
  10caec:	e2477003 	sub	r7, r7, #3
  10caf0:	e0870000 	add	r0, r7, r0
  10caf4:	e58a0000 	str	r0, [sl]
  10caf8:	e5883000 	str	r3, [r8]
  10cafc:	eaffffec 	b	10cab4 <__d2b+0xb4>

0010cb00 <__ratio>:
  10cb00:	e92d4030 	push	{r4, r5, lr}
  10cb04:	ed2d8b02 	vpush	{d8}
  10cb08:	e24dd00c 	sub	sp, sp, #12
  10cb0c:	e1a04001 	mov	r4, r1
  10cb10:	e1a05000 	mov	r5, r0
  10cb14:	e1a0100d 	mov	r1, sp
  10cb18:	ebffff87 	bl	10c93c <__b2d>
  10cb1c:	ec410b18 	vmov	d8, r0, r1
  10cb20:	e1a00004 	mov	r0, r4
  10cb24:	e28d1004 	add	r1, sp, #4
  10cb28:	ebffff83 	bl	10c93c <__b2d>
  10cb2c:	e595c010 	ldr	ip, [r5, #16]
  10cb30:	ec532b18 	vmov	r2, r3, d8
  10cb34:	ec410b30 	vmov	d16, r0, r1
  10cb38:	e5941010 	ldr	r1, [r4, #16]
  10cb3c:	e061400c 	rsb	r4, r1, ip
  10cb40:	ec510b30 	vmov	r0, r1, d16
  10cb44:	e89d1020 	ldm	sp, {r5, ip}
  10cb48:	e06cc005 	rsb	ip, ip, r5
  10cb4c:	e08cc284 	add	ip, ip, r4, lsl #5
  10cb50:	e35c0000 	cmp	ip, #0
  10cb54:	c0833a0c 	addgt	r3, r3, ip, lsl #20
  10cb58:	cc432b18 	vmovgt	d8, r2, r3
  10cb5c:	d0411a0c 	suble	r1, r1, ip, lsl #20
  10cb60:	dc410b30 	vmovle	d16, r0, r1
  10cb64:	eec81b20 	vdiv.f64	d17, d8, d16
  10cb68:	ec510b31 	vmov	r0, r1, d17
  10cb6c:	e28dd00c 	add	sp, sp, #12
  10cb70:	ecbd8b02 	vpop	{d8}
  10cb74:	e8bd8030 	pop	{r4, r5, pc}

0010cb78 <_mprec_log10>:
  10cb78:	e3500017 	cmp	r0, #23
  10cb7c:	cef70b00 	vmovgt.f64	d16, #112	; 0x70
  10cb80:	cef21b04 	vmovgt.f64	d17, #36	; 0x24
  10cb84:	da000004 	ble	10cb9c <_mprec_log10+0x24>
  10cb88:	e2500001 	subs	r0, r0, #1
  10cb8c:	ee600ba1 	vmul.f64	d16, d16, d17
  10cb90:	1afffffc 	bne	10cb88 <_mprec_log10+0x10>
  10cb94:	ec510b30 	vmov	r0, r1, d16
  10cb98:	e12fff1e 	bx	lr
  10cb9c:	e30f3d30 	movw	r3, #64816	; 0xfd30
  10cba0:	e3403010 	movt	r3, #16
  10cba4:	e0833180 	add	r3, r3, r0, lsl #3
  10cba8:	edd30b04 	vldr	d16, [r3, #16]
  10cbac:	ec510b30 	vmov	r0, r1, d16
  10cbb0:	e12fff1e 	bx	lr

0010cbb4 <__copybits>:
  10cbb4:	e92d0030 	push	{r4, r5}
  10cbb8:	e2411001 	sub	r1, r1, #1
  10cbbc:	e5924010 	ldr	r4, [r2, #16]
  10cbc0:	e2823014 	add	r3, r2, #20
  10cbc4:	e1a052c1 	asr	r5, r1, #5
  10cbc8:	e2855001 	add	r5, r5, #1
  10cbcc:	e0824104 	add	r4, r2, r4, lsl #2
  10cbd0:	e2844014 	add	r4, r4, #20
  10cbd4:	e0805105 	add	r5, r0, r5, lsl #2
  10cbd8:	e1530004 	cmp	r3, r4
  10cbdc:	2a000009 	bcs	10cc08 <__copybits+0x54>
  10cbe0:	e1a01000 	mov	r1, r0
  10cbe4:	e493c004 	ldr	ip, [r3], #4
  10cbe8:	e1540003 	cmp	r4, r3
  10cbec:	e481c004 	str	ip, [r1], #4
  10cbf0:	8afffffb 	bhi	10cbe4 <__copybits+0x30>
  10cbf4:	e0623004 	rsb	r3, r2, r4
  10cbf8:	e2433015 	sub	r3, r3, #21
  10cbfc:	e3c33003 	bic	r3, r3, #3
  10cc00:	e2833004 	add	r3, r3, #4
  10cc04:	e0800003 	add	r0, r0, r3
  10cc08:	e1550000 	cmp	r5, r0
  10cc0c:	9a000003 	bls	10cc20 <__copybits+0x6c>
  10cc10:	e3a03000 	mov	r3, #0
  10cc14:	e4803004 	str	r3, [r0], #4
  10cc18:	e1550000 	cmp	r5, r0
  10cc1c:	8afffffc 	bhi	10cc14 <__copybits+0x60>
  10cc20:	e8bd0030 	pop	{r4, r5}
  10cc24:	e12fff1e 	bx	lr

0010cc28 <__any_on>:
  10cc28:	e590c010 	ldr	ip, [r0, #16]
  10cc2c:	e1a032c1 	asr	r3, r1, #5
  10cc30:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
  10cc34:	e15c0003 	cmp	ip, r3
  10cc38:	e2802014 	add	r2, r0, #20
  10cc3c:	b1a0300c 	movlt	r3, ip
  10cc40:	ba000000 	blt	10cc48 <__any_on+0x20>
  10cc44:	ca00000f 	bgt	10cc88 <__any_on+0x60>
  10cc48:	e2833004 	add	r3, r3, #4
  10cc4c:	e0800103 	add	r0, r0, r3, lsl #2
  10cc50:	e2803004 	add	r3, r0, #4
  10cc54:	e1520003 	cmp	r2, r3
  10cc58:	2a000012 	bcs	10cca8 <__any_on+0x80>
  10cc5c:	e5133004 	ldr	r3, [r3, #-4]
  10cc60:	e3530000 	cmp	r3, #0
  10cc64:	1a000004 	bne	10cc7c <__any_on+0x54>
  10cc68:	e1520000 	cmp	r2, r0
  10cc6c:	2a00000d 	bcs	10cca8 <__any_on+0x80>
  10cc70:	e5303004 	ldr	r3, [r0, #-4]!
  10cc74:	e3530000 	cmp	r3, #0
  10cc78:	0afffffa 	beq	10cc68 <__any_on+0x40>
  10cc7c:	e3a00001 	mov	r0, #1
  10cc80:	e8bd0010 	ldmfd	sp!, {r4}
  10cc84:	e12fff1e 	bx	lr
  10cc88:	e211101f 	ands	r1, r1, #31
  10cc8c:	0affffed 	beq	10cc48 <__any_on+0x20>
  10cc90:	e080c103 	add	ip, r0, r3, lsl #2
  10cc94:	e59cc014 	ldr	ip, [ip, #20]
  10cc98:	e1a0413c 	lsr	r4, ip, r1
  10cc9c:	e15c0114 	cmp	ip, r4, lsl r1
  10cca0:	1afffff5 	bne	10cc7c <__any_on+0x54>
  10cca4:	eaffffe7 	b	10cc48 <__any_on+0x20>
  10cca8:	e3a00000 	mov	r0, #0
  10ccac:	eafffff3 	b	10cc80 <__any_on+0x58>

0010ccb0 <__fpclassifyd>:
  10ccb0:	e1902001 	orrs	r2, r0, r1
  10ccb4:	1a000001 	bne	10ccc0 <__fpclassifyd+0x10>
  10ccb8:	e3a00002 	mov	r0, #2
  10ccbc:	e12fff1e 	bx	lr
  10ccc0:	e2702001 	rsbs	r2, r0, #1
  10ccc4:	33a02000 	movcc	r2, #0
  10ccc8:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
  10cccc:	03500000 	cmpeq	r0, #0
  10ccd0:	0afffff8 	beq	10ccb8 <__fpclassifyd+0x8>
  10ccd4:	e3c13102 	bic	r3, r1, #-2147483648	; 0x80000000
  10ccd8:	e30f1fff 	movw	r1, #65535	; 0xffff
  10ccdc:	e2430601 	sub	r0, r3, #1048576	; 0x100000
  10cce0:	e3471fdf 	movt	r1, #32735	; 0x7fdf
  10cce4:	e1500001 	cmp	r0, r1
  10cce8:	8a000001 	bhi	10ccf4 <__fpclassifyd+0x44>
  10ccec:	e3a00004 	mov	r0, #4
  10ccf0:	e12fff1e 	bx	lr
  10ccf4:	e3530601 	cmp	r3, #1048576	; 0x100000
  10ccf8:	2a000001 	bcs	10cd04 <__fpclassifyd+0x54>
  10ccfc:	e3a00003 	mov	r0, #3
  10cd00:	e12fff1e 	bx	lr
  10cd04:	e3a00000 	mov	r0, #0
  10cd08:	e3470ff0 	movt	r0, #32752	; 0x7ff0
  10cd0c:	e1530000 	cmp	r3, r0
  10cd10:	13a00000 	movne	r0, #0
  10cd14:	02020001 	andeq	r0, r2, #1
  10cd18:	e12fff1e 	bx	lr

0010cd1c <_sbrk_r>:
  10cd1c:	e92d4038 	push	{r3, r4, r5, lr}
  10cd20:	e30840cc 	movw	r4, #32972	; 0x80cc
  10cd24:	e3404012 	movt	r4, #18
  10cd28:	e1a05000 	mov	r5, r0
  10cd2c:	e1a00001 	mov	r0, r1
  10cd30:	e3a03000 	mov	r3, #0
  10cd34:	e5843000 	str	r3, [r4]
  10cd38:	eb000ad3 	bl	10f88c <_sbrk>
  10cd3c:	e3700001 	cmn	r0, #1
  10cd40:	18bd8038 	popne	{r3, r4, r5, pc}
  10cd44:	e5943000 	ldr	r3, [r4]
  10cd48:	e3530000 	cmp	r3, #0
  10cd4c:	15853000 	strne	r3, [r5]
  10cd50:	e8bd8038 	pop	{r3, r4, r5, pc}

0010cd54 <__sread>:
  10cd54:	e92d4010 	push	{r4, lr}
  10cd58:	e1a04001 	mov	r4, r1
  10cd5c:	e1d110fe 	ldrsh	r1, [r1, #14]
  10cd60:	eb000842 	bl	10ee70 <_read_r>
  10cd64:	e3500000 	cmp	r0, #0
  10cd68:	a5943050 	ldrge	r3, [r4, #80]	; 0x50
  10cd6c:	b1d430bc 	ldrhlt	r3, [r4, #12]
  10cd70:	a0833000 	addge	r3, r3, r0
  10cd74:	b3c33a01 	biclt	r3, r3, #4096	; 0x1000
  10cd78:	a5843050 	strge	r3, [r4, #80]	; 0x50
  10cd7c:	b1c430bc 	strhlt	r3, [r4, #12]
  10cd80:	e8bd8010 	pop	{r4, pc}

0010cd84 <__seofread>:
  10cd84:	e3a00000 	mov	r0, #0
  10cd88:	e12fff1e 	bx	lr

0010cd8c <__swrite>:
  10cd8c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  10cd90:	e1a04001 	mov	r4, r1
  10cd94:	e1d110bc 	ldrh	r1, [r1, #12]
  10cd98:	e1a05003 	mov	r5, r3
  10cd9c:	e1a07000 	mov	r7, r0
  10cda0:	e1a06002 	mov	r6, r2
  10cda4:	e2013c01 	and	r3, r1, #256	; 0x100
  10cda8:	e6bf3073 	sxth	r3, r3
  10cdac:	e3530000 	cmp	r3, #0
  10cdb0:	0a000004 	beq	10cdc8 <__swrite+0x3c>
  10cdb4:	e1d410fe 	ldrsh	r1, [r4, #14]
  10cdb8:	e3a02000 	mov	r2, #0
  10cdbc:	e3a03002 	mov	r3, #2
  10cdc0:	eb0007cd 	bl	10ecfc <_lseek_r>
  10cdc4:	e1d410bc 	ldrh	r1, [r4, #12]
  10cdc8:	e3c11a01 	bic	r1, r1, #4096	; 0x1000
  10cdcc:	e1a00007 	mov	r0, r7
  10cdd0:	e1c410bc 	strh	r1, [r4, #12]
  10cdd4:	e1a02006 	mov	r2, r6
  10cdd8:	e1d410fe 	ldrsh	r1, [r4, #14]
  10cddc:	e1a03005 	mov	r3, r5
  10cde0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  10cde4:	ea000549 	b	10e310 <_write_r>

0010cde8 <__sseek>:
  10cde8:	e92d4010 	push	{r4, lr}
  10cdec:	e1a04001 	mov	r4, r1
  10cdf0:	e1d110fe 	ldrsh	r1, [r1, #14]
  10cdf4:	eb0007c0 	bl	10ecfc <_lseek_r>
  10cdf8:	e1d430bc 	ldrh	r3, [r4, #12]
  10cdfc:	e3700001 	cmn	r0, #1
  10ce00:	15840050 	strne	r0, [r4, #80]	; 0x50
  10ce04:	03c33a01 	biceq	r3, r3, #4096	; 0x1000
  10ce08:	13833a01 	orrne	r3, r3, #4096	; 0x1000
  10ce0c:	e1c430bc 	strh	r3, [r4, #12]
  10ce10:	e8bd8010 	pop	{r4, pc}

0010ce14 <__sclose>:
  10ce14:	e1d110fe 	ldrsh	r1, [r1, #14]
  10ce18:	ea0005ad 	b	10e4d4 <_close_r>

0010ce1c <strcmp>:
  10ce1c:	f5d0f000 	pld	[r0]
  10ce20:	f5d1f000 	pld	[r1]
  10ce24:	e0202001 	eor	r2, r0, r1
  10ce28:	e3120003 	tst	r2, #3
  10ce2c:	1a000023 	bne	10cec0 <strcmp_unaligned>
  10ce30:	e2102003 	ands	r2, r0, #3
  10ce34:	e3c00003 	bic	r0, r0, #3
  10ce38:	e3c11003 	bic	r1, r1, #3
  10ce3c:	e490c004 	ldr	ip, [r0], #4
  10ce40:	04913004 	ldreq	r3, [r1], #4
  10ce44:	0a000006 	beq	10ce64 <strcmp+0x48>
  10ce48:	e2222003 	eor	r2, r2, #3
  10ce4c:	e1a02182 	lsl	r2, r2, #3
  10ce50:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
  10ce54:	e1a02233 	lsr	r2, r3, r2
  10ce58:	e4913004 	ldr	r3, [r1], #4
  10ce5c:	e18cc002 	orr	ip, ip, r2
  10ce60:	e1833002 	orr	r3, r3, r2
  10ce64:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
  10ce68:	e3a04001 	mov	r4, #1
  10ce6c:	e1844404 	orr	r4, r4, r4, lsl #8
  10ce70:	e1844804 	orr	r4, r4, r4, lsl #16
  10ce74:	f5d0f008 	pld	[r0, #8]
  10ce78:	f5d1f008 	pld	[r1, #8]
  10ce7c:	e04c2004 	sub	r2, ip, r4
  10ce80:	e15c0003 	cmp	ip, r3
  10ce84:	01c2200c 	biceq	r2, r2, ip
  10ce88:	01120384 	tsteq	r2, r4, lsl #7
  10ce8c:	0490c004 	ldreq	ip, [r0], #4
  10ce90:	04913004 	ldreq	r3, [r1], #4
  10ce94:	0afffff6 	beq	10ce74 <strcmp+0x58>
  10ce98:	e1a00c0c 	lsl	r0, ip, #24
  10ce9c:	e1a0c42c 	lsr	ip, ip, #8
  10cea0:	e3500001 	cmp	r0, #1
  10cea4:	21500c03 	cmpcs	r0, r3, lsl #24
  10cea8:	01a03423 	lsreq	r3, r3, #8
  10ceac:	0afffff9 	beq	10ce98 <strcmp+0x7c>
  10ceb0:	e20330ff 	and	r3, r3, #255	; 0xff
  10ceb4:	e0630c20 	rsb	r0, r3, r0, lsr #24
  10ceb8:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
  10cebc:	e12fff1e 	bx	lr

0010cec0 <strcmp_unaligned>:
  10cec0:	e3100003 	tst	r0, #3
  10cec4:	0a000006 	beq	10cee4 <strcmp_unaligned+0x24>
  10cec8:	e4d02001 	ldrb	r2, [r0], #1
  10cecc:	e4d13001 	ldrb	r3, [r1], #1
  10ced0:	e3520001 	cmp	r2, #1
  10ced4:	21520003 	cmpcs	r2, r3
  10ced8:	0afffff8 	beq	10cec0 <strcmp_unaligned>
  10cedc:	e0420003 	sub	r0, r2, r3
  10cee0:	e12fff1e 	bx	lr
  10cee4:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)
  10cee8:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
  10ceec:	e3a02001 	mov	r2, #1
  10cef0:	e1822402 	orr	r2, r2, r2, lsl #8
  10cef4:	e1822802 	orr	r2, r2, r2, lsl #16
  10cef8:	e201c003 	and	ip, r1, #3
  10cefc:	e3c11003 	bic	r1, r1, #3
  10cf00:	e4904004 	ldr	r4, [r0], #4
  10cf04:	e4915004 	ldr	r5, [r1], #4
  10cf08:	e35c0002 	cmp	ip, #2
  10cf0c:	0a000017 	beq	10cf70 <strcmp_unaligned+0xb0>
  10cf10:	8a00002d 	bhi	10cfcc <strcmp_unaligned+0x10c>
  10cf14:	e3c4c4ff 	bic	ip, r4, #-16777216	; 0xff000000
  10cf18:	e15c0425 	cmp	ip, r5, lsr #8
  10cf1c:	e0443002 	sub	r3, r4, r2
  10cf20:	e1c33004 	bic	r3, r3, r4
  10cf24:	1a000007 	bne	10cf48 <strcmp_unaligned+0x88>
  10cf28:	e0133382 	ands	r3, r3, r2, lsl #7
  10cf2c:	04915004 	ldreq	r5, [r1], #4
  10cf30:	1a000006 	bne	10cf50 <strcmp_unaligned+0x90>
  10cf34:	e02cc004 	eor	ip, ip, r4
  10cf38:	e15c0c05 	cmp	ip, r5, lsl #24
  10cf3c:	1a000008 	bne	10cf64 <strcmp_unaligned+0xa4>
  10cf40:	e4904004 	ldr	r4, [r0], #4
  10cf44:	eafffff2 	b	10cf14 <strcmp_unaligned+0x54>
  10cf48:	e1a05425 	lsr	r5, r5, #8
  10cf4c:	ea000037 	b	10d030 <strcmp_unaligned+0x170>
  10cf50:	e3d334ff 	bics	r3, r3, #-16777216	; 0xff000000
  10cf54:	1a000031 	bne	10d020 <strcmp_unaligned+0x160>
  10cf58:	e5d15000 	ldrb	r5, [r1]
  10cf5c:	e1a0cc24 	lsr	ip, r4, #24
  10cf60:	ea000032 	b	10d030 <strcmp_unaligned+0x170>
  10cf64:	e1a0cc24 	lsr	ip, r4, #24
  10cf68:	e20550ff 	and	r5, r5, #255	; 0xff
  10cf6c:	ea00002f 	b	10d030 <strcmp_unaligned+0x170>
  10cf70:	e1a0c804 	lsl	ip, r4, #16
  10cf74:	e0443002 	sub	r3, r4, r2
  10cf78:	e1a0c82c 	lsr	ip, ip, #16
  10cf7c:	e1c33004 	bic	r3, r3, r4
  10cf80:	e15c0825 	cmp	ip, r5, lsr #16
  10cf84:	1a00000e 	bne	10cfc4 <strcmp_unaligned+0x104>
  10cf88:	e0133382 	ands	r3, r3, r2, lsl #7
  10cf8c:	04915004 	ldreq	r5, [r1], #4
  10cf90:	1a000004 	bne	10cfa8 <strcmp_unaligned+0xe8>
  10cf94:	e02cc004 	eor	ip, ip, r4
  10cf98:	e15c0805 	cmp	ip, r5, lsl #16
  10cf9c:	1a000006 	bne	10cfbc <strcmp_unaligned+0xfc>
  10cfa0:	e4904004 	ldr	r4, [r0], #4
  10cfa4:	eafffff1 	b	10cf70 <strcmp_unaligned+0xb0>
  10cfa8:	e1b03803 	lsls	r3, r3, #16
  10cfac:	1a00001b 	bne	10d020 <strcmp_unaligned+0x160>
  10cfb0:	e1d150b0 	ldrh	r5, [r1]
  10cfb4:	e1a0c824 	lsr	ip, r4, #16
  10cfb8:	ea00001c 	b	10d030 <strcmp_unaligned+0x170>
  10cfbc:	e1a05805 	lsl	r5, r5, #16
  10cfc0:	e1a0c824 	lsr	ip, r4, #16
  10cfc4:	e1a05825 	lsr	r5, r5, #16
  10cfc8:	ea000018 	b	10d030 <strcmp_unaligned+0x170>
  10cfcc:	e204c0ff 	and	ip, r4, #255	; 0xff
  10cfd0:	e15c0c25 	cmp	ip, r5, lsr #24
  10cfd4:	e0443002 	sub	r3, r4, r2
  10cfd8:	e1c33004 	bic	r3, r3, r4
  10cfdc:	1a000007 	bne	10d000 <strcmp_unaligned+0x140>
  10cfe0:	e0133382 	ands	r3, r3, r2, lsl #7
  10cfe4:	04915004 	ldreq	r5, [r1], #4
  10cfe8:	1a000006 	bne	10d008 <strcmp_unaligned+0x148>
  10cfec:	e02cc004 	eor	ip, ip, r4
  10cff0:	e15c0405 	cmp	ip, r5, lsl #8
  10cff4:	1a000006 	bne	10d014 <strcmp_unaligned+0x154>
  10cff8:	e4904004 	ldr	r4, [r0], #4
  10cffc:	eafffff2 	b	10cfcc <strcmp_unaligned+0x10c>
  10d000:	e1a05c25 	lsr	r5, r5, #24
  10d004:	ea000009 	b	10d030 <strcmp_unaligned+0x170>
  10d008:	e31400ff 	tst	r4, #255	; 0xff
  10d00c:	0a000003 	beq	10d020 <strcmp_unaligned+0x160>
  10d010:	e4915004 	ldr	r5, [r1], #4
  10d014:	e1a0c424 	lsr	ip, r4, #8
  10d018:	e3c554ff 	bic	r5, r5, #-16777216	; 0xff000000
  10d01c:	ea000003 	b	10d030 <strcmp_unaligned+0x170>
  10d020:	e3a00000 	mov	r0, #0
  10d024:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
  10d028:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
  10d02c:	e12fff1e 	bx	lr
  10d030:	e20c20ff 	and	r2, ip, #255	; 0xff
  10d034:	e20500ff 	and	r0, r5, #255	; 0xff
  10d038:	e3500001 	cmp	r0, #1
  10d03c:	21500002 	cmpcs	r0, r2
  10d040:	01a0c42c 	lsreq	ip, ip, #8
  10d044:	01a05425 	lsreq	r5, r5, #8
  10d048:	0afffff8 	beq	10d030 <strcmp_unaligned+0x170>
  10d04c:	e0420000 	sub	r0, r2, r0
  10d050:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
  10d054:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
  10d058:	e12fff1e 	bx	lr

0010d05c <__sprint_r>:
  10d05c:	e5923008 	ldr	r3, [r2, #8]
  10d060:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  10d064:	e3530000 	cmp	r3, #0
  10d068:	e1a0a002 	mov	sl, r2
  10d06c:	e1a07000 	mov	r7, r0
  10d070:	e1a06001 	mov	r6, r1
  10d074:	0a00001f 	beq	10d0f8 <__sprint_r+0x9c>
  10d078:	e591c064 	ldr	ip, [r1, #100]	; 0x64
  10d07c:	e31c0a02 	tst	ip, #8192	; 0x2000
  10d080:	0a00001f 	beq	10d104 <__sprint_r+0xa8>
  10d084:	e5929000 	ldr	r9, [r2]
  10d088:	e2899008 	add	r9, r9, #8
  10d08c:	e9190120 	ldmdb	r9, {r5, r8}
  10d090:	e1b08128 	lsrs	r8, r8, #2
  10d094:	12455004 	subne	r5, r5, #4
  10d098:	13a04000 	movne	r4, #0
  10d09c:	1a000002 	bne	10d0ac <__sprint_r+0x50>
  10d0a0:	ea00000d 	b	10d0dc <__sprint_r+0x80>
  10d0a4:	e1580004 	cmp	r8, r4
  10d0a8:	0a00000a 	beq	10d0d8 <__sprint_r+0x7c>
  10d0ac:	e1a00007 	mov	r0, r7
  10d0b0:	e5b51004 	ldr	r1, [r5, #4]!
  10d0b4:	e1a02006 	mov	r2, r6
  10d0b8:	e2844001 	add	r4, r4, #1
  10d0bc:	eb000556 	bl	10e61c <_fputwc_r>
  10d0c0:	e3700001 	cmn	r0, #1
  10d0c4:	1afffff6 	bne	10d0a4 <__sprint_r+0x48>
  10d0c8:	e3a03000 	mov	r3, #0
  10d0cc:	e58a3008 	str	r3, [sl, #8]
  10d0d0:	e58a3004 	str	r3, [sl, #4]
  10d0d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  10d0d8:	e59a3008 	ldr	r3, [sl, #8]
  10d0dc:	e0433108 	sub	r3, r3, r8, lsl #2
  10d0e0:	e2899008 	add	r9, r9, #8
  10d0e4:	e3530000 	cmp	r3, #0
  10d0e8:	e58a3008 	str	r3, [sl, #8]
  10d0ec:	1affffe6 	bne	10d08c <__sprint_r+0x30>
  10d0f0:	e1a00003 	mov	r0, r3
  10d0f4:	eafffff3 	b	10d0c8 <__sprint_r+0x6c>
  10d0f8:	e5823004 	str	r3, [r2, #4]
  10d0fc:	e1a00003 	mov	r0, r3
  10d100:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  10d104:	eb0005b8 	bl	10e7ec <__sfvwrite_r>
  10d108:	eaffffee 	b	10d0c8 <__sprint_r+0x6c>

0010d10c <_vfiprintf_r>:
  10d10c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  10d110:	e24dde4e 	sub	sp, sp, #1248	; 0x4e0
  10d114:	e24dd00c 	sub	sp, sp, #12
  10d118:	e2506000 	subs	r6, r0, #0
  10d11c:	e1a0a001 	mov	sl, r1
  10d120:	e1a04002 	mov	r4, r2
  10d124:	e58d6014 	str	r6, [sp, #20]
  10d128:	e58d301c 	str	r3, [sp, #28]
  10d12c:	0a000002 	beq	10d13c <_vfiprintf_r+0x30>
  10d130:	e5963038 	ldr	r3, [r6, #56]	; 0x38
  10d134:	e3530000 	cmp	r3, #0
  10d138:	0a000384 	beq	10df50 <_vfiprintf_r+0xe44>
  10d13c:	e1dac0bc 	ldrh	ip, [sl, #12]
  10d140:	e20c3a02 	and	r3, ip, #8192	; 0x2000
  10d144:	e6bf3073 	sxth	r3, r3
  10d148:	e3530000 	cmp	r3, #0
  10d14c:	038cca02 	orreq	ip, ip, #8192	; 0x2000
  10d150:	01cac0bc 	strheq	ip, [sl, #12]
  10d154:	059a3064 	ldreq	r3, [sl, #100]	; 0x64
  10d158:	03c33a02 	biceq	r3, r3, #8192	; 0x2000
  10d15c:	058a3064 	streq	r3, [sl, #100]	; 0x64
  10d160:	e20c3008 	and	r3, ip, #8
  10d164:	e6bf3073 	sxth	r3, r3
  10d168:	e3530000 	cmp	r3, #0
  10d16c:	0a00031b 	beq	10dde0 <_vfiprintf_r+0xcd4>
  10d170:	e59a3010 	ldr	r3, [sl, #16]
  10d174:	e3530000 	cmp	r3, #0
  10d178:	0a000318 	beq	10dde0 <_vfiprintf_r+0xcd4>
  10d17c:	e20c301a 	and	r3, ip, #26
  10d180:	e353000a 	cmp	r3, #10
  10d184:	0a00031e 	beq	10de04 <_vfiprintf_r+0xcf8>
  10d188:	e28d8080 	add	r8, sp, #128	; 0x80
  10d18c:	e28d907f 	add	r9, sp, #127	; 0x7f
  10d190:	e1a0b004 	mov	fp, r4
  10d194:	e3a03000 	mov	r3, #0
  10d198:	e069c008 	rsb	ip, r9, r8
  10d19c:	e28d60e8 	add	r6, sp, #232	; 0xe8
  10d1a0:	e58d8030 	str	r8, [sp, #48]	; 0x30
  10d1a4:	e58d9034 	str	r9, [sp, #52]	; 0x34
  10d1a8:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  10d1ac:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
  10d1b0:	e58d300c 	str	r3, [sp, #12]
  10d1b4:	e58d604c 	str	r6, [sp, #76]	; 0x4c
  10d1b8:	e58d3054 	str	r3, [sp, #84]	; 0x54
  10d1bc:	e58d3050 	str	r3, [sp, #80]	; 0x50
  10d1c0:	e5db3000 	ldrb	r3, [fp]
  10d1c4:	e3530025 	cmp	r3, #37	; 0x25
  10d1c8:	13530000 	cmpne	r3, #0
  10d1cc:	0a00028a 	beq	10dbfc <_vfiprintf_r+0xaf0>
  10d1d0:	e28b2001 	add	r2, fp, #1
  10d1d4:	e1a04002 	mov	r4, r2
  10d1d8:	e2822001 	add	r2, r2, #1
  10d1dc:	e5d43000 	ldrb	r3, [r4]
  10d1e0:	e3530025 	cmp	r3, #37	; 0x25
  10d1e4:	13530000 	cmpne	r3, #0
  10d1e8:	1afffff9 	bne	10d1d4 <_vfiprintf_r+0xc8>
  10d1ec:	e054500b 	subs	r5, r4, fp
  10d1f0:	0a00000d 	beq	10d22c <_vfiprintf_r+0x120>
  10d1f4:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
  10d1f8:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
  10d1fc:	e2822001 	add	r2, r2, #1
  10d200:	e586b000 	str	fp, [r6]
  10d204:	e3520007 	cmp	r2, #7
  10d208:	e0811005 	add	r1, r1, r5
  10d20c:	e5865004 	str	r5, [r6, #4]
  10d210:	d2866008 	addle	r6, r6, #8
  10d214:	e58d1054 	str	r1, [sp, #84]	; 0x54
  10d218:	e58d2050 	str	r2, [sp, #80]	; 0x50
  10d21c:	ca00032d 	bgt	10ded8 <_vfiprintf_r+0xdcc>
  10d220:	e59d700c 	ldr	r7, [sp, #12]
  10d224:	e0877005 	add	r7, r7, r5
  10d228:	e58d700c 	str	r7, [sp, #12]
  10d22c:	e5d43000 	ldrb	r3, [r4]
  10d230:	e3530000 	cmp	r3, #0
  10d234:	0a000286 	beq	10dc54 <_vfiprintf_r+0xb48>
  10d238:	e3a03000 	mov	r3, #0
  10d23c:	e5cd3047 	strb	r3, [sp, #71]	; 0x47
  10d240:	e1a02003 	mov	r2, r3
  10d244:	e5d43001 	ldrb	r3, [r4, #1]
  10d248:	e284b001 	add	fp, r4, #1
  10d24c:	e3e08000 	mvn	r8, #0
  10d250:	e1a07002 	mov	r7, r2
  10d254:	e58d2018 	str	r2, [sp, #24]
  10d258:	e28bb001 	add	fp, fp, #1
  10d25c:	e2431020 	sub	r1, r3, #32
  10d260:	e3510058 	cmp	r1, #88	; 0x58
  10d264:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
  10d268:	ea0000ba 	b	10d558 <_vfiprintf_r+0x44c>
  10d26c:	0010d8b8 	.word	0x0010d8b8
  10d270:	0010d558 	.word	0x0010d558
  10d274:	0010d558 	.word	0x0010d558
  10d278:	0010d8ac 	.word	0x0010d8ac
  10d27c:	0010d558 	.word	0x0010d558
  10d280:	0010d558 	.word	0x0010d558
  10d284:	0010d558 	.word	0x0010d558
  10d288:	0010d558 	.word	0x0010d558
  10d28c:	0010d558 	.word	0x0010d558
  10d290:	0010d558 	.word	0x0010d558
  10d294:	0010d520 	.word	0x0010d520
  10d298:	0010d8a0 	.word	0x0010d8a0
  10d29c:	0010d558 	.word	0x0010d558
  10d2a0:	0010d54c 	.word	0x0010d54c
  10d2a4:	0010d904 	.word	0x0010d904
  10d2a8:	0010d558 	.word	0x0010d558
  10d2ac:	0010d8f8 	.word	0x0010d8f8
  10d2b0:	0010d8c8 	.word	0x0010d8c8
  10d2b4:	0010d8c8 	.word	0x0010d8c8
  10d2b8:	0010d8c8 	.word	0x0010d8c8
  10d2bc:	0010d8c8 	.word	0x0010d8c8
  10d2c0:	0010d8c8 	.word	0x0010d8c8
  10d2c4:	0010d8c8 	.word	0x0010d8c8
  10d2c8:	0010d8c8 	.word	0x0010d8c8
  10d2cc:	0010d8c8 	.word	0x0010d8c8
  10d2d0:	0010d8c8 	.word	0x0010d8c8
  10d2d4:	0010d558 	.word	0x0010d558
  10d2d8:	0010d558 	.word	0x0010d558
  10d2dc:	0010d558 	.word	0x0010d558
  10d2e0:	0010d558 	.word	0x0010d558
  10d2e4:	0010d558 	.word	0x0010d558
  10d2e8:	0010d558 	.word	0x0010d558
  10d2ec:	0010d558 	.word	0x0010d558
  10d2f0:	0010d558 	.word	0x0010d558
  10d2f4:	0010d558 	.word	0x0010d558
  10d2f8:	0010d558 	.word	0x0010d558
  10d2fc:	0010d3d0 	.word	0x0010d3d0
  10d300:	0010d558 	.word	0x0010d558
  10d304:	0010d558 	.word	0x0010d558
  10d308:	0010d558 	.word	0x0010d558
  10d30c:	0010d558 	.word	0x0010d558
  10d310:	0010d558 	.word	0x0010d558
  10d314:	0010d558 	.word	0x0010d558
  10d318:	0010d558 	.word	0x0010d558
  10d31c:	0010d558 	.word	0x0010d558
  10d320:	0010d558 	.word	0x0010d558
  10d324:	0010d558 	.word	0x0010d558
  10d328:	0010d504 	.word	0x0010d504
  10d32c:	0010d558 	.word	0x0010d558
  10d330:	0010d558 	.word	0x0010d558
  10d334:	0010d558 	.word	0x0010d558
  10d338:	0010d558 	.word	0x0010d558
  10d33c:	0010d558 	.word	0x0010d558
  10d340:	0010d4c4 	.word	0x0010d4c4
  10d344:	0010d558 	.word	0x0010d558
  10d348:	0010d558 	.word	0x0010d558
  10d34c:	0010d860 	.word	0x0010d860
  10d350:	0010d558 	.word	0x0010d558
  10d354:	0010d558 	.word	0x0010d558
  10d358:	0010d558 	.word	0x0010d558
  10d35c:	0010d558 	.word	0x0010d558
  10d360:	0010d558 	.word	0x0010d558
  10d364:	0010d558 	.word	0x0010d558
  10d368:	0010d558 	.word	0x0010d558
  10d36c:	0010d558 	.word	0x0010d558
  10d370:	0010d558 	.word	0x0010d558
  10d374:	0010d558 	.word	0x0010d558
  10d378:	0010d6fc 	.word	0x0010d6fc
  10d37c:	0010d3d4 	.word	0x0010d3d4
  10d380:	0010d558 	.word	0x0010d558
  10d384:	0010d558 	.word	0x0010d558
  10d388:	0010d558 	.word	0x0010d558
  10d38c:	0010d664 	.word	0x0010d664
  10d390:	0010d3d4 	.word	0x0010d3d4
  10d394:	0010d558 	.word	0x0010d558
  10d398:	0010d558 	.word	0x0010d558
  10d39c:	0010d644 	.word	0x0010d644
  10d3a0:	0010d558 	.word	0x0010d558
  10d3a4:	0010d670 	.word	0x0010d670
  10d3a8:	0010d508 	.word	0x0010d508
  10d3ac:	0010d6b4 	.word	0x0010d6b4
  10d3b0:	0010d6a8 	.word	0x0010d6a8
  10d3b4:	0010d558 	.word	0x0010d558
  10d3b8:	0010d5d4 	.word	0x0010d5d4
  10d3bc:	0010d558 	.word	0x0010d558
  10d3c0:	0010d4c8 	.word	0x0010d4c8
  10d3c4:	0010d558 	.word	0x0010d558
  10d3c8:	0010d558 	.word	0x0010d558
  10d3cc:	0010d588 	.word	0x0010d588
  10d3d0:	e3877010 	orr	r7, r7, #16
  10d3d4:	e3170020 	tst	r7, #32
  10d3d8:	e5cd2047 	strb	r2, [sp, #71]	; 0x47
  10d3dc:	0a000331 	beq	10e0a8 <_vfiprintf_r+0xf9c>
  10d3e0:	e59dc01c 	ldr	ip, [sp, #28]
  10d3e4:	e28c3007 	add	r3, ip, #7
  10d3e8:	e3c33007 	bic	r3, r3, #7
  10d3ec:	e2839008 	add	r9, r3, #8
  10d3f0:	e58d901c 	str	r9, [sp, #28]
  10d3f4:	e1c320d0 	ldrd	r2, [r3]
  10d3f8:	e1a04002 	mov	r4, r2
  10d3fc:	e1a05003 	mov	r5, r3
  10d400:	e3520000 	cmp	r2, #0
  10d404:	e2d30000 	sbcs	r0, r3, #0
  10d408:	ba000376 	blt	10e1e8 <_vfiprintf_r+0x10dc>
  10d40c:	e1941005 	orrs	r1, r4, r5
  10d410:	e5dd9047 	ldrb	r9, [sp, #71]	; 0x47
  10d414:	e3a03001 	mov	r3, #1
  10d418:	03a02000 	moveq	r2, #0
  10d41c:	13a02001 	movne	r2, #1
  10d420:	e3580000 	cmp	r8, #0
  10d424:	a3c77080 	bicge	r7, r7, #128	; 0x80
  10d428:	e3580000 	cmp	r8, #0
  10d42c:	13822001 	orrne	r2, r2, #1
  10d430:	e3520000 	cmp	r2, #0
  10d434:	0a0001f2 	beq	10dc04 <_vfiprintf_r+0xaf8>
  10d438:	e3530001 	cmp	r3, #1
  10d43c:	0a0002e2 	beq	10dfcc <_vfiprintf_r+0xec0>
  10d440:	e3530002 	cmp	r3, #2
  10d444:	0a0002c7 	beq	10df68 <_vfiprintf_r+0xe5c>
  10d448:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  10d44c:	e58d7004 	str	r7, [sp, #4]
  10d450:	e58d6008 	str	r6, [sp, #8]
  10d454:	e1a011a4 	lsr	r1, r4, #3
  10d458:	e1a0c1a5 	lsr	ip, r5, #3
  10d45c:	e1811e85 	orr	r1, r1, r5, lsl #29
  10d460:	e3a06007 	mov	r6, #7
  10d464:	e0042006 	and	r2, r4, r6
  10d468:	e1a0500c 	mov	r5, ip
  10d46c:	e2822030 	add	r2, r2, #48	; 0x30
  10d470:	e1a04001 	mov	r4, r1
  10d474:	e1947005 	orrs	r7, r4, r5
  10d478:	e1a03000 	mov	r3, r0
  10d47c:	e6ef2072 	uxtb	r2, r2
  10d480:	e2400001 	sub	r0, r0, #1
  10d484:	e5c32000 	strb	r2, [r3]
  10d488:	1afffff1 	bne	10d454 <_vfiprintf_r+0x348>
  10d48c:	e59d7004 	ldr	r7, [sp, #4]
  10d490:	e58d3024 	str	r3, [sp, #36]	; 0x24
  10d494:	e3170001 	tst	r7, #1
  10d498:	e59d6008 	ldr	r6, [sp, #8]
  10d49c:	0a000321 	beq	10e128 <_vfiprintf_r+0x101c>
  10d4a0:	e3520030 	cmp	r2, #48	; 0x30
  10d4a4:	0a0002e4 	beq	10e03c <_vfiprintf_r+0xf30>
  10d4a8:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
  10d4ac:	e3a02030 	mov	r2, #48	; 0x30
  10d4b0:	e58d0024 	str	r0, [sp, #36]	; 0x24
  10d4b4:	e060c00c 	rsb	ip, r0, ip
  10d4b8:	e5432001 	strb	r2, [r3, #-1]
  10d4bc:	e58dc008 	str	ip, [sp, #8]
  10d4c0:	ea0001d9 	b	10dc2c <_vfiprintf_r+0xb20>
  10d4c4:	e3877010 	orr	r7, r7, #16
  10d4c8:	e3170020 	tst	r7, #32
  10d4cc:	0a0002e7 	beq	10e070 <_vfiprintf_r+0xf64>
  10d4d0:	e59dc01c 	ldr	ip, [sp, #28]
  10d4d4:	e3a03001 	mov	r3, #1
  10d4d8:	e28c2007 	add	r2, ip, #7
  10d4dc:	e3c22007 	bic	r2, r2, #7
  10d4e0:	e2829008 	add	r9, r2, #8
  10d4e4:	e58d901c 	str	r9, [sp, #28]
  10d4e8:	e1c240d0 	ldrd	r4, [r2]
  10d4ec:	e194c005 	orrs	ip, r4, r5
  10d4f0:	03a02000 	moveq	r2, #0
  10d4f4:	13a02001 	movne	r2, #1
  10d4f8:	e3a09000 	mov	r9, #0
  10d4fc:	e5cd9047 	strb	r9, [sp, #71]	; 0x47
  10d500:	eaffffc6 	b	10d420 <_vfiprintf_r+0x314>
  10d504:	e3877010 	orr	r7, r7, #16
  10d508:	e2173020 	ands	r3, r7, #32
  10d50c:	0a0002cf 	beq	10e050 <_vfiprintf_r+0xf44>
  10d510:	e59dc01c 	ldr	ip, [sp, #28]
  10d514:	e3a03000 	mov	r3, #0
  10d518:	e28c2007 	add	r2, ip, #7
  10d51c:	eaffffee 	b	10d4dc <_vfiprintf_r+0x3d0>
  10d520:	e59dc01c 	ldr	ip, [sp, #28]
  10d524:	e59d901c 	ldr	r9, [sp, #28]
  10d528:	e59cc000 	ldr	ip, [ip]
  10d52c:	e2891004 	add	r1, r9, #4
  10d530:	e35c0000 	cmp	ip, #0
  10d534:	e58dc018 	str	ip, [sp, #24]
  10d538:	aa0002ef 	bge	10e0fc <_vfiprintf_r+0xff0>
  10d53c:	e59dc018 	ldr	ip, [sp, #24]
  10d540:	e58d101c 	str	r1, [sp, #28]
  10d544:	e26cc000 	rsb	ip, ip, #0
  10d548:	e58dc018 	str	ip, [sp, #24]
  10d54c:	e3877004 	orr	r7, r7, #4
  10d550:	e5db3000 	ldrb	r3, [fp]
  10d554:	eaffff3f 	b	10d258 <_vfiprintf_r+0x14c>
  10d558:	e3530000 	cmp	r3, #0
  10d55c:	e5cd2047 	strb	r2, [sp, #71]	; 0x47
  10d560:	0a0001bb 	beq	10dc54 <_vfiprintf_r+0xb48>
  10d564:	e3a08001 	mov	r8, #1
  10d568:	e5cd3058 	strb	r3, [sp, #88]	; 0x58
  10d56c:	e28d9058 	add	r9, sp, #88	; 0x58
  10d570:	e3a03000 	mov	r3, #0
  10d574:	e58d8004 	str	r8, [sp, #4]
  10d578:	e58d8008 	str	r8, [sp, #8]
  10d57c:	e5cd3047 	strb	r3, [sp, #71]	; 0x47
  10d580:	e58d9024 	str	r9, [sp, #36]	; 0x24
  10d584:	ea000069 	b	10d730 <_vfiprintf_r+0x624>
  10d588:	e3170020 	tst	r7, #32
  10d58c:	e300c128 	movw	ip, #296	; 0x128
  10d590:	e5cd2047 	strb	r2, [sp, #71]	; 0x47
  10d594:	e340c011 	movt	ip, #17
  10d598:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
  10d59c:	0a0000b5 	beq	10d878 <_vfiprintf_r+0x76c>
  10d5a0:	e59d901c 	ldr	r9, [sp, #28]
  10d5a4:	e2892007 	add	r2, r9, #7
  10d5a8:	e3c22007 	bic	r2, r2, #7
  10d5ac:	e282c008 	add	ip, r2, #8
  10d5b0:	e58dc01c 	str	ip, [sp, #28]
  10d5b4:	e1c240d0 	ldrd	r4, [r2]
  10d5b8:	e3170001 	tst	r7, #1
  10d5bc:	1a0002c5 	bne	10e0d8 <_vfiprintf_r+0xfcc>
  10d5c0:	e194c005 	orrs	ip, r4, r5
  10d5c4:	e3a03002 	mov	r3, #2
  10d5c8:	03a02000 	moveq	r2, #0
  10d5cc:	13a02001 	movne	r2, #1
  10d5d0:	eaffffc8 	b	10d4f8 <_vfiprintf_r+0x3ec>
  10d5d4:	e59dc01c 	ldr	ip, [sp, #28]
  10d5d8:	e3a04000 	mov	r4, #0
  10d5dc:	e59d901c 	ldr	r9, [sp, #28]
  10d5e0:	e5cd4047 	strb	r4, [sp, #71]	; 0x47
  10d5e4:	e59cc000 	ldr	ip, [ip]
  10d5e8:	e2895004 	add	r5, r9, #4
  10d5ec:	e15c0004 	cmp	ip, r4
  10d5f0:	e58dc024 	str	ip, [sp, #36]	; 0x24
  10d5f4:	0a000319 	beq	10e260 <_vfiprintf_r+0x1154>
  10d5f8:	e3580000 	cmp	r8, #0
  10d5fc:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  10d600:	ba000311 	blt	10e24c <_vfiprintf_r+0x1140>
  10d604:	e1a01004 	mov	r1, r4
  10d608:	e1a02008 	mov	r2, r8
  10d60c:	ebfff7f6 	bl	10b5ec <memchr>
  10d610:	e3500000 	cmp	r0, #0
  10d614:	0a000323 	beq	10e2a8 <_vfiprintf_r+0x119c>
  10d618:	e59d9024 	ldr	r9, [sp, #36]	; 0x24
  10d61c:	e58d501c 	str	r5, [sp, #28]
  10d620:	e0690000 	rsb	r0, r9, r0
  10d624:	e5dd9047 	ldrb	r9, [sp, #71]	; 0x47
  10d628:	e1500008 	cmp	r0, r8
  10d62c:	e58d0008 	str	r0, [sp, #8]
  10d630:	c58d4010 	strgt	r4, [sp, #16]
  10d634:	c58d8008 	strgt	r8, [sp, #8]
  10d638:	ca00017c 	bgt	10dc30 <_vfiprintf_r+0xb24>
  10d63c:	e58d4010 	str	r4, [sp, #16]
  10d640:	ea00017a 	b	10dc30 <_vfiprintf_r+0xb24>
  10d644:	e5db3000 	ldrb	r3, [fp]
  10d648:	e1a0100b 	mov	r1, fp
  10d64c:	e353006c 	cmp	r3, #108	; 0x6c
  10d650:	028bb001 	addeq	fp, fp, #1
  10d654:	03877020 	orreq	r7, r7, #32
  10d658:	05d13001 	ldrbeq	r3, [r1, #1]
  10d65c:	13877010 	orrne	r7, r7, #16
  10d660:	eafffefc 	b	10d258 <_vfiprintf_r+0x14c>
  10d664:	e3877040 	orr	r7, r7, #64	; 0x40
  10d668:	e5db3000 	ldrb	r3, [fp]
  10d66c:	eafffef9 	b	10d258 <_vfiprintf_r+0x14c>
  10d670:	e3170020 	tst	r7, #32
  10d674:	e5cd2047 	strb	r2, [sp, #71]	; 0x47
  10d678:	1a0002e3 	bne	10e20c <_vfiprintf_r+0x1100>
  10d67c:	e3170010 	tst	r7, #16
  10d680:	1a0002ea 	bne	10e230 <_vfiprintf_r+0x1124>
  10d684:	e3170040 	tst	r7, #64	; 0x40
  10d688:	0a0002e8 	beq	10e230 <_vfiprintf_r+0x1124>
  10d68c:	e59dc01c 	ldr	ip, [sp, #28]
  10d690:	e59d700c 	ldr	r7, [sp, #12]
  10d694:	e28cc004 	add	ip, ip, #4
  10d698:	e51c3004 	ldr	r3, [ip, #-4]
  10d69c:	e58dc01c 	str	ip, [sp, #28]
  10d6a0:	e1c370b0 	strh	r7, [r3]
  10d6a4:	eafffec5 	b	10d1c0 <_vfiprintf_r+0xb4>
  10d6a8:	e3877020 	orr	r7, r7, #32
  10d6ac:	e5db3000 	ldrb	r3, [fp]
  10d6b0:	eafffee8 	b	10d258 <_vfiprintf_r+0x14c>
  10d6b4:	e59d301c 	ldr	r3, [sp, #28]
  10d6b8:	e3a05000 	mov	r5, #0
  10d6bc:	e300c128 	movw	ip, #296	; 0x128
  10d6c0:	e3877002 	orr	r7, r7, #2
  10d6c4:	e2839004 	add	r9, r3, #4
  10d6c8:	e340c011 	movt	ip, #17
  10d6cc:	e5932000 	ldr	r2, [r3]
  10d6d0:	e3a03030 	mov	r3, #48	; 0x30
  10d6d4:	e58d901c 	str	r9, [sp, #28]
  10d6d8:	e5cd3048 	strb	r3, [sp, #72]	; 0x48
  10d6dc:	e3a03078 	mov	r3, #120	; 0x78
  10d6e0:	e1a04002 	mov	r4, r2
  10d6e4:	e0522005 	subs	r2, r2, r5
  10d6e8:	e5cd3049 	strb	r3, [sp, #73]	; 0x49
  10d6ec:	e3a03002 	mov	r3, #2
  10d6f0:	13a02001 	movne	r2, #1
  10d6f4:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
  10d6f8:	eaffff7e 	b	10d4f8 <_vfiprintf_r+0x3ec>
  10d6fc:	e59d301c 	ldr	r3, [sp, #28]
  10d700:	e3a0c001 	mov	ip, #1
  10d704:	e59d801c 	ldr	r8, [sp, #28]
  10d708:	e3a02000 	mov	r2, #0
  10d70c:	e28d9058 	add	r9, sp, #88	; 0x58
  10d710:	e58dc004 	str	ip, [sp, #4]
  10d714:	e5933000 	ldr	r3, [r3]
  10d718:	e2888004 	add	r8, r8, #4
  10d71c:	e5cd2047 	strb	r2, [sp, #71]	; 0x47
  10d720:	e58d801c 	str	r8, [sp, #28]
  10d724:	e58dc008 	str	ip, [sp, #8]
  10d728:	e58d9024 	str	r9, [sp, #36]	; 0x24
  10d72c:	e5cd3058 	strb	r3, [sp, #88]	; 0x58
  10d730:	e3a03000 	mov	r3, #0
  10d734:	e58d3010 	str	r3, [sp, #16]
  10d738:	e2178002 	ands	r8, r7, #2
  10d73c:	e58d8020 	str	r8, [sp, #32]
  10d740:	159d9004 	ldrne	r9, [sp, #4]
  10d744:	12899002 	addne	r9, r9, #2
  10d748:	158d9004 	strne	r9, [sp, #4]
  10d74c:	e217c084 	ands	ip, r7, #132	; 0x84
  10d750:	e58dc028 	str	ip, [sp, #40]	; 0x28
  10d754:	1a00007d 	bne	10d950 <_vfiprintf_r+0x844>
  10d758:	e59d8018 	ldr	r8, [sp, #24]
  10d75c:	e59d9004 	ldr	r9, [sp, #4]
  10d760:	e0694008 	rsb	r4, r9, r8
  10d764:	e3540000 	cmp	r4, #0
  10d768:	da000078 	ble	10d950 <_vfiprintf_r+0x844>
  10d76c:	e3540010 	cmp	r4, #16
  10d770:	da0002c3 	ble	10e284 <_vfiprintf_r+0x1178>
  10d774:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
  10d778:	e28d504c 	add	r5, sp, #76	; 0x4c
  10d77c:	e30f8e58 	movw	r8, #65112	; 0xfe58
  10d780:	e3408010 	movt	r8, #16
  10d784:	e58d7038 	str	r7, [sp, #56]	; 0x38
  10d788:	e3a09010 	mov	r9, #16
  10d78c:	e1a07008 	mov	r7, r8
  10d790:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
  10d794:	e1a08004 	mov	r8, r4
  10d798:	e1a03002 	mov	r3, r2
  10d79c:	e1a04005 	mov	r4, r5
  10d7a0:	e59d5014 	ldr	r5, [sp, #20]
  10d7a4:	ea000002 	b	10d7b4 <_vfiprintf_r+0x6a8>
  10d7a8:	e2488010 	sub	r8, r8, #16
  10d7ac:	e3580010 	cmp	r8, #16
  10d7b0:	da000013 	ble	10d804 <_vfiprintf_r+0x6f8>
  10d7b4:	e2833001 	add	r3, r3, #1
  10d7b8:	e2866008 	add	r6, r6, #8
  10d7bc:	e3530007 	cmp	r3, #7
  10d7c0:	e2811010 	add	r1, r1, #16
  10d7c4:	e9060280 	stmdb	r6, {r7, r9}
  10d7c8:	e58d3050 	str	r3, [sp, #80]	; 0x50
  10d7cc:	e58d1054 	str	r1, [sp, #84]	; 0x54
  10d7d0:	dafffff4 	ble	10d7a8 <_vfiprintf_r+0x69c>
  10d7d4:	e1a00005 	mov	r0, r5
  10d7d8:	e1a0100a 	mov	r1, sl
  10d7dc:	e1a02004 	mov	r2, r4
  10d7e0:	e28d60e8 	add	r6, sp, #232	; 0xe8
  10d7e4:	ebfffe1c 	bl	10d05c <__sprint_r>
  10d7e8:	e3500000 	cmp	r0, #0
  10d7ec:	1a00011f 	bne	10dc70 <_vfiprintf_r+0xb64>
  10d7f0:	e2488010 	sub	r8, r8, #16
  10d7f4:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
  10d7f8:	e3580010 	cmp	r8, #16
  10d7fc:	e59d3050 	ldr	r3, [sp, #80]	; 0x50
  10d800:	caffffeb 	bgt	10d7b4 <_vfiprintf_r+0x6a8>
  10d804:	e1a04008 	mov	r4, r8
  10d808:	e1a08007 	mov	r8, r7
  10d80c:	e59d7038 	ldr	r7, [sp, #56]	; 0x38
  10d810:	e1a02003 	mov	r2, r3
  10d814:	e2822001 	add	r2, r2, #1
  10d818:	e0811004 	add	r1, r1, r4
  10d81c:	e3520007 	cmp	r2, #7
  10d820:	e5868000 	str	r8, [r6]
  10d824:	e5864004 	str	r4, [r6, #4]
  10d828:	d2866008 	addle	r6, r6, #8
  10d82c:	e58d1054 	str	r1, [sp, #84]	; 0x54
  10d830:	e58d2050 	str	r2, [sp, #80]	; 0x50
  10d834:	da000047 	ble	10d958 <_vfiprintf_r+0x84c>
  10d838:	e59d0014 	ldr	r0, [sp, #20]
  10d83c:	e1a0100a 	mov	r1, sl
  10d840:	e28d204c 	add	r2, sp, #76	; 0x4c
  10d844:	ebfffe04 	bl	10d05c <__sprint_r>
  10d848:	e3500000 	cmp	r0, #0
  10d84c:	1a000107 	bne	10dc70 <_vfiprintf_r+0xb64>
  10d850:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
  10d854:	e28d60e8 	add	r6, sp, #232	; 0xe8
  10d858:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
  10d85c:	ea00003d 	b	10d958 <_vfiprintf_r+0x84c>
  10d860:	e3170020 	tst	r7, #32
  10d864:	e3009100 	movw	r9, #256	; 0x100
  10d868:	e5cd2047 	strb	r2, [sp, #71]	; 0x47
  10d86c:	e3409011 	movt	r9, #17
  10d870:	e58d902c 	str	r9, [sp, #44]	; 0x2c
  10d874:	1affff49 	bne	10d5a0 <_vfiprintf_r+0x494>
  10d878:	e3170010 	tst	r7, #16
  10d87c:	1a000247 	bne	10e1a0 <_vfiprintf_r+0x1094>
  10d880:	e3170040 	tst	r7, #64	; 0x40
  10d884:	0a000245 	beq	10e1a0 <_vfiprintf_r+0x1094>
  10d888:	e59dc01c 	ldr	ip, [sp, #28]
  10d88c:	e3a05000 	mov	r5, #0
  10d890:	e28cc004 	add	ip, ip, #4
  10d894:	e15c40b4 	ldrh	r4, [ip, #-4]
  10d898:	e58dc01c 	str	ip, [sp, #28]
  10d89c:	eaffff45 	b	10d5b8 <_vfiprintf_r+0x4ac>
  10d8a0:	e5db3000 	ldrb	r3, [fp]
  10d8a4:	e3a0202b 	mov	r2, #43	; 0x2b
  10d8a8:	eafffe6a 	b	10d258 <_vfiprintf_r+0x14c>
  10d8ac:	e3877001 	orr	r7, r7, #1
  10d8b0:	e5db3000 	ldrb	r3, [fp]
  10d8b4:	eafffe67 	b	10d258 <_vfiprintf_r+0x14c>
  10d8b8:	e3520000 	cmp	r2, #0
  10d8bc:	e5db3000 	ldrb	r3, [fp]
  10d8c0:	03a02020 	moveq	r2, #32
  10d8c4:	eafffe63 	b	10d258 <_vfiprintf_r+0x14c>
  10d8c8:	e1a0000b 	mov	r0, fp
  10d8cc:	e3a01000 	mov	r1, #0
  10d8d0:	e243c030 	sub	ip, r3, #48	; 0x30
  10d8d4:	e4d03001 	ldrb	r3, [r0], #1
  10d8d8:	e0811101 	add	r1, r1, r1, lsl #2
  10d8dc:	e2434030 	sub	r4, r3, #48	; 0x30
  10d8e0:	e3540009 	cmp	r4, #9
  10d8e4:	e08c1081 	add	r1, ip, r1, lsl #1
  10d8e8:	e1a0b000 	mov	fp, r0
  10d8ec:	9afffff7 	bls	10d8d0 <_vfiprintf_r+0x7c4>
  10d8f0:	e58d1018 	str	r1, [sp, #24]
  10d8f4:	eafffe58 	b	10d25c <_vfiprintf_r+0x150>
  10d8f8:	e3877080 	orr	r7, r7, #128	; 0x80
  10d8fc:	e5db3000 	ldrb	r3, [fp]
  10d900:	eafffe54 	b	10d258 <_vfiprintf_r+0x14c>
  10d904:	e1a0000b 	mov	r0, fp
  10d908:	e4d03001 	ldrb	r3, [r0], #1
  10d90c:	e353002a 	cmp	r3, #42	; 0x2a
  10d910:	0a000269 	beq	10e2bc <_vfiprintf_r+0x11b0>
  10d914:	e2431030 	sub	r1, r3, #48	; 0x30
  10d918:	e3510009 	cmp	r1, #9
  10d91c:	81a0b000 	movhi	fp, r0
  10d920:	83a08000 	movhi	r8, #0
  10d924:	8afffe4c 	bhi	10d25c <_vfiprintf_r+0x150>
  10d928:	e3a08000 	mov	r8, #0
  10d92c:	e4d03001 	ldrb	r3, [r0], #1
  10d930:	e0888108 	add	r8, r8, r8, lsl #2
  10d934:	e0818088 	add	r8, r1, r8, lsl #1
  10d938:	e2431030 	sub	r1, r3, #48	; 0x30
  10d93c:	e3510009 	cmp	r1, #9
  10d940:	e1a0b000 	mov	fp, r0
  10d944:	9afffff8 	bls	10d92c <_vfiprintf_r+0x820>
  10d948:	e1888fc8 	orr	r8, r8, r8, asr #31
  10d94c:	eafffe42 	b	10d25c <_vfiprintf_r+0x150>
  10d950:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
  10d954:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
  10d958:	e5dd3047 	ldrb	r3, [sp, #71]	; 0x47
  10d95c:	e3530000 	cmp	r3, #0
  10d960:	0a00000a 	beq	10d990 <_vfiprintf_r+0x884>
  10d964:	e2822001 	add	r2, r2, #1
  10d968:	e28d3047 	add	r3, sp, #71	; 0x47
  10d96c:	e3520007 	cmp	r2, #7
  10d970:	e5863000 	str	r3, [r6]
  10d974:	e2811001 	add	r1, r1, #1
  10d978:	e3a03001 	mov	r3, #1
  10d97c:	e58d1054 	str	r1, [sp, #84]	; 0x54
  10d980:	e5863004 	str	r3, [r6, #4]
  10d984:	d2866008 	addle	r6, r6, #8
  10d988:	e58d2050 	str	r2, [sp, #80]	; 0x50
  10d98c:	ca000159 	bgt	10def8 <_vfiprintf_r+0xdec>
  10d990:	e59d8020 	ldr	r8, [sp, #32]
  10d994:	e3580000 	cmp	r8, #0
  10d998:	0a00000a 	beq	10d9c8 <_vfiprintf_r+0x8bc>
  10d99c:	e2822001 	add	r2, r2, #1
  10d9a0:	e28d3048 	add	r3, sp, #72	; 0x48
  10d9a4:	e3520007 	cmp	r2, #7
  10d9a8:	e5863000 	str	r3, [r6]
  10d9ac:	e2811002 	add	r1, r1, #2
  10d9b0:	e3a03002 	mov	r3, #2
  10d9b4:	e58d1054 	str	r1, [sp, #84]	; 0x54
  10d9b8:	e5863004 	str	r3, [r6, #4]
  10d9bc:	d2866008 	addle	r6, r6, #8
  10d9c0:	e58d2050 	str	r2, [sp, #80]	; 0x50
  10d9c4:	ca000156 	bgt	10df24 <_vfiprintf_r+0xe18>
  10d9c8:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
  10d9cc:	e35c0080 	cmp	ip, #128	; 0x80
  10d9d0:	0a0000b1 	beq	10dc9c <_vfiprintf_r+0xb90>
  10d9d4:	e59d9010 	ldr	r9, [sp, #16]
  10d9d8:	e59dc008 	ldr	ip, [sp, #8]
  10d9dc:	e06c8009 	rsb	r8, ip, r9
  10d9e0:	e3580000 	cmp	r8, #0
  10d9e4:	da000035 	ble	10dac0 <_vfiprintf_r+0x9b4>
  10d9e8:	e3580010 	cmp	r8, #16
  10d9ec:	e59f48ec 	ldr	r4, [pc, #2284]	; 10e2e0 <_vfiprintf_r+0x11d4>
  10d9f0:	da000021 	ble	10da7c <_vfiprintf_r+0x970>
  10d9f4:	e28d504c 	add	r5, sp, #76	; 0x4c
  10d9f8:	e58d7010 	str	r7, [sp, #16]
  10d9fc:	e3a09010 	mov	r9, #16
  10da00:	e1a07004 	mov	r7, r4
  10da04:	e1a03002 	mov	r3, r2
  10da08:	e1a04005 	mov	r4, r5
  10da0c:	e59d5014 	ldr	r5, [sp, #20]
  10da10:	ea000002 	b	10da20 <_vfiprintf_r+0x914>
  10da14:	e2488010 	sub	r8, r8, #16
  10da18:	e3580010 	cmp	r8, #16
  10da1c:	da000013 	ble	10da70 <_vfiprintf_r+0x964>
  10da20:	e2833001 	add	r3, r3, #1
  10da24:	e2866008 	add	r6, r6, #8
  10da28:	e3530007 	cmp	r3, #7
  10da2c:	e2811010 	add	r1, r1, #16
  10da30:	e9060280 	stmdb	r6, {r7, r9}
  10da34:	e58d3050 	str	r3, [sp, #80]	; 0x50
  10da38:	e58d1054 	str	r1, [sp, #84]	; 0x54
  10da3c:	dafffff4 	ble	10da14 <_vfiprintf_r+0x908>
  10da40:	e1a00005 	mov	r0, r5
  10da44:	e1a0100a 	mov	r1, sl
  10da48:	e1a02004 	mov	r2, r4
  10da4c:	e28d60e8 	add	r6, sp, #232	; 0xe8
  10da50:	ebfffd81 	bl	10d05c <__sprint_r>
  10da54:	e3500000 	cmp	r0, #0
  10da58:	1a000084 	bne	10dc70 <_vfiprintf_r+0xb64>
  10da5c:	e2488010 	sub	r8, r8, #16
  10da60:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
  10da64:	e3580010 	cmp	r8, #16
  10da68:	e59d3050 	ldr	r3, [sp, #80]	; 0x50
  10da6c:	caffffeb 	bgt	10da20 <_vfiprintf_r+0x914>
  10da70:	e1a04007 	mov	r4, r7
  10da74:	e59d7010 	ldr	r7, [sp, #16]
  10da78:	e1a02003 	mov	r2, r3
  10da7c:	e2822001 	add	r2, r2, #1
  10da80:	e0811008 	add	r1, r1, r8
  10da84:	e3520007 	cmp	r2, #7
  10da88:	e8860110 	stm	r6, {r4, r8}
  10da8c:	e58d1054 	str	r1, [sp, #84]	; 0x54
  10da90:	d2866008 	addle	r6, r6, #8
  10da94:	e58d2050 	str	r2, [sp, #80]	; 0x50
  10da98:	da000008 	ble	10dac0 <_vfiprintf_r+0x9b4>
  10da9c:	e59d0014 	ldr	r0, [sp, #20]
  10daa0:	e1a0100a 	mov	r1, sl
  10daa4:	e28d204c 	add	r2, sp, #76	; 0x4c
  10daa8:	ebfffd6b 	bl	10d05c <__sprint_r>
  10daac:	e3500000 	cmp	r0, #0
  10dab0:	1a00006e 	bne	10dc70 <_vfiprintf_r+0xb64>
  10dab4:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
  10dab8:	e28d60e8 	add	r6, sp, #232	; 0xe8
  10dabc:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
  10dac0:	e2822001 	add	r2, r2, #1
  10dac4:	e59d8008 	ldr	r8, [sp, #8]
  10dac8:	e59d9024 	ldr	r9, [sp, #36]	; 0x24
  10dacc:	e3520007 	cmp	r2, #7
  10dad0:	e0811008 	add	r1, r1, r8
  10dad4:	e58d2050 	str	r2, [sp, #80]	; 0x50
  10dad8:	e5868004 	str	r8, [r6, #4]
  10dadc:	e5869000 	str	r9, [r6]
  10dae0:	d2866008 	addle	r6, r6, #8
  10dae4:	e58d1054 	str	r1, [sp, #84]	; 0x54
  10dae8:	ca0000a7 	bgt	10dd8c <_vfiprintf_r+0xc80>
  10daec:	e3170004 	tst	r7, #4
  10daf0:	0a000031 	beq	10dbbc <_vfiprintf_r+0xab0>
  10daf4:	e59d7018 	ldr	r7, [sp, #24]
  10daf8:	e59d8004 	ldr	r8, [sp, #4]
  10dafc:	e0685007 	rsb	r5, r8, r7
  10db00:	e3550000 	cmp	r5, #0
  10db04:	da00002c 	ble	10dbbc <_vfiprintf_r+0xab0>
  10db08:	e3550010 	cmp	r5, #16
  10db0c:	da0001e1 	ble	10e298 <_vfiprintf_r+0x118c>
  10db10:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
  10db14:	e30f8e58 	movw	r8, #65112	; 0xfe58
  10db18:	e28d404c 	add	r4, sp, #76	; 0x4c
  10db1c:	e3408010 	movt	r8, #16
  10db20:	e3a07010 	mov	r7, #16
  10db24:	e59d9014 	ldr	r9, [sp, #20]
  10db28:	e1a03002 	mov	r3, r2
  10db2c:	e1a0c001 	mov	ip, r1
  10db30:	ea000002 	b	10db40 <_vfiprintf_r+0xa34>
  10db34:	e2455010 	sub	r5, r5, #16
  10db38:	e3550010 	cmp	r5, #16
  10db3c:	da000014 	ble	10db94 <_vfiprintf_r+0xa88>
  10db40:	e2833001 	add	r3, r3, #1
  10db44:	e2866008 	add	r6, r6, #8
  10db48:	e3530007 	cmp	r3, #7
  10db4c:	e28cc010 	add	ip, ip, #16
  10db50:	e5068008 	str	r8, [r6, #-8]
  10db54:	e5067004 	str	r7, [r6, #-4]
  10db58:	e58d3050 	str	r3, [sp, #80]	; 0x50
  10db5c:	e58dc054 	str	ip, [sp, #84]	; 0x54
  10db60:	dafffff3 	ble	10db34 <_vfiprintf_r+0xa28>
  10db64:	e1a00009 	mov	r0, r9
  10db68:	e1a0100a 	mov	r1, sl
  10db6c:	e1a02004 	mov	r2, r4
  10db70:	e28d60e8 	add	r6, sp, #232	; 0xe8
  10db74:	ebfffd38 	bl	10d05c <__sprint_r>
  10db78:	e3500000 	cmp	r0, #0
  10db7c:	1a00003b 	bne	10dc70 <_vfiprintf_r+0xb64>
  10db80:	e2455010 	sub	r5, r5, #16
  10db84:	e59dc054 	ldr	ip, [sp, #84]	; 0x54
  10db88:	e3550010 	cmp	r5, #16
  10db8c:	e59d3050 	ldr	r3, [sp, #80]	; 0x50
  10db90:	caffffea 	bgt	10db40 <_vfiprintf_r+0xa34>
  10db94:	e1a02003 	mov	r2, r3
  10db98:	e1a0100c 	mov	r1, ip
  10db9c:	e2822001 	add	r2, r2, #1
  10dba0:	e0851001 	add	r1, r5, r1
  10dba4:	e3520007 	cmp	r2, #7
  10dba8:	e5868000 	str	r8, [r6]
  10dbac:	e5865004 	str	r5, [r6, #4]
  10dbb0:	e58d1054 	str	r1, [sp, #84]	; 0x54
  10dbb4:	e58d2050 	str	r2, [sp, #80]	; 0x50
  10dbb8:	ca000152 	bgt	10e108 <_vfiprintf_r+0xffc>
  10dbbc:	e59d600c 	ldr	r6, [sp, #12]
  10dbc0:	e59d7004 	ldr	r7, [sp, #4]
  10dbc4:	e59d8018 	ldr	r8, [sp, #24]
  10dbc8:	e1570008 	cmp	r7, r8
  10dbcc:	a0866007 	addge	r6, r6, r7
  10dbd0:	b0866008 	addlt	r6, r6, r8
  10dbd4:	e3510000 	cmp	r1, #0
  10dbd8:	e58d600c 	str	r6, [sp, #12]
  10dbdc:	1a000073 	bne	10ddb0 <_vfiprintf_r+0xca4>
  10dbe0:	e3a03000 	mov	r3, #0
  10dbe4:	e58d3050 	str	r3, [sp, #80]	; 0x50
  10dbe8:	e5db3000 	ldrb	r3, [fp]
  10dbec:	e28d60e8 	add	r6, sp, #232	; 0xe8
  10dbf0:	e3530025 	cmp	r3, #37	; 0x25
  10dbf4:	13530000 	cmpne	r3, #0
  10dbf8:	1afffd74 	bne	10d1d0 <_vfiprintf_r+0xc4>
  10dbfc:	e1a0400b 	mov	r4, fp
  10dc00:	eafffd89 	b	10d22c <_vfiprintf_r+0x120>
  10dc04:	e3530000 	cmp	r3, #0
  10dc08:	1a000070 	bne	10ddd0 <_vfiprintf_r+0xcc4>
  10dc0c:	e3170001 	tst	r7, #1
  10dc10:	0a0000d0 	beq	10df58 <_vfiprintf_r+0xe4c>
  10dc14:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
  10dc18:	e3a03030 	mov	r3, #48	; 0x30
  10dc1c:	e5cd307f 	strb	r3, [sp, #127]	; 0x7f
  10dc20:	e58dc008 	str	ip, [sp, #8]
  10dc24:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
  10dc28:	e58dc024 	str	ip, [sp, #36]	; 0x24
  10dc2c:	e58d8010 	str	r8, [sp, #16]
  10dc30:	e59dc008 	ldr	ip, [sp, #8]
  10dc34:	e59d3010 	ldr	r3, [sp, #16]
  10dc38:	e15c0003 	cmp	ip, r3
  10dc3c:	b1a0c003 	movlt	ip, r3
  10dc40:	e3590000 	cmp	r9, #0
  10dc44:	e58dc004 	str	ip, [sp, #4]
  10dc48:	128cc001 	addne	ip, ip, #1
  10dc4c:	158dc004 	strne	ip, [sp, #4]
  10dc50:	eafffeb8 	b	10d738 <_vfiprintf_r+0x62c>
  10dc54:	e59d3054 	ldr	r3, [sp, #84]	; 0x54
  10dc58:	e3530000 	cmp	r3, #0
  10dc5c:	0a000003 	beq	10dc70 <_vfiprintf_r+0xb64>
  10dc60:	e59d0014 	ldr	r0, [sp, #20]
  10dc64:	e1a0100a 	mov	r1, sl
  10dc68:	e28d204c 	add	r2, sp, #76	; 0x4c
  10dc6c:	ebfffcfa 	bl	10d05c <__sprint_r>
  10dc70:	e1da30bc 	ldrh	r3, [sl, #12]
  10dc74:	e2033040 	and	r3, r3, #64	; 0x40
  10dc78:	e6bf3073 	sxth	r3, r3
  10dc7c:	e3530000 	cmp	r3, #0
  10dc80:	0a000001 	beq	10dc8c <_vfiprintf_r+0xb80>
  10dc84:	e3e07000 	mvn	r7, #0
  10dc88:	e58d700c 	str	r7, [sp, #12]
  10dc8c:	e59d000c 	ldr	r0, [sp, #12]
  10dc90:	e28dd0ec 	add	sp, sp, #236	; 0xec
  10dc94:	e28ddb01 	add	sp, sp, #1024	; 0x400
  10dc98:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  10dc9c:	e59d9018 	ldr	r9, [sp, #24]
  10dca0:	e59dc004 	ldr	ip, [sp, #4]
  10dca4:	e06c8009 	rsb	r8, ip, r9
  10dca8:	e3580000 	cmp	r8, #0
  10dcac:	daffff48 	ble	10d9d4 <_vfiprintf_r+0x8c8>
  10dcb0:	e3580010 	cmp	r8, #16
  10dcb4:	e59f4624 	ldr	r4, [pc, #1572]	; 10e2e0 <_vfiprintf_r+0x11d4>
  10dcb8:	da000021 	ble	10dd44 <_vfiprintf_r+0xc38>
  10dcbc:	e28d504c 	add	r5, sp, #76	; 0x4c
  10dcc0:	e58d7020 	str	r7, [sp, #32]
  10dcc4:	e3a09010 	mov	r9, #16
  10dcc8:	e1a07004 	mov	r7, r4
  10dccc:	e1a03002 	mov	r3, r2
  10dcd0:	e1a04005 	mov	r4, r5
  10dcd4:	e59d5014 	ldr	r5, [sp, #20]
  10dcd8:	ea000002 	b	10dce8 <_vfiprintf_r+0xbdc>
  10dcdc:	e2488010 	sub	r8, r8, #16
  10dce0:	e3580010 	cmp	r8, #16
  10dce4:	da000013 	ble	10dd38 <_vfiprintf_r+0xc2c>
  10dce8:	e2833001 	add	r3, r3, #1
  10dcec:	e2866008 	add	r6, r6, #8
  10dcf0:	e3530007 	cmp	r3, #7
  10dcf4:	e2811010 	add	r1, r1, #16
  10dcf8:	e9060280 	stmdb	r6, {r7, r9}
  10dcfc:	e58d3050 	str	r3, [sp, #80]	; 0x50
  10dd00:	e58d1054 	str	r1, [sp, #84]	; 0x54
  10dd04:	dafffff4 	ble	10dcdc <_vfiprintf_r+0xbd0>
  10dd08:	e1a00005 	mov	r0, r5
  10dd0c:	e1a0100a 	mov	r1, sl
  10dd10:	e1a02004 	mov	r2, r4
  10dd14:	e28d60e8 	add	r6, sp, #232	; 0xe8
  10dd18:	ebfffccf 	bl	10d05c <__sprint_r>
  10dd1c:	e3500000 	cmp	r0, #0
  10dd20:	1affffd2 	bne	10dc70 <_vfiprintf_r+0xb64>
  10dd24:	e2488010 	sub	r8, r8, #16
  10dd28:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
  10dd2c:	e3580010 	cmp	r8, #16
  10dd30:	e59d3050 	ldr	r3, [sp, #80]	; 0x50
  10dd34:	caffffeb 	bgt	10dce8 <_vfiprintf_r+0xbdc>
  10dd38:	e1a04007 	mov	r4, r7
  10dd3c:	e59d7020 	ldr	r7, [sp, #32]
  10dd40:	e1a02003 	mov	r2, r3
  10dd44:	e2822001 	add	r2, r2, #1
  10dd48:	e0811008 	add	r1, r1, r8
  10dd4c:	e3520007 	cmp	r2, #7
  10dd50:	e8860110 	stm	r6, {r4, r8}
  10dd54:	e58d1054 	str	r1, [sp, #84]	; 0x54
  10dd58:	d2866008 	addle	r6, r6, #8
  10dd5c:	e58d2050 	str	r2, [sp, #80]	; 0x50
  10dd60:	daffff1b 	ble	10d9d4 <_vfiprintf_r+0x8c8>
  10dd64:	e59d0014 	ldr	r0, [sp, #20]
  10dd68:	e1a0100a 	mov	r1, sl
  10dd6c:	e28d204c 	add	r2, sp, #76	; 0x4c
  10dd70:	ebfffcb9 	bl	10d05c <__sprint_r>
  10dd74:	e3500000 	cmp	r0, #0
  10dd78:	1affffbc 	bne	10dc70 <_vfiprintf_r+0xb64>
  10dd7c:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
  10dd80:	e28d60e8 	add	r6, sp, #232	; 0xe8
  10dd84:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
  10dd88:	eaffff11 	b	10d9d4 <_vfiprintf_r+0x8c8>
  10dd8c:	e59d0014 	ldr	r0, [sp, #20]
  10dd90:	e1a0100a 	mov	r1, sl
  10dd94:	e28d204c 	add	r2, sp, #76	; 0x4c
  10dd98:	ebfffcaf 	bl	10d05c <__sprint_r>
  10dd9c:	e3500000 	cmp	r0, #0
  10dda0:	1affffb2 	bne	10dc70 <_vfiprintf_r+0xb64>
  10dda4:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
  10dda8:	e28d60e8 	add	r6, sp, #232	; 0xe8
  10ddac:	eaffff4e 	b	10daec <_vfiprintf_r+0x9e0>
  10ddb0:	e59d0014 	ldr	r0, [sp, #20]
  10ddb4:	e1a0100a 	mov	r1, sl
  10ddb8:	e28d204c 	add	r2, sp, #76	; 0x4c
  10ddbc:	e28d9058 	add	r9, sp, #88	; 0x58
  10ddc0:	ebfffca5 	bl	10d05c <__sprint_r>
  10ddc4:	e3500000 	cmp	r0, #0
  10ddc8:	0affff84 	beq	10dbe0 <_vfiprintf_r+0xad4>
  10ddcc:	eaffffa7 	b	10dc70 <_vfiprintf_r+0xb64>
  10ddd0:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
  10ddd4:	e58d2008 	str	r2, [sp, #8]
  10ddd8:	e58dc024 	str	ip, [sp, #36]	; 0x24
  10dddc:	eaffff92 	b	10dc2c <_vfiprintf_r+0xb20>
  10dde0:	e59d0014 	ldr	r0, [sp, #20]
  10dde4:	e1a0100a 	mov	r1, sl
  10dde8:	ebffeb92 	bl	108c38 <__swsetup_r>
  10ddec:	e3500000 	cmp	r0, #0
  10ddf0:	01dac0bc 	ldrheq	ip, [sl, #12]
  10ddf4:	1affffa2 	bne	10dc84 <_vfiprintf_r+0xb78>
  10ddf8:	e20c301a 	and	r3, ip, #26
  10ddfc:	e353000a 	cmp	r3, #10
  10de00:	1afffce0 	bne	10d188 <_vfiprintf_r+0x7c>
  10de04:	e1da50be 	ldrh	r5, [sl, #14]
  10de08:	e3150902 	tst	r5, #32768	; 0x8000
  10de0c:	1afffcdd 	bne	10d188 <_vfiprintf_r+0x7c>
  10de10:	e28d8e4e 	add	r8, sp, #1248	; 0x4e0
  10de14:	e30f6ba4 	movw	r6, #64420	; 0xfba4
  10de18:	e2888008 	add	r8, r8, #8
  10de1c:	e34f6fff 	movt	r6, #65535	; 0xffff
  10de20:	e59ab01c 	ldr	fp, [sl, #28]
  10de24:	e3ccc002 	bic	ip, ip, #2
  10de28:	e59a9024 	ldr	r9, [sl, #36]	; 0x24
  10de2c:	e30feba6 	movw	lr, #64422	; 0xfba6
  10de30:	e188c0b6 	strh	ip, [r8, r6]
  10de34:	e34fefff 	movt	lr, #65535	; 0xffff
  10de38:	e59ac064 	ldr	ip, [sl, #100]	; 0x64
  10de3c:	e1a02004 	mov	r2, r4
  10de40:	e59d0014 	ldr	r0, [sp, #20]
  10de44:	e28d1080 	add	r1, sp, #128	; 0x80
  10de48:	e59d301c 	ldr	r3, [sp, #28]
  10de4c:	e28d70e8 	add	r7, sp, #232	; 0xe8
  10de50:	e3a04b01 	mov	r4, #1024	; 0x400
  10de54:	e58dc0e4 	str	ip, [sp, #228]	; 0xe4
  10de58:	e18850be 	strh	r5, [r8, lr]
  10de5c:	e3a0c000 	mov	ip, #0
  10de60:	e58db09c 	str	fp, [sp, #156]	; 0x9c
  10de64:	e58d90a4 	str	r9, [sp, #164]	; 0xa4
  10de68:	e58d7080 	str	r7, [sp, #128]	; 0x80
  10de6c:	e58d7090 	str	r7, [sp, #144]	; 0x90
  10de70:	e58d4088 	str	r4, [sp, #136]	; 0x88
  10de74:	e58d4094 	str	r4, [sp, #148]	; 0x94
  10de78:	e58dc098 	str	ip, [sp, #152]	; 0x98
  10de7c:	ebfffca2 	bl	10d10c <_vfiprintf_r>
  10de80:	e3500000 	cmp	r0, #0
  10de84:	e58d000c 	str	r0, [sp, #12]
  10de88:	ba000006 	blt	10dea8 <_vfiprintf_r+0xd9c>
  10de8c:	e59d0014 	ldr	r0, [sp, #20]
  10de90:	e28d1080 	add	r1, sp, #128	; 0x80
  10de94:	ebfff11d 	bl	10a310 <_fflush_r>
  10de98:	e59d600c 	ldr	r6, [sp, #12]
  10de9c:	e3500000 	cmp	r0, #0
  10dea0:	13e06000 	mvnne	r6, #0
  10dea4:	e58d600c 	str	r6, [sp, #12]
  10dea8:	e28d7e4e 	add	r7, sp, #1248	; 0x4e0
  10deac:	e30f3ba4 	movw	r3, #64420	; 0xfba4
  10deb0:	e2877008 	add	r7, r7, #8
  10deb4:	e34f3fff 	movt	r3, #65535	; 0xffff
  10deb8:	e19730b3 	ldrh	r3, [r7, r3]
  10debc:	e2033040 	and	r3, r3, #64	; 0x40
  10dec0:	e6bf3073 	sxth	r3, r3
  10dec4:	e3530000 	cmp	r3, #0
  10dec8:	11da30bc 	ldrhne	r3, [sl, #12]
  10decc:	13833040 	orrne	r3, r3, #64	; 0x40
  10ded0:	11ca30bc 	strhne	r3, [sl, #12]
  10ded4:	eaffff6c 	b	10dc8c <_vfiprintf_r+0xb80>
  10ded8:	e59d0014 	ldr	r0, [sp, #20]
  10dedc:	e1a0100a 	mov	r1, sl
  10dee0:	e28d204c 	add	r2, sp, #76	; 0x4c
  10dee4:	ebfffc5c 	bl	10d05c <__sprint_r>
  10dee8:	e3500000 	cmp	r0, #0
  10deec:	1affff5f 	bne	10dc70 <_vfiprintf_r+0xb64>
  10def0:	e28d60e8 	add	r6, sp, #232	; 0xe8
  10def4:	eafffcc9 	b	10d220 <_vfiprintf_r+0x114>
  10def8:	e59d0014 	ldr	r0, [sp, #20]
  10defc:	e1a0100a 	mov	r1, sl
  10df00:	e28d204c 	add	r2, sp, #76	; 0x4c
  10df04:	e28d6058 	add	r6, sp, #88	; 0x58
  10df08:	ebfffc53 	bl	10d05c <__sprint_r>
  10df0c:	e3500000 	cmp	r0, #0
  10df10:	1affff56 	bne	10dc70 <_vfiprintf_r+0xb64>
  10df14:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
  10df18:	e28d60e8 	add	r6, sp, #232	; 0xe8
  10df1c:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
  10df20:	eafffe9a 	b	10d990 <_vfiprintf_r+0x884>
  10df24:	e59d0014 	ldr	r0, [sp, #20]
  10df28:	e1a0100a 	mov	r1, sl
  10df2c:	e28d204c 	add	r2, sp, #76	; 0x4c
  10df30:	e28d9058 	add	r9, sp, #88	; 0x58
  10df34:	ebfffc48 	bl	10d05c <__sprint_r>
  10df38:	e3500000 	cmp	r0, #0
  10df3c:	1affff4b 	bne	10dc70 <_vfiprintf_r+0xb64>
  10df40:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
  10df44:	e28d60e8 	add	r6, sp, #232	; 0xe8
  10df48:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
  10df4c:	eafffe9d 	b	10d9c8 <_vfiprintf_r+0x8bc>
  10df50:	ebfff1c9 	bl	10a67c <__sinit>
  10df54:	eafffc78 	b	10d13c <_vfiprintf_r+0x30>
  10df58:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
  10df5c:	e58d3008 	str	r3, [sp, #8]
  10df60:	e58dc024 	str	ip, [sp, #36]	; 0x24
  10df64:	eaffff30 	b	10dc2c <_vfiprintf_r+0xb20>
  10df68:	e98d0140 	stmib	sp, {r6, r8}
  10df6c:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
  10df70:	e59d602c 	ldr	r6, [sp, #44]	; 0x2c
  10df74:	e58d9010 	str	r9, [sp, #16]
  10df78:	e3a0800f 	mov	r8, #15
  10df7c:	e0042008 	and	r2, r4, r8
  10df80:	e1a03224 	lsr	r3, r4, #4
  10df84:	e0862002 	add	r2, r6, r2
  10df88:	e1833e05 	orr	r3, r3, r5, lsl #28
  10df8c:	e1a0c225 	lsr	ip, r5, #4
  10df90:	e5d22000 	ldrb	r2, [r2]
  10df94:	e1a00001 	mov	r0, r1
  10df98:	e1a04003 	mov	r4, r3
  10df9c:	e1a0500c 	mov	r5, ip
  10dfa0:	e1949005 	orrs	r9, r4, r5
  10dfa4:	e2411001 	sub	r1, r1, #1
  10dfa8:	e5c02000 	strb	r2, [r0]
  10dfac:	1afffff1 	bne	10df78 <_vfiprintf_r+0xe6c>
  10dfb0:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
  10dfb4:	e99d0140 	ldmib	sp, {r6, r8}
  10dfb8:	e060c00c 	rsb	ip, r0, ip
  10dfbc:	e58d0024 	str	r0, [sp, #36]	; 0x24
  10dfc0:	e59d9010 	ldr	r9, [sp, #16]
  10dfc4:	e58dc008 	str	ip, [sp, #8]
  10dfc8:	eaffff17 	b	10dc2c <_vfiprintf_r+0xb20>
  10dfcc:	e3550000 	cmp	r5, #0
  10dfd0:	03540009 	cmpeq	r4, #9
  10dfd4:	9a000057 	bls	10e138 <_vfiprintf_r+0x102c>
  10dfd8:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
  10dfdc:	e58db004 	str	fp, [sp, #4]
  10dfe0:	e58d6008 	str	r6, [sp, #8]
  10dfe4:	e1a0b00c 	mov	fp, ip
  10dfe8:	e1a00004 	mov	r0, r4
  10dfec:	e1a01005 	mov	r1, r5
  10dff0:	e3a0200a 	mov	r2, #10
  10dff4:	e3a03000 	mov	r3, #0
  10dff8:	ebffdf97 	bl	105e5c <__aeabi_uldivmod>
  10dffc:	e1a0600b 	mov	r6, fp
  10e000:	e1a00004 	mov	r0, r4
  10e004:	e1a01005 	mov	r1, r5
  10e008:	e3a03000 	mov	r3, #0
  10e00c:	e24bb001 	sub	fp, fp, #1
  10e010:	e282e030 	add	lr, r2, #48	; 0x30
  10e014:	e3a0200a 	mov	r2, #10
  10e018:	e5c6e000 	strb	lr, [r6]
  10e01c:	ebffdf8e 	bl	105e5c <__aeabi_uldivmod>
  10e020:	e1a04000 	mov	r4, r0
  10e024:	e1a05001 	mov	r5, r1
  10e028:	e1940005 	orrs	r0, r4, r5
  10e02c:	1affffed 	bne	10dfe8 <_vfiprintf_r+0xedc>
  10e030:	e58d6024 	str	r6, [sp, #36]	; 0x24
  10e034:	e59db004 	ldr	fp, [sp, #4]
  10e038:	e59d6008 	ldr	r6, [sp, #8]
  10e03c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  10e040:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
  10e044:	e06c3003 	rsb	r3, ip, r3
  10e048:	e58d3008 	str	r3, [sp, #8]
  10e04c:	eafffef6 	b	10dc2c <_vfiprintf_r+0xb20>
  10e050:	e2172010 	ands	r2, r7, #16
  10e054:	1a00003e 	bne	10e154 <_vfiprintf_r+0x1048>
  10e058:	e2173040 	ands	r3, r7, #64	; 0x40
  10e05c:	0a00003c 	beq	10e154 <_vfiprintf_r+0x1048>
  10e060:	e59dc01c 	ldr	ip, [sp, #28]
  10e064:	e1a03002 	mov	r3, r2
  10e068:	e1dc40b0 	ldrh	r4, [ip]
  10e06c:	ea000006 	b	10e08c <_vfiprintf_r+0xf80>
  10e070:	e3170010 	tst	r7, #16
  10e074:	1a00003f 	bne	10e178 <_vfiprintf_r+0x106c>
  10e078:	e3170040 	tst	r7, #64	; 0x40
  10e07c:	0a00003d 	beq	10e178 <_vfiprintf_r+0x106c>
  10e080:	e59dc01c 	ldr	ip, [sp, #28]
  10e084:	e3a03001 	mov	r3, #1
  10e088:	e1dc40b0 	ldrh	r4, [ip]
  10e08c:	e3a05000 	mov	r5, #0
  10e090:	e1940005 	orrs	r0, r4, r5
  10e094:	e28cc004 	add	ip, ip, #4
  10e098:	e58dc01c 	str	ip, [sp, #28]
  10e09c:	03a02000 	moveq	r2, #0
  10e0a0:	13a02001 	movne	r2, #1
  10e0a4:	eafffd13 	b	10d4f8 <_vfiprintf_r+0x3ec>
  10e0a8:	e3170010 	tst	r7, #16
  10e0ac:	1a000042 	bne	10e1bc <_vfiprintf_r+0x10b0>
  10e0b0:	e3170040 	tst	r7, #64	; 0x40
  10e0b4:	0a000040 	beq	10e1bc <_vfiprintf_r+0x10b0>
  10e0b8:	e59d901c 	ldr	r9, [sp, #28]
  10e0bc:	e2899004 	add	r9, r9, #4
  10e0c0:	e15940f4 	ldrsh	r4, [r9, #-4]
  10e0c4:	e58d901c 	str	r9, [sp, #28]
  10e0c8:	e1a05fc4 	asr	r5, r4, #31
  10e0cc:	e1a02004 	mov	r2, r4
  10e0d0:	e1a03005 	mov	r3, r5
  10e0d4:	eafffcc9 	b	10d400 <_vfiprintf_r+0x2f4>
  10e0d8:	e1940005 	orrs	r0, r4, r5
  10e0dc:	15cd3049 	strbne	r3, [sp, #73]	; 0x49
  10e0e0:	13877002 	orrne	r7, r7, #2
  10e0e4:	13a03030 	movne	r3, #48	; 0x30
  10e0e8:	13a02001 	movne	r2, #1
  10e0ec:	15cd3048 	strbne	r3, [sp, #72]	; 0x48
  10e0f0:	03a02000 	moveq	r2, #0
  10e0f4:	e3a03002 	mov	r3, #2
  10e0f8:	eafffcfe 	b	10d4f8 <_vfiprintf_r+0x3ec>
  10e0fc:	e5db3000 	ldrb	r3, [fp]
  10e100:	e58d101c 	str	r1, [sp, #28]
  10e104:	eafffc53 	b	10d258 <_vfiprintf_r+0x14c>
  10e108:	e59d0014 	ldr	r0, [sp, #20]
  10e10c:	e1a0100a 	mov	r1, sl
  10e110:	e28d204c 	add	r2, sp, #76	; 0x4c
  10e114:	ebfffbd0 	bl	10d05c <__sprint_r>
  10e118:	e3500000 	cmp	r0, #0
  10e11c:	1afffed3 	bne	10dc70 <_vfiprintf_r+0xb64>
  10e120:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
  10e124:	eafffea4 	b	10dbbc <_vfiprintf_r+0xab0>
  10e128:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
  10e12c:	e063c00c 	rsb	ip, r3, ip
  10e130:	e58dc008 	str	ip, [sp, #8]
  10e134:	eafffebc 	b	10dc2c <_vfiprintf_r+0xb20>
  10e138:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
  10e13c:	e2844030 	add	r4, r4, #48	; 0x30
  10e140:	e5cd407f 	strb	r4, [sp, #127]	; 0x7f
  10e144:	e58dc008 	str	ip, [sp, #8]
  10e148:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
  10e14c:	e58dc024 	str	ip, [sp, #36]	; 0x24
  10e150:	eafffeb5 	b	10dc2c <_vfiprintf_r+0xb20>
  10e154:	e59d901c 	ldr	r9, [sp, #28]
  10e158:	e3a05000 	mov	r5, #0
  10e15c:	e2899004 	add	r9, r9, #4
  10e160:	e5191004 	ldr	r1, [r9, #-4]
  10e164:	e58d901c 	str	r9, [sp, #28]
  10e168:	e2912000 	adds	r2, r1, #0
  10e16c:	e1a04001 	mov	r4, r1
  10e170:	13a02001 	movne	r2, #1
  10e174:	eafffcdf 	b	10d4f8 <_vfiprintf_r+0x3ec>
  10e178:	e59d901c 	ldr	r9, [sp, #28]
  10e17c:	e3a03001 	mov	r3, #1
  10e180:	e3a05000 	mov	r5, #0
  10e184:	e2899004 	add	r9, r9, #4
  10e188:	e5191004 	ldr	r1, [r9, #-4]
  10e18c:	e58d901c 	str	r9, [sp, #28]
  10e190:	e2912000 	adds	r2, r1, #0
  10e194:	e1a04001 	mov	r4, r1
  10e198:	13a02001 	movne	r2, #1
  10e19c:	eafffcd5 	b	10d4f8 <_vfiprintf_r+0x3ec>
  10e1a0:	e59d901c 	ldr	r9, [sp, #28]
  10e1a4:	e3a05000 	mov	r5, #0
  10e1a8:	e2899004 	add	r9, r9, #4
  10e1ac:	e5192004 	ldr	r2, [r9, #-4]
  10e1b0:	e58d901c 	str	r9, [sp, #28]
  10e1b4:	e1a04002 	mov	r4, r2
  10e1b8:	eafffcfe 	b	10d5b8 <_vfiprintf_r+0x4ac>
  10e1bc:	e59dc01c 	ldr	ip, [sp, #28]
  10e1c0:	e28cc004 	add	ip, ip, #4
  10e1c4:	e51c3004 	ldr	r3, [ip, #-4]
  10e1c8:	e58dc01c 	str	ip, [sp, #28]
  10e1cc:	e1a05fc3 	asr	r5, r3, #31
  10e1d0:	e1a02003 	mov	r2, r3
  10e1d4:	e1a04003 	mov	r4, r3
  10e1d8:	e1a03005 	mov	r3, r5
  10e1dc:	e3520000 	cmp	r2, #0
  10e1e0:	e2d30000 	sbcs	r0, r3, #0
  10e1e4:	aafffc88 	bge	10d40c <_vfiprintf_r+0x300>
  10e1e8:	e2744000 	rsbs	r4, r4, #0
  10e1ec:	e2e55000 	rsc	r5, r5, #0
  10e1f0:	e3a0902d 	mov	r9, #45	; 0x2d
  10e1f4:	e1942005 	orrs	r2, r4, r5
  10e1f8:	e5cd9047 	strb	r9, [sp, #71]	; 0x47
  10e1fc:	e3a03001 	mov	r3, #1
  10e200:	03a02000 	moveq	r2, #0
  10e204:	13a02001 	movne	r2, #1
  10e208:	eafffc84 	b	10d420 <_vfiprintf_r+0x314>
  10e20c:	e59d701c 	ldr	r7, [sp, #28]
  10e210:	e59d200c 	ldr	r2, [sp, #12]
  10e214:	e2877004 	add	r7, r7, #4
  10e218:	e5173004 	ldr	r3, [r7, #-4]
  10e21c:	e1a01fc2 	asr	r1, r2, #31
  10e220:	e58d701c 	str	r7, [sp, #28]
  10e224:	e5832000 	str	r2, [r3]
  10e228:	e5831004 	str	r1, [r3, #4]
  10e22c:	eafffbe3 	b	10d1c0 <_vfiprintf_r+0xb4>
  10e230:	e59d801c 	ldr	r8, [sp, #28]
  10e234:	e59d900c 	ldr	r9, [sp, #12]
  10e238:	e2888004 	add	r8, r8, #4
  10e23c:	e5183004 	ldr	r3, [r8, #-4]
  10e240:	e58d801c 	str	r8, [sp, #28]
  10e244:	e5839000 	str	r9, [r3]
  10e248:	eafffbdc 	b	10d1c0 <_vfiprintf_r+0xb4>
  10e24c:	e58d501c 	str	r5, [sp, #28]
  10e250:	ebffe1e5 	bl	1069ec <strlen>
  10e254:	e5dd9047 	ldrb	r9, [sp, #71]	; 0x47
  10e258:	e58d0008 	str	r0, [sp, #8]
  10e25c:	eafffcf6 	b	10d63c <_vfiprintf_r+0x530>
  10e260:	e3580006 	cmp	r8, #6
  10e264:	23a08006 	movcs	r8, #6
  10e268:	e300c13c 	movw	ip, #316	; 0x13c
  10e26c:	e1c83fc8 	bic	r3, r8, r8, asr #31
  10e270:	e340c011 	movt	ip, #17
  10e274:	e98d0108 	stmib	sp, {r3, r8}
  10e278:	e58d501c 	str	r5, [sp, #28]
  10e27c:	e58dc024 	str	ip, [sp, #36]	; 0x24
  10e280:	eafffd2a 	b	10d730 <_vfiprintf_r+0x624>
  10e284:	e30f8e58 	movw	r8, #65112	; 0xfe58
  10e288:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
  10e28c:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
  10e290:	e3408010 	movt	r8, #16
  10e294:	eafffd5e 	b	10d814 <_vfiprintf_r+0x708>
  10e298:	e30f8e58 	movw	r8, #65112	; 0xfe58
  10e29c:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
  10e2a0:	e3408010 	movt	r8, #16
  10e2a4:	eafffe3c 	b	10db9c <_vfiprintf_r+0xa90>
  10e2a8:	e5dd9047 	ldrb	r9, [sp, #71]	; 0x47
  10e2ac:	e58d501c 	str	r5, [sp, #28]
  10e2b0:	e58d8008 	str	r8, [sp, #8]
  10e2b4:	e58d0010 	str	r0, [sp, #16]
  10e2b8:	eafffe5c 	b	10dc30 <_vfiprintf_r+0xb24>
  10e2bc:	e59d901c 	ldr	r9, [sp, #28]
  10e2c0:	e5db3001 	ldrb	r3, [fp, #1]
  10e2c4:	e1a0b000 	mov	fp, r0
  10e2c8:	e2891004 	add	r1, r9, #4
  10e2cc:	e58d101c 	str	r1, [sp, #28]
  10e2d0:	e5998000 	ldr	r8, [r9]
  10e2d4:	e3580000 	cmp	r8, #0
  10e2d8:	b3e08000 	mvnlt	r8, #0
  10e2dc:	eafffbdd 	b	10d258 <_vfiprintf_r+0x14c>
  10e2e0:	0010fe68 	.word	0x0010fe68

0010e2e4 <vfiprintf>:
  10e2e4:	e30fcc28 	movw	ip, #64552	; 0xfc28
  10e2e8:	e340c011 	movt	ip, #17
  10e2ec:	e92d0030 	push	{r4, r5}
  10e2f0:	e1a05000 	mov	r5, r0
  10e2f4:	e1a04001 	mov	r4, r1
  10e2f8:	e1a03002 	mov	r3, r2
  10e2fc:	e59c0000 	ldr	r0, [ip]
  10e300:	e1a01005 	mov	r1, r5
  10e304:	e1a02004 	mov	r2, r4
  10e308:	e8bd0030 	pop	{r4, r5}
  10e30c:	eafffb7e 	b	10d10c <_vfiprintf_r>

0010e310 <_write_r>:
  10e310:	e92d4038 	push	{r3, r4, r5, lr}
  10e314:	e30840cc 	movw	r4, #32972	; 0x80cc
  10e318:	e3404012 	movt	r4, #18
  10e31c:	e1a05000 	mov	r5, r0
  10e320:	e1a00001 	mov	r0, r1
  10e324:	e1a01002 	mov	r1, r2
  10e328:	e1a02003 	mov	r2, r3
  10e32c:	e3a03000 	mov	r3, #0
  10e330:	e5843000 	str	r3, [r4]
  10e334:	eb0005ad 	bl	10f9f0 <_write>
  10e338:	e3700001 	cmn	r0, #1
  10e33c:	18bd8038 	popne	{r3, r4, r5, pc}
  10e340:	e5943000 	ldr	r3, [r4]
  10e344:	e3530000 	cmp	r3, #0
  10e348:	15853000 	strne	r3, [r5]
  10e34c:	e8bd8038 	pop	{r3, r4, r5, pc}

0010e350 <__register_exitproc>:
  10e350:	e30fcd0c 	movw	ip, #64780	; 0xfd0c
  10e354:	e340c010 	movt	ip, #16
  10e358:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  10e35c:	e1a06000 	mov	r6, r0
  10e360:	e59c4000 	ldr	r4, [ip]
  10e364:	e24dd014 	sub	sp, sp, #20
  10e368:	e594c148 	ldr	ip, [r4, #328]	; 0x148
  10e36c:	e35c0000 	cmp	ip, #0
  10e370:	0284cf53 	addeq	ip, r4, #332	; 0x14c
  10e374:	0584c148 	streq	ip, [r4, #328]	; 0x148
  10e378:	e59c5004 	ldr	r5, [ip, #4]
  10e37c:	e355001f 	cmp	r5, #31
  10e380:	da000016 	ble	10e3e0 <__register_exitproc+0x90>
  10e384:	e300c000 	movw	ip, #0
  10e388:	e340c000 	movt	ip, #0
  10e38c:	e35c0000 	cmp	ip, #0
  10e390:	1a000001 	bne	10e39c <__register_exitproc+0x4c>
  10e394:	e3e00000 	mvn	r0, #0
  10e398:	ea000018 	b	10e400 <__register_exitproc+0xb0>
  10e39c:	e3a00e19 	mov	r0, #400	; 0x190
  10e3a0:	e58d100c 	str	r1, [sp, #12]
  10e3a4:	e58d2008 	str	r2, [sp, #8]
  10e3a8:	e58d3004 	str	r3, [sp, #4]
  10e3ac:	e320f000 	nop	{0}
  10e3b0:	e59d100c 	ldr	r1, [sp, #12]
  10e3b4:	e59d2008 	ldr	r2, [sp, #8]
  10e3b8:	e59d3004 	ldr	r3, [sp, #4]
  10e3bc:	e250c000 	subs	ip, r0, #0
  10e3c0:	0afffff3 	beq	10e394 <__register_exitproc+0x44>
  10e3c4:	e5945148 	ldr	r5, [r4, #328]	; 0x148
  10e3c8:	e3a00000 	mov	r0, #0
  10e3cc:	e58c0004 	str	r0, [ip, #4]
  10e3d0:	e58c5000 	str	r5, [ip]
  10e3d4:	e584c148 	str	ip, [r4, #328]	; 0x148
  10e3d8:	e58c0188 	str	r0, [ip, #392]	; 0x188
  10e3dc:	e58c018c 	str	r0, [ip, #396]	; 0x18c
  10e3e0:	e3560000 	cmp	r6, #0
  10e3e4:	e59c4004 	ldr	r4, [ip, #4]
  10e3e8:	1a000006 	bne	10e408 <__register_exitproc+0xb8>
  10e3ec:	e2843002 	add	r3, r4, #2
  10e3f0:	e3a00000 	mov	r0, #0
  10e3f4:	e2844001 	add	r4, r4, #1
  10e3f8:	e58c4004 	str	r4, [ip, #4]
  10e3fc:	e78c1103 	str	r1, [ip, r3, lsl #2]
  10e400:	e28dd014 	add	sp, sp, #20
  10e404:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  10e408:	e3560002 	cmp	r6, #2
  10e40c:	e08c6104 	add	r6, ip, r4, lsl #2
  10e410:	e59c7188 	ldr	r7, [ip, #392]	; 0x188
  10e414:	e3a00001 	mov	r0, #1
  10e418:	e5863108 	str	r3, [r6, #264]	; 0x108
  10e41c:	e1a00410 	lsl	r0, r0, r4
  10e420:	059c318c 	ldreq	r3, [ip, #396]	; 0x18c
  10e424:	e1877000 	orr	r7, r7, r0
  10e428:	e1a05006 	mov	r5, r6
  10e42c:	e58c7188 	str	r7, [ip, #392]	; 0x188
  10e430:	01830000 	orreq	r0, r3, r0
  10e434:	e5862088 	str	r2, [r6, #136]	; 0x88
  10e438:	058c018c 	streq	r0, [ip, #396]	; 0x18c
  10e43c:	eaffffea 	b	10e3ec <__register_exitproc+0x9c>

0010e440 <_calloc_r>:
  10e440:	e92d4010 	push	{r4, lr}
  10e444:	e0010291 	mul	r1, r1, r2
  10e448:	ebfff2a0 	bl	10aed0 <_malloc_r>
  10e44c:	e2504000 	subs	r4, r0, #0
  10e450:	0a00000b 	beq	10e484 <_calloc_r+0x44>
  10e454:	e5142004 	ldr	r2, [r4, #-4]
  10e458:	e3c22003 	bic	r2, r2, #3
  10e45c:	e2422004 	sub	r2, r2, #4
  10e460:	e3520024 	cmp	r2, #36	; 0x24
  10e464:	8a000016 	bhi	10e4c4 <_calloc_r+0x84>
  10e468:	e3520013 	cmp	r2, #19
  10e46c:	91a03004 	movls	r3, r4
  10e470:	8a000005 	bhi	10e48c <_calloc_r+0x4c>
  10e474:	e3a02000 	mov	r2, #0
  10e478:	e5832000 	str	r2, [r3]
  10e47c:	e5832004 	str	r2, [r3, #4]
  10e480:	e5832008 	str	r2, [r3, #8]
  10e484:	e1a00004 	mov	r0, r4
  10e488:	e8bd8010 	pop	{r4, pc}
  10e48c:	e352001b 	cmp	r2, #27
  10e490:	e3a01000 	mov	r1, #0
  10e494:	92843008 	addls	r3, r4, #8
  10e498:	e5841000 	str	r1, [r4]
  10e49c:	e5841004 	str	r1, [r4, #4]
  10e4a0:	9afffff3 	bls	10e474 <_calloc_r+0x34>
  10e4a4:	e3520024 	cmp	r2, #36	; 0x24
  10e4a8:	e5841008 	str	r1, [r4, #8]
  10e4ac:	e584100c 	str	r1, [r4, #12]
  10e4b0:	12843010 	addne	r3, r4, #16
  10e4b4:	05841010 	streq	r1, [r4, #16]
  10e4b8:	02843018 	addeq	r3, r4, #24
  10e4bc:	05841014 	streq	r1, [r4, #20]
  10e4c0:	eaffffeb 	b	10e474 <_calloc_r+0x34>
  10e4c4:	e3a01000 	mov	r1, #0
  10e4c8:	ebfff644 	bl	10bde0 <memset>
  10e4cc:	e1a00004 	mov	r0, r4
  10e4d0:	e8bd8010 	pop	{r4, pc}

0010e4d4 <_close_r>:
  10e4d4:	e92d4038 	push	{r3, r4, r5, lr}
  10e4d8:	e30840cc 	movw	r4, #32972	; 0x80cc
  10e4dc:	e3404012 	movt	r4, #18
  10e4e0:	e1a05000 	mov	r5, r0
  10e4e4:	e1a00001 	mov	r0, r1
  10e4e8:	e3a03000 	mov	r3, #0
  10e4ec:	e5843000 	str	r3, [r4]
  10e4f0:	eb0004f0 	bl	10f8b8 <_close>
  10e4f4:	e3700001 	cmn	r0, #1
  10e4f8:	18bd8038 	popne	{r3, r4, r5, pc}
  10e4fc:	e5943000 	ldr	r3, [r4]
  10e500:	e3530000 	cmp	r3, #0
  10e504:	15853000 	strne	r3, [r5]
  10e508:	e8bd8038 	pop	{r3, r4, r5, pc}

0010e50c <_fclose_r>:
  10e50c:	e92d4070 	push	{r4, r5, r6, lr}
  10e510:	e2514000 	subs	r4, r1, #0
  10e514:	e1a05000 	mov	r5, r0
  10e518:	01a06004 	moveq	r6, r4
  10e51c:	0a00002d 	beq	10e5d8 <_fclose_r+0xcc>
  10e520:	ebfff0ad 	bl	10a7dc <__sfp_lock_acquire>
  10e524:	e3550000 	cmp	r5, #0
  10e528:	0a000002 	beq	10e538 <_fclose_r+0x2c>
  10e52c:	e5953038 	ldr	r3, [r5, #56]	; 0x38
  10e530:	e3530000 	cmp	r3, #0
  10e534:	0a000029 	beq	10e5e0 <_fclose_r+0xd4>
  10e538:	e1d460fc 	ldrsh	r6, [r4, #12]
  10e53c:	e3560000 	cmp	r6, #0
  10e540:	0a000023 	beq	10e5d4 <_fclose_r+0xc8>
  10e544:	e1a00005 	mov	r0, r5
  10e548:	e1a01004 	mov	r1, r4
  10e54c:	ebffef6f 	bl	10a310 <_fflush_r>
  10e550:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
  10e554:	e3530000 	cmp	r3, #0
  10e558:	e1a06000 	mov	r6, r0
  10e55c:	0a000004 	beq	10e574 <_fclose_r+0x68>
  10e560:	e1a00005 	mov	r0, r5
  10e564:	e594101c 	ldr	r1, [r4, #28]
  10e568:	e12fff33 	blx	r3
  10e56c:	e3500000 	cmp	r0, #0
  10e570:	b3e06000 	mvnlt	r6, #0
  10e574:	e1d430bc 	ldrh	r3, [r4, #12]
  10e578:	e2033080 	and	r3, r3, #128	; 0x80
  10e57c:	e6bf3073 	sxth	r3, r3
  10e580:	e3530000 	cmp	r3, #0
  10e584:	1a00001b 	bne	10e5f8 <_fclose_r+0xec>
  10e588:	e5941030 	ldr	r1, [r4, #48]	; 0x30
  10e58c:	e3510000 	cmp	r1, #0
  10e590:	0a000006 	beq	10e5b0 <_fclose_r+0xa4>
  10e594:	e2843040 	add	r3, r4, #64	; 0x40
  10e598:	e1510003 	cmp	r1, r3
  10e59c:	0a000001 	beq	10e5a8 <_fclose_r+0x9c>
  10e5a0:	e1a00005 	mov	r0, r5
  10e5a4:	ebfff0db 	bl	10a918 <_free_r>
  10e5a8:	e3a03000 	mov	r3, #0
  10e5ac:	e5843030 	str	r3, [r4, #48]	; 0x30
  10e5b0:	e5941044 	ldr	r1, [r4, #68]	; 0x44
  10e5b4:	e3510000 	cmp	r1, #0
  10e5b8:	0a000003 	beq	10e5cc <_fclose_r+0xc0>
  10e5bc:	e1a00005 	mov	r0, r5
  10e5c0:	ebfff0d4 	bl	10a918 <_free_r>
  10e5c4:	e3a03000 	mov	r3, #0
  10e5c8:	e5843044 	str	r3, [r4, #68]	; 0x44
  10e5cc:	e3a03000 	mov	r3, #0
  10e5d0:	e1c430bc 	strh	r3, [r4, #12]
  10e5d4:	ebfff081 	bl	10a7e0 <__sfp_lock_release>
  10e5d8:	e1a00006 	mov	r0, r6
  10e5dc:	e8bd8070 	pop	{r4, r5, r6, pc}
  10e5e0:	e1a00005 	mov	r0, r5
  10e5e4:	ebfff024 	bl	10a67c <__sinit>
  10e5e8:	e1d460fc 	ldrsh	r6, [r4, #12]
  10e5ec:	e3560000 	cmp	r6, #0
  10e5f0:	1affffd3 	bne	10e544 <_fclose_r+0x38>
  10e5f4:	eafffff6 	b	10e5d4 <_fclose_r+0xc8>
  10e5f8:	e1a00005 	mov	r0, r5
  10e5fc:	e5941010 	ldr	r1, [r4, #16]
  10e600:	ebfff0c4 	bl	10a918 <_free_r>
  10e604:	eaffffdf 	b	10e588 <_fclose_r+0x7c>

0010e608 <fclose>:
  10e608:	e30f3c28 	movw	r3, #64552	; 0xfc28
  10e60c:	e3403011 	movt	r3, #17
  10e610:	e1a01000 	mov	r1, r0
  10e614:	e5930000 	ldr	r0, [r3]
  10e618:	eaffffbb 	b	10e50c <_fclose_r>

0010e61c <_fputwc_r>:
  10e61c:	e1d230bc 	ldrh	r3, [r2, #12]
  10e620:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
  10e624:	e1a04002 	mov	r4, r2
  10e628:	e2032a02 	and	r2, r3, #8192	; 0x2000
  10e62c:	e24dd00c 	sub	sp, sp, #12
  10e630:	e1a07000 	mov	r7, r0
  10e634:	e1a06001 	mov	r6, r1
  10e638:	e6bf2072 	sxth	r2, r2
  10e63c:	e3520000 	cmp	r2, #0
  10e640:	03833a02 	orreq	r3, r3, #8192	; 0x2000
  10e644:	01c430bc 	strheq	r3, [r4, #12]
  10e648:	05942064 	ldreq	r2, [r4, #100]	; 0x64
  10e64c:	03823a02 	orreq	r3, r2, #8192	; 0x2000
  10e650:	05843064 	streq	r3, [r4, #100]	; 0x64
  10e654:	ebfff1a9 	bl	10ad00 <__locale_mb_cur_max>
  10e658:	e3500001 	cmp	r0, #1
  10e65c:	0a000039 	beq	10e748 <_fputwc_r+0x12c>
  10e660:	e28d8004 	add	r8, sp, #4
  10e664:	e1a00007 	mov	r0, r7
  10e668:	e1a02006 	mov	r2, r6
  10e66c:	e284305c 	add	r3, r4, #92	; 0x5c
  10e670:	e1a01008 	mov	r1, r8
  10e674:	eb00041d 	bl	10f6f0 <_wcrtomb_r>
  10e678:	e3700001 	cmn	r0, #1
  10e67c:	e1a0a000 	mov	sl, r0
  10e680:	0a000023 	beq	10e714 <_fputwc_r+0xf8>
  10e684:	e3500000 	cmp	r0, #0
  10e688:	0a000035 	beq	10e764 <_fputwc_r+0x148>
  10e68c:	e3a05000 	mov	r5, #0
  10e690:	ea000008 	b	10e6b8 <_fputwc_r+0x9c>
  10e694:	e5943000 	ldr	r3, [r4]
  10e698:	e7d82005 	ldrb	r2, [r8, r5]
  10e69c:	e5c32000 	strb	r2, [r3]
  10e6a0:	e5943000 	ldr	r3, [r4]
  10e6a4:	e2833001 	add	r3, r3, #1
  10e6a8:	e5843000 	str	r3, [r4]
  10e6ac:	e2855001 	add	r5, r5, #1
  10e6b0:	e155000a 	cmp	r5, sl
  10e6b4:	2a00002a 	bcs	10e764 <_fputwc_r+0x148>
  10e6b8:	e5943008 	ldr	r3, [r4, #8]
  10e6bc:	e2433001 	sub	r3, r3, #1
  10e6c0:	e5843008 	str	r3, [r4, #8]
  10e6c4:	e3530000 	cmp	r3, #0
  10e6c8:	aafffff1 	bge	10e694 <_fputwc_r+0x78>
  10e6cc:	e5942018 	ldr	r2, [r4, #24]
  10e6d0:	e3a00000 	mov	r0, #0
  10e6d4:	e1530002 	cmp	r3, r2
  10e6d8:	ba000012 	blt	10e728 <_fputwc_r+0x10c>
  10e6dc:	e5943000 	ldr	r3, [r4]
  10e6e0:	e7d82005 	ldrb	r2, [r8, r5]
  10e6e4:	e5c32000 	strb	r2, [r3]
  10e6e8:	e5943000 	ldr	r3, [r4]
  10e6ec:	e2832001 	add	r2, r3, #1
  10e6f0:	e5d31000 	ldrb	r1, [r3]
  10e6f4:	e351000a 	cmp	r1, #10
  10e6f8:	15842000 	strne	r2, [r4]
  10e6fc:	01a00007 	moveq	r0, r7
  10e700:	0a00000a 	beq	10e730 <_fputwc_r+0x114>
  10e704:	e3500000 	cmp	r0, #0
  10e708:	0affffe7 	beq	10e6ac <_fputwc_r+0x90>
  10e70c:	e3e00000 	mvn	r0, #0
  10e710:	ea000002 	b	10e720 <_fputwc_r+0x104>
  10e714:	e1d430bc 	ldrh	r3, [r4, #12]
  10e718:	e3833040 	orr	r3, r3, #64	; 0x40
  10e71c:	e1c430bc 	strh	r3, [r4, #12]
  10e720:	e28dd00c 	add	sp, sp, #12
  10e724:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, sl, pc}
  10e728:	e7d81005 	ldrb	r1, [r8, r5]
  10e72c:	e1a00007 	mov	r0, r7
  10e730:	e1a02004 	mov	r2, r4
  10e734:	eb000397 	bl	10f598 <__swbuf_r>
  10e738:	e3700001 	cmn	r0, #1
  10e73c:	13a00000 	movne	r0, #0
  10e740:	03a00001 	moveq	r0, #1
  10e744:	eaffffee 	b	10e704 <_fputwc_r+0xe8>
  10e748:	e2463001 	sub	r3, r6, #1
  10e74c:	e35300fe 	cmp	r3, #254	; 0xfe
  10e750:	8affffc2 	bhi	10e660 <_fputwc_r+0x44>
  10e754:	e28d8008 	add	r8, sp, #8
  10e758:	e1a0a000 	mov	sl, r0
  10e75c:	e5686004 	strb	r6, [r8, #-4]!
  10e760:	eaffffc9 	b	10e68c <_fputwc_r+0x70>
  10e764:	e1a00006 	mov	r0, r6
  10e768:	eaffffec 	b	10e720 <_fputwc_r+0x104>

0010e76c <fputwc>:
  10e76c:	e92d4070 	push	{r4, r5, r6, lr}
  10e770:	e30f4c28 	movw	r4, #64552	; 0xfc28
  10e774:	e3404011 	movt	r4, #17
  10e778:	e1a06000 	mov	r6, r0
  10e77c:	e1a05001 	mov	r5, r1
  10e780:	e5940000 	ldr	r0, [r4]
  10e784:	e3500000 	cmp	r0, #0
  10e788:	0a000004 	beq	10e7a0 <fputwc+0x34>
  10e78c:	e5903038 	ldr	r3, [r0, #56]	; 0x38
  10e790:	e3530000 	cmp	r3, #0
  10e794:	1a000001 	bne	10e7a0 <fputwc+0x34>
  10e798:	ebffefb7 	bl	10a67c <__sinit>
  10e79c:	e5940000 	ldr	r0, [r4]
  10e7a0:	e1a01006 	mov	r1, r6
  10e7a4:	e1a02005 	mov	r2, r5
  10e7a8:	e8bd4070 	pop	{r4, r5, r6, lr}
  10e7ac:	eaffff9a 	b	10e61c <_fputwc_r>

0010e7b0 <_fstat_r>:
  10e7b0:	e92d4038 	push	{r3, r4, r5, lr}
  10e7b4:	e30840cc 	movw	r4, #32972	; 0x80cc
  10e7b8:	e3404012 	movt	r4, #18
  10e7bc:	e1a05000 	mov	r5, r0
  10e7c0:	e1a00001 	mov	r0, r1
  10e7c4:	e1a01002 	mov	r1, r2
  10e7c8:	e3a03000 	mov	r3, #0
  10e7cc:	e5843000 	str	r3, [r4]
  10e7d0:	eb00043a 	bl	10f8c0 <_fstat>
  10e7d4:	e3700001 	cmn	r0, #1
  10e7d8:	18bd8038 	popne	{r3, r4, r5, pc}
  10e7dc:	e5943000 	ldr	r3, [r4]
  10e7e0:	e3530000 	cmp	r3, #0
  10e7e4:	15853000 	strne	r3, [r5]
  10e7e8:	e8bd8038 	pop	{r3, r4, r5, pc}

0010e7ec <__sfvwrite_r>:
  10e7ec:	e5923008 	ldr	r3, [r2, #8]
  10e7f0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  10e7f4:	e3530000 	cmp	r3, #0
  10e7f8:	e24dd00c 	sub	sp, sp, #12
  10e7fc:	e1a07002 	mov	r7, r2
  10e800:	e1a0a000 	mov	sl, r0
  10e804:	e1a04001 	mov	r4, r1
  10e808:	0a000021 	beq	10e894 <__sfvwrite_r+0xa8>
  10e80c:	e1d130bc 	ldrh	r3, [r1, #12]
  10e810:	e2032008 	and	r2, r3, #8
  10e814:	e6bf2072 	sxth	r2, r2
  10e818:	e3520000 	cmp	r2, #0
  10e81c:	0a00001f 	beq	10e8a0 <__sfvwrite_r+0xb4>
  10e820:	e5912010 	ldr	r2, [r1, #16]
  10e824:	e3520000 	cmp	r2, #0
  10e828:	0a00001c 	beq	10e8a0 <__sfvwrite_r+0xb4>
  10e82c:	e2032002 	and	r2, r3, #2
  10e830:	e5975000 	ldr	r5, [r7]
  10e834:	e6bf2072 	sxth	r2, r2
  10e838:	e3520000 	cmp	r2, #0
  10e83c:	0a000027 	beq	10e8e0 <__sfvwrite_r+0xf4>
  10e840:	e3a08000 	mov	r8, #0
  10e844:	e1a06008 	mov	r6, r8
  10e848:	e3560000 	cmp	r6, #0
  10e84c:	e1a02008 	mov	r2, r8
  10e850:	e1a0000a 	mov	r0, sl
  10e854:	0a00001d 	beq	10e8d0 <__sfvwrite_r+0xe4>
  10e858:	e3560b01 	cmp	r6, #1024	; 0x400
  10e85c:	31a03006 	movcc	r3, r6
  10e860:	23a03b01 	movcs	r3, #1024	; 0x400
  10e864:	e594c024 	ldr	ip, [r4, #36]	; 0x24
  10e868:	e594101c 	ldr	r1, [r4, #28]
  10e86c:	e12fff3c 	blx	ip
  10e870:	e3500000 	cmp	r0, #0
  10e874:	e0888000 	add	r8, r8, r0
  10e878:	e0606006 	rsb	r6, r0, r6
  10e87c:	da00004f 	ble	10e9c0 <__sfvwrite_r+0x1d4>
  10e880:	e5973008 	ldr	r3, [r7, #8]
  10e884:	e0600003 	rsb	r0, r0, r3
  10e888:	e5870008 	str	r0, [r7, #8]
  10e88c:	e3500000 	cmp	r0, #0
  10e890:	1affffec 	bne	10e848 <__sfvwrite_r+0x5c>
  10e894:	e3a00000 	mov	r0, #0
  10e898:	e28dd00c 	add	sp, sp, #12
  10e89c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  10e8a0:	e1a0000a 	mov	r0, sl
  10e8a4:	e1a01004 	mov	r1, r4
  10e8a8:	ebffe8e2 	bl	108c38 <__swsetup_r>
  10e8ac:	e1d430bc 	ldrh	r3, [r4, #12]
  10e8b0:	e3500000 	cmp	r0, #0
  10e8b4:	0affffdc 	beq	10e82c <__sfvwrite_r+0x40>
  10e8b8:	e3833040 	orr	r3, r3, #64	; 0x40
  10e8bc:	e3e00000 	mvn	r0, #0
  10e8c0:	e1c430bc 	strh	r3, [r4, #12]
  10e8c4:	e3a03009 	mov	r3, #9
  10e8c8:	e58a3000 	str	r3, [sl]
  10e8cc:	eafffff1 	b	10e898 <__sfvwrite_r+0xac>
  10e8d0:	e5958000 	ldr	r8, [r5]
  10e8d4:	e2855008 	add	r5, r5, #8
  10e8d8:	e5156004 	ldr	r6, [r5, #-4]
  10e8dc:	eaffffd9 	b	10e848 <__sfvwrite_r+0x5c>
  10e8e0:	e2139001 	ands	r9, r3, #1
  10e8e4:	1a00003a 	bne	10e9d4 <__sfvwrite_r+0x1e8>
  10e8e8:	e1a06009 	mov	r6, r9
  10e8ec:	e3560000 	cmp	r6, #0
  10e8f0:	0a000026 	beq	10e990 <__sfvwrite_r+0x1a4>
  10e8f4:	e2032c02 	and	r2, r3, #512	; 0x200
  10e8f8:	e5948008 	ldr	r8, [r4, #8]
  10e8fc:	e1a01003 	mov	r1, r3
  10e900:	e6bf2072 	sxth	r2, r2
  10e904:	e3520000 	cmp	r2, #0
  10e908:	0a000061 	beq	10ea94 <__sfvwrite_r+0x2a8>
  10e90c:	e1560008 	cmp	r6, r8
  10e910:	e1a0c008 	mov	ip, r8
  10e914:	3a000087 	bcc	10eb38 <__sfvwrite_r+0x34c>
  10e918:	e2011d12 	and	r1, r1, #1152	; 0x480
  10e91c:	e3510000 	cmp	r1, #0
  10e920:	1a0000a1 	bne	10ebac <__sfvwrite_r+0x3c0>
  10e924:	e5940000 	ldr	r0, [r4]
  10e928:	e1a0b008 	mov	fp, r8
  10e92c:	e1a03006 	mov	r3, r6
  10e930:	e1a08006 	mov	r8, r6
  10e934:	e1a0200c 	mov	r2, ip
  10e938:	e1a01009 	mov	r1, r9
  10e93c:	e58d3004 	str	r3, [sp, #4]
  10e940:	e58dc000 	str	ip, [sp]
  10e944:	eb0000fc 	bl	10ed3c <memmove>
  10e948:	e59d3004 	ldr	r3, [sp, #4]
  10e94c:	e5941008 	ldr	r1, [r4, #8]
  10e950:	e5942000 	ldr	r2, [r4]
  10e954:	e59dc000 	ldr	ip, [sp]
  10e958:	e06bb001 	rsb	fp, fp, r1
  10e95c:	e584b008 	str	fp, [r4, #8]
  10e960:	e082c00c 	add	ip, r2, ip
  10e964:	e584c000 	str	ip, [r4]
  10e968:	e5972008 	ldr	r2, [r7, #8]
  10e96c:	e0899003 	add	r9, r9, r3
  10e970:	e0636006 	rsb	r6, r3, r6
  10e974:	e0688002 	rsb	r8, r8, r2
  10e978:	e5878008 	str	r8, [r7, #8]
  10e97c:	e3580000 	cmp	r8, #0
  10e980:	0affffc3 	beq	10e894 <__sfvwrite_r+0xa8>
  10e984:	e3560000 	cmp	r6, #0
  10e988:	e1d430bc 	ldrh	r3, [r4, #12]
  10e98c:	1affffd8 	bne	10e8f4 <__sfvwrite_r+0x108>
  10e990:	e5959000 	ldr	r9, [r5]
  10e994:	e2855008 	add	r5, r5, #8
  10e998:	e5156004 	ldr	r6, [r5, #-4]
  10e99c:	eaffffd2 	b	10e8ec <__sfvwrite_r+0x100>
  10e9a0:	eb000142 	bl	10eeb0 <_realloc_r>
  10e9a4:	e2503000 	subs	r3, r0, #0
  10e9a8:	1a00009e 	bne	10ec28 <__sfvwrite_r+0x43c>
  10e9ac:	e1a0000a 	mov	r0, sl
  10e9b0:	e5941010 	ldr	r1, [r4, #16]
  10e9b4:	ebffefd7 	bl	10a918 <_free_r>
  10e9b8:	e3a0300c 	mov	r3, #12
  10e9bc:	e58a3000 	str	r3, [sl]
  10e9c0:	e1d430bc 	ldrh	r3, [r4, #12]
  10e9c4:	e3e00000 	mvn	r0, #0
  10e9c8:	e3833040 	orr	r3, r3, #64	; 0x40
  10e9cc:	e1c430bc 	strh	r3, [r4, #12]
  10e9d0:	eaffffb0 	b	10e898 <__sfvwrite_r+0xac>
  10e9d4:	e1a09002 	mov	r9, r2
  10e9d8:	e1a0c002 	mov	ip, r2
  10e9dc:	e1a0b002 	mov	fp, r2
  10e9e0:	e1a08002 	mov	r8, r2
  10e9e4:	e3580000 	cmp	r8, #0
  10e9e8:	0a000024 	beq	10ea80 <__sfvwrite_r+0x294>
  10e9ec:	e35c0000 	cmp	ip, #0
  10e9f0:	0a000062 	beq	10eb80 <__sfvwrite_r+0x394>
  10e9f4:	e5940000 	ldr	r0, [r4]
  10e9f8:	e1590008 	cmp	r9, r8
  10e9fc:	31a03009 	movcc	r3, r9
  10ea00:	21a03008 	movcs	r3, r8
  10ea04:	e5942010 	ldr	r2, [r4, #16]
  10ea08:	e5946008 	ldr	r6, [r4, #8]
  10ea0c:	e1500002 	cmp	r0, r2
  10ea10:	e594e014 	ldr	lr, [r4, #20]
  10ea14:	9a000002 	bls	10ea24 <__sfvwrite_r+0x238>
  10ea18:	e086600e 	add	r6, r6, lr
  10ea1c:	e1530006 	cmp	r3, r6
  10ea20:	ca00008b 	bgt	10ec54 <__sfvwrite_r+0x468>
  10ea24:	e153000e 	cmp	r3, lr
  10ea28:	ba00002b 	blt	10eadc <__sfvwrite_r+0x2f0>
  10ea2c:	e5946024 	ldr	r6, [r4, #36]	; 0x24
  10ea30:	e1a0000a 	mov	r0, sl
  10ea34:	e594101c 	ldr	r1, [r4, #28]
  10ea38:	e1a0200b 	mov	r2, fp
  10ea3c:	e58dc000 	str	ip, [sp]
  10ea40:	e1a0300e 	mov	r3, lr
  10ea44:	e12fff36 	blx	r6
  10ea48:	e59dc000 	ldr	ip, [sp]
  10ea4c:	e2506000 	subs	r6, r0, #0
  10ea50:	daffffda 	ble	10e9c0 <__sfvwrite_r+0x1d4>
  10ea54:	e0599006 	subs	r9, r9, r6
  10ea58:	0a00002f 	beq	10eb1c <__sfvwrite_r+0x330>
  10ea5c:	e5973008 	ldr	r3, [r7, #8]
  10ea60:	e08bb006 	add	fp, fp, r6
  10ea64:	e0668008 	rsb	r8, r6, r8
  10ea68:	e0666003 	rsb	r6, r6, r3
  10ea6c:	e5876008 	str	r6, [r7, #8]
  10ea70:	e3560000 	cmp	r6, #0
  10ea74:	0affff86 	beq	10e894 <__sfvwrite_r+0xa8>
  10ea78:	e3580000 	cmp	r8, #0
  10ea7c:	1affffda 	bne	10e9ec <__sfvwrite_r+0x200>
  10ea80:	e595b000 	ldr	fp, [r5]
  10ea84:	e2855008 	add	r5, r5, #8
  10ea88:	e3a0c000 	mov	ip, #0
  10ea8c:	e5158004 	ldr	r8, [r5, #-4]
  10ea90:	eaffffd3 	b	10e9e4 <__sfvwrite_r+0x1f8>
  10ea94:	e5940000 	ldr	r0, [r4]
  10ea98:	e5943010 	ldr	r3, [r4, #16]
  10ea9c:	e1500003 	cmp	r0, r3
  10eaa0:	9a000001 	bls	10eaac <__sfvwrite_r+0x2c0>
  10eaa4:	e1560008 	cmp	r6, r8
  10eaa8:	8a000077 	bhi	10ec8c <__sfvwrite_r+0x4a0>
  10eaac:	e5943014 	ldr	r3, [r4, #20]
  10eab0:	e1560003 	cmp	r6, r3
  10eab4:	3a000025 	bcc	10eb50 <__sfvwrite_r+0x364>
  10eab8:	e594c024 	ldr	ip, [r4, #36]	; 0x24
  10eabc:	e1a0000a 	mov	r0, sl
  10eac0:	e594101c 	ldr	r1, [r4, #28]
  10eac4:	e1a02009 	mov	r2, r9
  10eac8:	e12fff3c 	blx	ip
  10eacc:	e2508000 	subs	r8, r0, #0
  10ead0:	daffffba 	ble	10e9c0 <__sfvwrite_r+0x1d4>
  10ead4:	e1a03008 	mov	r3, r8
  10ead8:	eaffffa2 	b	10e968 <__sfvwrite_r+0x17c>
  10eadc:	e1a02003 	mov	r2, r3
  10eae0:	e1a0100b 	mov	r1, fp
  10eae4:	e1a06003 	mov	r6, r3
  10eae8:	e58d3004 	str	r3, [sp, #4]
  10eaec:	e58dc000 	str	ip, [sp]
  10eaf0:	eb000091 	bl	10ed3c <memmove>
  10eaf4:	e59d3004 	ldr	r3, [sp, #4]
  10eaf8:	e0599006 	subs	r9, r9, r6
  10eafc:	e5941008 	ldr	r1, [r4, #8]
  10eb00:	e5942000 	ldr	r2, [r4]
  10eb04:	e0631001 	rsb	r1, r3, r1
  10eb08:	e59dc000 	ldr	ip, [sp]
  10eb0c:	e0823003 	add	r3, r2, r3
  10eb10:	e5841008 	str	r1, [r4, #8]
  10eb14:	e5843000 	str	r3, [r4]
  10eb18:	1affffcf 	bne	10ea5c <__sfvwrite_r+0x270>
  10eb1c:	e1a0000a 	mov	r0, sl
  10eb20:	e1a01004 	mov	r1, r4
  10eb24:	ebffedf9 	bl	10a310 <_fflush_r>
  10eb28:	e3500000 	cmp	r0, #0
  10eb2c:	1affffa3 	bne	10e9c0 <__sfvwrite_r+0x1d4>
  10eb30:	e1a0c009 	mov	ip, r9
  10eb34:	eaffffc8 	b	10ea5c <__sfvwrite_r+0x270>
  10eb38:	e5940000 	ldr	r0, [r4]
  10eb3c:	e1a0b006 	mov	fp, r6
  10eb40:	e1a03006 	mov	r3, r6
  10eb44:	e1a08006 	mov	r8, r6
  10eb48:	e1a0c006 	mov	ip, r6
  10eb4c:	eaffff78 	b	10e934 <__sfvwrite_r+0x148>
  10eb50:	e1a01009 	mov	r1, r9
  10eb54:	e1a02006 	mov	r2, r6
  10eb58:	eb000077 	bl	10ed3c <memmove>
  10eb5c:	e5941008 	ldr	r1, [r4, #8]
  10eb60:	e5942000 	ldr	r2, [r4]
  10eb64:	e1a08006 	mov	r8, r6
  10eb68:	e0661001 	rsb	r1, r6, r1
  10eb6c:	e1a03006 	mov	r3, r6
  10eb70:	e0822006 	add	r2, r2, r6
  10eb74:	e5841008 	str	r1, [r4, #8]
  10eb78:	e5842000 	str	r2, [r4]
  10eb7c:	eaffff79 	b	10e968 <__sfvwrite_r+0x17c>
  10eb80:	e1a0000b 	mov	r0, fp
  10eb84:	e3a0100a 	mov	r1, #10
  10eb88:	e1a02008 	mov	r2, r8
  10eb8c:	ebfff296 	bl	10b5ec <memchr>
  10eb90:	e3500000 	cmp	r0, #0
  10eb94:	12809001 	addne	r9, r0, #1
  10eb98:	02889001 	addeq	r9, r8, #1
  10eb9c:	13a0c001 	movne	ip, #1
  10eba0:	106b9009 	rsbne	r9, fp, r9
  10eba4:	03a0c001 	moveq	ip, #1
  10eba8:	eaffff91 	b	10e9f4 <__sfvwrite_r+0x208>
  10ebac:	e5948014 	ldr	r8, [r4, #20]
  10ebb0:	e2033b01 	and	r3, r3, #1024	; 0x400
  10ebb4:	e5941010 	ldr	r1, [r4, #16]
  10ebb8:	e594b000 	ldr	fp, [r4]
  10ebbc:	e6bf3073 	sxth	r3, r3
  10ebc0:	e0888088 	add	r8, r8, r8, lsl #1
  10ebc4:	e061b00b 	rsb	fp, r1, fp
  10ebc8:	e0888fa8 	add	r8, r8, r8, lsr #31
  10ebcc:	e28b0001 	add	r0, fp, #1
  10ebd0:	e0800006 	add	r0, r0, r6
  10ebd4:	e1a080c8 	asr	r8, r8, #1
  10ebd8:	e1580000 	cmp	r8, r0
  10ebdc:	e1a02008 	mov	r2, r8
  10ebe0:	31a08000 	movcc	r8, r0
  10ebe4:	e1a0000a 	mov	r0, sl
  10ebe8:	31a02008 	movcc	r2, r8
  10ebec:	e3530000 	cmp	r3, #0
  10ebf0:	0affff6a 	beq	10e9a0 <__sfvwrite_r+0x1b4>
  10ebf4:	e1a01002 	mov	r1, r2
  10ebf8:	ebfff0b4 	bl	10aed0 <_malloc_r>
  10ebfc:	e2503000 	subs	r3, r0, #0
  10ec00:	0affff6c 	beq	10e9b8 <__sfvwrite_r+0x1cc>
  10ec04:	e5941010 	ldr	r1, [r4, #16]
  10ec08:	e1a0200b 	mov	r2, fp
  10ec0c:	e58d3004 	str	r3, [sp, #4]
  10ec10:	ebfff2bc 	bl	10b708 <memcpy>
  10ec14:	e1d420bc 	ldrh	r2, [r4, #12]
  10ec18:	e59d3004 	ldr	r3, [sp, #4]
  10ec1c:	e3c22d12 	bic	r2, r2, #1152	; 0x480
  10ec20:	e3822080 	orr	r2, r2, #128	; 0x80
  10ec24:	e1c420bc 	strh	r2, [r4, #12]
  10ec28:	e083000b 	add	r0, r3, fp
  10ec2c:	e06b2008 	rsb	r2, fp, r8
  10ec30:	e5843010 	str	r3, [r4, #16]
  10ec34:	e1a0b006 	mov	fp, r6
  10ec38:	e5848014 	str	r8, [r4, #20]
  10ec3c:	e1a03006 	mov	r3, r6
  10ec40:	e5840000 	str	r0, [r4]
  10ec44:	e1a08006 	mov	r8, r6
  10ec48:	e5842008 	str	r2, [r4, #8]
  10ec4c:	e1a0c006 	mov	ip, r6
  10ec50:	eaffff37 	b	10e934 <__sfvwrite_r+0x148>
  10ec54:	e1a0100b 	mov	r1, fp
  10ec58:	e1a02006 	mov	r2, r6
  10ec5c:	e58dc000 	str	ip, [sp]
  10ec60:	eb000035 	bl	10ed3c <memmove>
  10ec64:	e5943000 	ldr	r3, [r4]
  10ec68:	e1a0000a 	mov	r0, sl
  10ec6c:	e1a01004 	mov	r1, r4
  10ec70:	e0833006 	add	r3, r3, r6
  10ec74:	e5843000 	str	r3, [r4]
  10ec78:	ebffeda4 	bl	10a310 <_fflush_r>
  10ec7c:	e59dc000 	ldr	ip, [sp]
  10ec80:	e3500000 	cmp	r0, #0
  10ec84:	0affff72 	beq	10ea54 <__sfvwrite_r+0x268>
  10ec88:	eaffff4c 	b	10e9c0 <__sfvwrite_r+0x1d4>
  10ec8c:	e1a01009 	mov	r1, r9
  10ec90:	e1a02008 	mov	r2, r8
  10ec94:	e58d8004 	str	r8, [sp, #4]
  10ec98:	eb000027 	bl	10ed3c <memmove>
  10ec9c:	e5942000 	ldr	r2, [r4]
  10eca0:	e1a0000a 	mov	r0, sl
  10eca4:	e1a01004 	mov	r1, r4
  10eca8:	e0822008 	add	r2, r2, r8
  10ecac:	e5842000 	str	r2, [r4]
  10ecb0:	ebffed96 	bl	10a310 <_fflush_r>
  10ecb4:	e59d3004 	ldr	r3, [sp, #4]
  10ecb8:	e3500000 	cmp	r0, #0
  10ecbc:	0affff29 	beq	10e968 <__sfvwrite_r+0x17c>
  10ecc0:	eaffff3e 	b	10e9c0 <__sfvwrite_r+0x1d4>

0010ecc4 <_isatty_r>:
  10ecc4:	e92d4038 	push	{r3, r4, r5, lr}
  10ecc8:	e30840cc 	movw	r4, #32972	; 0x80cc
  10eccc:	e3404012 	movt	r4, #18
  10ecd0:	e1a05000 	mov	r5, r0
  10ecd4:	e1a00001 	mov	r0, r1
  10ecd8:	e3a03000 	mov	r3, #0
  10ecdc:	e5843000 	str	r3, [r4]
  10ece0:	eb0002fc 	bl	10f8d8 <_isatty>
  10ece4:	e3700001 	cmn	r0, #1
  10ece8:	18bd8038 	popne	{r3, r4, r5, pc}
  10ecec:	e5943000 	ldr	r3, [r4]
  10ecf0:	e3530000 	cmp	r3, #0
  10ecf4:	15853000 	strne	r3, [r5]
  10ecf8:	e8bd8038 	pop	{r3, r4, r5, pc}

0010ecfc <_lseek_r>:
  10ecfc:	e92d4038 	push	{r3, r4, r5, lr}
  10ed00:	e30840cc 	movw	r4, #32972	; 0x80cc
  10ed04:	e3404012 	movt	r4, #18
  10ed08:	e1a05000 	mov	r5, r0
  10ed0c:	e1a00001 	mov	r0, r1
  10ed10:	e1a01002 	mov	r1, r2
  10ed14:	e1a02003 	mov	r2, r3
  10ed18:	e3a03000 	mov	r3, #0
  10ed1c:	e5843000 	str	r3, [r4]
  10ed20:	eb0002f4 	bl	10f8f8 <_lseek>
  10ed24:	e3700001 	cmn	r0, #1
  10ed28:	18bd8038 	popne	{r3, r4, r5, pc}
  10ed2c:	e5943000 	ldr	r3, [r4]
  10ed30:	e3530000 	cmp	r3, #0
  10ed34:	15853000 	strne	r3, [r5]
  10ed38:	e8bd8038 	pop	{r3, r4, r5, pc}

0010ed3c <memmove>:
  10ed3c:	e1500001 	cmp	r0, r1
  10ed40:	e92d00f0 	push	{r4, r5, r6, r7}
  10ed44:	9a00000e 	bls	10ed84 <memmove+0x48>
  10ed48:	e081c002 	add	ip, r1, r2
  10ed4c:	e150000c 	cmp	r0, ip
  10ed50:	2a00000b 	bcs	10ed84 <memmove+0x48>
  10ed54:	e3520000 	cmp	r2, #0
  10ed58:	e0803002 	add	r3, r0, r2
  10ed5c:	e2422001 	sub	r2, r2, #1
  10ed60:	0a000005 	beq	10ed7c <memmove+0x40>
  10ed64:	e1a0100c 	mov	r1, ip
  10ed68:	e571c001 	ldrb	ip, [r1, #-1]!
  10ed6c:	e2422001 	sub	r2, r2, #1
  10ed70:	e3720001 	cmn	r2, #1
  10ed74:	e563c001 	strb	ip, [r3, #-1]!
  10ed78:	1afffffa 	bne	10ed68 <memmove+0x2c>
  10ed7c:	e8bd00f0 	pop	{r4, r5, r6, r7}
  10ed80:	e12fff1e 	bx	lr
  10ed84:	e352000f 	cmp	r2, #15
  10ed88:	8a000009 	bhi	10edb4 <memmove+0x78>
  10ed8c:	e1a03000 	mov	r3, r0
  10ed90:	e3520000 	cmp	r2, #0
  10ed94:	0afffff8 	beq	10ed7c <memmove+0x40>
  10ed98:	e2411001 	sub	r1, r1, #1
  10ed9c:	e0832002 	add	r2, r3, r2
  10eda0:	e5f1c001 	ldrb	ip, [r1, #1]!
  10eda4:	e4c3c001 	strb	ip, [r3], #1
  10eda8:	e1530002 	cmp	r3, r2
  10edac:	1afffffb 	bne	10eda0 <memmove+0x64>
  10edb0:	eafffff1 	b	10ed7c <memmove+0x40>
  10edb4:	e1813000 	orr	r3, r1, r0
  10edb8:	e3130003 	tst	r3, #3
  10edbc:	1a000027 	bne	10ee60 <memmove+0x124>
  10edc0:	e1a0c001 	mov	ip, r1
  10edc4:	e1a03000 	mov	r3, r0
  10edc8:	e1a04002 	mov	r4, r2
  10edcc:	e59c5000 	ldr	r5, [ip]
  10edd0:	e2833010 	add	r3, r3, #16
  10edd4:	e28cc010 	add	ip, ip, #16
  10edd8:	e2444010 	sub	r4, r4, #16
  10eddc:	e354000f 	cmp	r4, #15
  10ede0:	e5035010 	str	r5, [r3, #-16]
  10ede4:	e51c500c 	ldr	r5, [ip, #-12]
  10ede8:	e503500c 	str	r5, [r3, #-12]
  10edec:	e51c5008 	ldr	r5, [ip, #-8]
  10edf0:	e5035008 	str	r5, [r3, #-8]
  10edf4:	e51c5004 	ldr	r5, [ip, #-4]
  10edf8:	e5035004 	str	r5, [r3, #-4]
  10edfc:	8afffff2 	bhi	10edcc <memmove+0x90>
  10ee00:	e2424010 	sub	r4, r2, #16
  10ee04:	e202c00f 	and	ip, r2, #15
  10ee08:	e3c4400f 	bic	r4, r4, #15
  10ee0c:	e35c0003 	cmp	ip, #3
  10ee10:	e2844010 	add	r4, r4, #16
  10ee14:	e0803004 	add	r3, r0, r4
  10ee18:	e0811004 	add	r1, r1, r4
  10ee1c:	9a000011 	bls	10ee68 <memmove+0x12c>
  10ee20:	e24c7004 	sub	r7, ip, #4
  10ee24:	e1a04003 	mov	r4, r3
  10ee28:	e1a0c001 	mov	ip, r1
  10ee2c:	e1a07127 	lsr	r7, r7, #2
  10ee30:	e0816107 	add	r6, r1, r7, lsl #2
  10ee34:	e2866004 	add	r6, r6, #4
  10ee38:	e49c5004 	ldr	r5, [ip], #4
  10ee3c:	e15c0006 	cmp	ip, r6
  10ee40:	e4845004 	str	r5, [r4], #4
  10ee44:	1afffffb 	bne	10ee38 <memmove+0xfc>
  10ee48:	e287c001 	add	ip, r7, #1
  10ee4c:	e2022003 	and	r2, r2, #3
  10ee50:	e1a0c10c 	lsl	ip, ip, #2
  10ee54:	e081100c 	add	r1, r1, ip
  10ee58:	e083300c 	add	r3, r3, ip
  10ee5c:	eaffffcb 	b	10ed90 <memmove+0x54>
  10ee60:	e1a03000 	mov	r3, r0
  10ee64:	eaffffcb 	b	10ed98 <memmove+0x5c>
  10ee68:	e1a0200c 	mov	r2, ip
  10ee6c:	eaffffc7 	b	10ed90 <memmove+0x54>

0010ee70 <_read_r>:
  10ee70:	e92d4038 	push	{r3, r4, r5, lr}
  10ee74:	e30840cc 	movw	r4, #32972	; 0x80cc
  10ee78:	e3404012 	movt	r4, #18
  10ee7c:	e1a05000 	mov	r5, r0
  10ee80:	e1a00001 	mov	r0, r1
  10ee84:	e1a01002 	mov	r1, r2
  10ee88:	e1a02003 	mov	r2, r3
  10ee8c:	e3a03000 	mov	r3, #0
  10ee90:	e5843000 	str	r3, [r4]
  10ee94:	eb0002af 	bl	10f958 <_read>
  10ee98:	e3700001 	cmn	r0, #1
  10ee9c:	18bd8038 	popne	{r3, r4, r5, pc}
  10eea0:	e5943000 	ldr	r3, [r4]
  10eea4:	e3530000 	cmp	r3, #0
  10eea8:	15853000 	strne	r3, [r5]
  10eeac:	e8bd8038 	pop	{r3, r4, r5, pc}

0010eeb0 <_realloc_r>:
  10eeb0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  10eeb4:	e2514000 	subs	r4, r1, #0
  10eeb8:	e24dd00c 	sub	sp, sp, #12
  10eebc:	e1a08000 	mov	r8, r0
  10eec0:	0a0000cd 	beq	10f1fc <_realloc_r+0x34c>
  10eec4:	e58d2004 	str	r2, [sp, #4]
  10eec8:	ebfff44f 	bl	10c00c <__malloc_lock>
  10eecc:	e59d2004 	ldr	r2, [sp, #4]
  10eed0:	e244a008 	sub	sl, r4, #8
  10eed4:	e5143004 	ldr	r3, [r4, #-4]
  10eed8:	e282500b 	add	r5, r2, #11
  10eedc:	e3550016 	cmp	r5, #22
  10eee0:	e3c36003 	bic	r6, r3, #3
  10eee4:	83c55007 	bichi	r5, r5, #7
  10eee8:	93a01010 	movls	r1, #16
  10eeec:	93a0c000 	movls	ip, #0
  10eef0:	81a0cfa5 	lsrhi	ip, r5, #31
  10eef4:	81a01005 	movhi	r1, r5
  10eef8:	91a05001 	movls	r5, r1
  10eefc:	e1550002 	cmp	r5, r2
  10ef00:	338cc001 	orrcc	ip, ip, #1
  10ef04:	e35c0000 	cmp	ip, #0
  10ef08:	13a0300c 	movne	r3, #12
  10ef0c:	13a07000 	movne	r7, #0
  10ef10:	15883000 	strne	r3, [r8]
  10ef14:	1a00000f 	bne	10ef58 <_realloc_r+0xa8>
  10ef18:	e1560001 	cmp	r6, r1
  10ef1c:	ba000010 	blt	10ef64 <_realloc_r+0xb4>
  10ef20:	e1a07006 	mov	r7, r6
  10ef24:	e0652007 	rsb	r2, r5, r7
  10ef28:	e352000f 	cmp	r2, #15
  10ef2c:	8a000086 	bhi	10f14c <_realloc_r+0x29c>
  10ef30:	e08a2007 	add	r2, sl, r7
  10ef34:	e2033001 	and	r3, r3, #1
  10ef38:	e1837007 	orr	r7, r3, r7
  10ef3c:	e58a7004 	str	r7, [sl, #4]
  10ef40:	e5923004 	ldr	r3, [r2, #4]
  10ef44:	e3833001 	orr	r3, r3, #1
  10ef48:	e5823004 	str	r3, [r2, #4]
  10ef4c:	e1a00008 	mov	r0, r8
  10ef50:	e1a07004 	mov	r7, r4
  10ef54:	ebfff42d 	bl	10c010 <__malloc_unlock>
  10ef58:	e1a00007 	mov	r0, r7
  10ef5c:	e28dd00c 	add	sp, sp, #12
  10ef60:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  10ef64:	e30090d4 	movw	r9, #212	; 0xd4
  10ef68:	e3409012 	movt	r9, #18
  10ef6c:	e08ae006 	add	lr, sl, r6
  10ef70:	e5990008 	ldr	r0, [r9, #8]
  10ef74:	e150000e 	cmp	r0, lr
  10ef78:	0a0000a3 	beq	10f20c <_realloc_r+0x35c>
  10ef7c:	e59e7004 	ldr	r7, [lr, #4]
  10ef80:	e3c7b001 	bic	fp, r7, #1
  10ef84:	e08eb00b 	add	fp, lr, fp
  10ef88:	e59bb004 	ldr	fp, [fp, #4]
  10ef8c:	e31b0001 	tst	fp, #1
  10ef90:	11a0e00c 	movne	lr, ip
  10ef94:	0a00003c 	beq	10f08c <_realloc_r+0x1dc>
  10ef98:	e3130001 	tst	r3, #1
  10ef9c:	1a000078 	bne	10f184 <_realloc_r+0x2d4>
  10efa0:	e514b008 	ldr	fp, [r4, #-8]
  10efa4:	e35e0000 	cmp	lr, #0
  10efa8:	e06bb00a 	rsb	fp, fp, sl
  10efac:	e59b3004 	ldr	r3, [fp, #4]
  10efb0:	e3c33003 	bic	r3, r3, #3
  10efb4:	e0833006 	add	r3, r3, r6
  10efb8:	0a00003c 	beq	10f0b0 <_realloc_r+0x200>
  10efbc:	e15e0000 	cmp	lr, r0
  10efc0:	0a0000c8 	beq	10f2e8 <_realloc_r+0x438>
  10efc4:	e08c7003 	add	r7, ip, r3
  10efc8:	e1570001 	cmp	r7, r1
  10efcc:	ba000037 	blt	10f0b0 <_realloc_r+0x200>
  10efd0:	e59e100c 	ldr	r1, [lr, #12]
  10efd4:	e1a0300b 	mov	r3, fp
  10efd8:	e59e0008 	ldr	r0, [lr, #8]
  10efdc:	e2462004 	sub	r2, r6, #4
  10efe0:	e3520024 	cmp	r2, #36	; 0x24
  10efe4:	e580100c 	str	r1, [r0, #12]
  10efe8:	e5810008 	str	r0, [r1, #8]
  10efec:	e59b100c 	ldr	r1, [fp, #12]
  10eff0:	e5b30008 	ldr	r0, [r3, #8]!
  10eff4:	e580100c 	str	r1, [r0, #12]
  10eff8:	e5810008 	str	r0, [r1, #8]
  10effc:	8a0000f4 	bhi	10f3d4 <_realloc_r+0x524>
  10f000:	e3520013 	cmp	r2, #19
  10f004:	91a02003 	movls	r2, r3
  10f008:	91a01004 	movls	r1, r4
  10f00c:	9a000014 	bls	10f064 <_realloc_r+0x1b4>
  10f010:	e5941000 	ldr	r1, [r4]
  10f014:	e352001b 	cmp	r2, #27
  10f018:	928b2010 	addls	r2, fp, #16
  10f01c:	e58b1008 	str	r1, [fp, #8]
  10f020:	e5941004 	ldr	r1, [r4, #4]
  10f024:	e58b100c 	str	r1, [fp, #12]
  10f028:	92841008 	addls	r1, r4, #8
  10f02c:	9a00000c 	bls	10f064 <_realloc_r+0x1b4>
  10f030:	e5941008 	ldr	r1, [r4, #8]
  10f034:	e3520024 	cmp	r2, #36	; 0x24
  10f038:	e58b1010 	str	r1, [fp, #16]
  10f03c:	12841010 	addne	r1, r4, #16
  10f040:	e594200c 	ldr	r2, [r4, #12]
  10f044:	02841018 	addeq	r1, r4, #24
  10f048:	e58b2014 	str	r2, [fp, #20]
  10f04c:	128b2018 	addne	r2, fp, #24
  10f050:	05940010 	ldreq	r0, [r4, #16]
  10f054:	028b2020 	addeq	r2, fp, #32
  10f058:	058b0018 	streq	r0, [fp, #24]
  10f05c:	05940014 	ldreq	r0, [r4, #20]
  10f060:	058b001c 	streq	r0, [fp, #28]
  10f064:	e5910000 	ldr	r0, [r1]
  10f068:	e1a04003 	mov	r4, r3
  10f06c:	e5820000 	str	r0, [r2]
  10f070:	e1a0a00b 	mov	sl, fp
  10f074:	e5913004 	ldr	r3, [r1, #4]
  10f078:	e5823004 	str	r3, [r2, #4]
  10f07c:	e5913008 	ldr	r3, [r1, #8]
  10f080:	e5823008 	str	r3, [r2, #8]
  10f084:	e59b3004 	ldr	r3, [fp, #4]
  10f088:	eaffffa5 	b	10ef24 <_realloc_r+0x74>
  10f08c:	e3c7c003 	bic	ip, r7, #3
  10f090:	e08c7006 	add	r7, ip, r6
  10f094:	e1570001 	cmp	r7, r1
  10f098:	baffffbe 	blt	10ef98 <_realloc_r+0xe8>
  10f09c:	e59e200c 	ldr	r2, [lr, #12]
  10f0a0:	e59e1008 	ldr	r1, [lr, #8]
  10f0a4:	e581200c 	str	r2, [r1, #12]
  10f0a8:	e5821008 	str	r1, [r2, #8]
  10f0ac:	eaffff9c 	b	10ef24 <_realloc_r+0x74>
  10f0b0:	e1530001 	cmp	r3, r1
  10f0b4:	ba000032 	blt	10f184 <_realloc_r+0x2d4>
  10f0b8:	e1a0c00b 	mov	ip, fp
  10f0bc:	e59b100c 	ldr	r1, [fp, #12]
  10f0c0:	e5bc0008 	ldr	r0, [ip, #8]!
  10f0c4:	e2462004 	sub	r2, r6, #4
  10f0c8:	e3520024 	cmp	r2, #36	; 0x24
  10f0cc:	e580100c 	str	r1, [r0, #12]
  10f0d0:	e5810008 	str	r0, [r1, #8]
  10f0d4:	8a000076 	bhi	10f2b4 <_realloc_r+0x404>
  10f0d8:	e3520013 	cmp	r2, #19
  10f0dc:	91a0200c 	movls	r2, ip
  10f0e0:	91a01004 	movls	r1, r4
  10f0e4:	9a000014 	bls	10f13c <_realloc_r+0x28c>
  10f0e8:	e5941000 	ldr	r1, [r4]
  10f0ec:	e352001b 	cmp	r2, #27
  10f0f0:	928b2010 	addls	r2, fp, #16
  10f0f4:	e58b1008 	str	r1, [fp, #8]
  10f0f8:	e5941004 	ldr	r1, [r4, #4]
  10f0fc:	e58b100c 	str	r1, [fp, #12]
  10f100:	92841008 	addls	r1, r4, #8
  10f104:	9a00000c 	bls	10f13c <_realloc_r+0x28c>
  10f108:	e5941008 	ldr	r1, [r4, #8]
  10f10c:	e3520024 	cmp	r2, #36	; 0x24
  10f110:	e58b1010 	str	r1, [fp, #16]
  10f114:	12841010 	addne	r1, r4, #16
  10f118:	e594200c 	ldr	r2, [r4, #12]
  10f11c:	02841018 	addeq	r1, r4, #24
  10f120:	e58b2014 	str	r2, [fp, #20]
  10f124:	128b2018 	addne	r2, fp, #24
  10f128:	05940010 	ldreq	r0, [r4, #16]
  10f12c:	028b2020 	addeq	r2, fp, #32
  10f130:	058b0018 	streq	r0, [fp, #24]
  10f134:	05940014 	ldreq	r0, [r4, #20]
  10f138:	058b001c 	streq	r0, [fp, #28]
  10f13c:	e5910000 	ldr	r0, [r1]
  10f140:	e1a0400c 	mov	r4, ip
  10f144:	e1a07003 	mov	r7, r3
  10f148:	eaffffc7 	b	10f06c <_realloc_r+0x1bc>
  10f14c:	e08a1005 	add	r1, sl, r5
  10f150:	e2033001 	and	r3, r3, #1
  10f154:	e081c002 	add	ip, r1, r2
  10f158:	e1835005 	orr	r5, r3, r5
  10f15c:	e3822001 	orr	r2, r2, #1
  10f160:	e58a5004 	str	r5, [sl, #4]
  10f164:	e5812004 	str	r2, [r1, #4]
  10f168:	e1a00008 	mov	r0, r8
  10f16c:	e59c3004 	ldr	r3, [ip, #4]
  10f170:	e2811008 	add	r1, r1, #8
  10f174:	e3833001 	orr	r3, r3, #1
  10f178:	e58c3004 	str	r3, [ip, #4]
  10f17c:	ebffede5 	bl	10a918 <_free_r>
  10f180:	eaffff71 	b	10ef4c <_realloc_r+0x9c>
  10f184:	e1a00008 	mov	r0, r8
  10f188:	e1a01002 	mov	r1, r2
  10f18c:	ebffef4f 	bl	10aed0 <_malloc_r>
  10f190:	e2507000 	subs	r7, r0, #0
  10f194:	0a000015 	beq	10f1f0 <_realloc_r+0x340>
  10f198:	e5143004 	ldr	r3, [r4, #-4]
  10f19c:	e2471008 	sub	r1, r7, #8
  10f1a0:	e3c32001 	bic	r2, r3, #1
  10f1a4:	e08a2002 	add	r2, sl, r2
  10f1a8:	e1510002 	cmp	r1, r2
  10f1ac:	0a000084 	beq	10f3c4 <_realloc_r+0x514>
  10f1b0:	e2462004 	sub	r2, r6, #4
  10f1b4:	e3520024 	cmp	r2, #36	; 0x24
  10f1b8:	8a000047 	bhi	10f2dc <_realloc_r+0x42c>
  10f1bc:	e3520013 	cmp	r2, #19
  10f1c0:	91a03007 	movls	r3, r7
  10f1c4:	91a02004 	movls	r2, r4
  10f1c8:	8a000023 	bhi	10f25c <_realloc_r+0x3ac>
  10f1cc:	e5921000 	ldr	r1, [r2]
  10f1d0:	e5831000 	str	r1, [r3]
  10f1d4:	e5921004 	ldr	r1, [r2, #4]
  10f1d8:	e5831004 	str	r1, [r3, #4]
  10f1dc:	e5922008 	ldr	r2, [r2, #8]
  10f1e0:	e5832008 	str	r2, [r3, #8]
  10f1e4:	e1a00008 	mov	r0, r8
  10f1e8:	e1a01004 	mov	r1, r4
  10f1ec:	ebffedc9 	bl	10a918 <_free_r>
  10f1f0:	e1a00008 	mov	r0, r8
  10f1f4:	ebfff385 	bl	10c010 <__malloc_unlock>
  10f1f8:	eaffff56 	b	10ef58 <_realloc_r+0xa8>
  10f1fc:	e1a01002 	mov	r1, r2
  10f200:	e28dd00c 	add	sp, sp, #12
  10f204:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  10f208:	eaffef30 	b	10aed0 <_malloc_r>
  10f20c:	e590c004 	ldr	ip, [r0, #4]
  10f210:	e2857010 	add	r7, r5, #16
  10f214:	e3ccc003 	bic	ip, ip, #3
  10f218:	e08ce006 	add	lr, ip, r6
  10f21c:	e15e0007 	cmp	lr, r7
  10f220:	b1a0e000 	movlt	lr, r0
  10f224:	baffff5b 	blt	10ef98 <_realloc_r+0xe8>
  10f228:	e08aa005 	add	sl, sl, r5
  10f22c:	e065300e 	rsb	r3, r5, lr
  10f230:	e3833001 	orr	r3, r3, #1
  10f234:	e1a00008 	mov	r0, r8
  10f238:	e58a3004 	str	r3, [sl, #4]
  10f23c:	e1a07004 	mov	r7, r4
  10f240:	e5143004 	ldr	r3, [r4, #-4]
  10f244:	e589a008 	str	sl, [r9, #8]
  10f248:	e2033001 	and	r3, r3, #1
  10f24c:	e1855003 	orr	r5, r5, r3
  10f250:	e5045004 	str	r5, [r4, #-4]
  10f254:	ebfff36d 	bl	10c010 <__malloc_unlock>
  10f258:	eaffff3e 	b	10ef58 <_realloc_r+0xa8>
  10f25c:	e5943000 	ldr	r3, [r4]
  10f260:	e352001b 	cmp	r2, #27
  10f264:	92842008 	addls	r2, r4, #8
  10f268:	e5873000 	str	r3, [r7]
  10f26c:	e5943004 	ldr	r3, [r4, #4]
  10f270:	e5873004 	str	r3, [r7, #4]
  10f274:	92873008 	addls	r3, r7, #8
  10f278:	9affffd3 	bls	10f1cc <_realloc_r+0x31c>
  10f27c:	e5943008 	ldr	r3, [r4, #8]
  10f280:	e3520024 	cmp	r2, #36	; 0x24
  10f284:	12842010 	addne	r2, r4, #16
  10f288:	02842018 	addeq	r2, r4, #24
  10f28c:	e5873008 	str	r3, [r7, #8]
  10f290:	e594300c 	ldr	r3, [r4, #12]
  10f294:	e587300c 	str	r3, [r7, #12]
  10f298:	12873010 	addne	r3, r7, #16
  10f29c:	05941010 	ldreq	r1, [r4, #16]
  10f2a0:	02873018 	addeq	r3, r7, #24
  10f2a4:	05871010 	streq	r1, [r7, #16]
  10f2a8:	05941014 	ldreq	r1, [r4, #20]
  10f2ac:	05871014 	streq	r1, [r7, #20]
  10f2b0:	eaffffc5 	b	10f1cc <_realloc_r+0x31c>
  10f2b4:	e1a01004 	mov	r1, r4
  10f2b8:	e1a0000c 	mov	r0, ip
  10f2bc:	e58d3004 	str	r3, [sp, #4]
  10f2c0:	e1a0400c 	mov	r4, ip
  10f2c4:	ebfffe9c 	bl	10ed3c <memmove>
  10f2c8:	e59d3004 	ldr	r3, [sp, #4]
  10f2cc:	e1a0a00b 	mov	sl, fp
  10f2d0:	e1a07003 	mov	r7, r3
  10f2d4:	e59b3004 	ldr	r3, [fp, #4]
  10f2d8:	eaffff11 	b	10ef24 <_realloc_r+0x74>
  10f2dc:	e1a01004 	mov	r1, r4
  10f2e0:	ebfffe95 	bl	10ed3c <memmove>
  10f2e4:	eaffffbe 	b	10f1e4 <_realloc_r+0x334>
  10f2e8:	e2850010 	add	r0, r5, #16
  10f2ec:	e08cc003 	add	ip, ip, r3
  10f2f0:	e15c0000 	cmp	ip, r0
  10f2f4:	baffff6d 	blt	10f0b0 <_realloc_r+0x200>
  10f2f8:	e1a0700b 	mov	r7, fp
  10f2fc:	e59b300c 	ldr	r3, [fp, #12]
  10f300:	e5b71008 	ldr	r1, [r7, #8]!
  10f304:	e2462004 	sub	r2, r6, #4
  10f308:	e3520024 	cmp	r2, #36	; 0x24
  10f30c:	e581300c 	str	r3, [r1, #12]
  10f310:	e5831008 	str	r1, [r3, #8]
  10f314:	8a000035 	bhi	10f3f0 <_realloc_r+0x540>
  10f318:	e3520013 	cmp	r2, #19
  10f31c:	91a03007 	movls	r3, r7
  10f320:	91a02004 	movls	r2, r4
  10f324:	9a000014 	bls	10f37c <_realloc_r+0x4cc>
  10f328:	e5943000 	ldr	r3, [r4]
  10f32c:	e352001b 	cmp	r2, #27
  10f330:	92842008 	addls	r2, r4, #8
  10f334:	e58b3008 	str	r3, [fp, #8]
  10f338:	e5943004 	ldr	r3, [r4, #4]
  10f33c:	e58b300c 	str	r3, [fp, #12]
  10f340:	928b3010 	addls	r3, fp, #16
  10f344:	9a00000c 	bls	10f37c <_realloc_r+0x4cc>
  10f348:	e5943008 	ldr	r3, [r4, #8]
  10f34c:	e3520024 	cmp	r2, #36	; 0x24
  10f350:	12842010 	addne	r2, r4, #16
  10f354:	02842018 	addeq	r2, r4, #24
  10f358:	e58b3010 	str	r3, [fp, #16]
  10f35c:	e594300c 	ldr	r3, [r4, #12]
  10f360:	e58b3014 	str	r3, [fp, #20]
  10f364:	128b3018 	addne	r3, fp, #24
  10f368:	05941010 	ldreq	r1, [r4, #16]
  10f36c:	028b3020 	addeq	r3, fp, #32
  10f370:	058b1018 	streq	r1, [fp, #24]
  10f374:	05941014 	ldreq	r1, [r4, #20]
  10f378:	058b101c 	streq	r1, [fp, #28]
  10f37c:	e5921000 	ldr	r1, [r2]
  10f380:	e5831000 	str	r1, [r3]
  10f384:	e5921004 	ldr	r1, [r2, #4]
  10f388:	e5831004 	str	r1, [r3, #4]
  10f38c:	e5922008 	ldr	r2, [r2, #8]
  10f390:	e5832008 	str	r2, [r3, #8]
  10f394:	e08b3005 	add	r3, fp, r5
  10f398:	e065200c 	rsb	r2, r5, ip
  10f39c:	e3822001 	orr	r2, r2, #1
  10f3a0:	e5893008 	str	r3, [r9, #8]
  10f3a4:	e5832004 	str	r2, [r3, #4]
  10f3a8:	e1a00008 	mov	r0, r8
  10f3ac:	e59b2004 	ldr	r2, [fp, #4]
  10f3b0:	e2023001 	and	r3, r2, #1
  10f3b4:	e1855003 	orr	r5, r5, r3
  10f3b8:	e58b5004 	str	r5, [fp, #4]
  10f3bc:	ebfff313 	bl	10c010 <__malloc_unlock>
  10f3c0:	eafffee4 	b	10ef58 <_realloc_r+0xa8>
  10f3c4:	e5177004 	ldr	r7, [r7, #-4]
  10f3c8:	e3c77003 	bic	r7, r7, #3
  10f3cc:	e0877006 	add	r7, r7, r6
  10f3d0:	eafffed3 	b	10ef24 <_realloc_r+0x74>
  10f3d4:	e1a01004 	mov	r1, r4
  10f3d8:	e1a00003 	mov	r0, r3
  10f3dc:	e1a04003 	mov	r4, r3
  10f3e0:	e1a0a00b 	mov	sl, fp
  10f3e4:	ebfffe54 	bl	10ed3c <memmove>
  10f3e8:	e59b3004 	ldr	r3, [fp, #4]
  10f3ec:	eafffecc 	b	10ef24 <_realloc_r+0x74>
  10f3f0:	e1a00007 	mov	r0, r7
  10f3f4:	e1a01004 	mov	r1, r4
  10f3f8:	e58dc004 	str	ip, [sp, #4]
  10f3fc:	ebfffe4e 	bl	10ed3c <memmove>
  10f400:	e59dc004 	ldr	ip, [sp, #4]
  10f404:	eaffffe2 	b	10f394 <_realloc_r+0x4e4>

0010f408 <cleanup_glue>:
  10f408:	e92d4038 	push	{r3, r4, r5, lr}
  10f40c:	e1a04001 	mov	r4, r1
  10f410:	e5911000 	ldr	r1, [r1]
  10f414:	e1a05000 	mov	r5, r0
  10f418:	e3510000 	cmp	r1, #0
  10f41c:	0a000000 	beq	10f424 <cleanup_glue+0x1c>
  10f420:	ebfffff8 	bl	10f408 <cleanup_glue>
  10f424:	e1a00005 	mov	r0, r5
  10f428:	e1a01004 	mov	r1, r4
  10f42c:	e8bd4038 	pop	{r3, r4, r5, lr}
  10f430:	eaffed38 	b	10a918 <_free_r>

0010f434 <_reclaim_reent>:
  10f434:	e30f3c28 	movw	r3, #64552	; 0xfc28
  10f438:	e3403011 	movt	r3, #17
  10f43c:	e92d4070 	push	{r4, r5, r6, lr}
  10f440:	e1a05000 	mov	r5, r0
  10f444:	e5933000 	ldr	r3, [r3]
  10f448:	e1500003 	cmp	r0, r3
  10f44c:	08bd8070 	popeq	{r4, r5, r6, pc}
  10f450:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
  10f454:	e3520000 	cmp	r2, #0
  10f458:	0a000011 	beq	10f4a4 <_reclaim_reent+0x70>
  10f45c:	e3a03000 	mov	r3, #0
  10f460:	e1a06003 	mov	r6, r3
  10f464:	e7921103 	ldr	r1, [r2, r3, lsl #2]
  10f468:	e3510000 	cmp	r1, #0
  10f46c:	0a000005 	beq	10f488 <_reclaim_reent+0x54>
  10f470:	e5914000 	ldr	r4, [r1]
  10f474:	e1a00005 	mov	r0, r5
  10f478:	ebffed26 	bl	10a918 <_free_r>
  10f47c:	e2541000 	subs	r1, r4, #0
  10f480:	1afffffa 	bne	10f470 <_reclaim_reent+0x3c>
  10f484:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
  10f488:	e2866001 	add	r6, r6, #1
  10f48c:	e3560020 	cmp	r6, #32
  10f490:	e1a03006 	mov	r3, r6
  10f494:	1afffff2 	bne	10f464 <_reclaim_reent+0x30>
  10f498:	e1a00005 	mov	r0, r5
  10f49c:	e1a01002 	mov	r1, r2
  10f4a0:	ebffed1c 	bl	10a918 <_free_r>
  10f4a4:	e5951040 	ldr	r1, [r5, #64]	; 0x40
  10f4a8:	e3510000 	cmp	r1, #0
  10f4ac:	0a000001 	beq	10f4b8 <_reclaim_reent+0x84>
  10f4b0:	e1a00005 	mov	r0, r5
  10f4b4:	ebffed17 	bl	10a918 <_free_r>
  10f4b8:	e5951148 	ldr	r1, [r5, #328]	; 0x148
  10f4bc:	e3510000 	cmp	r1, #0
  10f4c0:	0a000008 	beq	10f4e8 <_reclaim_reent+0xb4>
  10f4c4:	e2856f53 	add	r6, r5, #332	; 0x14c
  10f4c8:	e1510006 	cmp	r1, r6
  10f4cc:	0a000005 	beq	10f4e8 <_reclaim_reent+0xb4>
  10f4d0:	e5914000 	ldr	r4, [r1]
  10f4d4:	e1a00005 	mov	r0, r5
  10f4d8:	ebffed0e 	bl	10a918 <_free_r>
  10f4dc:	e1560004 	cmp	r6, r4
  10f4e0:	e1a01004 	mov	r1, r4
  10f4e4:	1afffff9 	bne	10f4d0 <_reclaim_reent+0x9c>
  10f4e8:	e5951054 	ldr	r1, [r5, #84]	; 0x54
  10f4ec:	e3510000 	cmp	r1, #0
  10f4f0:	0a000001 	beq	10f4fc <_reclaim_reent+0xc8>
  10f4f4:	e1a00005 	mov	r0, r5
  10f4f8:	ebffed06 	bl	10a918 <_free_r>
  10f4fc:	e5953038 	ldr	r3, [r5, #56]	; 0x38
  10f500:	e3530000 	cmp	r3, #0
  10f504:	08bd8070 	popeq	{r4, r5, r6, pc}
  10f508:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
  10f50c:	e1a00005 	mov	r0, r5
  10f510:	e12fff33 	blx	r3
  10f514:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
  10f518:	e3510000 	cmp	r1, #0
  10f51c:	08bd8070 	popeq	{r4, r5, r6, pc}
  10f520:	e1a00005 	mov	r0, r5
  10f524:	e8bd4070 	pop	{r4, r5, r6, lr}
  10f528:	eaffffb6 	b	10f408 <cleanup_glue>

0010f52c <_wrapup_reent>:
  10f52c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
  10f530:	e2507000 	subs	r7, r0, #0
  10f534:	030f3c28 	movweq	r3, #64552	; 0xfc28
  10f538:	03403011 	movteq	r3, #17
  10f53c:	05937000 	ldreq	r7, [r3]
  10f540:	e5976148 	ldr	r6, [r7, #328]	; 0x148
  10f544:	e3560000 	cmp	r6, #0
  10f548:	0a00000c 	beq	10f580 <_wrapup_reent+0x54>
  10f54c:	e5965004 	ldr	r5, [r6, #4]
  10f550:	e2554001 	subs	r4, r5, #1
  10f554:	52855002 	addpl	r5, r5, #2
  10f558:	50865105 	addpl	r5, r6, r5, lsl #2
  10f55c:	4a000004 	bmi	10f574 <_wrapup_reent+0x48>
  10f560:	e5353004 	ldr	r3, [r5, #-4]!
  10f564:	e2444001 	sub	r4, r4, #1
  10f568:	e12fff33 	blx	r3
  10f56c:	e3740001 	cmn	r4, #1
  10f570:	1afffffa 	bne	10f560 <_wrapup_reent+0x34>
  10f574:	e5966000 	ldr	r6, [r6]
  10f578:	e3560000 	cmp	r6, #0
  10f57c:	1afffff2 	bne	10f54c <_wrapup_reent+0x20>
  10f580:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
  10f584:	e3530000 	cmp	r3, #0
  10f588:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
  10f58c:	e1a00007 	mov	r0, r7
  10f590:	e12fff33 	blx	r3
  10f594:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

0010f598 <__swbuf_r>:
  10f598:	e92d4070 	push	{r4, r5, r6, lr}
  10f59c:	e2506000 	subs	r6, r0, #0
  10f5a0:	e1a05001 	mov	r5, r1
  10f5a4:	e1a04002 	mov	r4, r2
  10f5a8:	0a000002 	beq	10f5b8 <__swbuf_r+0x20>
  10f5ac:	e5963038 	ldr	r3, [r6, #56]	; 0x38
  10f5b0:	e3530000 	cmp	r3, #0
  10f5b4:	0a00003e 	beq	10f6b4 <__swbuf_r+0x11c>
  10f5b8:	e1d430bc 	ldrh	r3, [r4, #12]
  10f5bc:	e5940018 	ldr	r0, [r4, #24]
  10f5c0:	e2032008 	and	r2, r3, #8
  10f5c4:	e6bf2072 	sxth	r2, r2
  10f5c8:	e5840008 	str	r0, [r4, #8]
  10f5cc:	e3520000 	cmp	r2, #0
  10f5d0:	0a000027 	beq	10f674 <__swbuf_r+0xdc>
  10f5d4:	e5942010 	ldr	r2, [r4, #16]
  10f5d8:	e3520000 	cmp	r2, #0
  10f5dc:	0a000024 	beq	10f674 <__swbuf_r+0xdc>
  10f5e0:	e2031a02 	and	r1, r3, #8192	; 0x2000
  10f5e4:	e6ef5075 	uxtb	r5, r5
  10f5e8:	e6bf1071 	sxth	r1, r1
  10f5ec:	e3510000 	cmp	r1, #0
  10f5f0:	03833a02 	orreq	r3, r3, #8192	; 0x2000
  10f5f4:	01c430bc 	strheq	r3, [r4, #12]
  10f5f8:	05941064 	ldreq	r1, [r4, #100]	; 0x64
  10f5fc:	03c13a02 	biceq	r3, r1, #8192	; 0x2000
  10f600:	05843064 	streq	r3, [r4, #100]	; 0x64
  10f604:	e5943000 	ldr	r3, [r4]
  10f608:	e5941014 	ldr	r1, [r4, #20]
  10f60c:	e0622003 	rsb	r2, r2, r3
  10f610:	e1520001 	cmp	r2, r1
  10f614:	b2822001 	addlt	r2, r2, #1
  10f618:	aa00001d 	bge	10f694 <__swbuf_r+0xfc>
  10f61c:	e5941008 	ldr	r1, [r4, #8]
  10f620:	e2411001 	sub	r1, r1, #1
  10f624:	e5841008 	str	r1, [r4, #8]
  10f628:	e4c35001 	strb	r5, [r3], #1
  10f62c:	e5941014 	ldr	r1, [r4, #20]
  10f630:	e5843000 	str	r3, [r4]
  10f634:	e1510002 	cmp	r1, r2
  10f638:	0a000006 	beq	10f658 <__swbuf_r+0xc0>
  10f63c:	e1d430bc 	ldrh	r3, [r4, #12]
  10f640:	e3130001 	tst	r3, #1
  10f644:	0a000001 	beq	10f650 <__swbuf_r+0xb8>
  10f648:	e355000a 	cmp	r5, #10
  10f64c:	0a000001 	beq	10f658 <__swbuf_r+0xc0>
  10f650:	e1a00005 	mov	r0, r5
  10f654:	e8bd8070 	pop	{r4, r5, r6, pc}
  10f658:	e1a00006 	mov	r0, r6
  10f65c:	e1a01004 	mov	r1, r4
  10f660:	ebffeb2a 	bl	10a310 <_fflush_r>
  10f664:	e3500000 	cmp	r0, #0
  10f668:	0afffff8 	beq	10f650 <__swbuf_r+0xb8>
  10f66c:	e3e05000 	mvn	r5, #0
  10f670:	eafffff6 	b	10f650 <__swbuf_r+0xb8>
  10f674:	e1a00006 	mov	r0, r6
  10f678:	e1a01004 	mov	r1, r4
  10f67c:	ebffe56d 	bl	108c38 <__swsetup_r>
  10f680:	e1d430bc 	ldrh	r3, [r4, #12]
  10f684:	e3500000 	cmp	r0, #0
  10f688:	1a00000b 	bne	10f6bc <__swbuf_r+0x124>
  10f68c:	e5942010 	ldr	r2, [r4, #16]
  10f690:	eaffffd2 	b	10f5e0 <__swbuf_r+0x48>
  10f694:	e1a00006 	mov	r0, r6
  10f698:	e1a01004 	mov	r1, r4
  10f69c:	ebffeb1b 	bl	10a310 <_fflush_r>
  10f6a0:	e3500000 	cmp	r0, #0
  10f6a4:	05943000 	ldreq	r3, [r4]
  10f6a8:	03a02001 	moveq	r2, #1
  10f6ac:	0affffda 	beq	10f61c <__swbuf_r+0x84>
  10f6b0:	eaffffed 	b	10f66c <__swbuf_r+0xd4>
  10f6b4:	ebffebf0 	bl	10a67c <__sinit>
  10f6b8:	eaffffbe 	b	10f5b8 <__swbuf_r+0x20>
  10f6bc:	e3833040 	orr	r3, r3, #64	; 0x40
  10f6c0:	e3e05000 	mvn	r5, #0
  10f6c4:	e1c430bc 	strh	r3, [r4, #12]
  10f6c8:	e3a03009 	mov	r3, #9
  10f6cc:	e5863000 	str	r3, [r6]
  10f6d0:	eaffffde 	b	10f650 <__swbuf_r+0xb8>

0010f6d4 <__swbuf>:
  10f6d4:	e30f3c28 	movw	r3, #64552	; 0xfc28
  10f6d8:	e3403011 	movt	r3, #17
  10f6dc:	e1a0c000 	mov	ip, r0
  10f6e0:	e1a02001 	mov	r2, r1
  10f6e4:	e5930000 	ldr	r0, [r3]
  10f6e8:	e1a0100c 	mov	r1, ip
  10f6ec:	eaffffa9 	b	10f598 <__swbuf_r>

0010f6f0 <_wcrtomb_r>:
  10f6f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  10f6f4:	e2516000 	subs	r6, r1, #0
  10f6f8:	e24dd018 	sub	sp, sp, #24
  10f6fc:	e1a04000 	mov	r4, r0
  10f700:	e1a07002 	mov	r7, r2
  10f704:	e1a05003 	mov	r5, r3
  10f708:	0a000010 	beq	10f750 <_wcrtomb_r+0x60>
  10f70c:	e300c4e4 	movw	ip, #1252	; 0x4e4
  10f710:	e340c012 	movt	ip, #18
  10f714:	e59c8000 	ldr	r8, [ip]
  10f718:	ebffed75 	bl	10acf4 <__locale_charset>
  10f71c:	e58d5000 	str	r5, [sp]
  10f720:	e1a01006 	mov	r1, r6
  10f724:	e1a02007 	mov	r2, r7
  10f728:	e1a03000 	mov	r3, r0
  10f72c:	e1a00004 	mov	r0, r4
  10f730:	e12fff38 	blx	r8
  10f734:	e3700001 	cmn	r0, #1
  10f738:	03a03000 	moveq	r3, #0
  10f73c:	05853000 	streq	r3, [r5]
  10f740:	03a0308a 	moveq	r3, #138	; 0x8a
  10f744:	05843000 	streq	r3, [r4]
  10f748:	e28dd018 	add	sp, sp, #24
  10f74c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  10f750:	e30034e4 	movw	r3, #1252	; 0x4e4
  10f754:	e3403012 	movt	r3, #18
  10f758:	e5937000 	ldr	r7, [r3]
  10f75c:	ebffed64 	bl	10acf4 <__locale_charset>
  10f760:	e58d5000 	str	r5, [sp]
  10f764:	e28d100c 	add	r1, sp, #12
  10f768:	e1a02006 	mov	r2, r6
  10f76c:	e1a03000 	mov	r3, r0
  10f770:	e1a00004 	mov	r0, r4
  10f774:	e12fff37 	blx	r7
  10f778:	eaffffed 	b	10f734 <_wcrtomb_r+0x44>

0010f77c <wcrtomb>:
  10f77c:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
  10f780:	e2506000 	subs	r6, r0, #0
  10f784:	e30f4c28 	movw	r4, #64552	; 0xfc28
  10f788:	e30034e4 	movw	r3, #1252	; 0x4e4
  10f78c:	e24dd01c 	sub	sp, sp, #28
  10f790:	e3404011 	movt	r4, #17
  10f794:	e3403012 	movt	r3, #18
  10f798:	e1a07001 	mov	r7, r1
  10f79c:	e1a05002 	mov	r5, r2
  10f7a0:	0a000010 	beq	10f7e8 <wcrtomb+0x6c>
  10f7a4:	e594a000 	ldr	sl, [r4]
  10f7a8:	e5938000 	ldr	r8, [r3]
  10f7ac:	ebffed50 	bl	10acf4 <__locale_charset>
  10f7b0:	e58d5000 	str	r5, [sp]
  10f7b4:	e1a01006 	mov	r1, r6
  10f7b8:	e1a02007 	mov	r2, r7
  10f7bc:	e1a03000 	mov	r3, r0
  10f7c0:	e1a0000a 	mov	r0, sl
  10f7c4:	e12fff38 	blx	r8
  10f7c8:	e3700001 	cmn	r0, #1
  10f7cc:	05943000 	ldreq	r3, [r4]
  10f7d0:	03a02000 	moveq	r2, #0
  10f7d4:	05852000 	streq	r2, [r5]
  10f7d8:	03a0208a 	moveq	r2, #138	; 0x8a
  10f7dc:	05832000 	streq	r2, [r3]
  10f7e0:	e28dd01c 	add	sp, sp, #28
  10f7e4:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, sl, pc}
  10f7e8:	e5948000 	ldr	r8, [r4]
  10f7ec:	e5937000 	ldr	r7, [r3]
  10f7f0:	ebffed3f 	bl	10acf4 <__locale_charset>
  10f7f4:	e58d5000 	str	r5, [sp]
  10f7f8:	e28d100c 	add	r1, sp, #12
  10f7fc:	e1a02006 	mov	r2, r6
  10f800:	e1a03000 	mov	r3, r0
  10f804:	e1a00008 	mov	r0, r8
  10f808:	e12fff37 	blx	r7
  10f80c:	eaffffed 	b	10f7c8 <wcrtomb+0x4c>

0010f810 <__ascii_wctomb>:
  10f810:	e3510000 	cmp	r1, #0
  10f814:	e1a03000 	mov	r3, r0
  10f818:	0a000006 	beq	10f838 <__ascii_wctomb+0x28>
  10f81c:	e35200ff 	cmp	r2, #255	; 0xff
  10f820:	95c12000 	strbls	r2, [r1]
  10f824:	83e00000 	mvnhi	r0, #0
  10f828:	83a0208a 	movhi	r2, #138	; 0x8a
  10f82c:	85832000 	strhi	r2, [r3]
  10f830:	93a00001 	movls	r0, #1
  10f834:	e12fff1e 	bx	lr
  10f838:	e1a00001 	mov	r0, r1
  10f83c:	e12fff1e 	bx	lr

0010f840 <_wctomb_r>:
  10f840:	e300c4e4 	movw	ip, #1252	; 0x4e4
  10f844:	e340c012 	movt	ip, #18
  10f848:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  10f84c:	e24dd008 	sub	sp, sp, #8
  10f850:	e1a05003 	mov	r5, r3
  10f854:	e1a06000 	mov	r6, r0
  10f858:	e1a08001 	mov	r8, r1
  10f85c:	e1a07002 	mov	r7, r2
  10f860:	e59c4000 	ldr	r4, [ip]
  10f864:	ebffed22 	bl	10acf4 <__locale_charset>
  10f868:	e58d5000 	str	r5, [sp]
  10f86c:	e1a01008 	mov	r1, r8
  10f870:	e1a02007 	mov	r2, r7
  10f874:	e1a03000 	mov	r3, r0
  10f878:	e1a00006 	mov	r0, r6
  10f87c:	e12fff34 	blx	r4
  10f880:	e28dd008 	add	sp, sp, #8
  10f884:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0010f888 <_exit>:
#include <unistd.h>

/* _exit - Simple implementation. Does not return.
*/
void _exit (int status)
{
  10f888:	eafffffe 	b	10f888 <_exit>

0010f88c <_sbrk>:
caddr_t _sbrk ( int incr )
{
  static unsigned char *heap = NULL;
  unsigned char *prev_heap;

  if (heap == NULL) {
  10f88c:	e3082088 	movw	r2, #32904	; 0x8088
  10f890:	e3402012 	movt	r2, #18
  10f894:	e30810d0 	movw	r1, #32976	; 0x80d0
  10f898:	e3401012 	movt	r1, #18
  10f89c:	e5923000 	ldr	r3, [r2]
  10f8a0:	e3530000 	cmp	r3, #0
  10f8a4:	01a03001 	moveq	r3, r1
    heap = (unsigned char *)&_heap_start;
  }
  prev_heap = heap;

  heap += incr;
  10f8a8:	e0830000 	add	r0, r3, r0
  10f8ac:	e5820000 	str	r0, [r2]
/*  if ((unsigned)heap > (unsigned)_heap_end){
	  return (caddr_t) -1;
  }*/

  return (caddr_t) prev_heap;
}
  10f8b0:	e1a00003 	mov	r0, r3
  10f8b4:	e12fff1e 	bx	lr

0010f8b8 <_close>:

int _close(int fd)
{
  (void)fd;
  return (0);
}
  10f8b8:	e3a00000 	mov	r0, #0
  10f8bc:	e12fff1e 	bx	lr

0010f8c0 <_fstat>:
 * fstat -- Since we have no file system, we just return an error.
 */
int _fstat(int fd, struct stat *buf)
{
  (void)fd;
  buf->st_mode = S_IFCHR; /* Always pretend to be a tty */
  10f8c0:	e3a03a02 	mov	r3, #8192	; 0x2000

  return (0);
}
  10f8c4:	e3a00000 	mov	r0, #0
 * fstat -- Since we have no file system, we just return an error.
 */
int _fstat(int fd, struct stat *buf)
{
  (void)fd;
  buf->st_mode = S_IFCHR; /* Always pretend to be a tty */
  10f8c8:	e5813004 	str	r3, [r1, #4]

  return (0);
}
  10f8cc:	e12fff1e 	bx	lr

0010f8d0 <isatty>:
 */
int isatty(int fd)
{
  (void)fd;
  return (1);
}
  10f8d0:	e3a00001 	mov	r0, #1
  10f8d4:	e12fff1e 	bx	lr

0010f8d8 <_isatty>:

int _isatty(int fd)
{
  (void)fd;
  return (1);
}
  10f8d8:	e3a00001 	mov	r0, #1
  10f8dc:	e12fff1e 	bx	lr

0010f8e0 <lseek>:
#endif
/*
 * lseek --  Since a serial port is non-seekable, we return an error.
 */
off_t lseek(int fd, off_t offset, int whence)
{
  10f8e0:	e92d4008 	push	{r3, lr}
  (void)fd;
  (void)offset;
  (void)whence;
  errno = ESPIPE;
  10f8e4:	eb000055 	bl	10fa40 <__errno>
  10f8e8:	e3a0301d 	mov	r3, #29
  10f8ec:	e5803000 	str	r3, [r0]
  return ((off_t)-1);
}
  10f8f0:	e3e00000 	mvn	r0, #0
  10f8f4:	e8bd8008 	pop	{r3, pc}

0010f8f8 <_lseek>:

off_t _lseek(int fd, off_t offset, int whence)
{
  10f8f8:	e92d4008 	push	{r3, lr}
  (void)fd;
  (void)offset;
  (void)whence;
  errno = ESPIPE;
  10f8fc:	eb00004f 	bl	10fa40 <__errno>
  10f900:	e3a0301d 	mov	r3, #29
  10f904:	e5803000 	str	r3, [r0]
  return ((off_t)-1);
}
  10f908:	e3e00000 	mvn	r0, #0
  10f90c:	e8bd8008 	pop	{r3, pc}

0010f910 <read>:
 * read  -- read bytes from the serial port. Ignore fd, since
 *          we only have stdin.
 */
int
read (int fd, char* buf, int nbytes)
{
  10f910:	e92d4070 	push	{r4, r5, r6, lr}
#ifdef STDIN_BASEADDRESS
  int i = 0;

  (void)fd;
  for (i = 0; i < nbytes; i++) {
  10f914:	e2526000 	subs	r6, r2, #0
 * read  -- read bytes from the serial port. Ignore fd, since
 *          we only have stdin.
 */
int
read (int fd, char* buf, int nbytes)
{
  10f918:	e1a05001 	mov	r5, r1
#ifdef STDIN_BASEADDRESS
  int i = 0;

  (void)fd;
  for (i = 0; i < nbytes; i++) {
  10f91c:	da00000b 	ble	10f950 <read+0x40>
  10f920:	e3a04000 	mov	r4, #0
  10f924:	ea000002 	b	10f934 <read+0x24>
  10f928:	e2844001 	add	r4, r4, #1
  10f92c:	e1540006 	cmp	r4, r6
  10f930:	0a000004 	beq	10f948 <read+0x38>
    *(buf + i) = inbyte();
  10f934:	eb000045 	bl	10fa50 <inbyte>
    if ((*(buf + i) == '\n' || *(buf + i) == '\r'))
  10f938:	e350000a 	cmp	r0, #10
  10f93c:	1350000d 	cmpne	r0, #13
#ifdef STDIN_BASEADDRESS
  int i = 0;

  (void)fd;
  for (i = 0; i < nbytes; i++) {
    *(buf + i) = inbyte();
  10f940:	e7c50004 	strb	r0, [r5, r4]
    if ((*(buf + i) == '\n' || *(buf + i) == '\r'))
  10f944:	1afffff7 	bne	10f928 <read+0x18>
  10f948:	e2840001 	add	r0, r4, #1
  10f94c:	e8bd8070 	pop	{r4, r5, r6, pc}
{
#ifdef STDIN_BASEADDRESS
  int i = 0;

  (void)fd;
  for (i = 0; i < nbytes; i++) {
  10f950:	e3a00001 	mov	r0, #1
  (void)fd;
  (void)buf;
  (void)nbytes;
  return 0;
#endif
}
  10f954:	e8bd8070 	pop	{r4, r5, r6, pc}

0010f958 <_read>:

int
_read (int fd, char* buf, int nbytes)
{
  10f958:	e92d4070 	push	{r4, r5, r6, lr}
#ifdef STDIN_BASEADDRESS
  int i = 0;

  (void)fd;
  for (i = 0; i < nbytes; i++) {
  10f95c:	e2526000 	subs	r6, r2, #0
#endif
}

int
_read (int fd, char* buf, int nbytes)
{
  10f960:	e1a05001 	mov	r5, r1
#ifdef STDIN_BASEADDRESS
  int i = 0;

  (void)fd;
  for (i = 0; i < nbytes; i++) {
  10f964:	da00000b 	ble	10f998 <_read+0x40>
  10f968:	e3a04000 	mov	r4, #0
  10f96c:	ea000002 	b	10f97c <_read+0x24>
  10f970:	e2844001 	add	r4, r4, #1
  10f974:	e1540006 	cmp	r4, r6
  10f978:	0a000004 	beq	10f990 <_read+0x38>
    *(buf + i) = inbyte();
  10f97c:	eb000033 	bl	10fa50 <inbyte>
    if ((*(buf + i) == '\n' || *(buf + i) == '\r'))
  10f980:	e350000a 	cmp	r0, #10
  10f984:	1350000d 	cmpne	r0, #13
#ifdef STDIN_BASEADDRESS
  int i = 0;

  (void)fd;
  for (i = 0; i < nbytes; i++) {
    *(buf + i) = inbyte();
  10f988:	e7c50004 	strb	r0, [r5, r4]
    if ((*(buf + i) == '\n' || *(buf + i) == '\r'))
  10f98c:	1afffff7 	bne	10f970 <_read+0x18>
  10f990:	e2840001 	add	r0, r4, #1
  10f994:	e8bd8070 	pop	{r4, r5, r6, pc}
{
#ifdef STDIN_BASEADDRESS
  int i = 0;

  (void)fd;
  for (i = 0; i < nbytes; i++) {
  10f998:	e3a00001 	mov	r0, #1
  (void)fd;
  (void)buf;
  (void)nbytes;
  return 0;
#endif
}
  10f99c:	e8bd8070 	pop	{r4, r5, r6, pc}

0010f9a0 <write>:
 *          open will only return an error.
 */
int
write (int fd, char* buf, int nbytes)

{
  10f9a0:	e92d4070 	push	{r4, r5, r6, lr}
#ifdef STDOUT_BASEADDRESS
  int i;

  (void)fd;
  for (i = 0; i < nbytes; i++) {
  10f9a4:	e2526000 	subs	r6, r2, #0
  10f9a8:	da00000e 	ble	10f9e8 <write+0x48>
  10f9ac:	e1a04001 	mov	r4, r1
 * write -- write bytes to the serial port. Ignore fd, since
 *          stdout and stderr are the same. Since we have no filesystem,
 *          open will only return an error.
 */
int
write (int fd, char* buf, int nbytes)
  10f9b0:	e0815006 	add	r5, r1, r6
  10f9b4:	ea000002 	b	10f9c4 <write+0x24>
  (void)fd;
  for (i = 0; i < nbytes; i++) {
    if (*(buf + i) == '\n') {
      outbyte ('\r');
    }
    outbyte (*(buf + i));
  10f9b8:	ebffd888 	bl	105be0 <outbyte>
{
#ifdef STDOUT_BASEADDRESS
  int i;

  (void)fd;
  for (i = 0; i < nbytes; i++) {
  10f9bc:	e1540005 	cmp	r4, r5
  10f9c0:	0a000008 	beq	10f9e8 <write+0x48>
    if (*(buf + i) == '\n') {
  10f9c4:	e4d40001 	ldrb	r0, [r4], #1
  10f9c8:	e350000a 	cmp	r0, #10
  10f9cc:	1afffff9 	bne	10f9b8 <write+0x18>
      outbyte ('\r');
  10f9d0:	e3a0000d 	mov	r0, #13
  10f9d4:	ebffd881 	bl	105be0 <outbyte>
  10f9d8:	e5540001 	ldrb	r0, [r4, #-1]
    }
    outbyte (*(buf + i));
  10f9dc:	ebffd87f 	bl	105be0 <outbyte>
{
#ifdef STDOUT_BASEADDRESS
  int i;

  (void)fd;
  for (i = 0; i < nbytes; i++) {
  10f9e0:	e1540005 	cmp	r4, r5
  10f9e4:	1afffff6 	bne	10f9c4 <write+0x24>
  (void)fd;
  (void)buf;
  (void)nbytes;
  return 0;
#endif
}
  10f9e8:	e1a00006 	mov	r0, r6
  10f9ec:	e8bd8070 	pop	{r4, r5, r6, pc}

0010f9f0 <_write>:

int
_write (int fd, char* buf, int nbytes)
{
  10f9f0:	e92d4070 	push	{r4, r5, r6, lr}
#ifdef STDOUT_BASEADDRESS
  int i;

  (void)fd;
  for (i = 0; i < nbytes; i++) {
  10f9f4:	e2526000 	subs	r6, r2, #0
  10f9f8:	da00000e 	ble	10fa38 <_write+0x48>
  10f9fc:	e1a04001 	mov	r4, r1
  return 0;
#endif
}

int
_write (int fd, char* buf, int nbytes)
  10fa00:	e0815006 	add	r5, r1, r6
  10fa04:	ea000002 	b	10fa14 <_write+0x24>
  (void)fd;
  for (i = 0; i < nbytes; i++) {
    if (*(buf + i) == '\n') {
      outbyte ('\r');
    }
    outbyte (*(buf + i));
  10fa08:	ebffd874 	bl	105be0 <outbyte>
{
#ifdef STDOUT_BASEADDRESS
  int i;

  (void)fd;
  for (i = 0; i < nbytes; i++) {
  10fa0c:	e1540005 	cmp	r4, r5
  10fa10:	0a000008 	beq	10fa38 <_write+0x48>
    if (*(buf + i) == '\n') {
  10fa14:	e4d40001 	ldrb	r0, [r4], #1
  10fa18:	e350000a 	cmp	r0, #10
  10fa1c:	1afffff9 	bne	10fa08 <_write+0x18>
      outbyte ('\r');
  10fa20:	e3a0000d 	mov	r0, #13
  10fa24:	ebffd86d 	bl	105be0 <outbyte>
  10fa28:	e5540001 	ldrb	r0, [r4, #-1]
    }
    outbyte (*(buf + i));
  10fa2c:	ebffd86b 	bl	105be0 <outbyte>
{
#ifdef STDOUT_BASEADDRESS
  int i;

  (void)fd;
  for (i = 0; i < nbytes; i++) {
  10fa30:	e1540005 	cmp	r4, r5
  10fa34:	1afffff6 	bne	10fa14 <_write+0x24>
  (void)fd;
  (void)buf;
  (void)nbytes;
  return 0;
#endif
}
  10fa38:	e1a00006 	mov	r0, r6
  10fa3c:	e8bd8070 	pop	{r4, r5, r6, pc}

0010fa40 <__errno>:
#endif

int *
__errno ()
{
  return &_REENT->_errno;
  10fa40:	e30f3c28 	movw	r3, #64552	; 0xfc28
  10fa44:	e3403011 	movt	r3, #17
}
  10fa48:	e5930000 	ldr	r0, [r3]
  10fa4c:	e12fff1e 	bx	lr

0010fa50 <inbyte>:
#ifdef __cplusplus
}
#endif 

char inbyte(void) {
	 return XUartPs_RecvByte(STDIN_BASEADDRESS);
  10fa50:	e3a00a01 	mov	r0, #4096	; 0x1000
  10fa54:	e34e0000 	movt	r0, #57344	; 0xe000
  10fa58:	eaffd870 	b	105c20 <XUartPs_RecvByte>

0010fa5c <main>:
It lasts 6842713 cycles, 20528 us, 0 second
arm_cmplx_mult_cmplx_f32_dot2 result: real part:26648846142537728.000000, imaginary part:1172229066229547008.000000

*/
int main()
{
  10fa5c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  10fa60:	e24dd00c 	sub	sp, sp, #12

    init_platform();
  10fa64:	ebffd379 	bl	104850 <init_platform>
	
	xil_printf("CPU frequency: %dHz=%dMHz.\n\r", 
  10fa68:	e30f0ee4 	movw	r0, #65252	; 0xfee4
  10fa6c:	e30816bf 	movw	r1, #34495	; 0x86bf
  10fa70:	e3400010 	movt	r0, #16
  10fa74:	e34217bc 	movt	r1, #10172	; 0x27bc
  10fa78:	e300229a 	movw	r2, #666	; 0x29a

		Begin to measure time for function:sp_cmplx_vector_dot_mul_dsp_concept
		Test number:10000, test parameter:1024=0x00000400
		It lasts 139601313 cycles, 279202 us, 0 second
	*/
	print_measure_func( sp_cmplx_vector_dot_mul );
  10fa7c:	e30f4f2c 	movw	r4, #65324	; 0xff2c
int main()
{

    init_platform();
	
	xil_printf("CPU frequency: %dHz=%dMHz.\n\r", 
  10fa80:	ebffd70e 	bl	1056c0 <xil_printf>
				XPAR_CPU_CORTEXA9_CORE_CLOCK_FREQ_HZ, XPAR_CPU_CORTEXA9_CORE_CLOCK_FREQ_HZ/1000000 );
	xil_printf("Global Timer frequency: %dHz=%dMHz.\n\r", 
  10fa84:	e30f0f04 	movw	r0, #65284	; 0xff04
  10fa88:	e304135f 	movw	r1, #17247	; 0x435f
  10fa8c:	e3400010 	movt	r0, #16
  10fa90:	e34113de 	movt	r1, #5086	; 0x13de
  10fa94:	e300214d 	movw	r2, #333	; 0x14d

		Begin to measure time for function:sp_cmplx_vector_dot_mul_dsp_concept
		Test number:10000, test parameter:1024=0x00000400
		It lasts 139601313 cycles, 279202 us, 0 second
	*/
	print_measure_func( sp_cmplx_vector_dot_mul );
  10fa98:	e3015d00 	movw	r5, #7424	; 0x1d00

    init_platform();
	
	xil_printf("CPU frequency: %dHz=%dMHz.\n\r", 
				XPAR_CPU_CORTEXA9_CORE_CLOCK_FREQ_HZ, XPAR_CPU_CORTEXA9_CORE_CLOCK_FREQ_HZ/1000000 );
	xil_printf("Global Timer frequency: %dHz=%dMHz.\n\r", 
  10fa9c:	ebffd707 	bl	1056c0 <xil_printf>

		Begin to measure time for function:sp_cmplx_vector_dot_mul_dsp_concept
		Test number:10000, test parameter:1024=0x00000400
		It lasts 139601313 cycles, 279202 us, 0 second
	*/
	print_measure_func( sp_cmplx_vector_dot_mul );
  10faa0:	e3404010 	movt	r4, #16
  10faa4:	e3405010 	movt	r5, #16
	xil_printf("CPU frequency: %dHz=%dMHz.\n\r", 
				XPAR_CPU_CORTEXA9_CORE_CLOCK_FREQ_HZ, XPAR_CPU_CORTEXA9_CORE_CLOCK_FREQ_HZ/1000000 );
	xil_printf("Global Timer frequency: %dHz=%dMHz.\n\r", 
				COUNTS_PER_SECOND, COUNTS_PER_SECOND/1000000 );

	sp_cmplx_vector_init( );
  10faa8:	ebffc8fd 	bl	101ea4 <sp_cmplx_vector_init>

		Begin to measure time for function:sp_cmplx_vector_dot_mul_dsp_concept
		Test number:10000, test parameter:1024=0x00000400
		It lasts 139601313 cycles, 279202 us, 0 second
	*/
	print_measure_func( sp_cmplx_vector_dot_mul );
  10faac:	e30f1f60 	movw	r1, #65376	; 0xff60
  10fab0:	e1a02005 	mov	r2, r5
  10fab4:	e1a00004 	mov	r0, r4
  10fab8:	e3401010 	movt	r1, #16
  10fabc:	ebffd6ff 	bl	1056c0 <xil_printf>
	func2_time_measure( sp_cmplx_vector_dot_mul, 498, 1000);
  10fac0:	e1a00005 	mov	r0, r5
  10fac4:	e30011f2 	movw	r1, #498	; 0x1f2
  10fac8:	e3a02ffa 	mov	r2, #1000	; 0x3e8
	printf("sp_cmplx_vector_dot_mul result: real part:%f, imaginary part:%f\n\r\n\r", 
  10facc:	e30f6f78 	movw	r6, #65400	; 0xff78
		Begin to measure time for function:sp_cmplx_vector_dot_mul_dsp_concept
		Test number:10000, test parameter:1024=0x00000400
		It lasts 139601313 cycles, 279202 us, 0 second
	*/
	print_measure_func( sp_cmplx_vector_dot_mul );
	func2_time_measure( sp_cmplx_vector_dot_mul, 498, 1000);
  10fad0:	ebffca26 	bl	102370 <func2_time_measure>
	printf("sp_cmplx_vector_dot_mul result: real part:%f, imaginary part:%f\n\r\n\r", 
				gf_sum[0], gf_sum[1] );
  10fad4:	e3093010 	movw	r3, #36880	; 0x9010
		Test number:10000, test parameter:1024=0x00000400
		It lasts 139601313 cycles, 279202 us, 0 second
	*/
	print_measure_func( sp_cmplx_vector_dot_mul );
	func2_time_measure( sp_cmplx_vector_dot_mul, 498, 1000);
	printf("sp_cmplx_vector_dot_mul result: real part:%f, imaginary part:%f\n\r\n\r", 
  10fad8:	e3406010 	movt	r6, #16
				gf_sum[0], gf_sum[1] );
  10fadc:	e3403000 	movt	r3, #0
		Test number:10000, test parameter:1024=0x00000400
		It lasts 139601313 cycles, 279202 us, 0 second
	*/
	print_measure_func( sp_cmplx_vector_dot_mul );
	func2_time_measure( sp_cmplx_vector_dot_mul, 498, 1000);
	printf("sp_cmplx_vector_dot_mul result: real part:%f, imaginary part:%f\n\r\n\r", 
  10fae0:	e1a00006 	mov	r0, r6
  10fae4:	ed937a01 	vldr	s14, [r3, #4]
				gf_sum[0], gf_sum[1] );

	print_measure_func( sp_cmplx_vector_dot_mul_dsp_concept );
  10fae8:	e30177ac 	movw	r7, #6060	; 0x17ac
		Test number:10000, test parameter:1024=0x00000400
		It lasts 139601313 cycles, 279202 us, 0 second
	*/
	print_measure_func( sp_cmplx_vector_dot_mul );
	func2_time_measure( sp_cmplx_vector_dot_mul, 498, 1000);
	printf("sp_cmplx_vector_dot_mul result: real part:%f, imaginary part:%f\n\r\n\r", 
  10faec:	edd37a00 	vldr	s15, [r3]
				gf_sum[0], gf_sum[1] );

	print_measure_func( sp_cmplx_vector_dot_mul_dsp_concept );
  10faf0:	e3407010 	movt	r7, #16
	func2_time_measure( sp_cmplx_vector_dot_mul_dsp_concept, 498, 1000);
	printf("sp_cmplx_vector_dot_mul result: real part:%f, imaginary part:%f\n\r\n\r", 
				gf_sum_dsp_concept[0], gf_sum_dsp_concept[1] );

	 print_measure_func( arm_cmplx_mult_cmplx_f32_dot2 );
  10faf4:	e30157cc 	movw	r5, #6092	; 0x17cc
  10faf8:	e3405010 	movt	r5, #16
		Test number:10000, test parameter:1024=0x00000400
		It lasts 139601313 cycles, 279202 us, 0 second
	*/
	print_measure_func( sp_cmplx_vector_dot_mul );
	func2_time_measure( sp_cmplx_vector_dot_mul, 498, 1000);
	printf("sp_cmplx_vector_dot_mul result: real part:%f, imaginary part:%f\n\r\n\r", 
  10fafc:	eef70ac7 	vcvt.f64.f32	d16, s14
  10fb00:	eef71ae7 	vcvt.f64.f32	d17, s15
  10fb04:	edcd0b00 	vstr	d16, [sp]
  10fb08:	ec532b31 	vmov	r2, r3, d17
  10fb0c:	ebffdb89 	bl	106938 <printf>
				gf_sum[0], gf_sum[1] );

	print_measure_func( sp_cmplx_vector_dot_mul_dsp_concept );
  10fb10:	e30f1fbc 	movw	r1, #65468	; 0xffbc
  10fb14:	e1a02007 	mov	r2, r7
  10fb18:	e1a00004 	mov	r0, r4
  10fb1c:	e3401010 	movt	r1, #16
  10fb20:	ebffd6e6 	bl	1056c0 <xil_printf>
	func2_time_measure( sp_cmplx_vector_dot_mul_dsp_concept, 498, 1000);
  10fb24:	e1a00007 	mov	r0, r7
  10fb28:	e30011f2 	movw	r1, #498	; 0x1f2
  10fb2c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  10fb30:	ebffca0e 	bl	102370 <func2_time_measure>
	printf("sp_cmplx_vector_dot_mul result: real part:%f, imaginary part:%f\n\r\n\r", 
				gf_sum_dsp_concept[0], gf_sum_dsp_concept[1] );
  10fb34:	e3093000 	movw	r3, #36864	; 0x9000
	printf("sp_cmplx_vector_dot_mul result: real part:%f, imaginary part:%f\n\r\n\r", 
				gf_sum[0], gf_sum[1] );

	print_measure_func( sp_cmplx_vector_dot_mul_dsp_concept );
	func2_time_measure( sp_cmplx_vector_dot_mul_dsp_concept, 498, 1000);
	printf("sp_cmplx_vector_dot_mul result: real part:%f, imaginary part:%f\n\r\n\r", 
  10fb38:	e1a00006 	mov	r0, r6
				gf_sum_dsp_concept[0], gf_sum_dsp_concept[1] );
  10fb3c:	e3403000 	movt	r3, #0
	printf("sp_cmplx_vector_dot_mul result: real part:%f, imaginary part:%f\n\r\n\r", 
				gf_sum[0], gf_sum[1] );

	print_measure_func( sp_cmplx_vector_dot_mul_dsp_concept );
	func2_time_measure( sp_cmplx_vector_dot_mul_dsp_concept, 498, 1000);
	printf("sp_cmplx_vector_dot_mul result: real part:%f, imaginary part:%f\n\r\n\r", 
  10fb40:	ed937a01 	vldr	s14, [r3, #4]
  10fb44:	edd37a00 	vldr	s15, [r3]
  10fb48:	eef70ac7 	vcvt.f64.f32	d16, s14
  10fb4c:	eef71ae7 	vcvt.f64.f32	d17, s15
  10fb50:	edcd0b00 	vstr	d16, [sp]
  10fb54:	ec532b31 	vmov	r2, r3, d17
  10fb58:	ebffdb76 	bl	106938 <printf>
				gf_sum_dsp_concept[0], gf_sum_dsp_concept[1] );

	 print_measure_func( arm_cmplx_mult_cmplx_f32_dot2 );
  10fb5c:	e30f1fe0 	movw	r1, #65504	; 0xffe0
  10fb60:	e1a02005 	mov	r2, r5
  10fb64:	e1a00004 	mov	r0, r4
  10fb68:	e3401010 	movt	r1, #16
  10fb6c:	ebffd6d3 	bl	1056c0 <xil_printf>
	 func2_time_measure( arm_cmplx_mult_cmplx_f32_dot2, 498, 1000);
  10fb70:	e30011f2 	movw	r1, #498	; 0x1f2
  10fb74:	e1a00005 	mov	r0, r5
  10fb78:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  10fb7c:	ebffc9fb 	bl	102370 <func2_time_measure>
	 printf("arm_cmplx_mult_cmplx_f32_dot2 result: real part:%f, imaginary part:%f\n\r\n\r", 
				 gf_sum_dsp_concept2[0], gf_sum_dsp_concept2[1] );
  10fb80:	e3093008 	movw	r3, #36872	; 0x9008
	printf("sp_cmplx_vector_dot_mul result: real part:%f, imaginary part:%f\n\r\n\r", 
				gf_sum_dsp_concept[0], gf_sum_dsp_concept[1] );

	 print_measure_func( arm_cmplx_mult_cmplx_f32_dot2 );
	 func2_time_measure( arm_cmplx_mult_cmplx_f32_dot2, 498, 1000);
	 printf("arm_cmplx_mult_cmplx_f32_dot2 result: real part:%f, imaginary part:%f\n\r\n\r", 
  10fb84:	e3000000 	movw	r0, #0
				 gf_sum_dsp_concept2[0], gf_sum_dsp_concept2[1] );
  10fb88:	e3403000 	movt	r3, #0
	printf("sp_cmplx_vector_dot_mul result: real part:%f, imaginary part:%f\n\r\n\r", 
				gf_sum_dsp_concept[0], gf_sum_dsp_concept[1] );

	 print_measure_func( arm_cmplx_mult_cmplx_f32_dot2 );
	 func2_time_measure( arm_cmplx_mult_cmplx_f32_dot2, 498, 1000);
	 printf("arm_cmplx_mult_cmplx_f32_dot2 result: real part:%f, imaginary part:%f\n\r\n\r", 
  10fb8c:	e3400011 	movt	r0, #17
  10fb90:	ed937a01 	vldr	s14, [r3, #4]
  10fb94:	edd37a00 	vldr	s15, [r3]
  10fb98:	eef70ac7 	vcvt.f64.f32	d16, s14
  10fb9c:	eef71ae7 	vcvt.f64.f32	d17, s15
  10fba0:	edcd0b00 	vstr	d16, [sp]
  10fba4:	ec532b31 	vmov	r2, r3, d17
  10fba8:	ebffdb62 	bl	106938 <printf>
				 gf_sum_dsp_concept2[0], gf_sum_dsp_concept2[1] );
	 

   	 cleanup_platform();
  10fbac:	ebffd328 	bl	104854 <cleanup_platform>

    return 0;
}
  10fbb0:	e3a00000 	mov	r0, #0
  10fbb4:	e28dd00c 	add	sp, sp, #12
  10fbb8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0010fbbc <register_fini>:
  10fbbc:	e3003000 	movw	r3, #0
  10fbc0:	e3403000 	movt	r3, #0
  10fbc4:	e3530000 	cmp	r3, #0
  10fbc8:	012fff1e 	bxeq	lr
  10fbcc:	e306084c 	movw	r0, #26700	; 0x684c
  10fbd0:	e3400010 	movt	r0, #16
  10fbd4:	eaffe4ca 	b	108f04 <atexit>

Disassembly of section .init:

0010fbd8 <_init>:
  10fbd8:	e1a0c00d 	mov	ip, sp
  10fbdc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
  10fbe0:	e24cb004 	sub	fp, ip, #4
  10fbe4:	e24bd028 	sub	sp, fp, #40	; 0x28
  10fbe8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
  10fbec:	e12fff1e 	bx	lr

Disassembly of section .fini:

0010fbf0 <_fini>:
  10fbf0:	e1a0c00d 	mov	ip, sp
  10fbf4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
  10fbf8:	e24cb004 	sub	fp, ip, #4
  10fbfc:	e24bd028 	sub	sp, fp, #40	; 0x28
  10fc00:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
  10fc04:	e12fff1e 	bx	lr
